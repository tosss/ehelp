<apex:page showHeader="false" sidebar="false" controller="sma.MAComponentCon" standardStylesheets="false">

	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no, minimum-scale=1, maximum-scale=1" />

	<!-- CSS -->
	<link rel='stylesheet' href="{!URLFOR($Resource.RouteCalendar, 'style.css')}" />
	<style type="text/css">

		/* Basic */
		html, body {
			width: 100%;
			height: 100%;
			margin: 0;
			padding: 0;
		}
		body {
			font-family: Helvetica,Arial,sans-serif;
		}

		/* Toolbar */
		.toolbar {
			padding: 5px 8px;
			overflow: hidden;
			background-image: -webkit-linear-gradient(#81A8CE,#5E87B0);
			background-image: linear-gradient(#81A8CE,#5E87B0);
			color: #FFF;
			font-weight: bold;
			text-shadow: 0 -1px 1px #254F7A;
			border: 1px solid #456F9A;
		}
		
		.toolbar .toolbar-btn {
			background-image: -webkit-linear-gradient(#5F9CC5,#396B9E);
			background-image: linear-gradient(#5F9CC5,#396B9E);
			border: 1px solid #145072;
			padding: 0 8px;
			box-sizing: border-box;
			float: left;
			position: relative;
		}
		.toolbar .toolbar-btn.active {
			background-image: -webkit-linear-gradient(#396B9E,#4E89C5);
			background-image: linear-gradient(#396B9E,#4E89C5);
		}
		.toolbar .toolbar-btn:first-child {
			border-radius: .6em 0 0 .6em;
		}
		.toolbar .toolbar-btn:last-child {
			border-radius: 0 .6em .6em 0;
		}
		.toolbar .toolbar-btn label {
			line-height: 30px;
			font-size: 12px;
		}
		
		.toolbar-btn.icon-only {
			width: 28px;
			height: 32px;
		}
		.toolbar-btn.icon-left {
			padding-left: 26px;
		}
		.toolbar-btn-icon {
			position: absolute;
			top: 6px;
			left: 4px;
			width: 18px;
			height: 18px;
			border-radius: 9px;
			background-color: rgba(0, 0, 0, 0.4);
			background-repeat: no-repeat;
			box-shadow: rgba(255, 255, 255, 0.4) 0px 1px 0px 0px;
			text-shadow: #145072 0px -1px 1px;
		}
		.toolbar-btn-icon.icon-cal 		{ background-position: -36px 0px; background-image: url("{!URLFOR($Resource.RouteCalendar, 'images/custom_icons_sprite_18.png')}"); }
		.toolbar-btn-icon.icon-list 	{ background-position: 0px 0px; background-image: url("{!URLFOR($Resource.RouteCalendar, 'images/custom_icons_sprite_18.png')}"); }
		.toolbar-btn-icon.icon-gear 	{ background-position: -288px 0px; background-image: url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") }
		.toolbar-btn-icon.icon-arrow-l 	{ background-position: -144px 0px; background-image: url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") }
		.toolbar-btn-icon.icon-arrow-r 	{ background-position: -108px 0px; background-image: url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") }

		/* Map */
		#map {
			width: 100%;
			height: 200px;
		}
		#map-loader, #all-loader {
			display: none;
			position: absolute;
			z-index: 9999;
			height: 100%;
			width: 100%;
			background: rgba(0, 0, 0, 0.25);
		}
		
		/* Main Content */
		.maincontent-toggle {
			display: inline-block;
			vertical-align: top;
			box-sizing: border-box;
			border-top: 1px solid silver;
			border-bottom: 1px solid silver;
			background: #F3F3F3;
			text-align: center;
			vertical-align: middle;
			font-weight: bold;
			height: 35px;
			line-height: 35px;
			/*background: #F3F3F3 url("{!URLFOR($Resource.RouteCalendar, 'images/custom_icons_sprite_36.png')}") no-repeat 0px 0px;*/
		}
		.cal-dayrow .maincontent-toggle {
			border-top: 3px solid #000;
		}

		/* Calendar */
		.cal {
			position: relative;
			background: #F3F3F3;
		}
		.cal-header {
			box-shadow: 0px 4px 10px 2px rgba(50, 50, 50, 0.75);
			z-index: 3;
			position: relative;
		}
		.cal-footer {
			box-shadow: 0px -4px 10px 2px rgba(50, 50, 50, 0.75);
			z-index: 1;
			position: relative;
		}
		.cal-daylabel, .cal-timelabel, .cal-timecell {
			position: relative;
			display: inline-block;
			vertical-align: top;
			box-sizing: border-box;
			border: 1px solid silver;
		}
		.cal-daylabel {
			background: #F3F3F3;
			text-align: center;
			vertical-align: middle;
			font-weight: bold;
			height: 35px;
			line-height: 35px;
		}
		.cal-daylabel-lock, .cal-daylabel-text, .cal-daylabel-erase {
			width: 40px;
			height: 35px;
			position: relative;
			box-sizing: border-box;
			float: left;
		}
		.cal-daylabel-lock {
			border-right: 1px dotted #D6D6D6;
		}
		.cal-daylabel-erase {
			border-left: 1px dotted #D6D6D6;
		}
		.cal-daylabel .flaticon {
			position: absolute;
			top: 50%;
			left: 50%;
			margin-top: -9px;
			margin-left: -9px;
		}

		.cal-startend-all, .cal-startlabel, .cal-endlabel {
			border: 1px solid rgba(0, 0, 0, 0.04);
			position: relative;
			display: inline-block;
			vertical-align: top;
			box-sizing: border-box;
			height: 25px;
		}
		.cal-startend-all .icon {
			position: absolute;
			top: 2px;
			left: 17px;
			width: 18px;
			height: 18px;
			border-radius: 9px;
			background-repeat: no-repeat;
			box-shadow: rgba(255, 255, 255, 0.4) 0px 1px 0px 0px;
			text-shadow: #145072 0px -1px 1px;
			background: rgba(0, 0, 0, 0.4) url("{!URLFOR($Resource.RouteCalendar, 'images/custom_icons_sprite_18.png')}") no-repeat -212px 0px;
		}
		.cal-startend-location {
			background-color: #333;
			border-color: #1F1F1F;
			color: #FFF;
			text-shadow: 0 1px 0 #111;
			border-radius: .6em;
			padding: 3px;
			font-size: 10px;
			text-align: center;
			margin: 2px;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}
		.cal-timelabel {
			background: #FFF;
			text-align: center;
		}

		.cal-events {
			position: absolute;
			z-index: 3;
			overflow: visible;
		}
		.cal-event {
			position: absolute;
			background: #2E78FC;
			border-radius: 4px;
			padding: 2px 6px;
			box-sizing: border-box;
			color: #FFF;
			box-shadow: 0px 0px 8px #888888;
			cursor: pointer;
			overflow: hidden;
		}
		.cal-event .time {
			font-size: 12px;
			font-weight: bold;
			white-space: nowrap;
			overflow: hidden;
		}
		.cal-event .title {
			font-size: 12px;
			overflow: hidden;
		}
		.cal-event .icons {
			position: absolute;
			top: 5px;
			right: 5px;
		}
		.cal-event .icon-lock {
			float: right;
			width: 18px;
			height: 18px;
			background: transparent url("{!URLFOR($Resource.RouteCalendar, 'images/custom_icons_sprite_18.png')}") no-repeat -162px 0px;
		}
		.cal-event .icon-warn {
			display: none;
			float: right;
			width: 18px;
			height: 18px;
			margin-top: 1px;
			background: transparent url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") no-repeat -504px 0px;
		}
		.cal-event.badGeocode .icon-warn {
			display: block;
		}
		.cal-event.flexible .icon-lock {
			display: none;
		}
		
		.cal-timeblocks {
			position: absolute;
			z-index: 2;
			overflow: visible;
		}
		.cal-timeblock {
			position: absolute;
			background-color: rgba(99, 202, 73, 0.65);
			text-shadow: 4px 2px 4px rgba(150, 150, 150, 1);
		}
		.cal-timeblock[data-type="Off Hours"] {
			background-color: rgba(0, 0, 0, 0.15);
		}
		.cal-timeblock .title {
			text-align: center;
			margin-top: 10px;
			color: #FFF;
			font-weight: bold;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
			padding: 0 15px;
		}
		
		/* List View */
		.list-headerlabel {
			display: inline-block;
			vertical-align: top;
			box-sizing: border-box;
			border-top: 1px solid silver;
			border-bottom: 1px solid silver;
			border-left: 1px solid silver;
			background: #F3F3F3;
			text-align: center;
			vertical-align: middle;
			font-weight: bold;
			height: 35px;
			line-height: 35px;
		}
		.list > div {
			display: inline-block;
			box-sizing: border-box;
			border-left: 1px solid silver;
			vertical-align: top;
			padding: 15px;
		}
		.list > div:first-child {
			border-left: none;
		}
		.list-day {
			padding: 15px;
		}
		.list-day .title {
			font-size: 16px;
			color: #707070;
		}
		.list-event > table {
			width: 100%;
		}
		.list-event .index-cell {
			width: 1px;
			padding-right: 15px;	
		}
		.list-event .index {
			font-weight: bold;
			font-size: 24px;
		}
		.list-event .info {
			border-radius: 6px;
			background: #F3F3F3;
			border: 1px solid #C0C0C0;
			padding: 5px;
			position: relative;
			cursor: pointer;
		}
		.list-event .info .title {
			color: black;
			font-weight: bold;
		}
		.list-event .info .address {
			font-size: 12px;
		}
		.list-event .info .time {
			position: absolute;
			right: 5px;
			top: 15px;
			font-weight: bold;
			color: #707070;
			font-size: 14px;
		}
		.list-event .remove-cell {
			width: 30px;
		}
		.list-event .remove {
			border-radius: 6px;
			background: #F3F3F3;
			border: 1px solid #C0C0C0;
			padding: 5px;
			height: 30px;
			box-sizing: border-box;
			position: relative;
			cursor: pointer;
		}
		.list-event .remove div {
			position: absolute;
			top: 50%;
			left: 50%;
			margin-top: -9px;
			margin-left: -9px;
			width: 18px;
			height: 18px;
			border-radius: 9px;
			background: rgba(0, 0, 0, 0.4) url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") no-repeat -36px 0px;
			box-shadow: rgba(255, 255, 255, 0.4) 0px 1px 0px 0px;
			text-shadow: #145072 0px -1px 1px;
		}

		/* Settings */
		.settings-headerlabel {
			display: inline-block;
			vertical-align: top;
			box-sizing: border-box;
			border-top: 1px solid silver;
			border-bottom: 1px solid silver;
			border-left: 1px solid silver;
			background: #F3F3F3;
			text-align: center;
			vertical-align: middle;
			font-weight: bold;
			height: 35px;
			line-height: 35px;
		}
		.settings > div {
			display: inline-block;
			box-sizing: border-box;
			border-left: 1px solid silver;
		}
		.settings-content {
			padding-left: 25px;
		}
		.settings-content .timedefaults > div {
			margin: 10px 0;
		}
		.settings-content .timedefaults-routeduration label {
			display: inline-block;
			width: 120px;
			font-weight: bold;
		}

		/* Dialogs */
		#dialogs {
			position: absolute;
			top: 0;
			left: 0;
			z-index: 9999;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.55);
			text-align: center;
		}
		.dialog {
			display: inline-block;
			margin: 75px auto 0 auto;
			border-radius: 8px;
		}

		.dialog-header {
			background: black;
			color: white;
			padding: 10px 15px;
			text-align: center;
			font-size: 14px;
			font-weight: bold;
			border-radius: 8px 8px 0 0;
		}

		.dialog-content {
			background: white;
			padding: 10px;
			text-align: left;
		}
		.dialog-content > table {
			width: 100%;
		}
		.dialog-content > table td {
			vertical-align: top;
			padding: 10px 25px;
			border-right: 1px solid silver;
		}
		.dialog-content > table td:last-child {
			border-right: none;
		}
		.confirm-dialog .dialog-content {
			border-radius: 8px 8px 0 0;
			padding: 25px;
			text-align: center;
		}

		.dialog .field {
			margin: 5px 0;
		}
		.dialog .field label {
			display: block;
		}
		.dialog .field input, .dialog .field textarea, .dialog .field select {
			background-color: #F3F3F3;
			border-radius: 6px;
			border: 1px solid #C0C0C0;
			width: 100%;
			padding: 5px;
			box-sizing: border-box;
		}
		.dialog .field input.error, .dialog .field textarea.error, .dialog .field select.error {
			border-color: red;
		}
		.dialog .field[data-type="checkbox"], .dialog .field[data-type="radio"] {
			border-radius: 6px;
			background: #F3F3F3;
			border: 1px solid #C0C0C0;
			padding: 5px;
			box-sizing: border-box;
			cursor: pointer;
		}
		.dialog .field[data-type="checkbox"] label, .dialog .field[data-type="radio"] label {
			display: inline;
		}
		.dialog .field[data-type="checkbox"] input, .dialog .field[data-type="radio"] input {
			float: left;
			width: auto;
			margin-right: 10px;
		}
		.dialog .field[data-type="datetime"] > div {
			display: inline-block;
			box-sizing: border-box;
			width: 50%;
		}
		.dialog .field[data-type="datetime"] > div:first-child {
			padding-right: 5px;
		}

		.dialog-footer {
			background: #C2C2C2;
			padding: 10px 15px;
			border-radius: 0 0 8px 8px;	
		}
		.dialog-buttons {
			width: 100%;
		}
		.dialog-buttons td {
			padding: 0 6px;
		}
		.dialog-buttons .btn {
			position: relative;
			width: 100%;
			padding: 8px 10px;
			box-sizing: border-box;
			box-shadow: 0px 0px 8px #888888;
			-webkit-border-radius: 1em;
			border-radius: 1em;
		}
		.dialog-buttons .btn:hover {
			opacity: .75;
		}
		.dialog-buttons .btn:active {
			opacity: .5;
		}
		.dialog-buttons .btn.blue {
			border: 1px solid #145072;
			font-weight: bold;
			color: #FFF;
			text-shadow: 0 -1px 1px #145072;
			background-image: -webkit-linear-gradient(#5F9CC5,#396B9E);
			background-image: linear-gradient(#5F9CC5,#396B9E);
		}
		.dialog-buttons .btn.gray {
			border: 1px solid #CCC;
			font-weight: bold;
			color: #444;
			text-shadow: 0 1px 1px #F6F6F6;
			background-image: -webkit-linear-gradient(#FDFDFD,#EEE);
			background-image: linear-gradient(#FDFDFD,#EEE);
		}
		.dialog-buttons .btn.delete, .dialog-buttons .btn.remove {
			margin-top: 20px;
			border: 1px solid #CCC;
			font-weight: bold;
			color: #444;
			text-shadow: 0 1px 1px #F6F6F6;
			background-image: -webkit-linear-gradient(#FDFDFD,#EEE);
			background-image: linear-gradient(#FDFDFD,#EEE);
		}
		.dialog-buttons .btn.delete.horizontal, .dialog-buttons .btn.remove.horizontal {
			margin-top: 0px;
		}
		.dialog-buttons .btn.delete div, .dialog-buttons .btn.remove div {
			position: absolute;
			top: 50%;
			margin-top: -9px;
			left: 10px;
			width: 18px;
			height: 18px;
			border-radius: 9px;
			box-shadow: rgba(255, 255, 255, 0.4) 0px 1px 0px 0px;
			text-shadow: #145072 0px -1px 1px;
			background: rgba(0, 0, 0, 0.4) url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") no-repeat -72px 0px;
		}
		.dialog-buttons .btn.remove div {
			background: rgba(0, 0, 0, 0.4) url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") no-repeat -36px 0px;
		}
		
		/* Add/Edit Waypoint */
		#waypoint-title {
			font-weight: bold;
		}
		#waypoint-address {
			font-size: 12px;
			color: #757575;
		}
		#waypoint-tooltips {
			margin: 15px 0;
		}
		#waypoint-tooltips td {
			border: none;
			padding: 0 10px 0 0;
			font-size: 12px;
		}
		#waypoint-tooltips td.label {
			border: none;
			padding: 0 10px 0 0;
			font-weight: bold;
		}
		
		/* Loading */
		#dialog-loading .dialog-content {
			position: relative;
			width: 200px;
			height: 140px;
			box-sizing: border-box;
			padding: 0;
			border-radius: 0 0 9px 9px;
			background: #EEE;
		}

		/* Sliders*/
		.bx-viewport {
			height: auto !important;
		}
		.bxslider li {
			width: 480px;
		}
		
		/* Start/End Location Selector */
		#startendlocation-favorite label, #startendlocation-address label {
			max-width: 425px;
			display: inline-block;
			white-space: nowrap;
			text-overflow: ellipsis;
			overflow: hidden;
		}
		
		/* mlist (Mobile List, can't think of a clever name) */
		.mlist > div {
			font-weight: bold;
			box-sizing: border-box;
		}
		.mlist > div:first-child {
			border-radius: .6em .6em 0 0;
		}
		.mlist > div:last-child {
			border-radius: 0 0 .6em .6em;
		}
		.mlist-header {
			background-image: -webkit-linear-gradient(#81A8CE,#5E87B0);
			background-image: linear-gradient(#81A8CE,#5E87B0);
			color: white;
			text-shadow: 0 -1px 1px #254F7A;
			border: 1px solid #456F9A;
			padding: 6px 8px 6px 34px;
		}
		.mlist-item {
			background-image: -webkit-linear-gradient(#FDFDFD,#EEE);
			background-image: linear-gradient(#FDFDFD,#EEE);
			color: #444;
			text-shadow: 0 1px 1px #F6F6F6;
			border: 1px solid #CCC;
			padding: 6px 8px 6px 34px;
			position: relative;
		}
		.mlist-item.mlist-blank {
			padding: 6px 8px;
			font-style: italic;
			color: #757575;
		}
		.mlist-icon {
			position: absolute;
			top: 6px;
			left: 6px;
			width: 20px;
			height: 19px;
		}
		.mlist-icon.folder { background: transparent url("{!URLFOR($Resource.MapAnything, 'images/mobile/MASQFolder.png')}") no-repeat center; }
		.mlist-icon.favorite { background: transparent url("{!URLFOR($Resource.MapAnything, 'images/mobile/FavoriteIcon.png')}") no-repeat center; }
		.mlist-icon.address { background: transparent url("{!URLFOR($Resource.MapAnything, 'images/ui-icons/stamp.png')}") no-repeat center; background-size: 20px 20px; }
		.mlist-icon.prev { background: transparent url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") no-repeat -200px -2px; background-size: 1078px 25px; }
		.mlist-icon.back { background: transparent url("{!URLFOR($Resource.RouteCalendar, 'images/jqm_icons_sprite_18.png')}") no-repeat -554px -2px; background-size: 1078px 25px; left: auto; right: 6px; }
		
		/* Bar Loader */
		.barloader{
			position: absolute;
			left: 50%;
			top: 50%;
			margin-left: -48px;
			margin-top: -30px;
			width: 96px;
			height: 60px;
		  	list-style: none;
		  	padding: 0;
		  	box-sizing: border-box;
		}
	
		@-webkit-keyframes 'loadbars' {
			0%{
				height: 10px;
				margin-top: 25px;
			}
			50%{
				height:50px;
				margin-top: 0px;
			}
			100%{
				height: 10px;
				margin-top: 25px;
			}
		}
	
		.barloader li {
			background-color: #FFA300;
			width: 10px;
			height: 10px;
			float: right;
			margin: 0 3px;
	    	box-shadow: 0px 20px 10px rgba(0,0,0,0.2);
		}
		.barloader li:nth-child(1) { -webkit-animation: loadbars 1s cubic-bezier(0.645,0.045,0.355,1) infinite 0s; }
		.barloader li:nth-child(2) { -webkit-animation: loadbars 1s ease-in-out infinite -0.2s; }
		.barloader li:nth-child(3) { -webkit-animation: loadbars 1s ease-in-out infinite -0.4s; }
	    .barloader li:nth-child(4) { -webkit-animation: loadbars 1s ease-in-out infinite -0.6s; }
		.barloader li:nth-child(5) { -webkit-animation: loadbars 1s ease-in-out infinite -0.8s; }
		.barloader li:nth-child(6) { -webkit-animation: loadbars 1s ease-in-out infinite -1.0s; }
		
		/* Animations */
		.tossing {
			animation-name: tossing;
			-webkit-animation-name: tossing;	

			animation-duration: 0.5s;	
			-webkit-animation-duration: 0.5s;

			animation-iteration-count: infinite;
			-webkit-animation-iteration-count: infinite;
		}
		@keyframes tossing {
			0% {
				transform: rotate(-2deg);	
			}
			50% {
				transform: rotate(2deg);
			}
			100% {
				transform: rotate(-2deg);	
			}						
		}
		@-webkit-keyframes tossing {
			0% {
				-webkit-transform: rotate(-2deg);	
			}
			50% {
				-webkit-transform: rotate(2deg);
			}
			100% {
				-webkit-transform: rotate(-2deg);	
			}				
		}

	</style>

	<!-- jQuery -->
	<script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/jquery-1.7.1.min.js')}"></script>

	<!-- Google Maps -->
	<script type='text/javascript' src='https://maps.googleapis.com/maps/api/js?client=gme-cloudbiltinc&libraries=geometry,places'></script>

	<!-- Moment -->
	<script type='text/javascript' src="{!URLFOR($Resource.RouteCalendar, 'plugins/moment/moment-with-langs.min.js')}"></script>
	<script type='text/javascript' src="{!URLFOR($Resource.RouteCalendar, 'plugins/moment/moment-timezone.min.js')}"></script>
	<script type='text/javascript' src="{!URLFOR($Resource.RouteCalendar, 'plugins/moment/moment-timezone-data.js')}"></script>

	<!-- CryptoJS (https://code.google.com/p/crypto-js/) -->
    <script src="https://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/core-min.js"></script>
	<script src="https://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-utf16-min.js"></script>
	<script src="https://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js"></script>

    <!-- SlimScroll (http://rocha.la/jQuery-slimScroll) -->
    <script src="{!URLFOR($Resource.MapAnything, 'niceScroll/jquery.slimscroll.js')}"></script>

    <!-- bxSlider -->
    <link rel="stylesheet" href="{!URLFOR($Resource.RouteCalendar, 'plugins/bxSlider/jquery.bxslider.css')}" />
    <script type='text/javascript' src="{!URLFOR($Resource.RouteCalendar, 'plugins/bxSlider/jquery.bxslider.min.js')}"></script>

	<c:MA />
	<script type='text/javascript'>
	
		var map;

		//Route Calendar
		var RouteCalendar = {
			uniqueIndex: 1,
			dimensions: {
				TimeLabelWidth	: 60,
				HourHeight		: 40
			},
			markerColors: ['#5985FF', '#FF5975', '#59E9FF', '#59FF6C', '#FFAC59', '#FFF159', '#D0FF59', '#AF59FF', '#FF59F1'],
			unassignedMarkerColor: '#D6D6D6',
			hours: [],
			timeblocks: [],
			removedTimeblockIds: [],
			removedEventIds: [],
			unassignedMarkers: [],
			
			/****************
			* Support Methods
			****************/
			
			//create a moment in the correct timezone by applying the timezone first (should only be used for strings that don't have an offset)
			moment: function () {
				return RouteCalendar.userSettings.timezone
					? moment.tz.apply(null, Array.prototype.slice.call(arguments, 0).concat([RouteCalendar.userSettings.timezone]))
					: moment.apply(null, Array.prototype.slice.call(arguments, 0));
			},
			
			//create a moment in the correct timezone by applying the timezone last (should only be used for strings that have an offset - this includes no string)
			momentTZ: function () {
				return RouteCalendar.userSettings.timezone
					? moment.apply(null, Array.prototype.slice.call(arguments, 0)).tz(RouteCalendar.userSettings.timezone)
					: moment.apply(null, Array.prototype.slice.call(arguments, 0));
			},
			
			waypointFromLocation: function (location) {
				if (location.Id) {
					return {
						Name			: 'Favorite Location',
	        			Address__c		: location.Name,
	        			Notes__c		: '',
	        			EventId__c		: null,
	        			LinkId__c		: '',
	        			BaseObject__c	: '',
	        			Options__c		: JSON.stringify({ TimeBasedOptions: { Start: '???', Duration: '0 hr, 0 min' } }),
	        			Latitude__c		: location.Latitude__c,
	        			Longitude__c	: location.Longitude__c,
	        			MASavedQry__c	: '',
	        			HasAddress__c	: false,
	        			IsFlexible__c	: false
					};
				}
				else {
					return {
						Name			: 'Custom Address',
	        			Address__c		: location.Address,
	        			Notes__c		: '',
	        			EventId__c		: null,
	        			LinkId__c		: '',
	        			BaseObject__c	: '',
	        			Options__c		: JSON.stringify({ TimeBasedOptions: { Start: '???', Duration: '0 hr, 0 min' } }),
	        			Latitude__c		: location.Latitude__c || null,
	        			Longitude__c	: location.Longitude__c || null,
	        			MASavedQry__c	: '',
	        			HasAddress__c	: false,
	        			IsFlexible__c	: false
					};
				}
			},
			
			/****************
			* Days
			****************/
			days: [],
			
			Day: function (opts) {
				var moment, listEl;
				$.extend(this, opts);
			},
			
			getDay: function (compareMoment) {
				var matchingDay = null;
				$.each(RouteCalendar.days, function (index, day) {
					if (compareMoment.isSame(day.moment, 'day')) {
						matchingDay = day;
						return false; 
					}
				});
				return matchingDay;
			},
			
			/****************
			* Events
			****************/
			events: [],
			
			Event: function (opts) {
				var start, duration, title, color;
				$.extend(this, opts);
			},
			Timeblock: function (opts) {
				var type, name, allDay, start, duration, dayIndex;
				$.extend(this, opts);
			},
			
			clearEvents: function () {
				$('.cal .cal-event').remove();
				RouteCalendar.events = [];
			},
			clearTimeblocks: function () {
				$('.cal .cal-timeblock').remove();
				RouteCalendar.timeblocks = [];
			},
			populateEvents: function (opts) {
			
				$('#all-loader').show();
				RouteCalendar.clearEvents();
				RouteCalendar.clearTimeblocks();
				$.ajax({
					url: MA.resources.RouteCalendarAPI,
				    type: 'POST',
				    dataType: 'JSON',
				    data: {
				    	action: 'getEvents',
				    	securityToken: '{!securityToken}',
				    	start: RouteCalendar.days[0].moment.clone().startOf('day').format('YYYY-MM-DD HH:mm:ss'),
				    	end: RouteCalendar.days[RouteCalendar.days.length - 1].moment.clone().endOf('day').format('YYYY-MM-DD HH:mm:ss')
				    },
			    	success: function (response) 
			    	{
			    		//store settings for later use
			    		RouteCalendar.eventSettings = response.data.settings;
			    		RouteCalendar.eventSettings.tooltips = response.data.eventTooltips;
			    		RouteCalendar.baseObjects = removeNamespace('{!namespace}', response.data.baseObjects);
			    		RouteCalendar.eventBaseObject = removeNamespace('{!namespace}', response.data.eventBaseObject);
			    		RouteCalendar.sObjects = response.data.sObjects;
			    		RouteCalendar.eventFromWaypointIds = response.data.eventFromWaypointIds;
			    		
			    		//attach existing routes to the appropriate day
			    		$.each(response.data.routes, function (index, route) {
			    			removeNamespace('{!namespace}', route);
			    			
			    			var options = JSON.parse(route.Options__c);
			    			$.extend(RouteCalendar.getDay(RouteCalendar.moment(route.Date__c, 'YYYY-MM-DD')), {
			    				routeId: route.Id,
			    				startLocation: options.StartLocation ? JSON.parse(options.StartLocation) : null,
			    				endLocation: options.EndLocation ? JSON.parse(options.EndLocation) : null
			    			});
			    		});

						//store events
			    		$.each(response.data.events, function (eventId, e) {
			    		
			    			//if this is a time block then add it as such
			    			var subject = e.event.Subject || '';
			    			if (subject.indexOf('Time Block - ') == 0) {
			    				RouteCalendar.timeblocks.push(new RouteCalendar.Timeblock({
			    					index: ++RouteCalendar.uniqueIndex,
			    					type: 'Block',
			    					id: e.event.Id,
									name: subject.substring(13),
									title: subject.substring(13),
									allDay: e.event.IsAllDayEvent,
									start: RouteCalendar.momentTZ(e.event.StartDateTime),
									duration: e.event.IsAllDayEvent ? 0 : e.event.DurationInMinutes,
									dayIndex: RouteCalendar.momentTZ(e.event.StartDateTime).diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')
								}));
								return;
			    			}

			    			//event options
			    			opts = {
			    				start: RouteCalendar.momentTZ(e.event.StartDateTime),
			    				originalStart: RouteCalendar.momentTZ(e.event.StartDateTime),
			    				duration: e.event.DurationInMinutes,
			    				title: e.event.Subject || '',
			    				color: '#2E78FC',
			    				flexible: !(e.event[RouteCalendar.eventSettings['RoutingEvent-IsFlexible']] == false),
			    				hasAddress: !(e.event[RouteCalendar.eventSettings['RoutingEvent-HasAddress']] == false),
			    				isFromWaypoint: $.inArray(e.event.Id, RouteCalendar.eventFromWaypointIds) != -1,
			    				badGeocode: false,
			    				event: e.event
			    			};

			    			//event base object options
			    			if (RouteCalendar.eventBaseObject) {
			    				$.extend(opts, {
				        			record: e.record,
				        			latitude: extractValue(e.event, RouteCalendar.eventBaseObject.Latitude__c),
				        			longitude: extractValue(e.event, RouteCalendar.eventBaseObject.Longitude__c),
				        			verifiedLatitude: extractValue(e.event, RouteCalendar.eventBaseObject.VerifiedLatitude__c),
				        			verifiedLongitude: extractValue(e.event, RouteCalendar.eventBaseObject.VerifiedLongitude__c),
				        			markerAddress: extractValue(e.event, RouteCalendar.eventBaseObject.Street__c) + "," + extractValue(e.record, RouteCalendar.eventBaseObject.City__c) + " " + extractValue(e.record, RouteCalendar.eventBaseObject.State__c) + "," + extractValue(e.record, RouteCalendar.eventBaseObject.PostalCode__c) + (extractValue(e.record, RouteCalendar.eventBaseObject.Country__c) == '' ? '' : ','+extractValue(e.record, RouteCalendar.eventBaseObject.Country__c))
				        		});
				        		opts.markerLatitude = (opts.verifiedLatitude || opts.latitude);
				        		opts.markerLongitude = (opts.verifiedLongitude || opts.longitude);
			    			}

			    			//related record options
			    			if (e.record) {
			    				var baseObj = RouteCalendar.baseObjects[(e.event.What || e.event.Who).Type];

			    				//extend the record
				        		$.extend(opts, { record: e.record });

				        		//extend with coordinate and address information from the record if we haven't already gotten them from the event
				        		if (!RouteCalendar.testLatLng(opts.markerLatitude, opts.markerLongitude)) {
					        		$.extend(opts, {
					        			latitude: extractValue(e.record, baseObj.Latitude__c),
					        			longitude: extractValue(e.record, baseObj.Longitude__c),
					        			verifiedLatitude: extractValue(e.record, baseObj.VerifiedLatitude__c),
					        			verifiedLongitude: extractValue(e.record, baseObj.VerifiedLongitude__c),
					        			markerAddress: extractValue(e.record, baseObj.Street__c) + "," + extractValue(e.record, baseObj.City__c) + " " + extractValue(e.record, baseObj.State__c) + "," + extractValue(e.record, baseObj.PostalCode__c) + (extractValue(e.record, baseObj.Country__c) == '' ? '' : ','+extractValue(e.record, baseObj.Country__c))
					        		});
					        		opts.markerLatitude = (opts.verifiedLatitude || opts.latitude);
					        		opts.markerLongitude = (opts.verifiedLongitude || opts.longitude);
					        	}
			    			}

			    			//determine if this record is already geocoded (make sure that the lat/long is valid).  if it's not, add it to the list to be geocoded
			        		if (RouteCalendar.testLatLng(opts.markerLatitude, opts.markerLongitude)) {
			        			opts.isGeocoded = true;
			        			opts.latLng = new google.maps.LatLng(parseFloat(opts.markerLatitude), parseFloat(opts.markerLongitude));
			        		}
			        		else {
			        			opts.isGeocoded = false;
			        		}

			    			//store
			    			RouteCalendar.addEvent(new RouteCalendar.Event(opts));
			    		});

			    		//store holidays
			    		$.each(response.data.holidays, function (index, holiday) {
			    			RouteCalendar.timeblocks.push(new RouteCalendar.Timeblock({
			    				index: ++RouteCalendar.uniqueIndex,
			    				type: 'Holiday',
								name: holiday.Name,
								title: holiday.Name,
								allDay: holiday.IsAllDay,
								start: RouteCalendar.moment(holiday.ActivityDate, 'YYYY-MM-DD').add('m', holiday.StartTimeInMinutes || 0),
								duration: holiday.IsAllDay ? 0 : holiday.EndTimeInMinutes - holiday.StartTimeInMinutes,
								dayIndex: RouteCalendar.moment(holiday.ActivityDate, 'YYYY-MM-DD').diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')
							}));
			    		});
			    		
			    		//redraw
			    		RouteCalendar.geocodeEvents(function (response) {
			    			if (response.errorCount > 0) {
			    				alert('Some events could not be geocoded.  They are denoted on the calendar with a warning symbol.')
			    			}
			    		
			    			RouteCalendar.redraw();
			    			$('#all-loader').hide()
			    		});
			    	}
				});
			},

			//add an event to the calendar
			addEvent: function (e) {

				//store event indices
				$.extend(e, { 
					index: ++RouteCalendar.uniqueIndex,
					dayIndex: e.start.clone().startOf('day').diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')
				});
				
				//store the event
				RouteCalendar.events.push(e);
			},

			//sort the calendar events
			sortEvents: function () {

				RouteCalendar.events.sort(function (a,b) {
					if (a.start && a.duration && b.start && b.duration) {
						if (a.start.isBefore(b.start)) return -1;
						if (a.start.isAfter(b.start)) return 1;
						if (a.duration < b.duration) return -1;
						if (a.duration > b.duration) return 1;
					}
					else if (a.start && a.duration) {
						return 1;
					}
					else if (b.start && b.duration) {
						return -1;
					}
					return 0;
				});

			},

			//sort the timeblocks
			sortTimeblocks: function () {

				RouteCalendar.timeblocks.sort(function (a,b) {
					if (a.start.isBefore(b.start)) return -1;
					if (a.start.isAfter(b.start)) return 1;
					if (b.allDay || a.duration < b.duration) return -1;
					if (a.allDay || a.duration > b.duration) return 1;
					return 0;
				});

			},

			//test a lat/lng
			testLatLng: function (lat, lng) {
				var markerLat = parseFloat(lat);
        		var markerLong = parseFloat(lng);
        		return !isNaN(markerLat) && !isNaN(markerLong) && markerLat >= -90 && markerLat <= 90 && markerLong >= -180 && markerLong <= 180;
			},

			//geocode the calendar events
			geocodeEvents: function (callback) {
			
				var requestsOut = 0;
				var errors = 0;
				
				//geocode startend locations
				$.each(RouteCalendar.days, function (index, day) {
					
					if (day.startLocation) {
						if (!MA.Util.testLatLng(day.startLocation.Latitude__c, day.startLocation.Longitude__c))
						{
							//nope, need to geocode
							requestsOut++;
							geocode(day.startLocation.Address, function (result) {
								if (result) {
									$.extend(day.startLocation, { 'Latitude__c': result.Latitude, 'Longitude__c': result.Longitude });
								}
								else {
									errors++;
								}
								requestsOut--;
							});
						}
					}
					if (day.endLocation) {
						if (!MA.Util.testLatLng(day.endLocation.Latitude__c, day.endLocation.Longitude__c))
						{
							//nope, need to geocode
							requestsOut++;
							geocode(day.endLocation.Address, function (result) {
								if (result) {
									$.extend(day.endLocation, { 'Latitude__c': result.Latitude, 'Longitude__c': result.Longitude });
								}
								else {
									errors++;
								}
								requestsOut--;
							});
						}
					}
				});
				
				//geocode events
				$.each(RouteCalendar.events, function (index, e) {
					if (!e.isGeocoded && e.hasAddress && e.markerAddress) {
						requestsOut++;
						geocode(e.markerAddress, function (result) {
							if (result) {
								$.extend(e, { isGeocoded: true, markerLatitude: result.latitude, markerLongitude: result.longitude, latLng: new google.maps.LatLng(result.Latitude, result.Longitude) });
							}
							else {
								$.extend(e, { badGeocode: true });
								errors++;
							}
							requestsOut--;
						});
					}
				});
				
				var geocodeInterval = setInterval(function () {
					if (requestsOut == 0) {
						clearInterval(geocodeInterval);
						callback({ errorCount: errors });	
					}
				}, 1000);
			},

			findNextOpeningDepth: 0,
			findNextOpening: function (currentMoment) {

				RouteCalendar.optimizationLog += 'Looking for next opening starting at ' + currentMoment.format('ddd M/DD h:mm a') + '...\n';
			
				RouteCalendar.findNextOpeningDepth++;
				if (RouteCalendar.findNextOpeningDepth > 15) {
					//return {};
				}
			
				var m = currentMoment.clone();
				if (m.isBefore(RouteCalendar.momentTZ())) 
				{
					//can't optimize events in the past.  move to 5 minutes from now (just as a buffer)
					return RouteCalendar.findNextOpening(RouteCalendar.momentTZ().add('minute', 5).startOf('minute'));
				}
				
				//going to check this opening against blocks and events.  need to keep track of the closest item so we now how long the opening duration is
				var nextItemStart;

				//loop over timeblocks to see if there is a conflict
				var blockConflict = false;
				$.each(RouteCalendar.timeblocks, function (index, block) {
					var end = block.getEnd();
					if (block.start.isAfter(m, 'minute')) {
						if (!nextItemStart || nextItemStart.isAfter(block.start)) {
							nextItemStart = block.start.clone();
						}
					}
					else if (!end.isBefore(m, 'minute')) {
						RouteCalendar.optimizationLog += 'Block Conflict: ' + block.title + '\n';
						blockConflict = true;
						m = end.add('minute', 1);
						
						//if this is an off hours block, we don't want to change the current position (leave it as the start pos for the day)
						if (block.type != 'Off Hours') {
							RouteCalendar.currentPosition = 'block';
						}
						
						//we can stop looping
						return false;
					}
				});
				
				//if there was a conflict, move to the end of this block and try again
				if (blockConflict) {
					return RouteCalendar.findNextOpening(m);
				}

				//loop over fixed events to see if there is a conflict
				var eventConflict = false;
				$.each(RouteCalendar.fixedEvents, function (index, e) {
					var end = e.getEnd();
					if (e.start.isAfter(m, 'minute')) {
						if (!nextItemStart || nextItemStart.isAfter(e.start)) {
							nextItemStart = e.start.clone();
						}
					}
					else if (!end.isBefore(m, 'minute')) {
						RouteCalendar.optimizationLog += 'Event Conflict: ' + e.title + '\n';
						eventConflict = true;
						m = end.add('minute', 1);
						RouteCalendar.currentPosition = e.latLng || 'event';
						return false;
					}
				});
				
				//if there was a conflict, move to the end of this event and try again
				if (eventConflict) {
					return RouteCalendar.findNextOpening(m);
				}

				//m now represents the next opening.  check it against route hours
				var day = RouteCalendar.getDay(m); 
				if (day && day.lockStatus == 'locked')
				{
					//this day is locked, move on to the next one
					var nextDay = RouteCalendar.getDay(m.clone().add('day', 1));
					if (nextDay) {
						RouteCalendar.currentPosition = new google.maps.LatLng(nextDay.startLocation.Latitude__c, nextDay.startLocation.Longitude__c);
					}
					else {
						RouteCalendar.currentPosition = 'done';
					}
					
					RouteCalendar.optimizationLog += 'Day is locked\n';
					return RouteCalendar.findNextOpening(m.add('day', 1).hour(RouteCalendar.hours[0]).minute(0));
				}
				else if (m.hour() < RouteCalendar.hours[0]) 
				{
					//too early, go to start of workday
					if (day) {
						RouteCalendar.currentPosition = new google.maps.LatLng(day.startLocation.Latitude__c, day.startLocation.Longitude__c);
					}
					else {
						RouteCalendar.currentPosition = 'done';
					}
					
					RouteCalendar.optimizationLog += 'Too early\n';
					return RouteCalendar.findNextOpening(m.hour(RouteCalendar.hours[0]).minute(0));
				}
				else if (m.hour() >= RouteCalendar.hours[RouteCalendar.hours.length - 1]) 
				{
					//too late, go to start of next workday
					var nextDay = RouteCalendar.getDay(m.clone().add('day', 1));
					if (nextDay) {
						RouteCalendar.currentPosition = new google.maps.LatLng(nextDay.startLocation.Latitude__c, nextDay.startLocation.Longitude__c);
					}
					else {
						RouteCalendar.currentPosition = 'done';
					}
					
					RouteCalendar.optimizationLog += 'Too late\n';
					return RouteCalendar.findNextOpening(m.add('day', 1).hour(RouteCalendar.hours[0]).minute(0));
				}
				else 
				{
					//we now know when the next opening is.  figure out how long the opening is by comparing the next block/event and the end of the workday
					var workdayEnd = m.clone().hour(RouteCalendar.hours[RouteCalendar.hours.length - 1]).minute(59);
					var openingDuration;
					if (nextItemStart && nextItemStart.isBefore(workdayEnd, 'minute')) {
						openingDuration = nextItemStart.diff(m, 'minute');
					}
					else {
						openingDuration = workdayEnd.diff(m, 'minute');
					}

					return {
						start: m,
						duration: openingDuration
					};
				}
			},

			//optimize the calendar events
			optimizeEvents: function () {
			
				RouteCalendar.optimizationLog = '';
				
				//show loading
				$('#all-loader').show();
			
				RouteCalendar.findNextOpeningDepth = 0;

				//make sure we have a start and end location for each day
				RouteCalendar.optimizationLog += 'Checking for start/end locations...';
				var missingLocation = false;
				$.each(RouteCalendar.days, function (index, day) {
					if (!(day.startLocation && day.endLocation)) {
						missingLocation = true;
						return false;
					}
				});
				if (missingLocation) {
					RouteCalendar.optimizationLog += 'fail';
					$('#all-loader').hide();
					alert('Please enter a start and end location for each day');
					return;
				}
				RouteCalendar.optimizationLog += 'success\n';
				
				//separate events into flexible and fixed + timeblocks
				RouteCalendar.optimizationLog += 'Separating events...';
				RouteCalendar.flexibleEvents = {};
				RouteCalendar.fixedEvents = {};
				$.each(RouteCalendar.events.concat(RouteCalendar.timeblocks), function (index, e) {
					var day = RouteCalendar.days[e.dayIndex];
					if ((!day || day.lockStatus == 'unlocked') && (!e.start || e.start.isAfter(RouteCalendar.momentTZ()))) {
						if (e.flexible) {
							RouteCalendar.flexibleEvents[e.index] = e;
							(e.calEl || $()).addClass('tossing');
						}
						else if (e.calEl) {
							RouteCalendar.fixedEvents[e.index] = e;
						}
					}
				});
				RouteCalendar.optimizationLog += Object.keys(RouteCalendar.flexibleEvents).length + ' flexible, ' + Object.keys(RouteCalendar.fixedEvents).length + ' fixed\n';

				//sort all events and timeblocks
				RouteCalendar.optimizationLog += 'Sorting events and timeblocks...';
				RouteCalendar.sortEvents();
				RouteCalendar.sortTimeblocks();
				RouteCalendar.optimizationLog += 'success\n';

				RouteCalendar.optimizationLog += 'Geocoding...';
				RouteCalendar.geocodeEvents(function (response) {
					RouteCalendar.optimizationLog += 'success\n';
				    
				    //build options for TomTom directions
	            	var routeUnit = $('#UnitType').val();
	            	var routeType = $('#RouteMode').val();
					var directionsOptions = {
						travelMode: google.maps.TravelMode.DRIVING,
						unitSystem: $('#UnitType').val() == 'mi' ? google.maps.UnitSystem.IMPERIAL : google.maps.UnitSystem.METRIC
					};

					function doNext (nextOpening) {
					
						RouteCalendar.optimizationLog += 'Next Opening: ' + nextOpening.start.format('ddd M/DD h:mm a') + '\nCurrent Position: ' + RouteCalendar.currentPosition + '\n';
					
						//if there are no remaining events or we've gone beyond the bounds of the calendar then we're done
						if (Object.keys(RouteCalendar.flexibleEvents).length == 0)
						{
							//redraw the calendar
							RouteCalendar.optimizationLog += 'No more flexible events';
							RouteCalendar.redrawEvents();
							//Dialog.hide();
							$('#all-loader').hide();
							return;
						}
						else if (nextOpening.start.isAfter(RouteCalendar.to()))
						{
							//all remaining flexible events get put on the unassigned list
							$.each(RouteCalendar.flexibleEvents, function (index, e) {
								e.start = e.dayIndex = null;
							});
							
							//redraw the calendar
							RouteCalendar.redrawEvents();
							
							//show an alert about unassigned events
							//Dialog.hide();
							$('#all-loader').hide();
							RouteCalendar.optimizationLog += 'Out of bounds';
							alert('Optimization has completed, but some events could not be assigned.');
							MainContent.show('list');
							return;
						}

						//find the closest flexible event (or timeblock) that will fit in the next opening
						RouteCalendar.optimizationLog += 'Searching for next flexible event...\n';
						var nextDistance = -1;
						var nextFlexibleEvent;
				    	$.each(RouteCalendar.flexibleEvents, function (index, e) {

				    		//calculate distance to this point
				    		var distance;
				    		if (!(MA.Util.testLatLng(RouteCalendar.currentPosition) && MA.Util.testLatLng(e.latLng))) {
				    			distance = 0;
				    		}
				    		else {
				    			distance = google.maps.geometry.spherical.computeDistanceBetween(e.latLng, RouteCalendar.currentPosition);
				    		}

				    		//determine if this is the next closest point
				    		RouteCalendar.optimizationLog += e.title + '...' + distance;
				    		if (e.duration <= nextOpening.duration && (!nextFlexibleEvent || nextDistance > distance)) {
				    			RouteCalendar.optimizationLog += '...yes\n';
				    			nextFlexibleEvent = e;
				    			nextDistance = distance;
				    		}
				    		else {
				    			RouteCalendar.optimizationLog += '...no\n';
				    		}
					    		
				    	});
				    	
				    	//if we didn't find an event that fits, move on
				    	if (!nextFlexibleEvent) {
				    		RouteCalendar.optimizationLog += 'Nothing fits here...moving on\n';
				    		doNext(RouteCalendar.findNextOpening(nextOpening.start.add('minute', nextOpening.duration)));
				    		return;
				    	}

				    	//calculate the travel time to this point
				    	RouteCalendar.optimizationLog += 'Calculating travel time...';
				    	if (MA.Util.testLatLng(RouteCalendar.currentPosition) && MA.Util.testLatLng(nextFlexibleEvent.latLng) && nextFlexibleEvent.hasAddress) 
				    	{
					    	MA.Routing.route($.extend({ origin: RouteCalendar.currentPosition, destination: nextFlexibleEvent.latLng }, directionsOptions), function(response) {
								try {
									var totalSeconds = 0;
									$.each(response.route.legs, function (index, leg) {
										totalSeconds += leg.duration.value;
									});
									gotTravelMinutesToFlexible(Math.ceil(totalSeconds/60));
								}
								catch (err) {
									RouteCalendar.optimizationLog += 'fail';
									MA.log(err);
									$('#all-loader').hide();
									alert('Error');
									return;
								}
							});
				    	}
				    	else {
				    		gotTravelMinutesToFlexible(0);
				    	}
				    	
				    	//will be called when travel time has been found
				    	function gotTravelMinutesToFlexible(travelMinutesToFlexible) {
				    	
				    		RouteCalendar.optimizationLog += travelMinutesToFlexible + '\n';

					    	//find the next fixed event (or end location) that might be impacted (and clean up any that we have already passed)
					    	var day = RouteCalendar.getDay(nextOpening.start);
					    	var fixedEventsToRemove = [];
					    	var nextFixedEvent = day.endLocation ? { title: day.endLocation.Name || day.endLocation.Address, start: day.moment.clone().add('hour', RouteCalendar.hours.length), duration: 5, latLng: new google.maps.LatLng(day.endLocation.Latitude__c, day.endLocation.Longitude__c), hasAddress: true } : null;
					    	RouteCalendar.optimizationLog += 'Checking fixed events...\n' + (nextFixedEvent ? 'Might be ' + nextFixedEvent.title + '\n' : '');
					    	$.each(RouteCalendar.fixedEvents, function (index, e) {
					    		
					    		if (e.getEnd().isBefore(nextOpening.start, 'minute')) 
					    		{
					    			//this fixed event has already been passed so we can remove it from consideration
					    			RouteCalendar.optimizationLog += 'Already passed ' + e.title + '\n';
					    			fixedEventsToRemove.push(index);
					    		}
					    		else if (!nextFixedEvent || nextFixedEvent.start.isAfter(e.start))
					    		{
					    			//this might be the next fixed event
					    			RouteCalendar.optimizationLog += 'Might be ' + e.title + '\n';
					    			nextFixedEvent = e;
					    		}
					    		
					    	});
					    	$.each(fixedEventsToRemove, function (index, value) {
					    		delete RouteCalendar.fixedEvents[value];
					    	});

					    	//make sure that travel time will not make us late for the next fixed event
					    	if (nextFixedEvent) {

					    		RouteCalendar.optimizationLog += 'Next is ' + nextFixedEvent.title + '...';
					    		if (MA.Util.testLatLng(nextFixedEvent.latLng) && nextFixedEvent.hasAddress && MA.Util.testLatLng(nextFlexibleEvent.latLng) && nextFlexibleEvent.hasAddress) {
						    		MA.Routing.route($.extend({ origin: nextFlexibleEvent.latLng, destination: nextFixedEvent.latLng }, directionsOptions), function(response) {
						    			try {
						    				var totalSeconds = 0;
											$.each(response.route.legs, function (index, leg) {
												totalSeconds += leg.duration.value;
											});
											gotTravelMinutesToFixed(Math.ceil(totalSeconds/60));
										}
										catch (err) {
											RouteCalendar.optimizationLog += 'Unable to get distance';
											MA.log(err);
											$('#all-loader').hide();
											alert('Error');
											return;
										}
						    		});
					    		}
					    		else {
					    			gotTravelMinutesToFixed(0);
					    		}

					    		function gotTravelMinutesToFixed (travelMinutesToFixed)
					    		{
					    			RouteCalendar.optimizationLog += nextOpening.start.format('h:mm a') + ', ' + travelMinutesToFlexible + ' travel, ' + nextFlexibleEvent.duration + ' min event, ' + travelMinutesToFixed + ' min travel, ' + nextFixedEvent.start.format('h:mm a') + '...';
					    			if (nextOpening.start.clone().add('minute', travelMinutesToFlexible + nextFlexibleEvent.duration + travelMinutesToFixed).isAfter(nextFixedEvent.start)) 
						    		{
						    			//this will cause us to miss the next event so we need to head there instead
						    			RouteCalendar.optimizationLog += 'bad\n';
						    			RouteCalendar.currentPosition = nextFixedEvent.latLng;
						    			doNext(RouteCalendar.findNextOpening(nextFixedEvent.start.clone().add('minute', nextFixedEvent.duration)));
						    			return;
						    		}
						    		RouteCalendar.optimizationLog += 'good\n';
						    		goodFit();
					    		}
					    	}
					    	else {
					    		goodFit();
					    	}

				    		//will be called if this is a good fit
				    		function goodFit () {
				    		
				    			RouteCalendar.optimizationLog += 'Good fit\n';

				    			//modify the start of this event and remove it from consideration
					    		nextFlexibleEvent.start = nextOpening.start.add('minute', travelMinutesToFlexible).clone();
					    		nextFlexibleEvent.refreshDayIndex();
					    		delete RouteCalendar.flexibleEvents[nextFlexibleEvent.index];

					    		//animate to new position
					    		if (nextFlexibleEvent.start && typeof nextFlexibleEvent.dayIndex == 'number') {
					    			try {
					    				nextFlexibleEvent.calEl.animate({
					    					top		: (nextFlexibleEvent.start.hour() + (nextFlexibleEvent.start.minute()/60) - RouteCalendar.hours[0]) * RouteCalendar.dimensions.HourHeight, 
         									left	: nextFlexibleEvent.dayIndex * RouteCalendar.dimensions.DayWidth + 3
					    				});
					    			}
					    			catch (err) {}
         						}

					    		//move on to the next event
					    		RouteCalendar.currentPosition = nextFlexibleEvent.latLng;
					    		doNext(RouteCalendar.findNextOpening(nextOpening.start.add('minute', nextFlexibleEvent.duration)));
					    	}
			    		}
					}

					//start the optimization process
					RouteCalendar.currentPosition = new google.maps.LatLng(RouteCalendar.days[0].startLocation.Latitude__c, RouteCalendar.days[0].startLocation.Longitude__c);
				    doNext(RouteCalendar.findNextOpening(RouteCalendar.from()));

	        	});

			},

			//reposition overlapping events (http://stackoverflow.com/questions/11311410/visualization-of-calendar-events-algorithm-to-layout-events-with-maximum-width)
			refreshPositions: function () {

				//group events by day
				var eventMap = {};
				$.each(RouteCalendar.events, function (index, event) {

					if (event.start && event.calEl) {
						var $event = event.calEl;

						if (!eventMap[event.dayIndex]) {
							eventMap[event.dayIndex] = [];
						}
						eventMap[event.dayIndex].push({
							calEl: $event,
							top: $event.position().top,
							bottom: $event.position().top + $event.height()
						});
					}

				});

				//loop over each day separately
				$.each(eventMap, function (x, events) {

					var columns = [];
					var lastEventEnding = null;

				    //sort events by start time and then by end time
				    events = events.sort(function(e1,e2) {
						if (e1.top < e2.top) return -1;
						if (e1.top > e2.top) return 1;
						if (e1.bottom < e2.bottom) return -1;
						if (e1.bottom > e2.bottom) return 1;
						return 0;
				    });

				    //loop over the sorted events
				    $(events).each(function(index, e) {
						if (lastEventEnding !== null && e.top >= lastEventEnding) {
							packEvents(x * RouteCalendar.dimensions.DayWidth, columns);
							columns = [];
							lastEventEnding = null;
						}

						var placed = false;
						for (var i = 0; i < columns.length; i++) {                   
							var col = columns[ i ];
							if (!collidesWith( col[col.length-1], e ) ) {
								col.push(e);
								placed = true;
								break;
							}
						}

						if (!placed) {
							columns.push([e]);
						}

						if (lastEventEnding === null || e.bottom > lastEventEnding) {
			        		lastEventEnding = e.bottom;
						}
					});

			    	if (columns.length > 0) {
						packEvents(x * RouteCalendar.dimensions.DayWidth, columns);
			    	}
				});

				//support functions for calculating positions
				function packEvents(x, columns)
				{
					var n = columns.length;
					for (var i = 0; i < n; i++) {
						var col = columns[ i ];
						for (var j = 0; j < col.length; j++)
						{
							var event = col[j];
							event.calEl.css( 'left', (i / n)*RouteCalendar.dimensions.EventWidth + x + 3 );

							event.calEl.css( 'width', RouteCalendar.dimensions.EventWidth/n - 1 );
						}
					}
				}
				function collidesWith( a, b )
				{
				  return a.bottom > b.top && a.top < b.bottom;
				}
			},
			
			saveEvents: function () {
				
				Dialog.confirmAction = function () 
				{
					//show loading
					Dialog.hide();
					$('#all-loader').show();
				
					//create a route for each day
					var routesMap = {};
					$.each(RouteCalendar.days, function (index, day) {
						routesMap[index] = {
							route: addNamespace('{!namespace}', {
								Id			: day.routeId || null, 
								Name		: $('#saveroute-name').val(), 
								Date__c		: day.moment.format('YYYY-MM-DD'),
								Options__c	: JSON.stringify({
									TimeBasedOptions: {
										Enabled	: true,
										Start	: $('.timedefaults-routeduration[data-day="'+day.moment.clone().lang('en').format('dddd')+'"] .timedefaults-routestart').val(),
										End 	: $('.timedefaults-routeduration[data-day="'+day.moment.clone().lang('en').format('dddd')+'"] .timedefaults-routeend').val()
									},
									StartLocation: day.startLocation ? JSON.stringify(day.startLocation) : null,
									EndLocation: day.endLocation ? JSON.stringify(day.endLocation) : null
								})
							}),
							waypoints: day.startLocation ? [addNamespace('{!namespace}', $.extend(RouteCalendar.waypointFromLocation(day.startLocation), { SortOrder__c: 1 }))] : [],
							waypointCount: day.startLocation ? 1 : 0
						};
					});
					
					//add waypoints to the routes
					RouteCalendar.sortEvents();
					$.each(RouteCalendar.events, function (index, e) {
						if (e.start && typeof e.dayIndex == 'number' && e.hasAddress && !e.badGeocode) {
							routesMap[e.dayIndex].waypoints.push(addNamespace('{!namespace}', $.extend(e.toWaypoint(), { SortOrder__c: ++routesMap[e.dayIndex].waypointCount })));	
						}
					});
					
					//mark empty routes for deletion (by making sure there are no waypoints) and add end location waypoints
					$.each(RouteCalendar.days, function (index, day) {
						if (routesMap[index].waypointCount == (day.startLocation ? 1 : 0)) {
							routesMap[index].waypoints = [];
						}
						else if (day.endLocation) {
							routesMap[index].waypoints.push(addNamespace('{!namespace}', $.extend(RouteCalendar.waypointFromLocation(day.endLocation), { SortOrder__c: ++routesMap[index].waypointCount })));
						}
					});
					
					//put the routes in an array for easy sending
					var routes = [];
					$.each(routesMap, function (index, route) {
						routes.push(route);
					});
					
					//create an event for each timeblock
					RouteCalendar.sortTimeblocks();
					var timeblocks = [];
					$.each(RouteCalendar.timeblocks, function (index, block) {
						if (block.type == 'Block') {
							timeblocks.push(addNamespace('{!namespace}', block.toEvent()));
						}
					});
					
					//send save request
	            	$.ajax({
						url: MA.resources.RouteCalendarAPI,
					    type: 'POST',
					    dataType: 'JSON',
					    data: {
							action: 'saveRouteCalendar',
						    securityToken: '{!securityToken}',
						    from: RouteCalendar.from().format('YYYY-MM-DD'),
						    to: RouteCalendar.to().format('YYYY-MM-DD'),
							routes: JSON.stringify(routes),
							timeblocks: JSON.stringify(timeblocks),
							removedTimeBlockIds: JSON.stringify(RouteCalendar.removedTimeblockIds),
							removedEventIds: JSON.stringify(RouteCalendar.removedEventIds)
						},
				    	success: function (response) {
				    		RouteCalendar.removedTimeBlockIds = [];
				    		RouteCalendar.removedEventIds = [];
				    		RouteCalendar.populateEvents();
			    			//Dialog.hide();
				    	}
				    });
				    
				    //keep dialog open
				    return false;
			    };
				Dialog.show('dialog-saveroute');
			},
			
			/**********************
			*	List View
			**********************/
			refreshListIndices: function () {
				$('.list-day .list-event').each(function () {
					$(this).find('.index').text($(this).index() + 1);
				});
			},

			/**********************
			*	Date Range
			**********************/
			startHour: function () {
				var startHour = 23;
				$('.timedefaults-routestart').each(function () {
					startHour = Math.min(startHour, RouteCalendar.moment($(this).val(), 'h:mm a').hour());
				});
				return startHour;
			},
			endHour: function () {
				var endHour = 0;
				$('.timedefaults-routeend').each(function () {
					endHour = Math.max(endHour, RouteCalendar.moment($(this).val(), 'h:mm a').hour());
				});
				return endHour;
			},
			from: function (newFrom) {
				if (newFrom) { 
					$('#daterange-from').val(newFrom.format('YYYY-MM-DD')); 
					return RouteCalendar; 
				}
				return RouteCalendar.moment($('#daterange-from').val() + ' ' + RouteCalendar.startHour(), 'YYYY-MM-DD H');
			},
			to: function (newTo) {
				if (newTo) {
					$('#daterange-to').val(newTo.format('YYYY-MM-DD'));
					return RouteCalendar;
				}
				return RouteCalendar.moment($('#daterange-to').val() + ' ' + RouteCalendar.endHour(), 'YYYY-MM-DD H');
			},
			prev: function () {
				RouteCalendar
					.from(RouteCalendar.days[0].moment.clone().subtract('week', 1))
					.to(RouteCalendar.from().add('day', RouteCalendar.days.length - 1))
					.refreshDateRange()
				;
			},
			next: function () {
				RouteCalendar
					.from(RouteCalendar.days[0].moment.clone().add('week', 1))
					.to(RouteCalendar.from().add('day', RouteCalendar.days.length - 1))
					.refreshDateRange()
				;
			},
			updateDateRange: function () {
				Dialog.confirmAction = function () {
					if (RouteCalendar.from().isAfter(RouteCalendar.to())) {
						$('#daterange-to').addClass('error');
						return false;
					}
					RouteCalendar.refreshDateRange();
					Dialog.hide();
				};
				Dialog.show('dialog-daterange');
			},
			refreshDateRange: function () {
				RouteCalendar.clearMarkers();
				RouteCalendar.days = [];
				var fromMoment = RouteCalendar.from();
				var toMoment = RouteCalendar.to();
				while (!fromMoment.isAfter(toMoment, 'day'))
				{
					RouteCalendar.days.push(new RouteCalendar.Day({ moment: fromMoment.clone(), lockStatus: 'unlocked', startLocation: RouteCalendar.defaultLocation, endLocation: RouteCalendar.defaultLocation, markers: [] }));
					fromMoment.add('day', 1);
				}
				RouteCalendar.populateEvents();
			},

			/********************
			*	Rendering
			********************/
			redraw: function () {
			
				//recalculate calendar height
				RouteCalendar.recalculateHeight();
				if (!(/iPad/).test(navigator.userAgent)) {
					$('.cal, .list').add($('.cal, .list').parent()).height(RouteCalendar.dimensions.CalendarHeight);
					$('#map').height(RouteCalendar.dimensions.MapHeight);
					google.maps.event.trigger(map, 'resize');
				}
				else {
					$('.cal').css({ 'height': RouteCalendar.dimensions.CalendarHeight, 'overflow-y': 'scroll', '-webkit-overflow-scrolling': 'touch' });
					$('.cal div').css({ '-webkit-transform': 'translate3d(0,0,0)' });
					$('.list').css({ 'height': RouteCalendar.dimensions.CalendarHeight, 'overflow-y': 'scroll', '-webkit-overflow-scrolling': 'touch' });
					$('.list *').css({ '-webkit-transform': 'translate3d(0,0,0)' });
					$('#map').height(RouteCalendar.dimensions.MapHeight);
					google.maps.event.trigger(map, 'resize');
				}
			
				//calculate appropriate width
				RouteCalendar.dimensions.CalWidth = $('body').width();
				$('.cal-events, .cal-timeblocks').css({
					left	: RouteCalendar.dimensions.TimeLabelWidth
				});
				$('.cal, .cal-header, .cal-footer').css({
					width 	: RouteCalendar.dimensions.CalWidth
				});
				
				//adjust component widths
				$('.list-leftspacer, .settings-leftspacer').css({ width: RouteCalendar.dimensions.TimeLabelWidth });
				$('.list-headerlabel, .list-unassigned, .list-assigned').css({ width: (RouteCalendar.dimensions.CalWidth - RouteCalendar.dimensions.TimeLabelWidth)/2 });
				$('.settings-headerlabel').css({ width: RouteCalendar.dimensions.CalWidth - RouteCalendar.dimensions.TimeLabelWidth });

				/**********************
				*	Refresh Calendar
				**********************/

				//clear existing calendar
				$('.cal-header .cal-daylabel, .cal-header .cal-startlabel, .cal-footer .cal-endlabel, .cal .cal-timerow').remove();

				//recalculate dimensions
				$.extend(RouteCalendar.dimensions, {
					DayWidth	: ($('body').width() - RouteCalendar.dimensions.TimeLabelWidth) / RouteCalendar.days.length,
					EventWidth	: ($('body').width() - RouteCalendar.dimensions.TimeLabelWidth) / RouteCalendar.days.length - 6
				});

				//sync visible hours
				var startMoment = RouteCalendar.from();
				var endMoment = RouteCalendar.to();
				RouteCalendar.hours = [];
				while (startMoment.hour() < endMoment.hour()) {
					RouteCalendar.hours.push(startMoment.hour());
					startMoment.add('h', 1);
				}
				
				//create timeblocks for off hours
				RouteCalendar.timeblocks = $.grep(RouteCalendar.timeblocks, function (block, index) { return block.type != 'Off Hours'; });
				$.each(RouteCalendar.days, function (index, day) {
				
					var dayStart = RouteCalendar.moment(day.moment.format('YYYY-MM-DD') + ' ' + $('.timedefaults-routeduration[data-day="'+day.moment.clone().lang('en').format('dddd')+'"] .timedefaults-routestart').val(), 'YYYY-MM-DD h:mm a');
					if (dayStart.isAfter(day.moment)) {
						RouteCalendar.timeblocks.push(new RouteCalendar.Timeblock({
							index: ++RouteCalendar.uniqueIndex,
							type: 'Off Hours',
							title: 'Off Hours',
							allDay: false,
							start: day.moment.clone(),
							duration: dayStart.diff(day.moment, 'minutes'),
							dayIndex: dayStart.diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')
						}));
					}
					
					var dayEnd = RouteCalendar.moment(day.moment.format('YYYY-MM-DD') + ' ' + $('.timedefaults-routeduration[data-day="'+day.moment.clone().lang('en').format('dddd')+'"] .timedefaults-routeend').val(), 'YYYY-MM-DD h:mm a');
					var dayEndMoment = day.moment.clone().add(RouteCalendar.hours.length, 'hours');
					if (dayEnd.isBefore(dayEndMoment)) {
						RouteCalendar.timeblocks.push(new RouteCalendar.Timeblock({
							index: ++RouteCalendar.uniqueIndex,
							type: 'Off Hours',
							title: 'Off Hours',
							allDay: false,
							start: dayEnd.clone(),
							duration: dayEndMoment.diff(dayEnd, 'minutes'),
							dayIndex: dayEnd.diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')
						}));
					}
				});

				//create header/footer rows
				var $dayRow = $('.cal-header .cal-dayrow');
				var $startRow = $('.cal-header .cal-startrow');
				var $endRow = $('.cal-footer .cal-endrow');
				$('.maincontent-toggle, .cal-startend-all').css({ width: RouteCalendar.dimensions.TimeLabelWidth });
				$.each(RouteCalendar.days, function (index, day) {
					
					//day label
					var color = RouteCalendar.markerColors[index%9];
					day.calEl = $('#templates .cal-daylabel').clone()
						.css({ width: RouteCalendar.dimensions.DayWidth, 'border-top': '3px solid '+color })
						.appendTo($dayRow)
						.data('day', day)
						.on('click', function () {
							$(this).data('day').showOnMap();
						})
					;
					day.calEl.find('.cal-daylabel-text').css({ width: RouteCalendar.dimensions.DayWidth - 82 }).text(day.moment.format(RouteCalendar.dayLabelFormat));
					day.calEl.find('.cal-daylabel-lock').on('click', function (e) {
						var day = $(this).closest('.cal-daylabel').data('day');
						Dialog.showConfirm({
							type: $(this).find('.flaticon').attr('data-status') == 'unlocked' ? 'lockcalls' : 'unlockcalls',
							day: day,
							confirm: function () {
								day.toggleLock();
							} 
						});
						e.stopPropagation();
					});
					day.calEl.find('.cal-daylabel-erase').on('click', function (e) { 
						Dialog.showConfirm({ type: 'clearcalls', day: day, confirm: function () {
							RouteCalendar.events = $.grep(RouteCalendar.events, function (e, index) {
								if (e.start && e.start.isSame(day.moment, 'day')) {
									e.calEl.remove();
									e.listEl.remove();
									return false;
								}
								return true;
							});
							RouteCalendar.redrawEvents();
						}});
						e.stopPropagation();
					});
					
					//start label
					$('<div class="cal-startlabel" />')
						.css({ width: RouteCalendar.dimensions.DayWidth })
						.appendTo($startRow)
					;
					
					//end label
					$('<div class="cal-endlabel" />')
						.css({ width: RouteCalendar.dimensions.DayWidth })
						.appendTo($endRow)
					;
				});

				//create time rows
				$.each(RouteCalendar.hours, function (index, hour) {

					//create a row for this hour
					var $timeRow = $('<div class="cal-timerow" />').appendTo($('.cal-timerows'));

					//add a cell to display the hour
					$('<div class="cal-timelabel" />')
						.css({ width: RouteCalendar.dimensions.TimeLabelWidth, height: RouteCalendar.dimensions.HourHeight })
						.text(RouteCalendar.momentTZ().hour(hour).format('ha'))
						.appendTo($timeRow)
					;

					$.each(RouteCalendar.days, function (index, day) {
						$('<div class="cal-timecell" />')
							.css({ width: RouteCalendar.dimensions.DayWidth, height: RouteCalendar.dimensions.HourHeight })
							.appendTo($timeRow)
						;
					});

				});

				/************************
				*	Refresh List View
				************************/

				//clear existing day blocks
				var $assignedList = $('.list-assigned');
				$assignedList.find('.list-day').remove();

				//create day blocks
				$.each(RouteCalendar.days, function (index, day) {
					day.listEl = $('<div class="list-day" />')
						.append(
							$('<div class="title" />').text(day.moment.format('dddd, MMM, DD, YYYY'))
						)
						.append(
							$('<div class="events" />')
						)
						.appendTo($assignedList)
					;
				});

				/***********************
				*	Refresh Display
				***********************/

				//update date range display
				var fromMoment = RouteCalendar.from();
				var toMoment = RouteCalendar.to();
				if (fromMoment.isSame(toMoment, 'month')) {
					$('#daterange-display').text(fromMoment.format('MMM DD') + ' - ' + toMoment.format('DD, YYYY'));
				}
				else if (fromMoment.isSame(toMoment, 'year')) {
					$('#daterange-display').text(fromMoment.format('MMM DD') + ' - ' + toMoment.format('MMM DD, YYYY'));
				}
				else {
					$('#daterange-display').text(fromMoment.format('MMM DD, YYYY') + ' - ' + toMoment.format('MMM DD, YYYY'));	
				}
				
				//redraw calendar items
				RouteCalendar.redrawStartEndLocations();
				RouteCalendar.redrawTimeblocks();
				RouteCalendar.redrawEvents();

				return RouteCalendar;
			},
			
			redrawStartEndLocations: function () {
			
				$('.cal-startlabel, .cal-endlabel').empty();
				$.each(RouteCalendar.days, function (index, day) {
					if (day.startLocation) {
						$('.cal-startrow').children().eq(index + 1).html(
							$('<div class="cal-startend-location" />').text(day.startLocation.Address || day.startLocation.Name).data('location', day.startLocation)
						);
					}
					if (day.endLocation) {
						$('.cal-endrow').children().eq(index + 1).html(
							$('<div class="cal-startend-location" />').text(day.endLocation.Address || day.endLocation.Name).data('location', day.endLocation)
						);
					}
				});
			
			},
			
			redrawTimeblocks: function () {
			
				$('.cal-timeblocks .cal-timeblock').remove();
				$.each(RouteCalendar.timeblocks, function (index, block) {
					
					//calculate the height of this timeblock, making sure it doesn't overflow the bounds of the calendar
					var dayStart = block.start.clone().startOf('day').add('hour', RouteCalendar.hours[0]);
					var dayEnd = block.start.clone().startOf('day').add('hour', RouteCalendar.hours[RouteCalendar.hours.length - 1] + 1);
					var blockEnd = block.start.clone().add('minute', block.duration);
					var topOffset = 0;
					var heightOffset = 0;
					if (block.allDay) {
						heightOffset += 0 - (RouteCalendar.hours.length * RouteCalendar.dimensions.HourHeight);
						topOffset += dayStart.diff(block.start, 'minute')/60 * RouteCalendar.dimensions.HourHeight;
					}
					else if (blockEnd.isAfter(dayEnd, 'minute')) {
						heightOffset += blockEnd.diff(dayEnd, 'minute')/60 * RouteCalendar.dimensions.HourHeight;
					}
					else if (block.start.isBefore(dayStart, 'minute')) {
						heightOffset += dayStart.diff(block.start, 'minute')/60 * RouteCalendar.dimensions.HourHeight; 
						topOffset += dayStart.diff(block.start, 'minute')/60 * RouteCalendar.dimensions.HourHeight;
					}
					
					//create a calendar element for this event
					block.calEl = $('<div class="cal-timeblock"><div class="title" /></div>')
						.attr('data-type', block.type)
						.css({
							width 			: RouteCalendar.dimensions.DayWidth, 
							height 			: block.duration/60 * RouteCalendar.dimensions.HourHeight - heightOffset,
							top 			: (block.start.hour() + (block.start.minute()/60) - RouteCalendar.hours[0]) * RouteCalendar.dimensions.HourHeight + topOffset, 
							left 			: block.dayIndex * RouteCalendar.dimensions.DayWidth
						})
						.data('block', block)
					;
					block.calEl.find('.title').text(block.name);
					block.calEl.toggleClass('holiday', block.type == 'Holiday');
					block.calEl.appendTo($('.cal-timeblocks'));
					
				});
			
			},

			redrawEvents: function () {
			
				//clear all events
				$('.cal .cal-event, .list .list-event').remove();
				$.each(RouteCalendar.days, function (index, day) {
					$.each(day.markers, function (i, marker) {
						marker.setMap(null);
					});
					day.markers = [];
				});

				//draw each event
				$.each(RouteCalendar.events, function (index, e) { 
				
					if (e.start && typeof e.dayIndex == 'number') {
						var dayStart = e.start.clone().startOf('day').add('hour', RouteCalendar.hours[0]);
						var dayEnd = e.start.clone().startOf('day').add('hour', RouteCalendar.hours[RouteCalendar.hours.length - 1] + 1);
						var eventEnd = e.start.clone().add('minute', e.duration);
						if (!e.start.isBefore(dayStart) && !eventEnd.isAfter(dayEnd))
						{
							//calculate the height of this event, making sure it doesn't overflow the bounds of the calendar
							var topOffset = 0;
							var heightOffset = 0;
							if (eventEnd.isAfter(dayEnd, 'minute')) {
								heightOffset += eventEnd.diff(dayEnd, 'minute')/60 * RouteCalendar.dimensions.HourHeight;
							}
							if (e.start.isBefore(dayStart, 'minute')) {
								heightOffset += dayStart.diff(e.start, 'minute')/60 * RouteCalendar.dimensions.HourHeight; 
								topOffset += dayStart.diff(e.start, 'minute')/60 * RouteCalendar.dimensions.HourHeight;
							}
						
							//create a calendar element for this event
							e.calEl = $('<div class="cal-event"><div class="time" /><div class="title" /><div class="icons"><div class="icon-lock" /><div class="icon-warn" /></div></div>')
								.css({
									backgroundColor	: e.isFromWaypoint ? '#2E78FC' : (!e.hasAddress ? '#63CA49' : (MA.Util.testLatLng(e.latLng) ? '#FF0000' : '#F90')),
									width 			: RouteCalendar.dimensions.DayWidth - 6, 
									height 			: e.duration/60 * RouteCalendar.dimensions.HourHeight - heightOffset,
									top 			: (e.start.hour() + (e.start.minute()/60) - RouteCalendar.hours[0]) * RouteCalendar.dimensions.HourHeight + topOffset, 
									left 			: e.dayIndex * RouteCalendar.dimensions.DayWidth + 3
								})
								.toggleClass('flexible', e.flexible)
								.toggleClass('badGeocode', e.badGeocode)
								.data('e', e)
							;
							e.calEl.find('.time').text(e.formatTime());
							e.calEl.find('.title').text(e.title);
							e.calEl.appendTo($('.cal-events'));
						}
						else
						{
							//this doesn't fit on the calendar so make it unassigned
							e.dayIndex = null;
						}
					}
					else {
						e.dayIndex = null;
					}
					RouteCalendar.createMarker(e);
						
					//create a list view element for this event
					e.listEl = $('#templates .list-event').clone().data('e', e);
					e.listEl.find('.title').text(e.title);
					e.listEl.find('.address').text(e.markerAddress || '');
					if (e.start && typeof e.dayIndex == 'number') {
						e.listEl.find('.time').text(e.start.format('h:mma') + '-' + e.start.clone().add('minute', e.duration).format('h:mma'));
						e.listEl.appendTo(RouteCalendar.getDay(e.start).listEl.find('.events'));
					}
					else {
						e.listEl.appendTo($('.list-unassigned .events'));
					}
					
				});
				
				//refresh positions and indices
				RouteCalendar.refreshPositions();
				RouteCalendar.refreshListIndices();
				
			},
			
			createMarker: function (e) {
				if (MA.Util.testLatLng(e.latLng)) {
					var color = e.dayIndex == null ? RouteCalendar.unassignedMarkerColor : RouteCalendar.markerColors[e.dayIndex%9];
					var svg = $('#templates .svg-marker').clone().wrap('<div/>').parent().html()
						.replace(/__INDEX__/g, e.index)
						.replace(/__GRADIENT_ONE__/g, color)
						.replace(/__GRADIENT_TWO__/g, shadeColor(color, 20))
						.replace(/__CIRCLE_STROKE__/g, shadeColor(color, 25))
						.replace(/__CIRCLE_FILL__/g, isDark(color) ? unshadeColor(color, 90) : shadeColor(color, 90))
					;
					var marker = new google.maps.Marker({
						map: map,
						position: e.latLng,
						e: e,
						icon: {
							url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(svg)),
							anchor: new google.maps.Point(14, 42)
						}
					});

					if (e.dayIndex == null) {
						RouteCalendar.unassignedMarkers.push(marker);
					}
					else {
						RouteCalendar.days[e.dayIndex].markers.push(marker);
					}
					
					google.maps.event.addListener(marker, 'click', function () { e.edit(); });
				}
			},

			clearMarkers: function () {
				$.each(RouteCalendar.days, function (i, day) {
					$.each(day.markers, function (i, marker) {
						marker.setMap(null);
					});
				});
				$.each(RouteCalendar.unassignedMarkers, function (i, marker) {
					marker.setMap(null);
				});
				RouteCalendar.unassignedMarkers = [];
			},
			
			recalculateHeight: function () {
				if (RouteCalendar.isCollapsed) {
					RouteCalendar.dimensions.CalendarHeight = 0;
					RouteCalendar.dimensions.MapHeight = $(window).outerHeight() - $('.toolbar').outerHeight() - $('.cal-header').outerHeight() - $('.cal-footer').outerHeight();	//viewport - toolbar - pane header - pane footer;
				}
				else {
					RouteCalendar.dimensions.MapHeight = 200;
					RouteCalendar.dimensions.CalendarHeight = $(window).outerHeight() - $('.toolbar').outerHeight() - RouteCalendar.dimensions.MapHeight - $('.cal-header').outerHeight() - $('.cal-footer').outerHeight();	//viewport - toolbar - map - pane header - pane footer
				}
			},
			
			collapseInterval: null,
			collapse: function () {
				var calHeight = $('.cal').height();
				var mapHeight = $('#map').height();
				clearInterval(RouteCalendar.collapseInterval);
				RouteCalendar.collapseInterval = setInterval(function () {
			
					if (calHeight == 0) {
						clearInterval(RouteCalendar.collapseInterval);
						google.maps.event.trigger(map, 'resize');
						RouteCalendar.isCollapsed = true;
						return;
					}
			
					var heightStep = calHeight < 20 ? calHeight : 20;
					$('#map').height(mapHeight + heightStep);
					$('.cal, .list').add($('.cal, .list').parent()).height(calHeight - heightStep);
					calHeight -= heightStep;
					mapHeight += heightStep;
			
				}, 1);
			},
			restore: function () {
				var calHeight = $('.cal').height();
				var mapHeight = $('#map').height();
				clearInterval(RouteCalendar.collapseInterval);
				RouteCalendar.collapseInterval = setInterval(function () {
			
					if (mapHeight <= 200) {
						clearInterval(RouteCalendar.collapseInterval);
						google.maps.event.trigger(map, 'resize');
						RouteCalendar.isCollapsed = false;
						return;
					}
			
					var heightStep = mapHeight < 220 ? 220 - mapHeight : 20;
					$('#map').height(mapHeight - heightStep);
					$('.cal, .list').add($('.cal, .list').parent()).height(calHeight + heightStep);
					calHeight += heightStep;
					mapHeight -= heightStep;
			
				}, 1);
			}
		};
		
		//Main Content
		var MainContent = {
		
			show: function (pane, callback) {
				$('.maincontent-toggle-pane').removeClass('active').filter('[data-pane="'+pane+'"]').addClass('active');
				$('.pane').hide().filter('[data-pane="'+pane+'"]').show();
				
				if (pane == 'cal') {
					RouteCalendar.redrawEvents();	//positioning problem fix
				}
			}
		
		};

		//Dialogs
		var Dialog = {

			show: function (id, options) {
				$('#dialogs .dialog .field input, #dialogs .dialog .field textarea, #dialogs .dialog .field select').removeClass('error');
				$('#dialogs .dialog').hide().filter('#'+id).removeData().data(options || {}).show();
				$('#dialogs').fadeIn();
			},
			
			showConfirm: function (options) {
				$('#dialog-confirm .graphic-confirm').removeClass('clearcalls lockcalls unlockcalls deleterecord').addClass(options.type);
				switch (options.type) 
				{
					case 'clearcalls':
						$('#dialog-confirm .message').text("{!$Label.MA_RouteCalendar_Confirm_Clear_Calls} " + options.day.moment.format('ddd MMM DD, YYYY') + '?');
						break;
					case 'lockcalls':
						$('#dialog-confirm .message').text("{!$Label.MA_RouteCalendar_Confirm_Lock_Calls} " + options.day.moment.format('ddd MMM DD, YYYY') + '?');
						break;
					case 'unlockcalls':
						$('#dialog-confirm .message').text("{!$Label.MA_RouteCalendar_Confirm_Unlock_Calls} " + options.day.moment.format('ddd MMM DD, YYYY') + '?');
						break;
					case 'deleterecord':
						$('#dialog-confirm .message').text("{!$Label.MA_RouteCalendar_Confirm_Delete_Call} \"" + options.record.Name + '"');
						break;
				}
				Dialog.confirmAction = options.confirm;
				Dialog.show('dialog-confirm');
			},
			
			confirm: function () {
				if (typeof Dialog.confirmAction == 'function') {
					if (Dialog.confirmAction.apply(this, arguments) == false) {
						return;
					}
				}
				Dialog.hide();
			},
			
			delete: function () {
				Dialog.hide();
				if (typeof Dialog.deleteAction == 'function') {
					Dialog.deleteAction.apply(this, arguments);
				}
			},

			hide: function (callback) {
				$('#dialogs').fadeOut(function () { (callback || function () {}).call(); });
			}

		};
		
		//Day Prototype
		$.extend(RouteCalendar.Day.prototype, {
			toggleLock: function () {
				if (this.lockStatus == 'locked') {
					this.calEl.find('.lock').attr('data-status', this.lockStatus = 'unlocked').addClass('redraw').removeClass('redraw');
				}
				else if (this.lockStatus == 'unlocked') {
					this.calEl.find('.lock').attr('data-status', this.lockStatus = 'locked').addClass('redraw').removeClass('redraw');
				}
			},
			showOnMap: function () {
				try {
					var markers = RouteCalendar.days[this.moment.clone().startOf('day').diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')].markers;
					if (markers && markers.length > 0) {
						var bounds = new google.maps.LatLngBounds();
						$.each(markers, function (i, marker) {
							bounds.extend(marker.getPosition());
						});
						map.fitBounds(bounds);
					}
				}
				catch (err) {}	//assume no markers
			}
		});

		//Event Prototype
		$.extend(RouteCalendar.Event.prototype, {
			edit: function () {
				var e = this;
			
				$('#waypoint-title').text(e.title);
				$('#waypoint-address').text(e.markerAddress || '');
				$('#waypoint-notes').val(e.notes || '');
				$('#waypoint-flexible').attr('checked', e.flexible);
				$('#waypoint-day').val((e.start || e.originalStart).format('YYYY-MM-DD'));
				$('#waypoint-time').val((e.start || e.originalStart).format('HH:mm'));
				$('#waypoint-duration').val(e.formatDuration(true));
				
				$('#waypoint-tooltips').empty();
				$.each(RouteCalendar.eventSettings.tooltips, function (index, tooltip) {
					var $tooltip = $('<tr class="waypoint-tooltip"><td class="label"></td><td class="value"></td></tr>');
					$tooltip.find('.label').html(tooltip.FieldLabel);
					$tooltip.find('.value').html(extractTooltipValue(tooltip, e.event));
					$tooltip.appendTo($('#waypoint-tooltips'));
				});
				
				if (RouteCalendar.eventSettings['RoutingEvent-IsFlexible-Readonly']) {
					$('#waypoint-flexible').attr('disabled', 'disabled');
				}
				else {
					$('#waypoint-flexible').removeAttr('disabled');
				}

				Dialog.confirmAction = function () {
					$.extend(e, {
						notes: $('#waypoint-notes').val(),
						flexible: $('#waypoint-flexible').is(':checked'),
						start: RouteCalendar.moment($('#waypoint-day').val() + ' ' + $('#waypoint-time').val(), 'YYYY-MM-DD HH:mm')
					});
					e.refreshDayIndex();
					e.updateDuration($('#waypoint-duration').val());

					RouteCalendar.redrawEvents();
				};
				Dialog.deleteAction = function (deleteFromDatabase) {
					if (deleteFromDatabase && e.event && e.event.Id) {
						RouteCalendar.removedEventIds.push(e.event.Id);
					}
				
					e.calEl.remove();
					e.listEl.remove();
					$.each(RouteCalendar.events, function (index, ev) { if (ev === e) { RouteCalendar.events.splice(index, 1); return false; } });
					RouteCalendar.redrawEvents();
				};
				Dialog.show('dialog-waypoint');
			},
			intersects: function (e) {
				return !(this.start.isAfter(e.start.clone().add('m', e.duration)) || this.start.clone().add('m', this.duration).isBefore(e.start));
			},
			timeIsValid: function (currentMoment) {
				var m = currentMoment.clone();
				var waypointTime = (this.start.hour()*60) + this.start.minute();
				var routeEndTime = (RouteCalendar.moment($('#timedefaults-routeend').val(), 'h:mm a').hour()*60) + RouteCalendar.moment($('#timedefaults-routeend').val(), 'h:mm a').minute();
				if (!this.flexible && this.start.isBefore(m, 'm'))
				{
					//waypoint already needed to be hit
					this.calEl.addClass('invalid').attr('title', 'Late for appointment: ' + RouteCalendar.momentTZ().startOf('day').add('m', time).format('h:mm a'));
	   				return false;
				}
				else if ((!this.flexible && waypointTime > routeEndTime) || (this.flexible && time > routeEndTime))
				{
					//this waypoint will be hit after the route is supposed to end.  mark as invalid and scroll to it
					this.calEl.addClass('invalid').attr('title', 'Appointment too late: ' + RouteCalendar.momentTZ().startOf('day').add('m', this.flexible ? time : waypointTime).format('h:mm a'));
	   				return false;
				}
				return true;
			},
			formatTime: function () {
				var startTime = (this.start.minute() == 0 ? this.start.format('h') : this.start.format('h:mm')) + (this.start.hour() > 11 ? 'p' : '');
				var end = this.start.clone().add('minute', this.duration);
				var endTime = (end.minute() == 0 ? end.format('h') : end.format('h:mm')) + (end.hour() > 11 ? 'p' : '')
				return startTime + ' - ' + endTime;
			},
			formatDuration: function (forPicklist) {
			    //console.log(forPicklist);
			    
				if (forPicklist) {
					var minutes = Math.min(165, Math.floor(this.duration/15) * 15);
					var hours = Math.floor(minutes/60);
					return hours + ' hr, ' + (minutes - (hours*60)) + ' min';
				}
				else {
				    //console.log(this.duration);
					var hours = Math.floor(this.duration/60);
					
					//console.log(hours + ' hr, ' + (this.duration - (hours*60)) + ' min' );
					
					
					return hours + ' hr, ' + (this.duration - (hours*60)) + ' min';
				}
			},
			refreshDayIndex: function () {
				this.dayIndex = this.start.clone().startOf('day').diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days');
				if (this.dayIndex < 0 || this.dayIndex > RouteCalendar.days.length - 1) {
					this.dayIndex = null;
				}
			},
			updateDuration: function (newDuration) {
				var newDurationParts = newDuration.split(' ');
				this.duration = parseInt(newDurationParts[0])*60 + parseInt(newDurationParts[2]);
			},
			getEnd: function () {
				return this.start.clone().add('minute', this.duration);
			},
			toWaypoint: function () {
				return {
					Name			: this.title || '',
        			Address__c		: this.markerAddress || '',
        			Notes__c		: this.notes || '',
        			EventId__c		: this.event ? this.event.Id || '' : '',
        			LinkId__c		: this.record ? this.record.Id : '',
        			BaseObject__c	: this.baseObject || '',
        			Options__c		: JSON.stringify({ TimeBasedOptions: { Start: this.start.format('hh:mm a'), Duration: this.formatDuration(false) } }),
        			Latitude__c		: this.markerLatitude || null,
        			Longitude__c	: this.markerLongitude || null,
        			MASavedQry__c	: this.savedQueryId || null,
        			HasAddress__c	: this.hasAddress,
        			IsFlexible__c	: this.flexible
				};
			}
		});

		//Timeblock Prototype
		$.extend(RouteCalendar.Timeblock.prototype, {
			getEnd: function () {
				if (this.allDay) {
					return this.start.clone().endOf('day');
				}
				return this.start.clone().add('minute', this.duration);
			},
			toEvent: function () {
				return {
					Id: this.id || null,
					Subject: 'Time Block - ' + this.name,
					IsAllDayEvent: this.allDay,
					ActivityDate: this.start.format('YYYY-MM-DD'),
					StartDateTime: this.start.format('YYYY-MM-DDTHH:mm:ssZ'),
					DurationInMinutes: this.allDay ? null : this.duration,
					OwnerId: '{!$User.Id}'
				};
			}
		});

		//On Ready
		$(function () {

			//redraw everything on window resize
			RouteCalendar.recalculateHeight();
			$(window).resize(function () { RouteCalendar.redraw(); });
			window.onorientationchange = function () { RouteCalendar.redraw(); };

			/*******************
			* Calendar
			*******************/
			
			//calendar scrolling
			if (!(/iPad/).test(navigator.userAgent)) {
				$('.cal').slimScroll({ height: RouteCalendar.dimensions.CalendarHeight });
			}
			else {
				$('.cal').css({ 'height': RouteCalendar.dimensions.CalendarHeight, 'overflow-y': 'scroll', '-webkit-overflow-scrolling': 'touch' });
				$('.cal div').css({ '-webkit-transform': 'translate3d(0,0,0)' });
			}
			
			$('.pane[data-pane="cal"] .slimScrollDiv, .pane[data-pane="cal"] .cal')

			//event handlers
			$('.pane[data-pane="cal"]')

				.on('click', '.cal-event', function () {
					$(this).data('e').edit();
				})
				
				.on('click', '.cal-timeblock[data-type="Block"]', function () {
				
					var block = $(this).data('block');
					$('#timeblock-name').val(block.name);
					$('#timeblock-day').val(block.start.format('YYYY-MM-DD'));
					$('#timeblock-allday').attr('checked', block.allDay);
					$('#timeblock-start').val(block.start.format('HH:mm'));
					$('#timeblock-end').val(block.start.clone().add('minute', block.duration).format('HH:mm'));
					
					Dialog.confirmAction = function () {
					
						//validate start/end times
						var start = RouteCalendar.moment($('#timeblock-day').val() + ' ' + $('#timeblock-start').val());
						var end = RouteCalendar.moment($('#timeblock-day').val() + ' ' + $('#timeblock-end').val());
						if (!start.isBefore(end)) {
							$('#timeblock-end').addClass('error');
							return false;
						}
						
						//remove existing timeblock if there is one
						var block = $('#dialog-timeblock').data('block');
						if (block) {
							$.each(RouteCalendar.timeblocks, function (index, b) {
								if (block === b) {
									b.calEl.remove();
									RouteCalendar.timeblocks.splice(index, 1);
									return false;
								}
							});
						}
					
						RouteCalendar.timeblocks.push(new RouteCalendar.Timeblock({
							index: ++RouteCalendar.uniqueIndex,
							type: 'Block',
							id: block.id || null,
							name: $('#timeblock-name').val() == '' ? 'Time Block' : $('#timeblock-name').val(),
							title: $('#timeblock-name').val() == '' ? 'Time Block' : $('#timeblock-name').val(),
							allDay: $('#timeblock-allday').is(':checked'),
							start: $('#timeblock-allday').is(':checked') ? start.startOf('day') : start,
							duration: $('#timeblock-allday').is(':checked') ? 0 : end.diff(start, 'minute'),
							dayIndex: start.clone().startOf('day').diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')
						}));
						RouteCalendar.redrawTimeblocks();
					};
					Dialog.deleteAction = function () {

						if (block.id) {
							RouteCalendar.removedTimeblockIds.push(block.id);
						}
						
						$.each(RouteCalendar.timeblocks, function (index, b) {
							if (block === b) {
								b.calEl.remove();
								RouteCalendar.timeblocks.splice(index, 1);
								return false;
							}
						});
					
					};
					Dialog.show('dialog-timeblock', { block: block });
					$('#timeblock-name').focus();
				})

				.on('click', '.cal-startlabel, .cal-endlabel, .cal-startend-all', function () { 
					$('[name="locationtype"]').attr('checked', false);
					$('#startendlocation-favorite').removeAttr('data-id').find('label').text("{!$Label.MA_Favorite}");
					$('#startendlocation-address').find('label').text("{!$Label.MA_Address}");
					$('#startendlocation-address-search').val('');
					$('#startendlocation-address-selection .mlist .mlist-item').remove();
					$('#startendlocation-address-selection .mlist').append('<div class="mlist-item mlist-blank">{!$Label.MA_SelectAddress_Watermark}</div>');
					$('.startinglocation').attr('checked', $(this).parent().closest('div').is('.cal-startrow'));
					$('.endinglocation').attr('checked', $(this).parent().closest('div').is('.cal-endrow'));

					Dialog.confirmAction = function () {
					
						var $label = $('#dialog-startendlocation').data('label');
						var $labels = $();
						if ($label.is('.cal-startend-all')) {
							if ($('.startinglocation').is(':checked')) {
								$labels = $labels.add($('.cal-startrow .cal-startlabel'));
							}
							if ($('.endinglocation').is(':checked')) {
								$labels = $labels.add($('.cal-endrow .cal-endlabel'));
							}
						}
						else {
							if ($('.startinglocation').is(':checked')) {
								$labels = $labels.add($('.cal-startrow').children().eq($label.index()));
							}
							if ($('.endinglocation').is(':checked')) {
								$labels = $labels.add($('.cal-endrow').children().eq($label.index()));
							}
						}
							
						var selectedItem = $('[name="locationtype"]:checked').closest('.field').data('item');
						$labels.each(function () {
							var day = RouteCalendar.days[$(this).index() - 1];
							if ($(this).is('.cal-startlabel')) {
								day.startLocation = selectedItem; 
							}
							else {
								day.endLocation = selectedItem;
							}
						});
						RouteCalendar.redrawStartEndLocations();
						
						//save as default location if needed
						if ($('#startendlocation-defaultlocation').is(':checked')) {
							$.ajax({
								url: MA.resources.RouteCalendarAPI,
							    type: 'POST',
							    dataType: 'JSON',
							    data: {
							    	action: 'saveRouteDefaults',
							    	securityToken: '{!securityToken}',
							    	serializedSettings: JSON.stringify({
							    		RouteDefaults: {
							    			defaultLocation: JSON.stringify(selectedItem)
							    		}
							    	})
							    },
						    	success: function (response) {}
						    });
						}
					};
					Dialog.show('dialog-startendlocation', { label: $(this) });
					$('.bxslider').data('bxslider').reloadSlider();
				})
				
				.on('click', '.cal-timecell', function () {
				
					var day = RouteCalendar.days[$(this).index() - 1];
					var hour = RouteCalendar.hours[$(this).closest('.cal-timerow').index()];
					$('#timeblock-name').val('');
					$('#timeblock-day').val(day.moment.format('YYYY-MM-DD'));
					$('#timeblock-allday').attr('checked', false);
					$('#timeblock-start').val(RouteCalendar.momentTZ().hour(hour).format('HH:00'));
					$('#timeblock-end').val(RouteCalendar.momentTZ().hour(hour + 1).format('HH:00'));
					
					Dialog.confirmAction = function () {
					
						//validate start/end times
						var start = RouteCalendar.moment($('#timeblock-day').val() + ' ' + $('#timeblock-start').val());
						var end = RouteCalendar.moment($('#timeblock-day').val() + ' ' + $('#timeblock-end').val());
						if (!start.isBefore(end)) {
							$('#timeblock-end').addClass('error');
							return false;
						}
					
						RouteCalendar.timeblocks.push(new RouteCalendar.Timeblock({
							index: ++RouteCalendar.uniqueIndex,
							type: 'Block',
							name: $('#timeblock-name').val() == '' ? 'Time Block' : $('#timeblock-name').val(),
							title: $('#timeblock-name').val() == '' ? 'Time Block' : $('#timeblock-name').val(),
							allDay: $('#timeblock-allday').is(':checked'),
							start: $('#timeblock-allday').is(':checked') ? start.startOf('day') : start,
							duration: $('#timeblock-allday').is(':checked') ? 0 : end.diff(start, 'minute'),
							dayIndex: start.clone().startOf('day').diff(RouteCalendar.days[0].moment.clone().startOf('day'), 'days')
						}));
						RouteCalendar.redrawTimeblocks();
					};
					Dialog.show('dialog-timeblock');
					$('#timeblock-name').focus();
				
				})

			;
			
			/********************
			* List View
			********************/

			//list view scrolling
			if (!(/iPad/).test(navigator.userAgent)) {
				$('.list').slimScroll({ height: RouteCalendar.dimensions.CalendarHeight });
			}
			else {
				$('.list').css({ 'height': RouteCalendar.dimensions.CalendarHeight, 'overflow-y': 'scroll', '-webkit-overflow-scrolling': 'touch' });
				$('.list *').css({ '-webkit-transform': 'translate3d(0,0,0)' });
			}
			
			//event handlers
			$('.list')

				.on('click', '.list-event .info', function () {
					$(this).closest('.list-event').data('e').edit();
				})

				.on('click', '.list-event .remove', function () {
					var e = $(this).closest('.list-event').data('e');
					e.calEl.remove();
					e.listEl.remove();
					$.each(RouteCalendar.events, function (index, ev) { if (ev === e) { RouteCalendar.events.splice(index, 1); return false; } });
					RouteCalendar.redrawEvents();
				})

			;

			/*******************
			* Dialogs
			*******************/

			//event handlers
			$('.dialog')

				.on('click', '.field[data-type="checkbox"] input, .field[data-type="radio"] input', function (e) {
					e.stopPropagation();
					if ($(this).is('.field[data-type="radio"] input')) {
						e.preventDefault();
					}
				})
				.on('click', '.field[data-type="checkbox"], .field[data-type="radio"]', function (e) {
					$(this).find('input').click();
				})

			;

			/*******************
			* Settings
			*******************/

            //updating settings
            $('.settings-content').on('change', 'select', function () {
            
            	//build settings
            	var settings = {
            		RouteDefaults: {
		    			mode		: $('#RouteMode').val(),
		        		unit		: $('#UnitType').val(),
		        		duration	: $('#timedefaults-appointmentduration').val()
		    		}
            	};
            	
            	//add start/end for each day
            	$('.timedefaults-routeduration').each(function () {
            		settings.RouteDefaults[$(this).attr('data-day') + 'Start'] = $(this).find('.timedefaults-routestart').val();
            		settings.RouteDefaults[$(this).attr('data-day') + 'End'] = $(this).find('.timedefaults-routeend').val();
            	});

            	//send request to save settings
            	$.ajax({
					url: MA.resources.RouteCalendarAPI,
				    type: 'POST',
				    dataType: 'JSON',
				    data: {
				    	action: 'saveRouteDefaults',
				    	securityToken: '{!securityToken}',
				    	serializedSettings: JSON.stringify(settings)
				    },
			    	success: function (response) {
			    	}
			    });

            	//update day moments and redraw the calendar if needed
            	if ($(this).is('.timedefaults-routestart, .timedefaults-routeend')) {
            		$.each(RouteCalendar.days, function (index, day) { day.moment = RouteCalendar.from().clone().add('day', index); });
            		RouteCalendar.redraw();
            	}

            });
            
            /*******************
            * Favorite Selection
            *******************/
            
            $('#startendlocation-favorite-selection')
            	
            	.on('click', '.mlist-item', function () {
            
	            	var $item = $(this);
	            	var $list = $item.closest('.mlist');
	            	if ($item.is('.mlist-folder')) {
		            	$.ajax({
							url: MA.resources.RouteCalendarAPI,
						    type: 'POST',
						    dataType: 'JSON',
						    data: {
						    	action: 'getFolderContents',
						    	securityToken: '{!securityToken}',
						    	parentId: $item.attr('data-id'),
						    	parentType: $item.attr('data-type')
						    },
					    	success: function (response) 
					    	{
					    		//populate list
					    		$list.find('.mlist-item').remove();
					    		$.each(response.data.folders, function (index, folder) {
					    			$('<div class="mlist-item mlist-folder"/>')
					    				.attr({ 'data-id': folder.Id, 'data-type': $item.attr('data-type') })
					    				.text(folder.Name)
					    				.append($('<div class="mlist-icon folder" />'))
					    				.appendTo($list)
					    			;
					    		});
					    		$.each(response.data.locations, function (index, location) {
					    			removeNamespace('{!namespace}', location);
					    		
					    			$('<div class="mlist-item mlist-favorite"/>')
					    				.attr({ 'data-id': location.Id, 'data-type': $item.attr('data-type'), 'data-name': location.Name })
					    				.text(location.Name)
					    				.append($('<div class="mlist-icon favorite" />'))
					    				.appendTo($list)
					    				.data('item', location)
					    			;
					    		});
					    		
					    		//handle blank lists
					    		if ($list.find('.mlist-item').length == 0) {
					    			$('<div class="mlist-item mlist-blank"/>')
					    				.text('Nothing Here')
					    				.appendTo($list)
					    			;
					    		}
					    		
					    		//handle back button
					    		$list
					    			.attr({
						    			'data-parentId': response.data.newParentId,
						    			'data-parentType': response.data.newParentType,
						    			'data-currentId': $item.attr('data-id'),
						    			'data-currentType': $item.attr('data-type')
						    		})
					    			.find('.mlist-icon.back').show()
					    		;
					    	}
					    });
					}
					else if ($item.is('.mlist-favorite')) {
						$('#startendlocation-favorite').data('item', $item.data('item'));
						$('#startendlocation-favorite label').text("{!$Label.MA_Favorite} - " + $item.attr('data-name'));
						$('#startendlocation-favorite input').attr('checked', true);
						$('#startendlocation-address label').text("{!$Label.MA_Address}");
						$('#startendlocation-slider').data('bxslider').goToSlide(0);
					}
	            })
	            
	            .on('click', '.mlist-icon.back', function () {
	            
	            	var $list = $(this).closest('.mlist');
	            	var parentId = $list.attr('data-parentId');
	            	var parentType = $list.attr('data-parentType');
	            	if (parentId == 'Root') {
	            		$list.find('.mlist-item').remove();
	            		$list.append("<div class='mlist-item mlist-folder' data-id='PersonalRoot' data-type='Personal'>Personal<div class='mlist-icon folder'></div></div><div class='mlist-item mlist-folder' data-id='CorpRoot' data-type='Corporate'>Corporate<div class='mlist-icon folder'></div></div>");
	            		$list.attr('data-currentId', 'Root').removeAttr('data-parentId data-parentType data-currentType');
	            		$(this).hide();
	            	}
	            	else {
	            		$('<div class="mlist-item mlist-folder" style="display: none;" />').attr({ 'data-type': parentType, 'data-id': parentId }).appendTo($list).click();
	            	}
	            })
	            
	            .on('click', '.prev', function () {
		        	$('#startendlocation-slider').data('bxslider').goToSlide(0);
		        });
	        ;
	        
	        /*******************
	        * Address Selection
	        *******************/
	        
	        var addressSearchTimeout;
	        var addressSearchIndex = 0;
	        $('#startendlocation-address-search').on('keypress', function () {
	        	clearTimeout(addressSearchTimeout);
	        	addressSearchTimeout = setTimeout(function () {
	        		var searchIndex = ++addressSearchIndex;
	        		var service = new google.maps.places.AutocompleteService();
  					service.getPlacePredictions({ input: $('#startendlocation-address-search').val() }, function (predictions, status) {
  						if (addressSearchIndex == searchIndex && status == google.maps.places.PlacesServiceStatus.OK) {
							var $list = $('#startendlocation-address-selection .mlist');
							$list.find('.mlist-item').remove();
							$.each(predictions, function (index, prediction) {
								$('<div class="mlist-item mlist-address"/>')
				    				.text(prediction.description)
				    				.append($('<div class="mlist-icon address" />'))
				    				.appendTo($list)
				    				.data('item', {
				    					placeId: prediction.place_id,
				    					description: prediction.description,
				    					Address: prediction.description	//description is probably the address, but we'll attempt to grab the actual address if this prediction is selected
									})
				    			;
							});
							
							if ($list.find('.mlist-item').length == 0) {
								$('<div class="mlist-item mlist-blank"/>')
				    				.text('No Results')
				    				.appendTo($list)
				    			;
							}
						}
  					});
				}, 500);
	        });
	        
	        $('#startendlocation-address-selection').on('click', '.mlist-address', function () {
	        	var placesService = new google.maps.places.PlacesService(map);
	        	placesService.getDetails({ placeId: $(this).data('item').placeId }, function (place, status) {
					if (status == google.maps.places.PlacesServiceStatus.OK) {
						console.log(place);
						try {
							$.extend($(this).data('item'), {
								Address: place.formatted_address,
								Latitude__c: place.geometry.location.lat(),
								Longitude__c: place.geometry.location.lng()
							});
						}
						catch (err) { MA.log(err); }
					}
				});


				$('#startendlocation-favorite label').text("{!$Label.MA_Favorite}");
				$('#startendlocation-address').data('item', $(this).data('item'));
				$('#startendlocation-address input').attr('checked', true);
				$('#startendlocation-address label').text("{!$Label.MA_Address} - " + $(this).data('item').description);
				$('#startendlocation-slider').data('bxslider').goToSlide(0);
	        });
	        
	        $('#startendlocation-address-selection .prev').on('click', function () {
	        	$('#startendlocation-slider').data('bxslider').goToSlide(0);
	        });

			/*******************
			* Init
			*******************/

			//get user prefs
			$.getJSON(MA.resources.User, 'action=get_user_prefs&id={!$User.Id}', function(response) {
		        if(response.success) {
		        	try {
		        		removeNamespace('{!namespace}', response.record);
		        		var settings = RouteCalendar.userSettings = JSON.parse(response.record.MapAnythingSettings__c);
		        	
		        		//timezone support
			            RouteCalendar.userSettings.timezone = response.record.TimeZoneSidKey;
		        	
		        		//time based comboboxes
			            var $timeSelects = $('.timedefaults-routestart, .timedefaults-routeend');
			            var currentMoment = RouteCalendar.momentTZ().startOf('day');
			            var currentDay = currentMoment.day();
			            while (currentMoment.day() == currentDay) {
			            	$('<option/>').attr('value', currentMoment.format('h:mm a')).text(currentMoment.format('h:mm a')).appendTo($timeSelects);
			            	currentMoment.add('h', 1);
			            }
			            
			            //duration based comboboxes
			            var $durationSelects = $('#timedefaults-appointmentduration');
			            var currentMinutes = 0;
			            while (currentMinutes < 180) {
			            	var duration = Math.floor(currentMinutes / 60) + ' hr, ' + (currentMinutes % 60) + ' min';
			            	$('<option/>').attr('value', duration).text(duration).appendTo($durationSelects);
			            	currentMinutes += 15;
			            }

		        		//populate route settings
		        		RouteCalendar.defaultLocation = settings.RouteDefaults.defaultLocation ? JSON.parse(settings.RouteDefaults.defaultLocation) : null;
		        		$('#RouteMode').val(settings.RouteDefaults.mode || MA.defaults.routeOptions.TimeBasedOptions.Mode);
		        		$('#UnitType').val(settings.RouteDefaults.unit || MA.defaults.routeOptions.TimeBasedOptions.Unit);
		        		$('#timedefaults-appointmentduration').val(settings.RouteDefaults.duration || MA.defaults.routeOptions.TimeBasedOptions.AppointmentDuration);
		        		$('.timedefaults-routeduration').each(function () {
		        			$(this).find('.timedefaults-routestart').val(settings.RouteDefaults[$(this).attr('data-day') + 'Start'] || MA.defaults.routeOptions.TimeBasedOptions.Start);
		        			$(this).find('.timedefaults-routeend').val(settings.RouteDefaults[$(this).attr('data-day') + 'End'] || MA.defaults.routeOptions.TimeBasedOptions.End);
		        		});
		        		
		        		//default map settings
			            RouteCalendar.userSettings.defaultMapSettings = {};
			            if (response.record.MADefaultLatitude__c != null && response.record.MADefaultLongitude__c != null && response.record.MADefaultZoomLevel__c != null)
			            {
			            	try {
			            		RouteCalendar.userSettings.defaultMapSettings.center = new google.maps.LatLng(parseFloat(response.record.MADefaultLatitude__c), parseFloat(response.record.MADefaultLongitude__c));
			            		RouteCalendar.userSettings.defaultMapSettings.zoomLevel = parseInt(response.record.MADefaultZoomLevel__c);
			            		map.setCenter(RouteCalendar.userSettings.defaultMapSettings.center);
			            		map.setZoom(RouteCalendar.userSettings.defaultMapSettings.zoomLevel);
			            	}
			            	catch (err) { MA.log(err); }
			            }
		        	}
		        	catch (err) {
		        	
		        		RouteCalendar.userSettings = { defaultMapSettings: {} };
		        	
		        		//time based comboboxes
			            var $timeSelects = $('.timedefaults-routestart, .timedefaults-routeend');
			            var currentMoment = RouteCalendar.momentTZ().startOf('day');
			            var currentDay = currentMoment.day();
			            while (currentMoment.day() == currentDay) {
			            	$('<option/>').attr('value', currentMoment.format('h:mm a')).text(currentMoment.format('h:mm a')).appendTo($timeSelects);
			            	currentMoment.add('h', 1);
			            }
			            
			            //duration based comboboxes
			            var $durationSelects = $('#timedefaults-appointmentduration');
			            var currentMinutes = 0;
			            while (currentMinutes < 180) {
			            	var duration = Math.floor(currentMinutes / 60) + ' hr, ' + (currentMinutes % 60) + ' min';
			            	$('<option/>').attr('value', duration).text(duration).appendTo($durationSelects);
			            	currentMinutes += 15;
			            }
		        	
		        		//populate default route settings
		        		RouteCalendar.defaultLocation = null;
		        		$('#RouteMode').val(MA.defaults.routeOptions.TimeBasedOptions.Mode);
		        		$('#UnitType').val(MA.defaults.routeOptions.TimeBasedOptions.Unit);
		        		$('.timedefaults-routestart').val(MA.defaults.routeOptions.TimeBasedOptions.Start);
		        		$('.timedefaults-routeend').val(MA.defaults.routeOptions.TimeBasedOptions.End);
		        		$('#timedefaults-appointmentduration').val(MA.defaults.routeOptions.TimeBasedOptions.AppointmentDuration);
		        	}
		        	
		        	//date locale settings
		        	RouteCalendar.lang = '{!userLocale}'.substring(0, 2);
		        	moment.lang(RouteCalendar.lang);
		        	RouteCalendar.dayLabelFormat = moment('5/6/2000', 'l').month() == 4 ? 'ddd M/D' : 'ddd D/M';

		        	//draw calendar
		        	RouteCalendar.from(RouteCalendar.momentTZ().isoWeekday(1)).to(RouteCalendar.momentTZ().isoWeekday(5)).refreshDateRange();
		        }
		    });
		    
		    //handle collapsing/restoring
		    $('.panes').on('click', '.maincontent-toggle', function () {
		    	if (RouteCalendar.isCollapsed) { RouteCalendar.restore(); }
		    	else { RouteCalendar.collapse(); }
		    });

			//start with calendar
			MainContent.show('cal');

			//map
			map = new google.maps.Map(document.getElementById('map'), {
		        center: { lat: 36.98500309285596, lng: -97.8662109375},
		        zoom: 5,
		        panControl: false,
                zoomControl: false,
                mapTypeControl: false,
                streetViewControl: false
		    });

		    //remove standard POI functionality
		    map.setOptions({
		        styles: [
		            { featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'off' }] },
		            { featureType: 'transit', elementType: 'labels', stylers: [{ visibility: 'off' }] },
		            { featureType: 'landscape', elementType: 'labels', stylers: [{ visibility: 'off' }] }
		        ]
		    });

			//sliders
			$('.bxslider').data('bxslider', $('.bxslider').bxSlider({
				pager: false,
				controls: false,
				infiniteLoop: false
			}));

		});

		/* Namespace Functions */
		function addNamespace(namespace, obj)
  		{
   			//if there is no namespace, do nothing
   			if (namespace == '') { return obj; }
   
   			//try to add the namespace prefix to each field in the object
   			try
   			{
    			var namespacePrefix = namespace + '__';
    			switch (typeof obj)
    			{
     				case 'string':
      					if (obj.indexOf(namespacePrefix) != 0 && (obj.indexOf('__c', obj.length - 3) != -1 || obj.indexOf('__r', obj.length - 3) != -1)) {
       						obj = namespacePrefix + obj;
      					}
      					break;
     				case 'object':
      					$.each(obj, function (key, val) {
       						if (key.indexOf(namespacePrefix) != 0 && (key.indexOf('__c', key.length - 3) != -1 || key.indexOf('__r', key.length - 3) != -1)) {
        						obj[namespacePrefix + key] = val;
        						delete obj[key];
       						}
       						addNamespace(namespace, val);
      					});
      					break;
    			}
   			}
   			catch (err) { } //this is most likely due to a null value being passed.  in any case, returning the original objects seems the correct action if we can't manipulate it
   
   			//return the updated obj
   			return obj;
  		}
		function removeNamespace(namespace, obj)
		{
			try 
			{
				var namespacePrefix = namespace + '__';
				$.each(obj, function (key, val) {
					if (key.indexOf(namespacePrefix) == 0) {
						obj[key.replace(namespacePrefix, '')] = val;
						delete obj[key];
						
						//go recursive if this is an object
						if (obj[key.replace(namespacePrefix, '')] != null && typeof obj[key.replace(namespacePrefix, '')] == 'object') {
							removeNamespace(namespace, obj[key.replace(namespacePrefix, '')]);
						}
					}
					else if (typeof val == 'object') {
						removeNamespace(namespace, val);
					}
				});
			}
			catch (err) { }	//this is most likely due to a null value being passed.  in any case, returning the original objects seems the correct action if we can't manipulate it
			
			return obj;
		}
		
		/* Geocoding */
		function geocode(address, callback) 
		{
			MA.Geocoding.geocode({ address: address }, function (response) {
	            try {
	                callback(response.result);
	            }
	            catch (err) {
	                callback(false);
	            }
	        });
		}

		/* Coloring */
		function shadeColor(color, percent) {   
            var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) - amt, B = (num >> 8 & 0x00FF) - amt, G = (num & 0x0000FF) - amt;
            return "#" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
        }
        function unshadeColor(color, percent) {
        	var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) + amt, B = (num >> 8 & 0x00FF) + amt, G = (num & 0x0000FF) + amt;
            return "#" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
        }
        function isDark(color) {
        	var num = parseInt(color.slice(1),16);
        	return (num >> 16) + (num >> 8 & 0x00FF) + (num & 0x0000FF) < 225;
        }
		
		/* Tooltip Rendering Function */
		function extractTooltipValue(tooltipMetadata, event, noLinks)
        {
        	if (tooltipMetadata && event)
        	{
        		//default options
        		noLinks = noLinks || false;
        	
	        	//figure out the tooltip value
				var tooltipValue = tooltipMetadata.Accessible ? '' : 'Insufficient Privileges';
	           	var tooltipRefId;
	           	var options = {currency : '$'};
	       		if (tooltipMetadata.Accessible && tooltipMetadata.FieldName != null)
	   			{
	   				//is this a reference field?
		           	if (tooltipMetadata.FieldName.indexOf(".") > -1)
		           	{
		               	//yes, so split on the dot and make the value a link
		               	if (event[tooltipMetadata.FieldName.split(".")[0]] != null)
		               	{
							var fieldParts = tooltipMetadata.FieldName.split(".");
		                   	tooltipValue = event[tooltipMetadata.FieldName.split(".")[0]][tooltipMetadata.FieldName.split(".")[1]];
		                   	
		                   	if(!noLinks)
		                   	{
			                   	tooltipRefId = event[tooltipMetadata.RefFieldName.split(".")[0]][tooltipMetadata.RefFieldName.split(".")[1]];   
			                   	tooltipValue = '<a target="_blank" href="/' + tooltipRefId + '">' + tooltipValue + '</a>';
			                }
		               	}
		           	}
		           	else
		           	{
		           		//no, so just get the data
		               	tooltipValue = event[tooltipMetadata.FieldName];
		           	}
		           	
		           	//formatting for boolean values
		           	if (tooltipMetadata.DisplayType == 'BOOLEAN' && tooltipValue == "")
		           	{
		           		tooltipValue = 'False';
		           	}
		           	
		            //if we have a tooltip value, format it
		           	if (tooltipValue != "")
		           	{
		           		if (noLinks)
		           		{
			               	//we have special formatting for certain field types (i think this is redoing some of the work above and can be cleaned up a bit)
				           	if (tooltipMetadata.DisplayType == 'URL')
				           	{
				           		tooltipValue = event[tooltipMetadata.FieldName];
				           	}
				           	else if (tooltipMetadata.DisplayType == 'REFERENCE')
				           	{
				           		tooltipValue = event[tooltipMetadata.FieldName.split(".")[0]][tooltipMetadata.FieldName.split(".")[1]];
				           	}
				           	else if (tooltipMetadata.DisplayType == 'BOOLEAN')
				           	{
								tooltipValue = event[tooltipMetadata.FieldName] ? 'True' : 'False';			           	
							}
				           	else
				           	{
				           		tooltipValue = FormatsObjectValue(tooltipValue, tooltipMetadata.DisplayType, tooltipRefId, options);
				           	}
				        }
				        else
				        {
				        	tooltipValue = FormatsObjectValue(tooltipValue, tooltipMetadata.DisplayType, tooltipRefId, options);
				        }
		           	}
		       	}
		       	
		       	//return the value
		       	return tooltipValue;
		    }
		    
		    //just return blank if we weren't passed the proper data
		    return '';
        }
        function FormatsObjectValue(v, type, RefId, options)
		{
		    if(v == null) v = "";
		    if(v != "")
		    {
		        type = type.toLowerCase();
		        if(type == "boolean")
		        {
		        	//this might be boolean or it might be a string
		        	if (typeof v == 'string') {
		        		v = v.toUpperCase();
		        	}
		        	else {
		        		v = (!v) ? "FALSE" : "TRUE";
		        	}
		        }
		        else if(type == "double")
		        {
		            v = isNaN(v) || v === '' || v === null ? 0 : v;
		            
		            //var n = v < 0 ? true : false;
		            var a = parseFloat(v).toFixed(2).toString().split(".");
		            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
		                        
		            if(parseFloat(a[1]) > 0)
		            {
		                v = (b + "." + a[1]); 
		            }
		            else
		            {
		                v = b; 
		            }           
		        }
		        else if(type == "currency")
		        {
		            v = isNaN(v) || v === '' || v === null ? 0.00 : v;
		            var userCurrency = '';
		            
		            //show user currency in parentheses
		            if(options.conversionRate) {
		            	userCurrency = v/options.conversionRate;
		            	var c = parseFloat(userCurrency).toFixed(2).toString().split(".");
		            	var d = c[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
		            	
		            	userCurrency = ' (' + $('.settings-wrapper').data('userCurrency') + ' ' + d + "." + c[1] + ')';
		            }
		            
		            //var n = v < 0 ? true : false;
		            var a = parseFloat(v).toFixed(2).toString().split(".");
		            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
		            
		            v = (options.currency + " " + b + "." + a[1] + userCurrency);
		            
		            
		            /*
		            v = parseFloat(v).toFixed(2);
		            
		            for (var i = 0; i < Math.floor((v.length - (1 + i)) / 2.5); i++){
		                if(v.indexOf('.') == v.length - (4 * i + 3))
		                {
		                    v = v.substring(0, v.length - (4 * i + 3) ) + v.substring(v.length - (4 * i + 3));
		                }
		                else
		                {
		                    v = v.substring(0, v.length - (4 * i + 2) ) + "," + v.substring(v.length - (4 * i + 2));
		                }
		            }
		            v = "$" + v;
		            */
		        }
		        else if(type == "date")
		        {
		            try {
		            	var formatedDate = formatUserLocaleDate({datepicker: true}).replace('mm','MM').replace('dd','DD').replace('yy','YYYY');
		            	v = RouteCalendar.moment(v).format(formatedDate);
		            }
		            catch (e)
		            {
		            	try {
		            		v = RouteCalendar.moment(v).format('M/D/YYYY');
		            	}
		            	catch (err) { v = ''; }
		            }
		        }
		        else if(type == "datetime")
		        {
		        	try {
						//format date to display correct user locale
						var formatedDate = formatUserLocaleDate({moment: true});
						v = RouteCalendar.momentTZ(v).format(formatedDate);
		            }
		            catch (e)
		            {
		            	try {
		            		v = RouteCalendar.momentTZ(v).format('M/D/YYYY h:mm a');
		            	}
		            	catch (err) { v = ''; }
		            }
		        }
		        else if (type == "percent")
		        {
		            v = (v != "") ? v + "%" : "";
		        }
		        else if (type == "url")
		        {
		            if (v.indexOf("http://") > -1 || v.indexOf("https://") > -1)
		            {
		                v = '<a href="' + v + '" target=_blank>' + v + "</a>";
		            }
		            else
		            {
		                v = '<a href="http://' + v + '" target=_blank>' + v + "</a>";
		            }
		        }
		        else if(type == "reference")
		        {
		            v = '<a href="/' + RefId + '" target=_blank>' + v + "</a>";
		        }
		        else if (type == "textarea")
		        {
		        	v = v.replace(/\n/g, '<br />');
		        }
		        /*
		        else
		        {
		            v = type;
		        }
		        */
		    }
		    
		    return v;
		}
		var displayTypeMetadata = {
        	'STRING': {
        		editType	: 'string',
        		renderType	: 'text'
        	},
        	'EMAIL': {
        		editType	: 'string',
        		renderType	: 'text'
        	},
        	'PHONE': {
        		editType	: 'string',
        		renderType	: 'text'
        	},
        	'URL': {
        		editType	: 'string',
        		renderType	: 'html'
        	},
        	'DOUBLE': {
        		editType	: 'number',
        		renderType	: 'text'
        	},
        	'CURRENCY': {
        		editType	: 'number',
        		renderType	: 'text'
        	},
        	'TEXTAREA': {
        		editType	: 'textarea',
        		renderType	: 'text'
        	},
        	'PICKLIST': {
        		editType	: 'picklist',
        		renderType	: 'text'
        	},
        	'MULTIPICKLIST': {
        		editType	: 'multipicklist',
        		renderType	: 'text'
        	},
        	'BOOLEAN': {
        		editType	: 'boolean',
        		renderType	: 'text'
        	},
        	'REFERENCE': {
        		editType	: 'reference',
        		renderType	: 'html'
        	},
        	'DATE': {
        		editType	: 'date',
        		renderType	: 'text'
        	},
        	'DATETIME': {
        		editType	: 'datetime',
        		renderType	: 'text'
        	}
        };

		//helper method for extracting nested objects using a dot notation field name
		function extractValue(obj, field)
		{
			try {
				var fieldParts = field.split('.');
				var currentObj = obj;
				for (var i = 0; i < fieldParts.length; i++)
				{
					currentObj = currentObj[fieldParts[i]];
				}
				return (typeof currentObj == 'undefined' || currentObj == null) ? '' : currentObj;
			}
			catch (err) { }
			
			return '';
		}

	</script>
	
	<!-- Load Mask -->
	<div id='all-loader'>
		<ul class='barloader'>
			<li></li><li></li><li></li><li></li><li></li><li></li>
		</ul>
	</div>

	<!-- Toolbar -->
	<div class='toolbar'>

        <!-- Pane Nav -->
        <div class='toolbar-btn-group' style='float: left;'>
        	<div class='toolbar-btn icon-left maincontent-toggle-pane' data-pane='cal' onclick="MainContent.show('cal');">
        		<label>{!$Label.MA_Calendar}</label>
        		<div class='toolbar-btn-icon icon-cal'></div>
        	</div>
        	<div class='toolbar-btn icon-left maincontent-toggle-pane' data-pane='list' onclick="MainContent.show('list');">
        		<label>{!$Label.MA_List}</label>
        		<div class='toolbar-btn-icon icon-list'></div>
        	</div>
        	<div class='toolbar-btn icon-left maincontent-toggle-pane' data-pane='settings' onclick="MainContent.show('settings');">
        		<label>{!$Label.MASettings_Settings}</label>
        		<div class='toolbar-btn-icon icon-gear'></div>
        	</div>
        </div>
        
        <!-- Actions -->
        <div class='toolbar-btn-group' style='float: left; margin-left: 10px;'>
        	<div class='toolbar-btn' onclick="RouteCalendar.optimizeEvents();">
        		<label>{!$Label.MA_Optimize}</label>
        	</div>
        	<div class='toolbar-btn' onclick="window.location = '/apex/MapAnything';">
        		<label>{!$Label.MA_Cancel}</label>
        	</div>
        	<div class='toolbar-btn' onclick="RouteCalendar.saveEvents();">
        		<label>{!$Label.MA_Save}</label>
        	</div>
        </div>

		<!-- Right Buttons -->
		<div class='toolbar-btn-group' style='float:right;'>
			<div class='toolbar-btn icon-only' onclick="RouteCalendar.prev();">
        		<div class='toolbar-btn-icon icon-arrow-l'></div>
        	</div>
        	<div class='toolbar-btn' onclick="RouteCalendar.updateDateRange();">
        		<label id='daterange-display' style='display: inline-block; text-align: center; width: 200px;'>{!$Label.MA_Loading}...</label>
        	</div>
        	<div class='toolbar-btn icon-only' onclick="RouteCalendar.next();">
        		<div class='toolbar-btn-icon icon-arrow-r'></div>
        	</div>
        </div>

	</div>

	<!-- Map -->
	<div id='map'>
	
		<!-- Load Mask -->
		<div id='map-loader'>
			<ul class='barloader'>
				<li></li><li></li><li></li><li></li><li></li><li></li>
			</ul>
		</div>
		
		<!-- Logo -->
    	<img src="{!URLFOR($Resource.MapAnything, 'mapAnythingSettingsLogo.png')}" style='position: absolute; right: 10px; top: 10px; height: 20px; z-index: 2;' />
		
	</div>
	
	<!-- Main Content -->
	<div class='panes'>
	
		<!-- Calendar -->
		<div class='pane' data-pane='cal'>
			<div class='cal-header'>
				<div class='cal-dayrow'><div class='maincontent-toggle'></div></div>
				<div class='cal-startrow'><div class='cal-startend-all'><div class='icon'></div></div></div>
			</div>
			<div class='cal'>
				<div class='cal-events'></div>
				<div class='cal-timeblocks'></div>
				<div class='cal-timerows'></div>
			</div>
			<div class='cal-footer'>
				<div class='cal-endrow'><div class='cal-startend-all'><div class='icon'></div></div></div>
			</div>
		</div>
		
		<!-- List -->
		<div class='pane' data-pane='list'>
			<div class='list-header'><div class='maincontent-toggle'></div><div class='list-headerlabel'>{!$Label.MA_Unassigned}</div><div class='list-headerlabel'>{!$Label.MA_Assigned}</div></div><!-- Bad spacing is to avoid inline-block spacing.  Looking for better solutions. -->
			<div class='list'><div class='list-leftspacer'></div><div class='list-unassigned'><div class='events'></div></div><div class='list-assigned'></div></div><!-- Bad spacing is to avoid inline-block spacing.  Looking for better solutions. -->
		</div>
		
		<!-- Settings -->
		<div class='pane' data-pane='settings'>
			<div class='settings-header'><div class='maincontent-toggle'></div><div class='settings-headerlabel'>{!$Label.MASettings_Settings}</div></div>
			<div class='settings'><div class='settings-leftspacer'></div><div class='settings-content'>

				<!-- Directions Defaults -->
				<h2>{!$Label.MARoutes_Directions_Defaults}</h2>
			
				<!-- Routing Options (this was just copied from the old UI and needs to be reworked) -->
	            <select id="RouteMode">
                    <option value="Quickest">{!$Label.MARoutes_Quickest}</option>
                    <option value="Shortest">{!$Label.MARoutes_Shortest}</option> 
                    <!--<option value="AvoidMotorway">{!$Label.MARoutes_Avoid_Motorway}</option>-->
                    <option value="Walk">{!$Label.MARoutes_Walk}</option>
                    <option value="Bicycle">{!$Label.MARoutes_Bicycle}</option>
                    <!--<option value="SpeedLimited">{!$Label.MARoutes_Speed_Limited}</option>-->
                    <!--<option value="Green">{!$Label.MARoutes_Green}</option>-->
                </select>
			
	            <select id="UnitType">
                	<option value="mi">{!$Label.MARoutes_Miles}</option>
                	<option value="km">{!$Label.MARoutes_Kilometers}</option>
                </select> 
				
				<!-- Time Defaults -->
				<div class='timedefaults'>
					<h2>{!$Label.MARoutes_Time_Defaults}</h2>
					<div>
						<div>Route Durations</div>
						<div class='timedefaults-routeduration' data-day='Sunday'><label>{!$Label.MA_Sunday}</label><select class='timedefaults-routestart'></select> to <select class='timedefaults-routeend'></select></div>
						<div class='timedefaults-routeduration' data-day='Monday'><label>{!$Label.MA_Monday}</label><select class='timedefaults-routestart'></select> to <select class='timedefaults-routeend'></select></div>
						<div class='timedefaults-routeduration' data-day='Tuesday'><label>{!$Label.MA_Tuesday}</label><select class='timedefaults-routestart'></select> to <select class='timedefaults-routeend'></select></div>
						<div class='timedefaults-routeduration' data-day='Wednesday'><label>{!$Label.MA_Wednesday}</label><select class='timedefaults-routestart'></select> to <select class='timedefaults-routeend'></select></div>
						<div class='timedefaults-routeduration' data-day='Thursday'><label>{!$Label.MA_Thursday}</label><select class='timedefaults-routestart'></select> to <select class='timedefaults-routeend'></select></div>
						<div class='timedefaults-routeduration' data-day='Friday'><label>{!$Label.MA_Friday}</label><select class='timedefaults-routestart'></select> to <select class='timedefaults-routeend'></select></div>
						<div class='timedefaults-routeduration' data-day='Saturday'><label>{!$Label.MA_Saturday}</label><select class='timedefaults-routestart'></select> to <select class='timedefaults-routeend'></select></div>
					</div>
					<div style="display: none;">
						<div>{!$Label.MARoutes_Appointment_Duration}</div>
						<select id='timedefaults-appointmentduration'></select>
					</div>
				</div>

			</div></div>
		</div>
	
	</div>

	<!-- Dialogs -->
	<div id='dialogs' style='display: none;'>

		<!-- Waypoint -->
		<div id='dialog-waypoint' class='dialog' style='width: 700px;'>
			<div class='dialog-header'>{!$Label.MA_Add_Edit_Waypoint}</div>

			<div class='dialog-content'>
				<table>
					<tr>

						<!-- Record Info -->
						<td>
							<div id='waypoint-title'></div>
							<div id='waypoint-address'></div>

							<table id='waypoint-tooltips'></table>

							<div class='field' data-type='text'>
								<label>{!$Label.MA_Notes}:</label>
								<textarea id='waypoint-notes'></textarea>
							</div>
						</td>

						<!-- Time Info -->
						<td>
							<div class='field' data-type='checkbox'>
								<label>{!$Label.MA_Flexible}</label>
								<input type='checkbox' id='waypoint-flexible' />
							</div>
							<div class='field' data-type='datetime'>
								<div>
									<label>{!$Label.MA_Day}:</label>
									<input type='date' id='waypoint-day' />
								</div><div>
									<label>{!$Label.MA_Time}:</label>
									<input type='time' id='waypoint-time' />
								</div>
							</div>
							<div class='field' data-type='picklist'>
								<label>{!$Label.MA_Duration}:</label>
								<select id='waypoint-duration'>
									<option value="0 hr, 0 min">0 hr, 0 min</option>
									<option value="0 hr, 15 min">0 hr, 15 min</option>
									<option value="0 hr, 30 min">0 hr, 30 min</option>
									<option value="0 hr, 45 min">0 hr, 45 min</option>
									<option value="1 hr, 0 min">1 hr, 0 min</option>
									<option value="1 hr, 15 min">1 hr, 15 min</option>
									<option value="1 hr, 30 min">1 hr, 30 min</option>
									<option value="1 hr, 45 min">1 hr, 45 min</option>
									<option value="2 hr, 0 min">2 hr, 0 min</option>
									<option value="2 hr, 15 min">2 hr, 15 min</option>
									<option value="2 hr, 30 min">2 hr, 30 min</option>
									<option value="2 hr, 45 min">2 hr, 45 min</option>
								</select>
							</div>
						</td>

					</tr>
				</table>
			</div>

			<div class='dialog-footer'>
				<table class='dialog-buttons'>
					<tr>
						<td><button class='btn delete horizontal' onclick="Dialog.delete(true);">{!$Label.MA_Delete}<div></div></button></td>
						<td><button class='btn remove horizontal' onclick="Dialog.delete(false);">{!$Label.MA_Remove}<div></div></button></td>
						<td><button class='btn gray' onclick="Dialog.hide();">{!$Label.MA_Cancel}</button></td>
						<td><button class='btn blue' onclick="Dialog.confirm();">{!$Label.MA_Save}</button></td>
					</tr>
				</table>
			</div>
		</div>

		<!-- Date Range -->
		<div id='dialog-daterange' class='dialog'>
			<div class='dialog-header'>{!$Label.MA_Update_Date_Range}</div>

			<div class='dialog-content'>
				<div class='field' data-type='date'>
					<label>{!$Label.MA_From}:</label>
					<input type='date' id='daterange-from' />
				</div>
				<div class='field' data-type='date'>
					<label>{!$Label.MA_To}:</label>
					<input type='date' id='daterange-to' />
				</div>
			</div>

			<div class='dialog-footer'>
				<table class='dialog-buttons'>
					<tr>
						<td><button class='btn gray' onclick="Dialog.hide();">{!$Label.MA_Cancel}</button></td>
						<td><button class='btn blue' onclick="Dialog.confirm();">{!$Label.MA_Save}</button></td>
					</tr>
				</table>
			</div>

		</div>

		<!-- Start/End Location -->
		<div id='dialog-startendlocation' class='dialog' style='max-width: 500px;'>
			<div class='dialog-header'>{!$Label.MA_Add_Start_End_Location}</div>

			<div class='dialog-content'>

				<ul id='startendlocation-slider' class='bxslider'>
				
					<!-- Main Options -->
					<li id='startendlocation-main'>

						<!-- Location Options -->
						<div class='fieldset-header'>{!$Label.MA_Select_A_Location}</div>
						<div id='startendlocation-favorite' class='field' data-type='radio' onclick="$('.bxslider').data('bxslider').goToSlide(1);">
							<label>{!$Label.MA_Favorite}</label>
							<input type='radio' name='locationtype' value='favorite' />
						</div>
						<div id='startendlocation-address' class='field' data-type='radio' onclick="$('.bxslider').data('bxslider').goToSlide(2);">
							<label>{!$Label.MA_Address}</label>
							<input type='radio' name='locationtype' value='address' />
						</div>

						<!-- Save Options -->
						<div class='fieldset-header'>{!$Label.MA_Select_Save_Options}</div>
						<table style='width: 100%; border-spacing: 0;'>
							<tr>
								<td>
									<div class='field' data-type='checkbox'>
										<label>{!$Label.MA_Starting_Location}</label>
										<input type='checkbox' class='startinglocation' />
									</div>
								</td>
								<td>
									<div class='field' data-type='checkbox'>
										<label>{!$Label.MA_Ending_Location}</label>
										<input type='checkbox' class='endinglocation' />
									</div>
								</td>
							</tr>
						</table>
						<div class='field' data-type='checkbox'>
							<label>{!$Label.MA_Set_As_Default_Location}</label>
							<input type='checkbox' id='startendlocation-defaultlocation' />
						</div>

					</li>
					
					<!-- Favorite Selection -->
					<li id='startendlocation-favorite-selection'>
						<div class='mlist' data-currentId='Root'>
							<div class='mlist-header'>
								{!$Label.MA_Select_A_Favorite}
								<div class='mlist-icon prev'></div>
								<div class='mlist-icon back' style='display: none;'></div>
							</div>
							<div class='mlist-item mlist-folder' data-id='PersonalRoot' data-type='Personal'>
								{!$Label.MA_Personal}
								<div class='mlist-icon folder'></div>
							</div>
							<div class='mlist-item mlist-folder' data-id='CorpRoot' data-type='Corporate'>
								{!$Label.MA_Corporate}
								<div class='mlist-icon folder'></div>
							</div>
						</div>
					</li>
					
					<!-- Address Selection -->
					<li id='startendlocation-address-selection'>
						<div class='mlist'>
							<div class='mlist-header'>
								<input type='text' id='startendlocation-address-search' style='width: 100%; height: 18px; box-sizing: border-box;' />
								<div class='mlist-icon prev'></div>
							</div>
							<div class='mlist-item mlist-blank'>
								{!$Label.MA_SelectAddress_Watermark}
							</div>
						</div>
					</li>
					
				</ul>

			</div>

			<div class='dialog-footer'>
				<table class='dialog-buttons'>
					<tr>
						<td><button class='btn blue' onclick="Dialog.confirm();">{!$Label.MA_Set_Location}</button></td>
					</tr>
					<tr>
						<td><button class='btn gray' onclick="Dialog.hide();">{!$Label.MA_Cancel}</button></td>
					</tr>
				</table>
			</div>

		</div>
		
		<!-- Add/Edit Time Block -->
		<div id='dialog-timeblock' class='dialog' style='width: 300px;'>
			<div class='dialog-header'>{!$Label.MA_Add_Edit_Time_Block}</div>

			<div class='dialog-content'>
			
				<!-- Name -->
				<div class='field' data-type='text'>
					<label>{!$Label.MA_Name}:</label>
					<input type='text' id='timeblock-name' />
				</div>
				
				<!-- Day -->
				<div class='field' data-type='date'>
					<label>{!$Label.MA_Day}:</label>
					<input type='date' id='timeblock-day' />
				</div>
				
				<!-- Time Options -->
				<div class='field' data-type='checkbox' style='margin-top: 15px;'>
					<label>{!$Label.MA_All_Day_Event}</label>
					<input type='checkbox' id='timeblock-allday' onchange="$(this).closest('.field').next().toggle(!$(this).is(':checked'));" />
				</div>
				<table>
					<tr>
						<td style='border: none; padding: 0;'>
							<div class='field' data-type='time'>
								<label>{!$Label.MA_Start}:</label>
								<input type='time' id='timeblock-start' />
							</div>
						</td>
						<td style='border: none; padding: 0;'>
							<div class='field' data-type='time'>
								<label>{!$Label.MA_End}:</label>
								<input type='time' id='timeblock-end' />
							</div>
						</td>
					</tr>
				</table>
			
			</div>
			
			<div class='dialog-footer'>
				<table class='dialog-buttons'>
					<tr>
						<td><button class='btn blue' onclick="Dialog.confirm();">{!$Label.MA_Save}</button></td>
					</tr>
					<tr>
						<td><button class='btn gray' onclick="Dialog.hide();">{!$Label.MA_Cancel}</button></td>
					</tr>
					<tr>
						<td><button class='btn delete' onclick="Dialog.delete();">{!$Label.MA_Delete}<div></div></button></td>
					</tr>
				</table>
			</div>
		
		</div>
		
		<!-- Save Route -->
		<div id='dialog-saveroute' class='dialog'>
			<div class='dialog-header'>{!$Label.MA_Save_Route}</div>

			<div class='dialog-content'>
			
				<!-- Name -->
				<div class='field' data-type='text'>
					<label>{!$Label.MA_Route_Name}:</label>
					<input type='text' id='saveroute-name' />
				</div>
			
			</div>
			
			<div class='dialog-footer'>
				<table class='dialog-buttons'>
					<tr>
						<td><button class='btn blue' onclick="Dialog.confirm();">{!$Label.MA_Save}</button></td>
					</tr>
					<tr>
						<td><button class='btn gray' onclick="Dialog.hide();">{!$Label.MA_Cancel}</button></td>
					</tr>
				</table>
			</div>
		
		</div>
		
		<!-- Confirm -->
		<div id='dialog-confirm' class='dialog confirm-dialog'>
		
			<div class='dialog-content'>
				<div class='graphic-confirm'></div>
				<div class='message'></div>
			</div>
		
			<div class='dialog-footer'>
				<table class='dialog-buttons'>
					<tr>
						<td><button class='btn blue' onclick="Dialog.confirm();">Confirm</button></td>
					</tr>
					<tr>
						<td><button class='btn gray' onclick="Dialog.hide();">{!$Label.MA_Cancel}</button></td>
					</tr>
				</table>
			</div>
		
		</div>
		
		<!-- Loading -->
		<div id='dialog-loading' class='dialog'>
			<div class='dialog-header'></div>
			<div class='dialog-content'>
				<ul class='barloader'>
					<li></li><li></li><li></li><li></li><li></li><li></li>
				</ul>
			</div>
		</div>
		
	</div>
	
	<!-- Templates -->
	<div id='templates' style='display: none;'>
	
		<!-- Day Label -->
		<div class='cal-daylabel'>
			<div class='cal-daylabel-lock'>
				<div class='flaticon lock' data-status='unlocked'><div></div></div>
			</div>
			<div class='cal-daylabel-text'></div>
			<div class='cal-daylabel-erase'>
				<div class='flaticon erase'><div></div></div>
			</div>
		</div>
		
		<!-- List Event -->
		<div class='list-event'>
			<table>
				<tr>
					<td class='index-cell'>
						<div class='index'></div>
					</td>
					<td class='info-cell'>
						<div class='info'>
							<div class='title'></div>
							<div class='address'></div>
							<div class='time'></div>
						</div>
					</td>
					<td class='remove-cell'>
						<div class='remove'><div></div></div>
					</td>
				</tr>
			</table>
		</div>

		<!-- SVG Marker -->
        <svg class='svg-marker' width="28" height="42" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
			<metadata>Created by potrace 1.11, written by Peter Selinger 2001-2013</metadata>
			<defs>
				<linearGradient id="svg_1___INDEX__" x2="0.545593" y2="0.28125" x1="0.529968" y1="0.753906">
					<stop stop-color="__GRADIENT_ONE__" stop-opacity="0.996094" offset="0"/>
					<stop stop-color="__GRADIENT_TWO__" stop-opacity="0.992188" offset="1"/>
				</linearGradient>
			</defs>
			<g>
				<path transform="rotate(180 13.5708 20.8542)" fill="url(#svg_1___INDEX__)" d="m6.300003,37.5c-4.300003,-3.399994 -5.900002,-8.5 -4.300003,-13.699997c1.700005,-5.800003 11.100006,-23.100006 12,-22.100006c1.400009,1.5 10.800003,20.800003 11.5,23.5c1,3.800003 -1.099991,9.300003 -4.599991,12.300003c-4.100006,3.400009 -10.200012,3.400009 -14.600006,0z" stroke="__CIRCLE_STROKE__"/>
				<circle stroke="__CIRCLE_STROKE__" r="4.5" cy="14" cx="13.5" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__"/>
			</g>
		</svg>
		
	</div>

</apex:page>