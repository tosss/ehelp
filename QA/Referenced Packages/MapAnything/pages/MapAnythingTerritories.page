<apex:page title="MapAnything Territories" controller="sma.MapAnythingBaseObjects" setup="true">
	
	<!-- jQuery -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/jquery-1.7.1.min.js')}"></script>
    
    <!-- jQuery UI -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.min.js')}"></script>
	<link rel='stylesheet' type='text/css' href="{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.css')}"></link>
	
	<!-- jsTree -->
	<script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'jstree/jquery.jstree2.js')}"></script>
	
	<!-- Combobox -->
	<script type='text/javascript' src="{!URLFOR($Resource.QueryEditor, 'js/combobox/jquery.combobox.js')}"></script>
    <link rel='stylesheet' type='text/css' href="{!URLFOR($Resource.QueryEditor, 'js/combobox/jquery.combobox.css')}"></link>
	
	<!-- Moment (date parsing) -->
    <script src="{!URLFOR($Resource.MapAnything, 'js/moment.js')}" type="text/javascript"></script>
	
	<!-- jQuery Multiselect (depends on jQuery UI) -->
    <script src="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.min.js')}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.filter.js')}" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.css')}" />
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.filter.css')}" />
	
	<!-- Date JS -->
    <script type='text/javascript' src="{!URLFOR($Resource.AdminSettings, 'js/date.js')}"></script>
    
    <!-- JS -->
    <c:MA />
    <c:MATerritoryTree />
    <c:JSHelperFunctions />
    <script type='text/javascript'>
    
    var globalIndex = 0;        //this is used to generate unique names for elements like radio buttons.  hoping to replace this with a nice form plugin
    
    	//onready
		$(function () {
		
			/************************************
			*	Territory Tree
			************************************/
			
			//init the territory tree
			$('.territory-tree').MATerritoryTree().bind({
			
				//handle selecting a node
				'MATerritoryTree.select': function (event, data) {
					if (data.id != 'Territories') {
						
						//send request for territory info
						$.ajax({
							url: 'MATerritoryAJAXResources?securityToken={!securityToken}&action=getTerritory',
					        type: 'POST',
					        dataType: 'JSON',
					        data: { id: data.id },
					        success: function (response) 
					        {
					        	//remove namespaces
					        	$.each(response.data.collections, function (index, collection) {
					        		removeNamespace('{!namespace}', collection);
					        	});
					        	$.each(response.data.contents, function (index, content) {
					        		removeNamespace('{!namespace}', content);
					        	});
					        	removeNamespace('{!namespace}', response.data.territory);
					        	
					        
					        	if(response.data.contents[0].Territories__r == null)
					        	{
					        		$('#GeneralInfo').hide();
					        		$('#TerritoryEditor').fadeIn(500);
						        	$('#SpatialGeometry .geometry-row').remove();
						        	$('#Collections .collection-row').remove();
						        	if(response.data.territory.Geometries__r != null)
						        	{
						        		$('#SpatialGeometry .geometry-instructions').hide();
						        		$('#SpatialGeometry .territory-table').fadeIn(400);
							        	//populate spatial geometry
							        	$.each((response.data.territory.Geometries__r.records || []), function (index, geometry) {
							        		var $row = $('#Templates .geometry-row').clone();
							        		$row.find('.name').text(geometry.Name);
							        		$row.find('.info').text(geometry.Description__c);
							        		$row.find('.delete-geometry').attr('data-id', geometry.Id);
							        		$row.appendTo($('#SpatialGeometry .territory-table'));
							        	});
							        }
							        else
							        {
							        	$('#SpatialGeometry .territory-table').hide();
							        	$('#SpatialGeometry .geometry-instructions').fadeIn(400);
							        }
							        if(response.data.collections.length != 0)
							        {
							        	//populate collections
							        	$('#Collections .collection-instructions').hide();
							        	$('#Collections .collection-table').fadeIn(400);
							        	$.each(response.data.collections, function (index, collection)
							        	{
							        		var $row = $('#Templates .collection-row').clone();
							        		if(collection.FieldUpdates__r != null)
							        		{
							        			$row.find('.updates').text(collection.FieldUpdates__r.totalSize);
							        		}
							        		else
							        		{
							        			$row.find('.updates').text('0');
							        		}
								        	$row.find('.name').text(collection.Name);
								        	$row.find('.object').text(collection.BaseObject__r.Name);
								        	$row.find('.delete-collection').attr('data-id', collection.Id);
								        	$row.appendTo($('#Collections .collection-table'));
							        	});
							        }
							        else
							        {
							        	$('#Collections .collection-table').hide();
							        	$('#Collections .collection-instructions').fadeIn(400);
							        }
							    }
							    else
				        		{
				        			$('#TerritoryEditor').hide();
				        			$('#GeneralInfo').fadeIn(500);
				        		}
					        	
					        },
					        error: function (response) { MALog('Error getting territory details: ' + response.details); }
					        
						});
					}
					else
					{
						$('#TerritoryEditor').hide();
				        $('#GeneralInfo').fadeIn(500);
					}
					//click folder to open tree
					if($('.territory-tree').jstree('get_selected').closest('li').hasClass('jstree-closed'))
                    {
                        $('.territory-tree').jstree('get_selected').find('ins:first').click();
                    }
				}
			});
			
			/***************************************
			*	Territory Editor
			****************************************/
			
			//handle clicking to add spatial geometry
			$('#SpatialGeometry button').click(function () {
				launchPopup($('#SpatialGeometryPopup'), 
					{
					minWidth: '500px',
					buttons: {
						'Save': function () {
							if($('#SpatialGeometryPopup .geometry-name').val() == '' || $('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect('widget').find('input[type="checkbox"]:checked').length == 0)
							{
								alert('All areas must be completed before saving');
							}
							else
							{
								saveGeometry(); 
							}
						},
						'Close': function () { 
							hidePopup($('#SpatialGeometryPopup'));
							$('#SpatialGeometryPopup .geometry-wrapper').find('.selected').removeClass('selected');
		                	$('#SpatialGeometryPopup .single-select-wrapper').remove();
		                	$('#SpatialGeometryPopup .geometry-table-select').remove();
		                	$('#SpatialGeometryPopup .geometry-name').val('');
		                	$('#SpatialGeometryPopup .list-sub1 .geometry-instructions').remove();
						}
					}
				});
			});
			
			//handle clicking to add collections
			$('#Collections button').click(function () {
				launchPopup($('#CollectionPopup'), 
					{buttons: {
						'Save': function () {
							saveCollection();
						},
						'Close': function () { 
							hidePopup($('#CollectionPopup'));
							clearCollection();
						}
					}
				});
				//grab baseObject and Fields
				collectionInfo();
			});
			
			//init combobox
			$('#CollectionPopup .combobox').combobox();
			
			//handle selecting main spatial geometry
			$('#SpatialGeometryPopup .list-main .geometry-wrapper').on('click', 'div', function()
			{
				if (!$(this).is('.selected')) {
					$('.list-main .geometry-wrapper div').removeClass('selected');
					$(this).addClass('selected');
				}
				var mainSelect = $('#SpatialGeometryPopup .list-main .geometry-wrapper').find('.selected').attr('data-id');
				PopulateMainSpatialGeometry (mainSelect);
			});
			
			//handle selecting second spatial geometry
			$('#SpatialGeometryPopup .list-sub1').on('change', '.geometry-single-select', function()
			{
				var sub1Select = $('#SpatialGeometryPopup .list-sub1 .geometry-single-select').val();
				PopulateSub1SpatialGeometry (sub1Select);
			});
			
			//Remove Filters on base object change and repopulate
            $('#CollectionPopup').on('change', '.collection-baseobject-select', function () 
            {
                clearFilters ();
                if($('#CollectionPopup .collection-baseobject-select').next().find('input').val() != '')
                {
	                //Populate Field Updates
					$('.collection-fieldupdate-territory').empty();
					$.ajax({
		               url: "/apex/QueryBuilderAPIBeta?securityToken={!securityToken}&action=getFilter&baseObject=::baseObject::&fieldName=::fieldName::&parentFieldName=::parentFieldName::&grandparentFieldName=::grandparentFieldName::&core.apexpages.devmode.url=0"
		                       .replace('::baseObject::', $('#CollectionPopup .collection-baseobject-select').val())
		                       .replace('::fieldName::', '' )
		                       .replace('::parentFieldName::', '' )
		                       .replace('::grandparentFieldName::', '' ),
		               type: 'POST',
		               dataType: 'JSON',
		               success: function (response)
		               {
		               		$.each(response.fieldOptions, function (index, options)
		               		{
		               			$('<option></option>').attr('value', options.value).text(options.label).appendTo($('#CollectionPopup .collection-fieldupdate-territory'));
		               		});
		               }
					});
				}
            });
			
			//field update delete link
			$('#CollectionPopup').on('click', '.collection-fieldupdate-row .deletelink', function () 
            {
                $(this).closest('.collection-fieldupdate-row').slideUp(
                    500, 
                    function () { 
                        $(this).remove();
                    }
                ); 
            });
            
            //field update add link
			$('#CollectionPopup').on('click', '.collection-fieldupdate-add', function () 
            {
            	var $Row = $('#Templates .collection-fieldupdate-row.template').clone().removeClass('template');
            	$Row.appendTo('.collection-fieldupdate-table tbody');
            	//Populate Field Updates
				//$('.collection-fieldupdate-territory').empty();
				$.ajax({
	               url: "/apex/QueryBuilderAPIBeta?securityToken={!securityToken}&action=getFilter&baseObject=::baseObject::&fieldName=::fieldName::&parentFieldName=::parentFieldName::&grandparentFieldName=::grandparentFieldName::&core.apexpages.devmode.url=0"
	                       .replace('::baseObject::', $('#CollectionPopup .collection-baseobject-select').val())
	                       .replace('::fieldName::', '' )
	                       .replace('::parentFieldName::', '' )
	                       .replace('::grandparentFieldName::', '' ),
	               type: 'POST',
	               dataType: 'JSON',
	               success: function (response)
	               {
	               		$('<option></option>').attr('value', 'none').text('--None--').appendTo($Row.find('.collection-fieldupdate-territory'));
	               		$.each(response.fieldOptions, function (index, options)
	               		{
	               			$('<option></option>').attr('value', options.value).text(options.label).appendTo($Row.find('.collection-fieldupdate-territory'));
	               		});
	               		$Row.find('.collection-fieldupdate-territory').val('option:first').next().find('input').val($Row.find('.collection-fieldupdate-territory option:selected').text());
	               }
				});
				$('#CollectionPopup .collection-fieldupdate-territory').combobox();
            });
			
			//filter update delete link
            $('#CollectionPopup').on('click', '.collection-fieldupdate .deletelink', function () 
            {
                $(this).closest('.filter').slideUp(
                    500, 
                    function () { 
                        $(this).remove();
                    }
                ); 
            });
			
			//Delete Territory
			$('#TerritoryEditor .territory-table').on('click', '.delete-geometry', function()
			{
				var geometryName = $(this).closest('tr').find('.name').text()
				var r=confirm("You are about to delete "+geometryName+".\nAre you sure?");
	               if (r==true)
	               {
	                   //Just continue
	               }
	               else
	               {
	                   //Cancel
	                   return;
	               }
				var geometryRow = $(this).closest('tr');
				$.ajax({
	                url: "/apex/MATerritoryAJAXResources?securityToken={!securityToken}&action=deleteGeometryInfo&core.apexpages.devmode.url=0",
	                type: 'POST',
	                dataType: 'JSON',
	                data:
	                {
	                    geometryId	: $(this).attr('data-id')
	                },
	                success: function (response)
	                {
	                	geometryRow.remove();
	                	if($('#SpatialGeometry .geometry-row').length == 0)
	                	{
	                		$('#SpatialGeometry .territory-table').hide();
	                	}
	                	var tree = jQuery.jstree._reference(".territory-tree");
	                   	var selectednode = $('.territory-tree').jstree('get_selected');
	                   	tree.refresh(selectednode);
	                   	selectednode.find('a').click();
	                }
	               });
			});
			
			//Delete Collection
			$('#TerritoryEditor .collection-table').on('click', '.delete-collection', function()
			{
				var collectionName = $(this).closest('tr').find('.name').text()
				var r=confirm("You are about to delete "+collectionName+".\nAre you sure?");
	               if (r==true)
	               {
	                   //Just continue
	               }
	               else
	               {
	                   //Cancel
	                   return;
	               }
				var collectionRow = $(this).closest('tr');
				$.ajax({
	                url: "/apex/MATerritoryAJAXResources?securityToken={!securityToken}&action=deleteCollection&core.apexpages.devmode.url=0",
	                type: 'POST',
	                dataType: 'JSON',
	                data:
	                {
	                    collectionId	: $(this).attr('data-id')
	                },
	                success: function (response)
	                {
	                	collectionRow.remove();
	                	if($('#Collections .collection-row').length == 0)
	                	{
	                		$('#Collections .collection-table').hide();
	                	}
	                	var tree = jQuery.jstree._reference(".territory-tree");
	                   	var selectednode = $('.territory-tree').jstree('get_selected');
	                   	tree.refresh(selectednode);
	                   	selectednode.find('a').click();
	                }
	            });
			});
			
			//handle adding new filters
            $('.htab-content-button.add').click(function () {
            	var baseObject = $('#CollectionPopup .collection-baseobject-select').val();
                if ($(this).closest('.htab-content').is('.fieldfilters'))
                {
                    var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($('.fieldfilters > .listbox'))
                    $loader.slideDown(
                        200,
                        function ()
                        {
                            var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', baseObject);
                            $newFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', 'Name'));
                            $newFilter.find('.fieldoptions .combobox').val('Name');
                            
                            updateFilter($newFilter, $loader);
                        }
                    );
                }
                else if ($(this).closest('.htab-content').is('.crossfilters'))
                {
                    
                    //make sure we don't already have 2 cross filters
                    if ($('.crossfilters .listbox > div').length > 1)
                    {
                        alert('Only 2 cross filters are allowed.');
                        return;
                    }
                    
                    var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($('.crossfilters .listbox'));
                    $loader.slideDown(
                        200,
                        function ()
                        {
                            var $newCrossFilter = $('.crossfilter.template').clone().removeClass('template').attr('data-baseobject', baseObject).attr('data-index', 'AND');
                            $newCrossFilter.find('.fieldlabel .baseobject').text($('#CollectionPopup .collection-baseobject-select').val());
                            $newCrossFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', 'Id'));
                            $newCrossFilter.find('.fieldoptions .combobox').val('Id');
                            //$newCrossFilter.find('.crossobjectoptions .combobox').append($("<option></option>").attr('value', query.initialCrossObject));
                            //$newCrossFilter.find('.crossobjectoptions .combobox').val(query.initialCrossObject);
                            //$newCrossFilter.find('.crossfieldoptions .combobox').append($("<option></option>").attr('value', query.initialCrossField));
                            //$newCrossFilter.find('.crossfieldoptions .combobox').val(query.initialCrossField);
                            
                            updateCrossFilter($newCrossFilter, $loader);
                        }
                    );
                }
            });
		
			/**************************************
	        *  FILTER HANDLERS
	        **************************************/
            
            //filter delete link
            $('#CollectionPopup').on('click', '.filter .deletelink', function () 
            {
                $(this).closest('.filter').slideUp(
                    500, 
                    function () { 
                        $(this).remove();
                        refreshIndices();
                        refreshCrossIndices();
                    }
                ); 
            });
            
            
            $('#removeFiltersLink').click(function ()
            {
                $('#queryfilters .filter .deletelink, #queryfilters .crossfilter .deletelink').click();
            });
            
            //handling selecting a new field for a filter
            $('#CollectionPopup').on('change', '.filter .fieldoptions .combobox, .filter .parentfieldoptions .combobox, .filter .grandparentfieldoptions .combobox', function ()
            {
                updateFilter($(this).closest('.filter'));
            });
            
            //handling selecting a new operator for a filter
            $('#CollectionPopup').on('change', '.filter .operator .combobox', function ()
            {
                var $updatedFilter = $(this).closest('.filter');
            
            	//handle the range operator
                if ($(this).val() == 'range')
                {
                    $updatedFilter.find('.range').show(500);
                    $updatedFilter.find('.nextlast').hide(500);
                }
                else if ($(this).val() == 'next' || $(this).val() == 'last')
                {
                    $updatedFilter.find('.range').hide(500);
                    $updatedFilter.find('.nextlast').show(500);
                }
                else
                {
                    $updatedFilter.find('.range').hide(500);
                    $updatedFilter.find('.nextlast').hide(500);
                }
                
                //handle the in and not in operators
                if ($(this).val() == 'in' || $(this).val() == 'not in')
                {
                	$updatedFilter.find('.idfiltervalue').hide();
                	$updatedFilter.find('.queryfiltervalue').show();
                }
                else
                {
                	$updatedFilter.find('.queryfiltervalue').hide();
                	$updatedFilter.find('.idfiltervalue').show();
                }
                
                //the range operator affects validity so revalidate
                $updatedFilter.find('.value input').change();
            });
            
            //filter logic link
            $('#CollectionPopup .filterlogiclink').click(function ()
            {
                if ($(this).text() == 'Add')
                {
                    var filterArr = [];
                    $('.fieldfilters .filter').each(function () { filterArr.push($(this).find('.indexlabel').text()); } );
                    $('.filterlogic').val('(' + filterArr.join(' AND ') + ')').show(500);
                    $(this).text('Remove');
                }
                else
                {
                    $('.filterlogic').hide(500);
                    $(this).text('Add');
                }
            });
            
            /************************************
             *  CROSS FILTER HANDLERS
             ************************************/
            
            //handle changing field on a cross filter
            $('#CollectionPopup').on('change', '.crossfilter > table .fieldoptions .combobox, .crossfilter .crossobjectoptions .combobox', function ()
            {
            	//remove all subfilters if the cross object is changing
            	if ($(this).is('.crossobjectoptions .combobox')) {
            		$(this).closest('.crossfilter').find('.subfilters .filter .deletelink').click();
            	}
            
                updateCrossFilter($(this).closest('.crossfilter'));
            });
            
            //handle clicking links on a cross filter
            $('#CollectionPopup').on('click', '.crossfilter .crossfilteractions span.link', function ()
            {
                if ($(this).text() == 'Show Advanced')
                {
                    $(this).closest('.crossfilter').find('.advanced').show('slide');
                    $(this).text('Hide Advanced');  
                }
                else if ($(this).text() == 'Hide Advanced')
                {
                    $(this).closest('.crossfilter').find('.advanced').hide('slide');
                    $(this).text('Show Advanced');  
                }
                else if ($(this).text() == 'Delete')
                {
                    $(this).closest('.crossfilter').slideUp(
                    500, 
                    function () { 
                        $(this).remove();
                        refreshIndices();
						refreshCrossIndices();
                    }
                ); 
                }
            });
            
            //handle subfilter links
            $('#CollectionPopup').on('click', '.crossfilter .addfilter span.link', function ()
            {
                var $updatedCrossFilter = $(this).closest('.crossfilter');
            
                var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($updatedCrossFilter.find('.subfilters'));
                $loader.slideDown(
                    200,
                    function ()
                    {
                        var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', $updatedCrossFilter.find('.crossobjectoptions .combobox').val());
                        updateFilter($newFilter, $loader);
                    }
                );
            });
            
            //crossfilter logic link
            $('#CollectionPopup').on('click', '.crossfilterlogiclink', function ()
            {
                if ($(this).text() == 'Add')
                {
                    var crossfilterArr = [];
                    $(this).closest('.crossfilter').find('.subfilters > .filter').each(function () { crossfilterArr.push($(this).find('.indexlabel').text()); } );
                    $(this).closest('.crossfilterlogic').find('.crosslogic').val('(' + crossfilterArr.join(' AND ') + ')').show(500);
                    $(this).text('Remove');
                }
                else
                {
                    $(this).closest('.crossfilterlogic').find('.crosslogic').hide(500);
                    $(this).text('Add');
                }
            });
            
            
            $('#CollectionPopup').on('click', '.dateliteralpicker', function () 
            {
                //open the date literal autocomplete list when clicking the date literal picker icon
                $(this).siblings('.datejs').autocomplete("search", "").focus();
            });
            
            /*****************
            * Navigation Links
            ******************/
            
            //Handle clicking Next Button
			$('#CollectionPopup').on('click', '.collection-next', function ()
            {
            	if($('#CollectionPopup .collection-name').val() != '' && $('#CollectionPopup .collection-baseobject-select').next().find('input').val() != '')
            	{
	            	if($('#CollectionPopup .collection-name-table').is(':visible') == true)
	            	{
	            		$('#CollectionPopup .collection-back').show();
	            		$('#CollectionPopup .collection-name-table').hide();
	            		$('#CollectionPopup .collection-filters').show();
	            		$('#CollectionPopup .label-head').css( "color", "black" );
	            		$('#CollectionPopup .filter-head').css( "color", "#2265bb" );
	            		$('#CollectionPopup .custom-head').css( "color", "black" );
	            		$('#CollectionPopup .collection-fieldupdate-table').hide();
	            	}
	            	else if($('#CollectionPopup .collection-filters').is(':visible') == true)
	            	{
	            		$('#CollectionPopup .collection-name-table').hide();
	            		$('#CollectionPopup .collection-filters').hide();
	            		$('#CollectionPopup .collection-fieldupdate-table').show();
	            		$('#CollectionPopup .collection-next').hide();
	            		$('#CollectionPopup .label-head').css( "color", "black" );
	            		$('#CollectionPopup .filter-head').css( "color", "black" );
	            		$('#CollectionPopup .custom-head').css( "color", "#2265bb" );
	            	}
	            }
	            else
	           	{
	           		alert('Label and/or Base Object cannont be blank');
	           	}
            });
            
            //Handle clicking Back Button
			$('#CollectionPopup').on('click', '.collection-back', function ()
            {
            	if($('#CollectionPopup .collection-filters').is(':visible') == true)
            	{
            		$('#CollectionPopup .collection-back').hide();
            		$('#CollectionPopup .collection-name-table').show();
            		$('#CollectionPopup .collection-filters').hide();
            		$('#CollectionPopup .collection-fieldupdate-table').hide();
            		$('#CollectionPopup .label-head').css( "color", "#2265bb" );
            		$('#CollectionPopup .filter-head').css( "color", "black" );
            		$('#CollectionPopup .custom-head').css( "color", "black" );
            	}
            	else if($('#CollectionPopup .collection-fieldupdate-table').is(':visible') == true)
            	{
            		$('#CollectionPopup .collection-name-table').hide();
            		$('#CollectionPopup .collection-filters').show();
            		$('#CollectionPopup .collection-fieldupdate-table').hide();
            		$('#CollectionPopup .collection-next').show();
					$('#CollectionPopup .label-head').css( "color", "black" );
            		$('#CollectionPopup .filter-head').css( "color", "#2265bb" );
            		$('#CollectionPopup .custom-head').css( "color", "black" );
            	}
            });
            
            //Navigation from header links
            //Basic
			$('#CollectionPopup').on('click', '.label-head', function ()
            {
           		$('#CollectionPopup .collection-back').hide();
            	$('#CollectionPopup .collection-next').show();
           		$('#CollectionPopup .collection-name-table').show();
           		$('#CollectionPopup .collection-filters').hide();
           		$('#CollectionPopup .collection-fieldupdate-table').hide();
           		$('#CollectionPopup .label-head').css( "color", "#2265bb" );
           		$('#CollectionPopup .filter-head').css( "color", "black" );
           		$('#CollectionPopup .custom-head').css( "color", "black" );
			});
			//Filters
			$('#CollectionPopup').on('click', '.filter-head', function ()
            {
            	if($('#CollectionPopup .collection-name').val() != '' && $('#CollectionPopup .collection-baseobject-select').next().find('input').val() != '')
            	{
	            	$('#CollectionPopup .collection-back').show();
	            	$('#CollectionPopup .collection-next').show();
	           		$('#CollectionPopup .collection-name-table').hide();
	           		$('#CollectionPopup .collection-filters').show();
	           		$('#CollectionPopup .label-head').css( "color", "black" );
	           		$('#CollectionPopup .filter-head').css( "color", "#2265bb" );
	           		$('#CollectionPopup .custom-head').css( "color", "black" );
	           		$('#CollectionPopup .collection-fieldupdate-table').hide();
	           	}
	           	else
	           	{
	           		alert('Label and/or Base Object cannont be blank');
	           	}
			});
			//Advanced
			$('#CollectionPopup').on('click', '.custom-head', function ()
            {
            	if($('#CollectionPopup .collection-name').val() != '' && $('#CollectionPopup .collection-baseobject-select').next().find('input').val() != '')
            	{
	            	$('#CollectionPopup .collection-name-table').hide();
	           		$('#CollectionPopup .collection-filters').hide();
	           		$('#CollectionPopup .collection-back').show();
	           		$('#CollectionPopup .collection-fieldupdate-table').show();
	           		$('#CollectionPopup .collection-next').hide();
	           		$('#CollectionPopup .label-head').css( "color", "black" );
	           		$('#CollectionPopup .filter-head').css( "color", "black" );
	           		$('#CollectionPopup .custom-head').css( "color", "#2265bb" );
				}
				else
	           	{
	           		alert('Label and/or Base Object cannont be blank');
	           	}
			});
			
		}); //end onready
		
		
		/*******************
		* Functions
		********************/
		//clear all filters
		function clearFilters ()
		{	
			$('#CollectionPopup .collection-filters .deletelink').click();
			if($('#CollectionPopup .filterlogiclink').text() == 'Remove')
			{
				$('#CollectionPopup .filterlogiclink').click();
			}
		}
		
		function clearCollection()
		{
			$('#CollectionPopup .deletelink').click();
			if($('#CollectionPopup .filterlogiclink').text() == 'Remove')
			{
				$('#CollectionPopup .filterlogiclink').click();
				$('#CollectionPopup .section-footer .filterlogic').hide();
			}
			$('#CollectionPopup .collection-name').val('');
			$('#CollectionPopup .label-head').click();
			$('#CollectionPopup .collection-fieldupdate-add').click();
		}
		
		function PopulateMainSpatialGeometry (mainSelect)
		{
			$('#SpatialGeometryPopup .list-sub1 .geometry-instructions').remove();
			$('#SpatialGeometryPopup .list-sub1 .single-select-wrapper').remove();
			$('#SpatialGeometryPopup .list-sub1').hide();
			$('#SpatialGeometryPopup .geometry-table-select').remove();
			if(mainSelect == 'county' || mainSelect == 'zipcode')
			{
				$.ajax({
                url: "https://gis-prod-api.cloudbilt.com/info/?action=getstates",
                dataType: 'JSONP',
                success: function (response)
                    {
                    	$('#SpatialGeometryPopup .list-sub1').show(400);
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-instructions-wrapper').append($('#Templates .initial-select').clone());
                    	$('#SpatialGeometryPopup .list-sub1 .instruction-wrapper').append($('#Templates .initial-select').clone());
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-select').append($('#Templates .single-select-wrapper').clone());
                    	$.each(response.data, function(index, state)
                    	{
                    		$('<option></option>').attr('value', state.statefp).attr('data-stusps', state.stusps).text(state.name).appendTo($('#SpatialGeometryPopup .list-sub1 .geometry-single-select'));
                    	});
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-single-select').combobox();
                    }
                });
            }
            else if(mainSelect == 'state')
            {
            	$.ajax({
                url: "https://gis-prod-api.cloudbilt.com/info/?action=getstates",
                dataType: 'JSONP',
                success: function (response)
                    {
                    	$('#SpatialGeometryPopup .list-sub1').show(400);
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-instructions-wrapper').append($('#Templates .state-select').clone());
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-select').append($('#Templates .geometry-table-select').clone());
                    	$.each(response.data, function(index, state)
                    	{
                    		$('<option></option>').attr('value', state.statefp).attr('data-stusps', state.stusps).text(state.name).appendTo($('#SpatialGeometryPopup .list-sub1 .geometry-select .geometry-table-select'));
                    	});
                    	$('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect({
							noneSelectedText: 'Click here to select options',
							selectedList: 2
						}).multiselectfilter().multiselect('uncheckAll');
                    }
                });
            } 
            else if(mainSelect == 'country')
			{
				$('#SpatialGeometryPopup .geometry-list-select').show(500);
				$('#SpatialGeometryPopup .geometry-list-select .geometry-mult-select').append($('#Templates .geometry-table-select').clone());
                   $('<option></option>').val('USA').text('United States of America').appendTo($('#SpatialGeometryPopup .geometry-list-select .geometry-mult-select .geometry-table-select'));
				$('#SpatialGeometryPopup .geometry-list-select').find('.geometry-table-select').multiselect({
							noneSelectedText: 'Click here to select options',
							selectedList: 2
						}).multiselectfilter().multiselect('uncheckAll');
			}
		}
		
		function PopulateSub1SpatialGeometry (sub1Select)
		{
			var mainSelect = $('#SpatialGeometryPopup .list-main .geometry-wrapper').find('.selected').attr('data-id');
			$('#SpatialGeometryPopup .list-sub1 .geometry-instructions').remove();
			$('#SpatialGeometryPopup .geometry-table-select').remove();
			$('#SpatialGeometryPopup .list-sub1').hide();
			if(mainSelect == 'zipcode' && isNaN(sub1Select) == false)
            {
            	$.ajax({
                url: 'https://gis-prod-api.cloudbilt.com/info/?action=getzips&statefips='+sub1Select+'',
                dataType: 'JSONP',
                success: function (response)
                    {
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-instructions-wrapper').append($('#Templates .zipcode-select').clone());
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-select').append($('#Templates .geometry-table-select').clone());
                    	$.each(response.data, function(index, zip)
                    	{
                    		$('<option></option>').attr('value', zip.name).text(zip.name).appendTo($('#SpatialGeometryPopup .list-sub1 .geometry-select .geometry-table-select'));
                    	});
                    	$('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect({
							noneSelectedText: 'Click here to select options',
							selectedList: 2
						}).multiselectfilter().multiselect('uncheckAll');
						$('#SpatialGeometryPopup .list-sub1').show(300);
                    }
                });
            }
            else if(mainSelect == 'county' && isNaN(sub1Select) == false)
            {
            	$.ajax({
                url: 'https://gis-prod-api.cloudbilt.com/info/?action=getcounties&statefips='+sub1Select+'',
                dataType: 'JSONP',
                success: function (response)
                    {
                    	$('#SpatialGeometryPopup .list-sub1 .geometry-instructions-wrapper').append($('#Templates .county-select').clone());
                    	$('#Templates .geometry-table-select').clone().appendTo($('#SpatialGeometryPopup .list-sub1 .geometry-select'));
                    	$.each(response.data, function(index, county)
                    	{
                    		$('<option></option>').attr('data-id', county.name).attr('value', county.countyfp).attr('data-statefp', county.statefp).attr('data-id', county.name).text(county.namelsad).appendTo($('#SpatialGeometryPopup .list-sub1 .geometry-select .geometry-table-select'));
                    	});
                    	$('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect({
							noneSelectedText: 'Click here to select options',
							selectedList: 2
						}).multiselectfilter().multiselect('uncheckAll');
						$('#SpatialGeometryPopup .list-sub1').show(300);
                    }
                });
            }
        }
        
        function saveGeometry()
		{
			var geometrySelection = {};
			var countyfips = [];
			var statefips = [];
			var zipcodes = [];
			var mainSelect = $('#SpatialGeometryPopup .list-main .geometry-wrapper').find('.selected').attr('data-id');
			var nameSelect = $('#SpatialGeometryPopup .list-main .geometry-wrapper').find('.selected').attr('data-name');
			var selectTitle = '';
			var geometryDesc = [];
			var geometryDescribe = '';
			if($('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect('widget').find('input[type="checkbox"]:checked').length < 3)
			{
				$('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect('widget').find('input[type="checkbox"]:checked').each(function (index, title) {
					selectTitle = $(this).attr('title');
					geometryDesc.push(selectTitle);
				});
			}
			else
			{
				$('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect('widget').find('input[type="checkbox"]:checked').each(function () {
					selectTitle = $(this).attr('title');
					geometryDesc.push(selectTitle);
					var test = geometryDesc.length;
					geometryDescribe = test + ' ' + nameSelect + ' ' + 'selected';
				});
			}
			$('#SpatialGeometryPopup .geometry-select').find('.geometry-table-select').multiselect('widget').find('input[type="checkbox"]:checked').each(function () {
				var Select = $(this).attr('value');
				if(mainSelect == 'county')
				{
					countyfips.push(Select);
					var counties = {};
                    counties['statefips'] = $('#SpatialGeometryPopup .list-sub1 .geometry-wrapper').find('.selected').attr('value');
                    counties['fips'] = countyfips;
                    var zips = {};
                    var states = {};
				}
				else if(mainSelect == 'state')
				{
					statefips.push(Select);
					var states = {};
                    states['fips'] = statefips;
                    var zips = {};
                    var counties = {};
				}
				else if(mainSelect == 'zipcode')
				{
					zipcodes.push(Select);
					var zips = {};
                    zips['codes'] = zipcodes;
                    var counties = {};
                    var states = {};
				}
				geometrySelection['counties'] = counties;
				geometrySelection['zips'] = zips;
               	geometrySelection['states'] = states;
			});
			$.ajax({
                url: "/apex/MATerritoryAJAXResources?securityToken={!securityToken}&action=saveGeometryInfo&core.apexpages.devmode.url=0",
                type: 'POST',
                dataType: 'JSON',
                data:
                {
                    geometry		: JSON.stringify(geometrySelection),
                    geometryName	: $('#SpatialGeometryPopup .geometry-name').val(),
                    territory		: $('.territory-tree').jstree('get_selected').attr('data-id'),
                    geometryDesc	: geometryDescribe != '' ? geometryDescribe : geometryDesc.join(', ')
                },
                success: function (response)
                {
                	$('#SpatialGeometryPopup .geometry-wrapper').find('.selected').removeClass('selected');
                	$('#SpatialGeometryPopup .single-select-wrapper').remove();
		            $('#SpatialGeometryPopup .geometry-table-select').remove();
                	$('#SpatialGeometryPopup .geometry-name').val('');
                	hidePopup($('#SpatialGeometryPopup'));
                	$('.territory-tree').jstree('get_selected').find('a').click();
                	$('#SpatialGeometryPopup .list-sub1 .geometry-instructions').remove();
                }
               });
		}
		
		//Grab info for collection popup
		function collectionInfo()
		{
			$('.collection-baseobject-select').empty();
			//Populate Base Territory Objects
			$.ajax({
                url: "/apex/MATerritoryAJAXResources?securityToken={!securityToken}&action=getCollectionObject&core.apexpages.devmode.url=0",
                type: 'POST',
                dataType: 'JSON',
                data:{},
                success: function (response)
                {
                	$.each(response.data, function(index, baseObj) {
                		removeNamespace('{!namespace}', baseObj);
                   		$('<option></option>').attr('data-id', baseObj.Id).attr('value', baseObj.Object__c).text(baseObj.Name).appendTo($('#CollectionPopup .collection-baseobject-select'));
                   	});
                    $('#CollectionPopup .collection-name-table').find('.collection-baseobject-select').val('option:first').next().find('input').val($('#CollectionPopup .collection-name-table').find('.collection-baseobject-select option:selected').text());
                	//Populate Field Updates
					$('.collection-fieldupdate-territory').empty();
					$('#CollectionPopup .collection-fieldupdate-add').click();
                }
			});
		}		
		//Saving a Collection Wizard
		function saveCollection()
		{
			var fieldUpdates = [];
			$.each($('#CollectionPopup .collection-fieldupdate-row'), function()
			{
				if($(this).find('.collection-fieldupdate-territory').val() != 'none')
				{
					var update = {};
                    update['Value__c'] = $(this).find('.collection-fieldupdate-value').val();
                    update['Field__c'] = $(this).find('.collection-fieldupdate-territory').val();
                    fieldUpdates.push(update);
                }
			});
			
			$.ajax({
                url: "/apex/MATerritoryAJAXResources?securityToken={!securityToken}&action=saveCollectionInfo&core.apexpages.devmode.url=0",
                type: 'POST',
                dataType: 'JSON',
                data:
                {
                    collectionName	: $('#CollectionPopup .collection-name').val(),
                    baseObject		: $('#CollectionPopup .collection-baseobject-select option:selected').attr('data-id'),
                    baseObjectText	: $('#CollectionPopup .collection-baseobject-select').val(),
                    folderId		: $('.territory-tree').jstree('get_selected').attr('data-id'),
                    serializedQuery	: JSON.stringify(buildQuery()),
                    fieldUpdates	: JSON.stringify(fieldUpdates)
                },
                success: function (response)
                {
                	hidePopup($('#CollectionPopup'));
                	$('.territory-tree').jstree('get_selected').find('a').click();
                	clearCollection ();
                	$('#CollectionPopup .collection-fieldupdate-table .deletelink').click();
                }
            });
		}
		
		function disableFilter($filter)
	       {
	           if ($filter.is('.crossfilter')) {
	       		$filter.find('.crossfilter-fields td.indexlabel').text('').append($('img.loader.template').clone().show());
	       	}
	       	else {
	           	$filter.find('td.indexlabel').text('').append($('img.loader.template').clone().show());
	           }
	           return $filter;
	       }
	       function enableFilter($filter)
	       {
	           if ($filter.is('.crossfilter')) {
	       		$filter.find('.crossfilter-fields td.indexlabel').empty().text($filter.attr('data-index'));
	       	}
	       	else {
	           	$filter.find('td.indexlabel').empty().text($filter.attr('data-index'));
	           }
	           return $filter;
	       }
	       function extractValue1($filter)
        {
            switch ($filter.attr('data-basetype'))
            {
                case 'STRING':
                    return $filter.find('.value .STRING > input').val();
                    break;
                case 'PICKLIST':
                    var selectedOptions = [];
                    $filter.find('.value .PICKLIST select.multiselect').multiselect('widget').find('input[type="checkbox"]:checked').each(function () { selectedOptions.push($(this).attr('value'))});
                    //$filter.find('.value .PICKLIST select.multiselect > option:checked').each(function () { selectedOptions.push($(this).val()); } );
                    return selectedOptions.join('~~');
                    break;
                case 'BOOLEAN':
                    return $filter.find('.value .BOOLEAN input:radio:checked').val() == undefined ? 'NULL' : $filter.find('.value .BOOLEAN input:radio:checked').val();
                    break;
                case 'DATE':
                    var stringVal = $filter.find('.value .DATE > input.datejs').val();
                    
                    //check if the value is a date literal
                    for (var i in dateLiterals)
                    {
                        //check if the label matches and the value is not blank (blank value denotes a dynamic date literal and cannot be matched directly)
                        if (dateLiterals[i].label == stringVal && dateLiterals[i].value != 'DYNAMIC')
                        {
                            //this is a date literal, so the text itself is our value
                            return dateLiterals[i].value;
                        }
                    }
                    
                    //check if the value is a dynamic date literal
                    try {
                        var stringParts = stringVal.split(' ');
                        if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
                            if (!isNaN(parseInt(stringParts[1]))) {
                                if (stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
                                    return stringParts[0] + '_N_' + stringParts[2] + ':' + parseInt(stringParts[1]); 
                                }
                                else if (stringParts.length == 4 && stringParts[2] == 'FISCAL') {
                                    if (stringParts[3] == 'QUARTERS' || stringParts[3] == 'YEARS') {
                                        return stringParts[0] + '_N_FISCAL_' + stringParts[3] + ':' + parseInt(stringParts[1]);
                                    }
                                }
                            }
                        }
                    }
                    catch (err) { }
                    
                    //if we made it this far, we aren't dealing with a date literal so parse the date
                    try
                    {
                        if ($filter.attr('data-fieldtype') == 'DATE')
                        {
                            return moment(stringVal).format('YYYY-MM-DD');
                        }
                        else
                        {
                        	return moment(stringVal).utc().format('YYYY-MM-DDTHH:mm:ss\\Z');
                        }
                    }
                    catch (err)
                    {
                        return 'NULL';
                    }
                    break;
                case 'ID':
                	var operator = $filter.find('.operator .combobox').val();
                	if (operator == 'in' || operator == 'not in')
                	{
                		return $filter.find('.value .ID .queryfiltervalue .combobox').val();
                	}
                	else
                	{
                		return $filter.find('.value .ID .idfiltervalue').val();
                	}
                	break;
                default:
                    return '';
            }
        }
        function extractValue2($filter)
        {
            switch ($filter.attr('data-basetype'))
            {
                case 'STRING':
                    return $filter.find('.value .STRING .range input').val();
                    break;
                case 'DATE':
                    var stringVal = $filter.find('.value .DATE .range input.datejs').val();
                
                    //check if the value is a date literal
                    for (var i in dateLiterals)
                    {
                        //check if the label matches and the value is not blank (blank value denotes a dynamic date literal and cannot be matched directly)
                        if (dateLiterals[i].label == stringVal && dateLiterals[i].value != 'DYNAMIC')
                        {
                            //this is a date literal, so the text itself is our value
                            return dateLiterals[i].value;
                        }
                    }
                    
                    //check if the value is a dynamic date literal
                    try {
                        var stringParts = stringVal.split(' ');
                        if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
                            if (!isNaN(parseInt(stringParts[1]))) {
                                if (stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
                                    return stringParts[0] + '_N_' + stringParts[2] + ':' + parseInt(stringParts[1]); 
                                }
                                else if (stringParts.length == 4 && stringParts[2] == 'FISCAL') {
                                    if (stringParts[3] == 'QUARTERS' || stringParts[3] == 'YEARS') {
                                        return stringParts[0] + '_N_FISCAL_' + stringParts[3] + ':' + parseInt(stringParts[1]);
                                    }
                                }
                            }
                        }
                    }
                    catch (err) { }
                    
                    //if we made it this far, we aren't dealing with a date literal so parse the date
                    try
                    {
                        if ($filter.attr('data-fieldtype') == 'DATE')
                        {
                            return moment(stringVal).format('YYYY-MM-DD');
                        }
                        else
                        {
                        	return moment(stringVal).utc().format('YYYY-MM-DDTHH:mm:ss\\Z');
                        }
                    }
                    catch (err)
                    {
                        return 'NULL';
                    }
                    break;
                default:
                    return '';
            }
        }
	      function valueToDateString(value, fieldType)
	      {
	          //check if the value is a date literal
	          for (var i in dateLiterals)
	          {
	              if (dateLiterals[i].value == value && value != 'DYNAMIC')
	              {
	                  //this is a date literal, so the text itself is our value
	                  return dateLiterals[i].label;
	              }
	          }
	          
	          //check if the value is a dynamic date literal
	          try {
	              var stringParts = value.split(':');
	              if (stringParts.length == 2 && !isNaN(parseInt(stringParts[1]))) {
	                  var literalParts = stringParts[0].split('_');
	                  if (literalParts[0] == 'NEXT' || literalParts[0] == 'LAST') {
	                      if (literalParts[1] == 'N') {
	                          if (literalParts.length == 3 && $.inArray(literalParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
	                              return literalParts[0] + ' ' + parseInt(stringParts[1]) + ' ' + literalParts[2]; 
	                          }
	                          else if (literalParts.length == 4 && literalParts[2] == 'FISCAL') {
	                              if (literalParts[3] == 'QUARTERS' || literalParts[3] == 'YEARS') {
	                                  return literalParts[0] + ' ' + parseInt(stringParts[1]) + ' FISCAL ' + literalParts[3];
	                              }
	                          }
	                      }
	                  }
	              }
	          }
	          catch (err) { }
	              
	          //if we made it this far, we aren't dealing with a date literal so parse the date
	          try
	          {
	              if (fieldType == 'DATE')
	              {
	                  return Date.parse(value).toString('MM/dd/yyyy');
	              }
	              else
	              {
	                  return Date.parse(value.replace('T', ' ').replace('Z', '')).toString('MM/dd/yyyy');
	              }
	          }
	          catch (err) {}
	
	          return '';
	      }
	      
	      var dateLiterals = [
	          { value:"YESTERDAY", label:"YESTERDAY" },
	          { value:"TODAY", label:"TODAY" },
	          { value:"TOMORROW", label:"TOMORROW" },
	          { value:"LAST_WEEK", label:"LAST WEEK" },
	          { value:"THIS_WEEK", label:"THIS WEEK" },
	          { value:"NEXT_WEEK", label:"NEXT WEEK" },
	          { value:"LAST_MONTH", label:"LAST MONTH" },
	          { value:"THIS_MONTH", label:"THIS MONTH" },
	          { value:"NEXT_MONTH", label:"NEXT MONTH" },
	          { value:"DYNAMIC", label:"LAST N DAYS" },
	          { value:"DYNAMIC", label:"NEXT N DAYS" },
	          { value:"THIS_QUARTER", label:"THIS QUARTER" },
	          { value:"LAST_QUARTER", label:"LAST QUARTER" },
	          { value:"NEXT_QUARTER", label:"NEXT QUARTER" },
	          { value:"DYNAMIC", label:"LAST N QUARTERS" },
	          { value:"DYNAMIC", label:"NEXT N QUARTERS" },
	          { value:"THIS_YEAR", label:"THIS YEAR" },
	          { value:"LAST_YEAR", label:"LAST YEAR" },
	          { value:"NEXT_YEAR", label:"NEXT YEAR" },
	          { value:"DYNAMIC", label:"LAST N YEARS" },
	          { value:"DYNAMIC", label:"NEXT N YEARS" },
	          { value:"THIS_FISCAL_QUARTER", label:"THIS FISCAL QUARTER" },
	          { value:"LAST_FISCAL_QUARTER", label:"LAST FISCAL QUARTER" },
	          { value:"NEXT_FISCAL_QUARTER", label:"NEXT FISCAL QUARTER" },
	          { value:"DYNAMIC", label:"LAST N FISCAL QUARTERS" },
	          { value:"DYNAMIC", label:"NEXT N FISCAL QUARTERS" },
	          { value:"THIS_FISCAL_YEAR", label:"THIS FISCAL YEAR" },
	          { value:"LAST_FISCAL_YEAR", label:"LAST FISCAL YEAR" },
	          { value:"NEXT_FISCAL_YEAR", label:"NEXT FISCAL YEAR" },
	          { value:"DYNAMIC", label:"LAST N FISCAL YEARS" },
	          { value:"DYNAMIC", label:"NEXT N FISCAL YEARS" }
	      ];
	      function buildDatePickers ($elements)
	      {
	          $elements
	              .datepicker({
	                  showOn: "button",
	                  buttonImage: "{!URLFOR($Resource.QueryEditor, 'images/icons/16_calendar.png')}",
	                  buttonImageOnly: true,
	                  constrainInput: false,
	                  onSelect: function () {
	                      //parse this new date
	                      parseDateInput($(this));
	                  }
	              })
	              .autocomplete({
	                  minLength: 0,
	                  source: dateLiterals,
	                  focus: function (event, ui) {
	                      return false;
	                  },
	                  select: function( event, ui ) {
	                      parseDateInput($(this).val( ui.item.label ));    
	                      return false;
	                  }
	              })
	              .blur(function () {
	                  $(this).val(parseDateInput($(this)));
	              });
	      }
	     function parseDateInput ($dateInput)
	        {
	            var stringVal = $dateInput.val();
	        
	            //check if the value is a date literal
	            for (var i in dateLiterals)
	            {
	                //check if the label matches and the value is not blank (blank value denotes a dynamic date literal and cannot be matched directly)
	                if (dateLiterals[i].label == stringVal && dateLiterals[i].value != 'DYNAMIC')
	                {
	                    //this is a date literal, so the text itself is our value
	                    $dateInput.removeClass('invalid').prev().val('');
	                    return stringVal;
	                }
	            }
	            
	            //check if the value is a dynamic date literal
	            try {
	                var stringParts = stringVal.split(' ');
	                if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
	                    if (!isNaN(parseInt(stringParts[1]))) {
	                        if (stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
	                            $dateInput.removeClass('invalid').prev().val('');
	                            return stringVal;
	                        }
	                        else if (stringParts.length == 4 && stringParts[2] == 'FISCAL') {
	                            if (stringParts[3] == 'QUARTERS' || stringParts[3] == 'YEARS') {
	                                $dateInput.removeClass('invalid').prev().val('');
	                                return stringVal;
	                            }
	                        }
	                    }
	                }
	            }
	            catch (err) { }
	                    
	            var parsedDate = moment($dateInput.val());
	            if ($dateInput.val() == '')
	            {
	                $dateInput.removeClass('invalid').prev().val('NULL');
	                return '';
	            }
	            else if (!parsedDate.isValid())
	            {
	                $dateInput.addClass('invalid').prev().val('NULL');
	                return $dateInput.val();
	            }
	            else
	            {
	                if ($dateInput.closest('.filter').attr('data-fieldtype') == 'DATE')
	                {
	                    $dateInput.removeClass('invalid').prev().val(
	                        parsedDate.format('MM/DD/YYYY')
	                    );
	                    return parsedDate.format('MM/DD/YYYY');
	                }
	                else
	                {
	                    $dateInput.removeClass('invalid').prev().val(
	                        parsedDate.format('MM/DD/YYYY h:mm a')
	                    );
	                    return parsedDate.format('MM/DD/YYYY h:mm a');
	                }
	            }
	        }
	       function refreshIndices()
	       {
	           $('.fieldfilters .listbox > .filter').each(function (index, element)
	           {
	               $(this).attr('data-index', index + 1).find('.indexlabel').text(index + 1);
	           });
	       }
	       function refreshCrossIndices()
	       {
	       	$('.crossfilters .listbox .subfilters:first > .filter').each(function (index, element)
	           	{
	               	$(this).attr('data-index', index + 1).find('.indexlabel').text(index + 1);
	           });
	           
	           $('.crossfilters .listbox .subfilters:last > .filter').each(function (index, element)
	           	{
	               	$(this).attr('data-index', index + 1).find('.indexlabel').text(index + 1);
	           });            	
	       }
		function updateFilter($updatedFilter, $loaderToReplace, operator, value, value2)
	       {
	           disableFilter($updatedFilter);
	
	           $.ajax({
	               url: "/apex/QueryBuilderAPIBeta?securityToken={!securityToken}&action=getFilter&baseObject=::baseObject::&fieldName=::fieldName::&parentFieldName=::parentFieldName::&grandparentFieldName=::grandparentFieldName::&core.apexpages.devmode.url=0"
	                       .replace('::baseObject::', $updatedFilter.attr('data-baseobject').split('~~')[0])
	                       .replace('::fieldName::', $updatedFilter.find('.fieldoptions .combobox').val() == null ? '' : $updatedFilter.find('.fieldoptions .combobox').val())
	                       .replace('::parentFieldName::', $updatedFilter.find('.parentfieldoptions .combobox').val() == null ? '' : $updatedFilter.find('.parentfieldoptions .combobox').val())
	                       .replace('::grandparentFieldName::', $updatedFilter.find('.grandparentfieldoptions .combobox').val() == null ? '' : $updatedFilter.find('.grandparentfieldoptions .combobox').val()),
	               type: 'POST',
	               dataType: 'JSON',
	               success: function (response)
	               {
	                   //update type information
	                   $updatedFilter.attr('data-basetype', response.baseType).attr('data-fieldtype', response.fieldType);
	               
	                   //field options
	                   var $fieldSelect = $updatedFilter.find('.fieldoptions .combobox').empty();
	                   for (var i in response.fieldOptions)
	                   {
	                       $fieldSelect.append(
	                           $("<option></option>")
	                               .attr('value', response.fieldOptions[i].value)
	                               .text(response.fieldOptions[i].label)
	                       );
	                   }
	                   $fieldSelect.val(response.fieldName);
	                   $updatedFilter.find('.fieldoptions .ui-combobox > input').val($fieldSelect.find('option:selected').text());
	               
	                   //refresh parent field options if there are any
	                   if (response.parentFieldOptions != null && response.parentFieldOptions.length > 0)
	                   {
	                       $parentFieldSelect = $updatedFilter.find('.parentfieldoptions .combobox').empty();
	                       for (var i in response.parentFieldOptions)
	                       {
	                           $parentFieldSelect.append(
	                               $("<option></option>")
	                                   .attr('value', response.parentFieldOptions[i].value)
	                                   .text(response.parentFieldOptions[i].label)
	                           );
	                       }
	                       $parentFieldSelect.val(response.parentFieldName);
	                       $updatedFilter.find('.parentfieldoptions .ui-combobox > input').val($parentFieldSelect.find('option:selected').text());
	                       $updatedFilter.find('.parentfieldoptions').show();
	                   }
	                   else
	                   {
	                       $updatedFilter.find('.parentfieldoptions').hide().find('.combobox').empty().val('');
	                   }
	                   
	                   //refresh grandparent field options if there are any
	                   if (response.grandparentFieldOptions != null && response.grandparentFieldOptions.length > 0)
	                   {
	                       $grandparentFieldSelect = $updatedFilter.find('.grandparentfieldoptions .combobox').empty();
	                       for (var i in response.grandparentFieldOptions)
	                       {
	                           $grandparentFieldSelect.append(
	                               $("<option></option>")
	                                   .attr('value', response.grandparentFieldOptions[i].value)
	                                   .text(response.grandparentFieldOptions[i].label)
	                           );
	                       }
	                       $grandparentFieldSelect.val(response.grandparentFieldName);
	                       $updatedFilter.find('.grandparentfieldoptions .ui-combobox > input').val($grandparentFieldSelect.find('option:selected').text());
	                       $updatedFilter.find('.grandparentfieldoptions').show();
	                   }
	                   else
	                   {
	                       $updatedFilter.find('.grandparentfieldoptions').hide().find('.combobox').empty().val('');
	                   }
	               
	                   //refresh operator options
	                   $operatorOptions = $updatedFilter.find('.operator .combobox').empty();
	                   for (var i in response.operatorOptions)
	                   {
	                       $operatorOptions.append(
	                           $("<option></option")
	                               .attr('value', response.operatorOptions[i])
	                               .text(response.operatorOptions[i])
	                       );
	                   }
	                   $operatorOptions.combobox();
	                   $updatedFilter.find('.operator input').val($operatorOptions.find('option:selected').change().text());
	                   
	                   //if we were passed an operator, populate
	                   if (operator)
	                   {
	                   	$operatorOptions.val(operator).change().next().find('input').val($operatorOptions.find('option:selected').text());
	                   }
	                   
	                   //change value input to match the new field type
	                   $updatedFilter.find('.value .STRING input:text').removeAttr('class').val('');
	                   if (response.baseType == 'STRING')
	                   {
	                       $updatedFilter.find('.value .STRING input').addClass(response.fieldType);
	                   }
	                   $updatedFilter.find('.value > div').hide().filter('.' + response.baseType).show();
	                   
	                   //update value options if this is a type that requires it
	                   if (response.fieldType == 'PICKLIST' || response.fieldType == 'MULTIPICKLIST')
	                   {
	                       var $picklistOptions = $updatedFilter.find('.value .PICKLIST .multiselect').empty();
	                       for (var i in response.picklistOptions)
	                       {
	                           $("<option></option>")
	                               .attr('value', response.picklistOptions[i].value)
	                               .text(response.picklistOptions[i].label)
	                               .appendTo($picklistOptions);
	                       }
	                       
	                       //multiselect widget might not be enabled yet which would throw an error so just catch it and do nothing
	                       try {
	                       	$picklistOptions.multiselect('refresh').multiselect('uncheckAll');
	                       }
	                       catch (err) { }
	                   }
	                   else if (response.fieldType == 'ID')
	                   {
	                   	var $cachedQueryOptions = $updatedFilter.find('.value .ID .queryfiltervalue .combobox').empty();
	                   	for (var i in response.cachedQueryOptions)
	                   	{
	                   		$("<option></option>")
	                               .attr('value', response.cachedQueryOptions[i].value)
	                               .text(response.cachedQueryOptions[i].label)
	                               .appendTo($cachedQueryOptions);
	                   	}
	                   	$cachedQueryOptions.next().find('input').val($cachedQueryOptions.find('option:selected').text());
	                   }
	                   
	                   enableFilter($updatedFilter);
	                   
	                   //if we were passed a loader then replace it with this filter
	                   if ($loaderToReplace)
	                   {
	                       $loaderToReplace.slideUp(
	                           200,
	                           function ()
	                           {
	                               $(this).replaceWith($updatedFilter);
	                               $updatedFilter.attr('data-basetype', response.baseType).attr('data-fieldtype', response.fieldType).slideDown(500);
	                                   
	                               //assign unique names to the boolean radio buttons
	                               $updatedFilter.find('.value .BOOLEAN input').attr('name', 'bool_' + globalIndex++);
	                               
	                               $updatedFilter.find('.combobox').combobox();
	                               $updatedFilter.find('.multiselect').multiselect({
	                                   noneSelectedText: 'Click here to select options',
	                                   selectedList: 2
	                               }).multiselectfilter().multiselect('uncheckAll');
	                               buildDatePickers($updatedFilter.find('input.datejs'));
	                               
	                               refreshIndices();
	                               refreshCrossIndices();
	                               
	                               //if we were passed a value then use it to populate the currently displayed value input
	                               if (value)
	                               {
	                                   switch (response.baseType)
	                                   {
	                                       case 'STRING':
	                                           if (value != 'NULL')
	                                           {
	                                               $updatedFilter.find('.value > div.STRING > input').val(value);
	                                           }
	                                           if (value2 && value2 != 'NULL')
	                                           {
	                                               $updatedFilter.find('.value > div.STRING .range input').val(value2);
	                                           }
	                                           break;
	                                       case 'PICKLIST':
	                                           if (value != '')
	                                           {
	                                               var selectedOptions = value.split('~~');
	                                               for (var s in selectedOptions)
	                                               {
	                                                   $updatedFilter.find('.value .PICKLIST .multiselect').multiselect("widget").find('input[value="'+selectedOptions[s]+'"]').click();// option[value='+selectedOptions[s]+']').attr('selected', 'selected');
	                                               }
	                                           }
	                                           break;
	                                       case 'BOOLEAN':
	                                           if (value != 'NULL')
	                                           {
	                                               $updatedFilter.find('.value > div.BOOLEAN input[value='+value+']').attr('checked', 'checked');
	                                           }
	                                           break;
	                                       case 'DATE':
	                                           if (value != 'NULL')
	                                           {
	                                               $updatedFilter.find('.value > div.DATE > input.datejs').val(valueToDateString(value, $updatedFilter.attr('data-fieldtype')));
	                                           }
	                                           if (value2 != 'NULL')
	                                           {
	                                               $updatedFilter.find('.value > div.DATE .range > input.datejs').val(valueToDateString(value2, $updatedFilter.attr('data-fieldtype')));
	                                           }
	                                           break;
	                                       case 'ID':
	                                       	var operator = $updatedFilter.find('.operator .combobox').val();
	                                       	if (operator == 'in' || operator == 'not in')
	                                       	{
	                                       		$updatedFilter.find('.value .ID .queryfiltervalue .combobox').val(value)
	                                       			.next().find('input').val($updatedFilter.find('.value .ID .queryfiltervalue .combobox option:selected').text());
	                                       	}
	                                       	else
	                                       	{
	                                       		$updatedFilter.find('.value .ID .idfiltervalue').val(value);
	                                       	}
	                                       	$updatedFilter.find('.operator .combobox').change();
	                                       	break;
	                                   }
	                               }
	                               
	                               //for some reason, operator changes aren't being caught during the population process for these filters (maybe because they're hidden?).  just refire the change event now
	                               $operatorOptions.find('option:selected').change();
	                           }
	                       );
	                   }
	               },
	               error: function (request, error, exception)
	               {
	                   //show error
	                   $('#CollectionPopup .buttons .msgs').html('<b>Save Error</b>: Please try again').show();
	               }
	           });
	       }
	       
	       //Update Cross Filters
	       function updateCrossFilter($updatedCrossFilter, $loaderToReplace)
	       {
	           disableFilter($updatedCrossFilter);
	               
	           $.ajax({
	               url: "/apex/QueryBuilderAPIBeta?securityToken={!securityToken}&action=getCrossFilter&baseObject=::baseObject::&fieldName=::fieldName::&crossObjectName=::crossObjectName::&crossFieldName=::crossFieldName::&core.apexpages.devmode.url=0"
	                   .replace('::baseObject::', $updatedCrossFilter.attr('data-baseobject'))
	                   .replace('::fieldName::', $updatedCrossFilter.find('.fieldoptions .combobox').val() == null ? '' : $updatedCrossFilter.find('.fieldoptions .combobox').val())
	                   .replace('::crossObjectName::', $updatedCrossFilter.find('.crossobjectoptions .combobox').val() == null ? '' : $updatedCrossFilter.find('.crossobjectoptions .combobox').val())
	                   .replace('::crossFieldName::', $updatedCrossFilter.find('.crossfieldoptions .combobox').val() == null ? '' : $updatedCrossFilter.find('.crossfieldoptions .combobox').val()),
	               type: 'POST',
	               dataType: 'JSON',
	               success: function (response)
	               {
	                   //field options
	                   $newFieldOptions = $updatedCrossFilter.find('.crossfilter-fields .fieldoptions .combobox').empty();
	                   for (var i in response.fieldOptions)
	                   {
	                       $newFieldOptions.append(
	                           $("<option></option>")
	                               .attr('value', response.fieldOptions[i].value)
	                               .text(response.fieldOptions[i].label)
	                       );
	                   }
	                   $newFieldOptions.val(response.fieldName);
	                   $updatedCrossFilter.find('.crossfilter-fields .fieldoptions .ui-combobox > input').val($newFieldOptions.find('option:selected').text());
	                   
	                   //only update operator options if we don't have any because cross filter operator options are not affected by any changes
	                   $operatorOptions = $updatedCrossFilter.find('.crossfilter-fields .operator .combobox');
	                   if ($operatorOptions.children().length == 0)
	                   {
	                       for (var i in response.operatorOptions)
	                       {
	                           $operatorOptions.append(
	                               $("<option></option")
	                                   .attr('value', response.operatorOptions[i].value)
	                                   .text(response.operatorOptions[i].label)
	                           );
	                       }
	                   }
	                   
	                   //cross object options
	                   $crossObjectOptions = $updatedCrossFilter.find('.crossfilter-fields .crossobjectoptions .combobox').empty();
	                   for (var i in response.crossObjectOptions)
	                   {
	                       $crossObjectOptions.append(
	                           $("<option></option")
	                               .attr('value', response.crossObjectOptions[i].value)
	                               .text(response.crossObjectOptions[i].label)
	                       );
	                   }
	                   $crossObjectOptions.val(response.crossObjectName);
	                   $updatedCrossFilter.find('.crossfilter-fields .crossobjectoptions .ui-combobox > input').val($crossObjectOptions.find('option:selected').text());
	                                                               
	                   //need to update cross field options
	                   $crossFieldOptions = $updatedCrossFilter.find('.crossfilter-fields .crossfieldoptions .combobox').empty();
	                   for (var i in response.crossFieldOptions)
	                   {
	                       $crossFieldOptions.append(
	                           $("<option></option")
	                               .attr('value', response.crossFieldOptions[i].value)
	                               .text(response.crossFieldOptions[i].label)
	                       );
	                   }
	                   $crossFieldOptions.val(response.crossFieldName);
	                   $updatedCrossFilter.find('.crossfilter-fields .crossfieldoptions .ui-combobox > input')
	                       .val($crossFieldOptions.find('option:selected').text())
	                       .removeClass('invalid');
	                   
	                   if (response.crossFieldOptions.length == 0)
	                   {
	                       $updatedCrossFilter.find('.crossfilter-fields .crossfieldoptions .ui-combobox > input').addClass('invalid');
	                   }
	                   
	                   enableFilter($updatedCrossFilter);
	                   
	                   if ($loaderToReplace)
	                   {
	                       $loaderToReplace.slideUp(
	                           200,
	                           function ()
	                           {
	                               jQuery(this).replaceWith($updatedCrossFilter);
	                               $updatedCrossFilter.slideDown(500);
	                               
	                               $updatedCrossFilter.find('.crossfilter-fields .combobox').combobox();
	                               buildDatePickers($updatedCrossFilter.find('.crossfilter-fields input.datejs'));
	                           }
	                       );
	                   }
	               },
	               error: function (request, error, exception)
	               {
	                   //show error
	                   $('#savedqueryeditor .buttons .msgs').html('<b>Save Error</b>: Please try again').show();
	               }
	           });
	       }
		
		
		/******************************
		* Build Query
		*********************************/
		function buildQuery(options)
        {
        	var options = options || {};
            var componentIndex = 0;

            var queryObj = {
                name                : $('#CollectionPopup .collection-name').val(),
                folderId            : $('.territory-tree').jstree('get_selected').attr('data-id'),
                folderType          : null,
                filterByOwner       : 'All',
                baseObject          : $('#CollectionPopup .collection-baseobject-select').val(),
                useFilterLogic      : $('#CollectionPopup .filterlogiclink').text() == 'Add' ? false : true,
                filterLogicString   : $('#CollectionPopup .filterlogic').val(),
                filters             : [],
                crossFilters        : []
            };
            
            //loop through and add filters
            $('.fieldfilters .filter').each(function ()
            {
                queryObj.filters.push({
                    index                   : componentIndex++,
                    baseObject              : $(this).attr('data-baseobject'),
                    indexLabel              : $(this).find('.indexlabel').text(),
                    fieldName               : $(this).find('.fieldoptions .combobox').val(),
                    parentFieldName         : $(this).find('.parentfieldoptions .combobox').val(),
                    grandparentFieldName    : $(this).find('.grandparentfieldoptions .combobox').val(),
                    fieldType               : $(this).attr('data-fieldtype'),
                    operator                : $(this).find('.operator .combobox').val(),
                    value                   : extractValue1($(this)),
                    value2                  : extractValue2($(this))
                });
            });
            
            //loop through and add cross filters
            $('.crossfilters .crossfilter').each(function ()
            {
                var crossFilter = {
                    index               : componentIndex++,
                    baseObject          : $(this).attr('data-baseobject'),
                    indexLabel          : 0,
                    fieldName           : $(this).find('.fieldoptions .combobox').val(),
                    crossObjectName     : $(this).find('.crossobjectoptions .combobox').val(),
                    crossFieldName      : $(this).find('.crossfieldoptions .combobox').val(),
                    operator            : $(this).find('.operator .combobox').val(),
                    useCrossFilterLogic	  : $(this).find('.crossfilterlogiclink').text() == 'Add' ? false : true,
	                crossFilterLogicString   : $(this).find('.crosslogic').val(),
                    filters             : []
                };
                
                //loop through and add subfilters
                var subfilterIndex = 1;
                $(this).find('.subfilters > .filter').each(function ()
                {
                    crossFilter.filters.push({
                        index                   : subfilterIndex++,
                        baseObject              : $(this).attr('data-baseobject').split('~~')[0],
                        indexLabel              : $(this).find('.indexlabel').text(),
                        fieldName               : $(this).find('.fieldoptions .combobox').val(),
                        parentFieldName         : $(this).find('.parentfieldoptions .combobox').val(),
                        grandparentFieldName    : $(this).find('.grandparentfieldoptions .combobox').val(),
                        fieldType               : $(this).attr('data-fieldtype'),
                        operator                : $(this).find('.operator .combobox').val(),
                        value                   : extractValue1($(this)),
                        value2                  : extractValue2($(this))
                    });
                });

                queryObj.crossFilters.push(crossFilter);
            });
            
            
            return queryObj;
        }
		
	</script>
	
	<!-- CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/style.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'style.css')}"/>
    <c:CSSHelperBlue />
    <style type='text/css'>
    
    	/* Temporary fix for header links divider */
        span.divider {
        	float: none;
			display: inline;
			background: none;
			margin: 0;
        }
        
        /*Create Geometry*/
		#SpatialGeometryPopup .geometry-list .geometry-wrapper div:hover, #SpatialGeometryPopup .geometry-list .geometry-wrapper .selected 
		{
			color: rgba(0, 116, 223, 1);
			border-left: 2px solid;
			padding-left: 5px;
		}
		
		#SpatialGeometryPopup .geometry-list .geometry-wrapper
		{
			font-size: 125%;
			margin-right: 25px;
			width: 90px;
		}
		
		#SpatialGeometryPopup .geometry-list .single-select-wrapper
		{
			margin: 5px;
		}
		
		#SpatialGeometryPopup .geometry-list-select .ui-multiselect, #SpatialGeometryPopup .geometry-list .ui-multiselect
		{
			max-width: 220px;
			margin: 5px;
		}
		
		#TerritoryEditor .territory-table .delete-geometry, #Collections .collection-table .delete-collection
		{
			cursor: pointer;
		}
		
		#TerritoryEditor > div, .territory-tree
		{
			padding-bottom: 15px;
			border: 1px solid silver;
			border-radius: 5px;
			padding: 5px;
			min-height: 35px;
			background: none !important;
		}
		
		#TerritoryEditor .territory-table .delete-geometry:hover, #Collections .collection-table .delete-collection:hover
		{
			color: blue;
        }
        
        #TerritoryEditor .territory-table tr, #Collections .collection-table tr
		{
			display: block;
			border-bottom: 1px solid silver;
		}
		
		
		/* Comboboxes */
        .ui-autocomplete
        {
        	max-height: 250px;
        	overflow: auto;
        	z-index: 1001;
        }
        
        .ui-combobox
        {
        	padding-right: 0 !important;
        }
        .ui-combobox input
        {
        	background-color: white !important;
        	background: white !important;
        	padding-right: 30px !important;
        	font-weight: bold !important;
        }
        .ui-combobox a
        {
        	background: transparent !important;
			border: none !important;
			position: absolute !important;
			right: 0 !important;
        }
        .ui-combobox a .ui-button-icon-primary
        {
        	background: transparent url("/resource/1372710420000/QueryEditor/images/icons/combobox-arrow-16.png") no-repeat center !important;
        }
        
        #tab-filters .htab-content-button.add, #CollectionPopup .collection-buttons
        {
        	float: right;
        	display: inline-table;
        	cursor: pointer;
        }
        
        
        #tab-filters .htab-content-header
        {
        	display: inline-table;
        	width: 100%
        }
        
        #CollectionPopup tr > td.actions > div, #CollectionPopup tr > td.crossfilteractions > div, #CollectionPopup .color-row div, #CollectionPopup .collection-fieldupdate-table .collection-fieldupdate-row > td > div
        {
            display: none;
        }
        #CollectionPopup tr:hover > td.actions > div, #CollectionPopup tr:hover > td.crossfilteractions > div, #CollectionPopup .color-row:hover div, #CollectionPopup .collection-fieldupdate-table .collection-fieldupdate-row:hover > td > div
        {
            display: inline-table;
            color: blue;
			cursor: pointer;
        }
        
        /* Geometry Tabs */
        #SpatialGeometryPopup .list-main .geomtry-select {
        	position: relative;
        	width: 90px;
        	margin-top: 11px;
        	cursor: pointer;
        }
        
        #CollectionPopup .collection-options .small.link {
            color: blue;
			font-size: 80%;
			font-weight: bold;
			cursor: pointer;
        }
        
        #CollectionPopup .collection-options .link {
            color: blue;
			cursor: pointer;
        }
        
        #CollectionPopup .collection-header
        {
        	width: 650px;
			margin-bottom: 10px;
			border-bottom: 2px solid silver;
        }
        
        #CollectionPopup .collection-header td
        {
        	text-align:center;
        	cursor: pointer;
        	font-size: 110%;
        	font-weight: bold;
        }
        
        #CollectionPopup .collection-fieldupdate-table tr
        {
        	display:block;
        }
        
    </style>
	
	<!-- Header -->
    <c:MAAdminHeader PageTitle="Territories"/>
    
    <!-- Main Content -->
    <table>
    	<tr>
    	
	    	<!-- Territory Tree -->
	    	<td style='width: 300px; overflow: auto;'>
				<div style='min-height:20px;' class='territory-tree'></div>
	    	</td>
	    	
	    	<!-- Territory Editor -->
	    	<td>
	    		<div style='min-height:10px;'  id='GeneralInfo'>
	    			<!-- Genral Info -->
	    			<div>
	    			
	    				<!-- Table -->
	    				<table>
	    					<tr>
	    						<td style='width: 215px'>Select a territory to view, add, or remove Spatial Geometries and Collections.</td>
	    					</tr>
	    				</table>
	    			
	    			</div>
	    		
	    		</div>
	    	
	    		<div style='display:none;' id='TerritoryEditor'>
	    		
	    			<!-- Spatial Geometry -->
	    			<div id='SpatialGeometry'>
	    			
	    				<!-- Header -->
	    				<div>
	    					<span style='padding-right: 15px; float: left; font-size: 140%'>Spatial Geometry</span>
	    					<button style='float: right;'>Add</button>
	    				</div>
	    				<div class='geometry-instructions'>
	    					<span style='min-width: 265px; float:left; width:100%'>Click 'Add' to create a Spatial Geometry</span>
	    				</div>
	    				
	    				<!-- Table -->
	    				<table class='territory-table' style='display: none; width:450px;'>
	    					<tr>
	    						<th style='width: 75px'>Delete</th>
	    						<th style='width: 170px'>Layer Name</th>
	    						<th style='width: 170px'>Information</th>
	    					</tr>
	    				</table>
	    			
	    			</div>
	    			
	    			<!-- Collections -->
	    			<div style='margin-top: 15px;' id='Collections'>
	    			
	    				<!-- Header -->
	    				<div>
	    					<span style='float: left; font-size: 140%'>Collections</span>
	    					<button style='float: right;'>Add</button>
	    				</div>
	    				<div class='collection-instructions'>
	    					<span style='float:left; width:100%'>Click 'Add' to create a Collection</span>
	    				</div>
	    				
	    				<!-- Table -->
	    				<table class='collection-table' style='display: none; width:450px;'>
	    					<tr>
	    						<th style='width: 75px;'>Delete</th>
	    						<th style='width: 150px;'>Collection Name</th>
	    						<th style='width: 150px;'>Object</th>
	    						<th style='width: 75px;'>Field Updates</th>
	    					</tr>
	    				</table>
	    			
	    			</div>
	    		
	    		</div>
	    	</td>
	    	
	    </tr>
    </table>
    
    <!-- Popups -->
    <div id='Popups' style='display: none;'>
    
    	<!-- Spatial Geometry -->
    	<div style='width: 700px;' id='SpatialGeometryPopup'>
    	
    		<!-- Geometry Header -->
    		<table style='border-bottom: 2px solid silver; margin-bottom: 10px; width: 100%;'>
    			<tr>
    				<td style='color: rgb(34, 101, 187); font-size: 120%; font-weight: bold;'>New Spatial Geometry</td>
    			</tr>
    		</table>
    		
    		<table style='border-bottom: 1px solid silver; width:100%'>
    			<!-- Label -->
    			<tr>
    				<th>Plese Enter a Name for this Spatial Geometry</th> 
    			</tr>
    			<tr>
    				<td><input maxlength='80' class='geometry-name' type='text'></input></td>
    			</tr>
    			
    			<!-- SPACING -->
    			<tr>
    				<td style='padding: 5px'></td>
    			</tr>
    			
    			<tr>
    				<th>Spatial Geometry Selection</th>
    			</tr>
    		</table>
    			
    		
    		<table>
    			<!-- Row -->
				<tr>
					<td class='geometry-list list-main' style='padding: 5px; border-right: 1px solid silver;'>
						<div class='geometry-wrapper'>
							<!--<div data-id='country'>Country</div> -->
							<div class='geomtry-select state-tab' data-id='state' data-name='states'>State</div>
							<div class='geomtry-select county-tab' data-id='county' data-name='counties'>County</div>
							<div class='geomtry-select zipcode-tab' data-id='zipcode' data-name='zip codes'>Zip Code</div>
							<div class='geomtry-select custom-tab' data-id='custom' data-name='custom'>Custom</div>
						</div>
					</td>
					<td class='geometry-list hide-list list-sub1' style='display:none; vertical-align: top;'>
						<div style='margin:5px;' class='geometry-instructions-wrapper'></div>
						<div class='geometry-select'></div>
					</td>
					<td class='hide-list geometry-list-select' style='display:none; vertical-align: top;'>
						<div class='geometry-mult-select'></div>
					</td>
				</tr>
			</table>
    	</div>
    	
    	<!-- Collection -->
    	<div id='CollectionPopup'>
    	
    		<!-- Collection Header -->
    		<table class='collection-header'>
    			<tr>
    				<td class='header label-head' style='color:#2265bb;'>Step 1: Basic Info</td>
    				<td class='header filter-head'>Step 2: Select Filters</td>
    				<td class='header custom-head'>Step 3: Field Updates</td>
    			</tr>
    		</table>
    		
    		<!-- Object and Name Selection -->
	    	<table class='collection-name-table'>
	    		<tr>
	    			<th>General Collection Information</th>
				</tr>
				
				<!-- Spacing -->
	    		<tr style='margin: 5px; display: block;'></tr>
				
				<tr>
					<td>Label</td>
					<td><input maxlength='80' class='collection-name' type='text'></input></td>
				</tr>
				<tr>
					<td>Collection Base Object Selection</td>
					<td><select class='collection-baseobject-select combobox'></select></td>
				</tr>
			</table>
			
			<!-- Filters Table -->
            <table id='tab-filters' style='display:none; width:100%' class='collection-table collection-options collection-filters'>
           		<tr class='aggregate-filters-table'>
           			<td style='vertical-align:top; width: 100%;'>
	                    <div class='htab-content-wrapper'>
			                    
		                    <!-- Field Filters -->
		                    <div class='htab-content fieldfilters' data-tab='fieldfilters'>
		                        <div class='htab-content-header'><b>Field Filters</b>
		                        	<img class='field-add htab-content-button add' src="{!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-plus-16.png')}" />
		                        </div>
		                        
		                        
		                        <div class='section-body listbox'>
		                        </div>
		                        
		                        <div class='section-footer'>
		                            <div style='margin: 10px 30px 0 10px; padding: 5px; border-top: 1px solid silver; border-bottom: 1px solid silver;'>
		                                <b>Filter Logic </b> 
		                                <input type='text' class='filterlogic' style='display: none;' /> 
		                                <span class='filterlogiclink small link'>Add</span>
		                            </div>
		                        </div>
		                    </div>
					                    
		                    <!-- Cross Filters -->
		                    <div class='htab-content crossfilters' style='padding-top: 15px;' data-tab='crossfilters' >
		                        <div class='htab-content-header'><b>Cross Object Filters</b>
		                        	<img class='cross-add htab-content-button add' src="{!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-plus-16.png')}" />
		                        </div>
		                        
		                        <div class='section-body listbox'>
		                        </div>
		                    </div>
				                    
	            		</div>
	    			</td>
	    		</tr>
	    	</table>
	    	
	    	<!-- Custom Filters -->
	    	<table class='collection-fieldupdate-table' style='display:none'>
	    		
	    		<!-- Field Header -->
	    		<tr class='htab-content-header'>
		            <td>
		            	<img class='collection-fieldupdate-add' src="{!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-plus-16.png')}" />
		            </td>
		            <th>Field Updates</th>
	    		</tr>
	    		
	    		<!-- Spacing -->
	    		<tr style='margin: 5px;'></tr>
	    		
	    	</table>
	    	
	    	<!-- Navigation Buttons -->
	    	<table class='collection-navigation-table' style='width: 100%;'>
	    		<tr>
	    			<td>
	    				<div class='collection-buttons'>
	    					<button style='display:none;' class='collection-back' type="button">Back</button>
	    					<button class='collection-next' type="button">Next</button>
	    				</div>
	    			</td>
	    		</tr>
	    	</table>
    	</div>
    
    </div>
    
    <!-- Templates -->
    <div id='Templates' style='display: none;'>
    	
    	<!-- Spatial Geometry Row -->
    	<table>
    		<tr class='geometry-row'>
    			<td style='width: 75px' class='delete-geometry'>[Remove]</td>
    			<td style='width: 170px' class='name'></td>
    			<td style='width: 170px' class='info'></td>
    		</tr>
    	</table>
    	
    	<!-- Collection Row -->
    	<table>
    		<tr class='collection-row'>
    			<td style='width: 75px' class='delete-collection'>[Remove]</td>
    			<td style='width: 150px' class='name'></td>
    			<td style='width: 150px' class='object'></td>
    			<td style='width: 75px' class='updates'></td>
    		</tr>
    	</table>
    	
    	<!-- Spatial Geometry Add Table -->
    	<table>
    		<div data-id='' data-stusps='' class='geometry-table-row'>::List::</div>
    	</table>
    	
    	<!-- Spatial Geometry Multi-Select -->
    	<table>
    		<select class='geometry-table-select'></select>
    	</table>
    	
    	<!-- Spatial Geometry Single-Select -->
    	<table>
    		<div class='single-select-wrapper'>
    			<select class='geometry-single-select'></select>
    		</div>
    	</table>
    	
    	<!-- Spatial Geometry Single-Select -->
    	<table>
    		<div class='geometry-instructions initial-select'>Please select a state to continue:</div>
    		<div class='geometry-instructions county-select'>Please select your county options:</div>
    		<div class='geometry-instructions state-select'>Please select your state options:</div>
    		<div class='geometry-instructions zipcode-select'>Please select your zip code options:</div>
    	</table>
    	
    	<!-- ajax load template -->
        <div class="ajaxload template" style="display: none;">
            <table>
                <tr>
                    <td colspan="5"><img src="{!URLFOR($Resource.QueryEditor, 'images/icons/ajax-loader.gif')}" /></td>
                </tr>
            </table>
        </div>
		
		<!-- filter template -->
        <div class="filter template" style="display: none;">
            <table>
                <tr>            
                    <!-- Filter Index -->
                    <td class='indexlabel'></td>
                
                    <!-- Field Selector -->
                    <td class="fieldlabel">
                    
                        <!-- Selector for Field filters -->
                        <div class='fieldoptions'>
                            <select class="combobox"></select>
                        </div>
                        
                        <div class='parentfieldoptions' style='display: none;'>
                            <select class="combobox"></select>
                        </div>
                        
                        <div class='grandparentfieldoptions' style='display: none;'>
                            <select class="combobox"></select>
                        </div>
                        
                    </td>
                    
                    <!-- Operator Selector -->
                    <td class="operator">
                        <select class="combobox"></select>                              
                    </td>
            
                    <!-- Value Input -->
                    <td class="value">
                        <!-- render a text box for STRING filters -->
                        <div class='STRING' style='display: none;'>
                            <input type='text'/>
                            
                            <div class='range' style='display: none;'>
                                <span>to</span> 
                                <input type='text'/>
                            </div>
                        </div>
                        
                        <!-- render a checkbox list for PICKLIST filters -->
                        <div class='PICKLIST' style='display: none;'>
                            <select class='multiselect' multiple='multiple' style='display: none;'></select>
                        </div>
                        
                        <!-- render a radio list for BOOLEAN filters -->
                        <div class='BOOLEAN' style='display: none;'>
                            <input type='radio' value="TRUE" /> True
                            <input type='radio' value="FALSE" /> False
                        </div>
                        
                        <!-- render a special text box that uses date.js for date parsing for DATE filters -->
                        <div class='DATE' style='display: none;'>
                            <input type='text' class='datejs startdate' data-type="DATE"/>
                            <img src="{!URLFOR($Resource.QueryEditor, 'images/icons/16_lookup.png')}" class="dateliteralpicker" />
                            
                            <div class='range' style='display: none;'>
                                <span>to</span> 
                                <input type='text' class='datejs enddate' data-type="DATE"/>
                                <img src="{!URLFOR($Resource.QueryEditor, 'images/icons/16_lookup.png')}" class="dateliteralpicker" />
                            </div>
                            <div class='nextlast' style='display: none;'>
                            	<select class='n-type'>
                            		<option value='DAYS'>Days</option>
                            		<option value='QUARTERS'>Quarters</option>
                            		<option value='YEARS'>Years</option>
                            		<option value='FISCAL_QUARTERS'>Fiscal Quarters</option>
                            		<option value='FISCAL_YEARS'>Fiscal Years</option>
                            	</select>
                            </div>
                        </div>
                        
                        <!-- render a picklist that will contain cached queries that match the object type of the field that was selected -->
                        <div class='ID' style='display: none;'>
                        	<input type='text' class='idfiltervalue' />
                       	
                        	<span class='queryfiltervalue' style='display: none;'>
                        		<select class='combobox' />
                        	</span>
                        </div>
                    </td>
            
                    <!-- Action Links -->
                    <td class="actions" style='width: 50px;'>
                        <div>
                            <span class='link deletelink'>Delete</span> 
                       </div>
                    </td>
                </tr>
            </table>
        </div>
        
        <!-- Field Update Row Template -->
        <table>
	        <tr class='collection-fieldupdate-row template'>
				<td>
					<select class='collection-fieldupdate collection-fieldupdate-territory combobox'>
						<option value='none'>--None--</option>
					</select>
				</td>
				<td>
					<input maxlength='80' class='collection-fieldupdate-value' type='text'></input>
				</td>
				<td>
					<div>
		                 <span class='link deletelink'>Delete</span> 
		            </div>
				</td>
			</tr>
		</table>
        
        <!-- cross filter template -->
        <div class='crossfilter template' style='display: none;'>
            <table class='crossfilter-fields'>
                <tr>
                                
                    <!-- Filter Index -->
                    <td class='indexlabel'>AND</td>
               
                    <!-- Field Selector -->
                    <td class="fieldlabel">
                        <!-- Selector for Cross Filters -->
                        <table>
                            <tr>
                                <td>
                                    <!-- Display Base Object -->
                                    <span class='baseobject'></span>
                                </td>
                                <td>
                                    <span class="advanced" style="font-weight: bold; font-size: 18px; display: none;">.</span>
                                </td>
                                <td>
                                    <!-- Base object field selection for advanced queries -->
                                    <div class="advanced fieldoptions" style='display: none;'>
                                        <select class='combobox'></select>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>
                    
                    <!-- Operator Selector -->
                    <td class="operator">
                        <select class='combobox'>
                        	<option value='with'>with</option>
                        	<option value='without'>without</option>
                        </select>                              
                    </td>
            
                    <!-- Value Input -->
                    <td class="value">
            
                        <!-- render a select list of child objects for CROSS filters -->
                        <table>
                           <tr>
                                <td>
                                    <div class='crossobjectoptions'>
                                        <select class='combobox'></select>
                                    </div>
                                </td>
                                <td>
                                    <span class='advanced' style="font-weight: bold; font-size: 18px; display: none;">.</span>
                                </td>
                                <td>
                                    <!-- select list of field options for the selected child object (this is for advanced queries) -->
                                    <div class='advanced crossfieldoptions' style='display: none;'>
                                        <select class='combobox'></select>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>
                 
                    <!-- Action Links -->
                    <td class="crossfilteractions" style='width: 50px;'>
                       <div>
                            <!-- <span class='link'>Show Advanced</span> |  --><span class='link deletelink'>Delete</span>
                        </div>
                    </td>
                </tr>
            </table>
            
            <div style='padding-left: 30px;'>
                <div class='subfilters'></div>
                <div class='addfilter'><span class='link'>Add filter</span></div>
            </div>
            <div class='crossfilterlogic'>
				<div style='margin: 10px 30px 0 10px; padding: 5px; border-top: 1px solid silver; border-bottom: 1px solid silver;'>
					<b>Filter Logic</b> 
					<input type='text' class='crosslogic' style='display: none;' /> 
					<span class='crossfilterlogiclink small link'>Add</span>
				</div>
			</div>
        </div>
    	
    </div>
	
</apex:page>