<apex:page sidebar="">
    <html ng-app="DataTableApp">
        <head>
            <apex:includeScript value="/soap/ajax/33.0/connection.js"/>
            <apex:includeScript value="/soap/ajax/33.0/apex.js"/>
			<apex:includeScript value="{!URLFOR($Resource.jQuery, 'js/jquery-1.10.2.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.jQuery, 'js/jquery-ui-1.10.4.custom.min.js')}" />
            <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.js"/>
            
            <apex:stylesheet value="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"/>
            <style>
            .focussed
                {
                background-color: #58A6E8;
                color: white;
                }
                
                .required
                {
                border-left:solid red 4px;
                }
                hyperlink:hover
                {
                	text-decoration: underline;
                }            
            </style>
            <script>
            var j$= jQuery.noConflict();
            j$(document).ready(function(){
                j$('body').on('dblclick','.dataHolder',function(){
                    j$(this).find('.viewMode').each(function()
                    {
                        if(j$(this).attr('updateable')=='true')
                        {
                            j$(this).hide();
                            j$(this).siblings('.editMode').show();
                            j$(this).siblings('.editMode').find('#inputValue').focus();
                        }
                    });
                });
                j$('body').on('click','#scrollTop',function(){
                	window.scrollTo(0,0);
                });
                j$('body').on('click','#scrollBottom',function(){
                	window.scrollTo(0,j$(window).height()*1000);
                });
                j$('body').on('blur','.required',function(){
                    if(j$(this).val()==null || j$(this).val()==undefined || j$(this).val().trim()=='')
                    {
                    	j$(this).focus();
                    }
                });
                j$('body').on('blur','#inputValue',function(){
                    var tagName = j$(this).parent().parent().prop('tagName');
                    if(tagName == 'LOOK-UP')
                    {
                        var value = j$(this).val();
                        var Id='';
                        j$(this).siblings('.lookupMode').find('li').each(function(){
                            if(j$(this).html() == value)
                            {
                                Id = j$(this).attr('value');
                            }
                        });
                        j$(this).closest('td').find('#outputValue').each(function(){
                            j$(this).html(value);
                            j$(this).attr('href','/'+Id);
                        });
                    }
                });
                j$('body').on('click','.lookupMode',function(){
                	j$(this).prev().focus();
                });
                
                j$('body').on('blur','.editMode',function(){
                    var isRequired = j$(this).find('#inputValue').attr('class');
                    isRequired = isRequired.indexOf('required');
                    isRequired = (isRequired  >= 0);
                    var isEmpty = j$(this).find('#inputValue').val();
                    isEmpty = ( isEmpty==undefined || isEmpty==null || isEmpty.trim()=='' );
                    if(!isRequired || !(isRequired && isEmpty))
                    {
                        if(j$('.focussed').html()==undefined)
                        {
                            j$(this).hide();
                            j$(this).siblings('.viewMode').show();
                            j$(this).siblings('.viewMode').find('output-field').css('color','orange');
                        }
                    }
                });
                j$('body').on('click','.collapseIcon',function(){
                    var plus_minus =  j$(this).html();
                    if(plus_minus.indexOf('+')>0)
                    {
                        j$(this).closest('table').find('.childBody').hide();
                        j$(this).html('[-]&nbsp;&nbsp;');
                    }
                    else
                    {
                        j$(this).closest('table').find('.childBody').show();
                        j$(this).html('[+]&nbsp;&nbsp;');
                    }
                });
                j$('body').on('click','.createRecordButton',function(){
                    var valid = true;
                    var type= j$(this).attr('type');
                    j$(this).closest('table').find('.required').each(function()
           			{
                        if( j$(this).is(':visible') && (j$(this).val()==null || j$(this).val()==undefined || j$(this).val().trim()==''))
                        {
                            valid = false;
                            j$(this).focus();
                        }
                    });
                });
                
            });
            
            function getObjectName()
            {
                objectName = location.href;
                var startIndex = objectName.indexOf('?objectName=')+12;
                objectName = objectName.substring(startIndex,objectName.length);
                return objectName;
            }
            
            angular.module("DataTableApp",[]);
            
            angular.module("DataTableApp").controller("DetailsController",function($scope,$window,$compile, $filter){
                sforce.connection.sessionId = '{!$Api.Session_ID}';
                $scope.objectName = getObjectName();
                $scope.sobjectDetail = sforce.connection.describeSObject($scope.objectName);
                $scope.fields = new Array();
                $scope.RecordTypes = new Array();
                $scope.ChildRelationShips = new Array();
                $scope.parentRecordsList = new Array();
                $scope.parentAndChildRecordsList = new Array();
                $scope.ChildRelationShipFields = new Array();
                $scope.selectedChildDetails;
                $scope.selectedChildRelationName;
                $scope.childRecordsPerParent = new Array();
                $scope.showTable = false;
                $scope.searchText = '';
                $scope.OrderByfieldName = 'Id';
                $scope.isReverseOrdered = false;
                $scope.childOrderByfieldName = 'Id';
                $scope.isChildReverseOrdered = false;
                $scope.limitParentRecords = 10;
                $scope.limitChildRecords = 10;
                $scope.recordsPerPage = 2;
                $scope.pageNumber = 1;
                $scope.totalPages = $scope.limitParentRecords;
                $scope.recordsInDisplay = new Array();
                $scope.showToolbar = false;
                $scope.showParentFields = false;
                $scope.showChildFields = false;
                $scope.queryCondition='';
                $scope.childQueryCondition ='';
                $scope.collapseChild = false;
                $scope.showDisplayButton = false;
                $scope.deleteRecords = false;
                $scope.updateRecords = false;
                $scope.massUpdateRecords = false;
                $scope.createNewParent = false;
                $scope.createNewChild = false;
                $scope.showParentFieldsForMassUpdate = false;
                $scope.showChildFieldsForMassUpdate = false;
                $scope.fieldsSelectedForMassUpdate = false;
                $scope.massUpdateParentChildSelection = null;
                $scope.showSelectedFieldsButton = false;
                $scope.referenceArray = new Array();
                $scope.errors = new Array();
                $scope.logs = new Array();
                $scope.showErrors = false;
                $scope.showLogs = false;
                $scope.captureUpdate = true;
                $scope.captureInsert = true;
                $scope.captureMassUpdate = true;
                $scope.captureQuery = true;
                $scope.captureDelete = true;
                $scope.captureUpdateError = true;
                $scope.captureInsertError = true;
                $scope.captureMassUpdateError = true;
                $scope.captureQueryError = true;
                $scope.captureDeleteError = true;

                $scope.setReferences = function(type)
                {
                    var valueSet = false;
                    for(var i=0;i<$scope.referenceArray.length;i++)
                    {
                        if($scope.referenceArray[i].type == type)
                        {
                            valueSet = true;
                        }
                    }
                    if(!valueSet)
                    {
                        var typeValue = sforce.connection.query("select id, name from "+type+" order by name asc limit 50000");
                        $scope.referenceArray.push({type:type,values:typeValue.getArray('records')});
                    }
                }
                
                for(var i=0;i<$scope.sobjectDetail.fields.length;i++)
                {
                    $scope.fields.push({selected:false,sortSelected:false,massUpdate:false,sortReverse:false,showField:true,fieldDetail:$scope.sobjectDetail.fields[i]});
                    if($scope.sobjectDetail.fields[i].type=='reference')
                    {
                        $scope.setReferences($scope.sobjectDetail.fields[i].referenceTo);
                    }
                }
                for(var i=0;i<$scope.sobjectDetail.childRelationships.length;i++)
                {
                    $scope.ChildRelationShips.push({selected:false,ChildRelationshipDetail:$scope.sobjectDetail.childRelationships[i]});
                }
                if($scope.sobjectDetail.recordTypeInfos != undefined)
                {
                    for(var i=0;i<$scope.sobjectDetail.recordTypeInfos.length;i++)
                    {
                        $scope.RecordTypes.push({selected:false,RecordTypeDetail:$scope.sobjectDetail.recordTypeInfos[i]});
                    }
                }
                $scope.displayTableButton = function()
                {
                    var checkParentFields=false;
                    for(var i=0;i<$scope.fields.length;i++){
                        checkParentFields = checkParentFields || $scope.fields[i].selected;}
                    var checkRelationSelected = false;
                    for(var i=0;i<$scope.ChildRelationShips.length;i++){
                        checkRelationSelected = checkRelationSelected || $scope.ChildRelationShips[i].selected;}
   					var childRelationFieldsSelected = false;
                    for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                        childRelationFieldsSelected = childRelationFieldsSelected || $scope.ChildRelationShipFields[i].selected;}
                    $scope.showDisplayButton = (!$scope.showTable) && childRelationFieldsSelected &&  checkRelationSelected && checkParentFields;
                    
                }
                
                $scope.getParentRecords = function(showTable)
                {
                    
                    if(showTable || $scope.showTable)
                    {
                        var selectedFields = new Array();
                        for(var i=0;i<$scope.fields.length;i++)
                        { 
                            if($scope.fields[i].selected)
                            {
                                selectedFields.push($scope.fields[i].fieldDetail.name);
                            }
                        }
                        if(selectedFields.length==0)
                        {
                            selectedFields.push('Id');
                        }
                        var result = sforce.connection.query('select '+selectedFields.join(',')+' from '+ $scope.objectName+($scope.queryCondition==''?'':' where '+$scope.queryCondition +' ')+' Limit '+$scope.limitParentRecords);
                        
                        $scope.parentRecordsList = result.getArray('records');}
                    if(!$scope.showTable)
                    {
                        $scope.showTable = showTable;
                    }
                    $scope.paginateTable();
                }
                
                
                
                $scope.getParentChildRecords = function(showTable)
                {
                    
                    if(showTable || $scope.showTable)
                    {
                    var selectedFields = new Array();
                    for(var i=0;i<$scope.fields.length;i++)
                    { 
                        selectedFields.push($scope.fields[i].fieldDetail.name);
                    }
                    if(selectedFields.length==0)
                    {
                        selectedFields.push('Id');
                    }
                    var selectedChildFields = new Array();
                    for(var i=0;i<$scope.ChildRelationShipFields.length;i++)
                    { 
                       selectedChildFields.push($scope.ChildRelationShipFields[i].fieldDetail.name);
                    }
                    if(selectedChildFields.length==0)
                    {
                        selectedChildFields.push('Id');
                    }
                        var childQuery = '(select '+selectedChildFields.join(',')+' from '+ $scope.selectedChildRelationName+($scope.childQueryCondition==''?'':' where '+$scope.childQueryCondition +' ')+' Limit '+$scope.limitChildRecords+' )'; 
                        var result;
                        try
                        {
                            result= sforce.connection.query('select '+selectedFields.join(',')+' ,'+childQuery+' from '+ $scope.objectName+($scope.queryCondition==''?'':' where '+$scope.queryCondition +' ')+' Limit '+$scope.limitParentRecords);
                        }
                        catch(error)
                        {
                            var errorString = {time:$scope.getDateTime(),operation:'Retrieve',message:error.faultstring};
                            $scope.errors.push(errorString);
                            $scope.showErrors = true;
                            $scope.showToolbar =false;
                            $scope.showLogs = false;
                            $scope.showParentFields = false;
                            $scope.showChildFields = false;
                        }
                        if(result!=undefined && result.getBoolean('done'))
                        {
                            $scope.parentAndChildRecordsList = result.getArray('records');
                            var output= {time:$scope.getDateTime(),operation:'Retrieve',message:"Queried "+$scope.parentAndChildRecordsList.length+" records successfully"};
                            $scope.logs.push(output);
                        }
                    }
                    if(!$scope.showTable)
                    {
                        $scope.showTable = showTable;
                    }
                    $scope.paginateTable();
                }
                
                $scope.getChildRecords = function(record)
                {
                    if(record!=null && record!=undefined)
                    {
                        if(record[$scope.selectedChildRelationName]!=null)
                        {
                            if(Array.isArray(record[$scope.selectedChildRelationName]['records']))
                            {
                                return record[$scope.selectedChildRelationName]['records'];
                            }
                            var result = new Array();
                            result.push(record[$scope.selectedChildRelationName]['records']);
                            return result;
                        }
                    }
                    return new Array();
                }
                
                $scope.getDateTime = function()
                {
                    var now     = new Date(); 
                    var year    = now.getFullYear();
                    var month   = now.getMonth()+1; 
                    var day     = now.getDate();
                    var hour    = now.getHours();
                    var minute  = now.getMinutes();
                    var second  = now.getSeconds(); 
                    if(month.toString().length == 1) {
                        var month = '0'+month;
                    }
                    if(day.toString().length == 1) {
                        var day = '0'+day;
                    }   
                    if(hour.toString().length == 1) {
                        var hour = '0'+hour;
                    }
                    if(minute.toString().length == 1) {
                        var minute = '0'+minute;
                    }
                    if(second.toString().length == 1) {
                        var second = '0'+second;
                    }   
                    var dateTime = year+'/'+month+'/'+day+' '+hour+':'+minute+':'+second;   
                    return dateTime;
                }
                $scope.sortSelectedOrReveresed = function(label,fields)
                {
                    for(var i=0;i<fields.length;i++)
                    {
                        if((fields[i].sortSelected || fields[i].sortReverse) && fields[i].fieldDetail.label.trim().toLowerCase() == label.trim().toLowerCase())
                        {
                            fields[i].sortSelected = !fields[i].sortSelected;
                            fields[i].sortReverse = !fields[i].sortReverse;
                            break;
                        }
                        if(fields[i].fieldDetail.label.trim().toLowerCase() == label.trim().toLowerCase())
                        {
                            fields[i].sortSelected = true;
                        }
                        else
                        {
                            fields[i].sortSelected = false; 
                            fields[i].sortReverse = false;
                        }
                    }
                }
                $scope.logsFilter = function(operation)
                {
                    switch(operation)
                    {
                        case 'Insert': return $scope.captureInsert;
                        case 'Update': return $scope.captureUpdate;
                        case 'Delete': return $scope.captureDelete;
                        case 'Retrieve': return $scope.captureQuery;
                        case 'Mass Update': return $scope.captureMassUpdate;
                    }
                }
                
                $scope.errorsFilter = function(operation)
                {
                    switch(operation)
                    {
                        case 'Insert': return $scope.captureInsertError;
                        case 'Update': return $scope.captureUpdateError;
                        case 'Delete': return $scope.captureDeleteError;
                        case 'Retrieve': return $scope.captureQueryError;
                        case 'Mass Update': return $scope.captureMassUpdateError;
                    }
                }
                $scope.getSelectedRelatedListFields = function(relationName)
                {
                    $scope.selectedChildRelationName = relationName;
                    $scope.ChildRelationShipFields = new Array();
                    var remainingIndex;
                    for(var i=0;i<$scope.ChildRelationShips.length ;i++)
                    {
                        if($scope.ChildRelationShips[i].selected)
                        {
                            if(relationName.toUpperCase().trim() == $scope.ChildRelationShips[i].ChildRelationshipDetail.relationshipName.toUpperCase().trim())
                            {
                                remainingIndex = i+1;
                                $scope.selectedChildDetails = sforce.connection.describeSObject($scope.ChildRelationShips[i].ChildRelationshipDetail.childSObject);
                                
                                if($scope.selectedChildDetails!=undefined)
                                {
                                    for(var j=0;j<$scope.selectedChildDetails.fields.length;j++)
                                    {
                                        $scope.ChildRelationShipFields.push({selected:false,sortReverse:false,massUpdate:false,sortSelected:false,showField:true,fieldDetail:$scope.selectedChildDetails.fields[j]});
                                    }
                                }
                            }
                            else
                            {
                                $scope.ChildRelationShips[i].selected= false;
                            }
                        }
                    }
                    
                    for(var i=remainingIndex;i<$scope.ChildRelationShips.length;i++)
                    {
                        if($scope.ChildRelationShips[i] != undefined)
                        {
                            $scope.ChildRelationShips[i].selected= false;
                        }
                    }
                }
                
                $scope.order = function(fieldName)
                {
                    if($scope.OrderByfieldName.trim().toLowerCase() == fieldName.trim().toLowerCase())
                    {
                        $scope.isReverseOrdered = !($scope.isReverseOrdered);
                    }
                    else
                    {
                        $scope.OrderByfieldName = fieldName;
                        $scope.isReverseOrdered = false;
                    }
                }
                
                $scope.deleteSelectedRecords = function()
                {
                    var count=0;
                    var deleteIdsList = new Array();
                    for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                    {
                        if($scope.parentAndChildRecordsList[i].deleteRecord)
                        {
                            count++;
                            deleteIdsList.push($scope.parentAndChildRecordsList[i]['Id']);
                        }
                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName])
                        {
                            if(Array.isArray($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']))
                            {
                                for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++)
                                {
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].deleteRecord)
                                    {
                                        count++;
                                        deleteIdsList.push($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j]['Id']);
                                        console.log($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']);
                                    }
                                }
                            }
                            else
                            {
                                if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].deleteRecord)
                                {
                                    count++;
                                    deleteIdsList.push($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']['Id']);
                                }
                            }
                        }
                    }
                    var confirmResult = confirm('Are You Sure you want to delete '+count+' records selected?');
                    if(confirmResult)
                    {
                        var delResult = sforce.connection.deleteIds(deleteIdsList);
                        for(var i=0;i<delResult.length;i++)
                        {
                            if (delResult[i].getBoolean("success")) {
                                $scope.logs.push({time:$scope.getDateTime(),operation:'Delete',message:" record with id " + deleteIdsList[i] + " deleted"});
                            } else {
                                $scope.errors.push({time:$scope.getDateTime(),operation:'Delete',message:" "+deleteIdsList[i]+" failed, "+"Cause: "+delResult[i].errors.message});
                                $scope.showErrors = true;
                                $scope.showToolbar =false;
                                $scope.showLogs = false;
                                $scope.showParentFields = false;
                                $scope.showChildFields = false;
                            }
                            
                        }
                        $scope.getParentChildRecords(false);
                        cancel();
                    }
                }
                
                $scope.updateable = function(field)
                {
                    if(field.fieldDetail.updateable=='true')
                        return true;
                    return false;
                }
                
                $scope.unique = function(field)
                {
                    if(field.fieldDetail.unique =='true')
                        return true;
                    return false;
                }
                
                $scope.insertParentRecord = function(element)
                {
                    try
                    {
                    	var insertResult = sforce.connection.upsert("Id", [$scope.newParentRecord]);
                    }
                    catch(error)
                    {
                        $scope.errors.push({time:$scope.getDateTime(),operation:'Insert',message:error.errors.message});
                        $scope.showErrors = true;
                        $scope.showToolbar =false;
                        $scope.showLogs = false;
                        $scope.showParentFields = false;
                        $scope.showChildFields = false;
                    }
                    if(insertResult[0].getBoolean('success'))
                    {
                        $scope.getParentChildRecords(false);
                        $scope.logs.push({time:$scope.getDateTime(),operation:'Insert',message:insertResult[0].id+" is created successfully"});
                    }
                    $scope.createNewParent = false;
                }
                
                $scope.insertChildRecord = function(element)
                {
                    try
                    {
                    	var insertResult = sforce.connection.upsert("Id", [$scope.newChildRecord]);
                    }
                    catch(error)
                    {
                        $scope.errors.push({time:$scope.getDateTime(),operation:'Insert',message:error.errors.message});
                        $scope.showErrors = true;
                        $scope.showToolbar =false;
                        $scope.showLogs = false;
                        $scope.showParentFields = false;
                        $scope.showChildFields = false;
                    }
                    if(insertResult[0].getBoolean('success'))
                    {
                        $scope.getParentChildRecords(false);
                        $scope.logs.push({time:$scope.getDateTime(),operation:'Insert',message:insertResult[0].id+" is created successfully"});
                    }
                    $scope.createNewChild = false;
                }
                
                $scope.childOrder = function(fieldName)
                {
                    if($scope.childOrderByfieldName.trim().toLowerCase() == fieldName.trim().toLowerCase())
                    {
                        $scope.childIsReverseOrdered = !($scope.childIsReverseOrdered);
                    }
                    else
                    {
                        $scope.childOrderByfieldName = fieldName;
                        $scope.childIsReverseOrdered = false;
                    }
                }
                
                $scope.paginateTable = function()
                {
                    $scope.totalPages = Math.ceil($scope.parentAndChildRecordsList.length / $scope.recordsPerPage);
                    var requiredRecords = new Array();
                    if(parseInt($scope.pageNumber)==0)
                    {
                        $scope.pageNumber =1;
                    }
                    else if(parseInt($scope.pageNumber)>parseInt($scope.totalPages))
                    {
                        $scope.pageNumber =$scope.totalPages;
                    }
                    var startIndex =  ($scope.pageNumber-1) * $scope.recordsPerPage;
                    for(var i=startIndex;i<(startIndex+$scope.recordsPerPage) && i<$scope.parentAndChildRecordsList.length;i++)
                    {
                        requiredRecords.push($scope.parentAndChildRecordsList[i]);
                    }
                    $scope.recordsInDisplay = requiredRecords;
                }
                
                $scope.instantiateNewRecord = function(type,parentRecord)
                {
                    if(type == 'parent')
                    {
                        if(!$scope.fieldsSelectedForMassUpdate)
                        {
                            $scope.createNewParent = true;
                        }
                        
                        $scope.newParentRecord = new sforce.SObject($scope.objectName);
                        
                    }
                    else if(type == 'child')
                    {
                        if(!$scope.fieldsSelectedForMassUpdate)
                        {
                            $scope.createNewChild = true; 
                        }
                        $scope.newChildRecord = new sforce.SObject($scope.selectedChildDetails.name);
                        
                    }
                }  
                
                
                
                $scope.updateRecordsMethod = function()
                {
                    if($scope.massUpdateParentChildSelection == 'Parent' && $scope.newParentRecord!=null)
                    { 
                        var updateParentList =  new Array();
                        var requiredIds = new Array();
                        var selectedMassUpdateFields = new Array();
                        for(var i=0;i<$scope.fields.length;i++)
                        {
                            if($scope.fields[i].massUpdate)
                            {
                                selectedMassUpdateFields.push($scope.fields[i].fieldDetail.name);
                            }
                        }
                        selectedMassUpdateFields.push('Id');
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                        {
                            if($scope.parentAndChildRecordsList[i].updateRecord)
                            {
                                requiredIds.push('\''+$scope.parentAndChildRecordsList[i]['Id']+'\'');
                            }
                        }
                        updateParentList = sforce.connection.query('select '+selectedMassUpdateFields.join(',')+' from '+$scope.objectName+' where id in ( '+requiredIds.join(',')+' )');
                        updateParentList = updateParentList['records'];
                        if(!Array.isArray(updateParentList))
                        {
                            var newArray = new Array();
                            newArray.push(updateParentList);
                            updateParentList = newArray;
                        }
                        for(var i=0;i<$scope.fields.length;i++)
                        {
                            if($scope.fields[i].massUpdate)
                            {
                                for(j=0;j<updateParentList.length;j++)
                                {
                                    if($scope.fields[i].fieldDetail.type=="datetime" ||$scope.fields[i].fieldDetail.type=="date")
                                    {
                                        $scope.newParentRecord[$scope.fields[i].fieldDetail.name] = $scope.newParentRecord[$scope.fields[i].fieldDetail.name].toJSON();
                                    }
                                    updateParentList[j][$scope.fields[i].fieldDetail.name] = $scope.newParentRecord[$scope.fields[i].fieldDetail.name];
                                }
                            }
                        }
                        if(updateParentList.length>0)
                        {
                            var updateResult = sforce.connection.update(updateParentList);
                        	for(var i=0;i<updateResult.length;i++)
                            {
                                if(updateResult[i].getBoolean('success'))
                                {
                                    
                                    $scope.logs.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update on record '+updateResult[i].Id+ ' successful'});
                                }
                                else
                                {
                                    $scope.errors.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update failed cause'+updateResult[i].errors.message});
                                    $scope.showErrors = true;
                                    $scope.showToolbar =false;
                                    $scope.showLogs = false;
                                    $scope.showParentFields = false;
                                    $scope.showChildFields = false;
                                }
                            }
                        }
                    }
                    else if($scope.massUpdateParentChildSelection == 'Child' && $scope.newChildRecord!=null)
                    { 
                        var updateChildList =  new Array();
                        var requiredIds = new Array();
                        var selectedMassUpdateFields = new Array();
                        
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++)
                        {
                            if($scope.ChildRelationShipFields[i].massUpdate)
                            {
                                selectedMassUpdateFields.push($scope.ChildRelationShipFields[i].fieldDetail.name);
                            }
                        }
                        selectedMassUpdateFields.push('Id');
                        console.log(selectedMassUpdateFields);
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                        {
                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=null && $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=undefined)
                            {
                                if(Array.isArray($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']))
                                {
                                    for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++)
                                    {
                                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord)
                                        {
                                            requiredIds.push('\''+$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j]['Id']+'\'');
                                        }
                                    }
                                }
                                else if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined)
                                {
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].updateRecord)
                                    {
                                        requiredIds.push('\''+$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']['Id']+'\'');
                                    }
                                }
                            }
                        }
                        updateChildList = sforce.connection.query('select '+selectedMassUpdateFields.join(',')+' from '+$scope.selectedChildDetails.name+' where id in ( '+requiredIds.join(',')+' )');
                        updateChildList = updateChildList['records'];
                        if(!Array.isArray(updateChildList))
                        {
                            var newArray = new Array();
                            newArray.push(updateChildList);
                            updateChildList = newArray;
                        }
                        
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++)
                        {
                            if($scope.ChildRelationShipFields[i].massUpdate)
                            {
                                for(j=0;j<updateChildList.length;j++)
                                {
                                    if($scope.ChildRelationShipFields[i].fieldDetail.type=="datetime" ||$scope.ChildRelationShipFields[i].fieldDetail.type=="date")
                                    {
                                        $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name] = $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name].toJSON();
                                    }
                                    updateChildList[j][$scope.ChildRelationShipFields[i].fieldDetail.name] = $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name];
                                }
                            }
                        }
                        if(updateChildList.length>0)
                        {
                            var updateResult = sforce.connection.update(updateChildList);
                            for(var i=0;i<updateResult.length;i++)
                            {
                                if(updateResult[i].getBoolean('success'))
                                {
                                    
                                    $scope.logs.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update on record '+updateResult[i].Id+ ' successful'});
                                }
                                else
                                {
                                    $scope.errors.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update failed cause'+updateResult[i].errors.message});
                                    $scope.showErrors = true;
                                    $scope.showToolbar =false;
                                    $scope.showLogs = false;
                                    $scope.showParentFields = false;
                                    $scope.showChildFields = false;
                                }
                            }
                        }
                    }
                        else
                        {
                            var updateParentList = new Array();
                            var updateChildList = new Array();
                            var requiredParentIds = new Array();
                            var requiredChildIds = new Array();
                            for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                            {
                                if($scope.parentAndChildRecordsList[i].updateRecord)
                                {
                                    requiredParentIds.push('\''+$scope.parentAndChildRecordsList[i]['Id']+'\'');
                                }
                            }
                            for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                            {
                                if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=null)
                                {
                                    if(Array.isArray($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']))
                                    {
                                        for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++)
                                        {
                                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord)
                                            {
                                                requiredChildIds.push('\''+$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j]['Id']+'\'');
                                            }
                                        }
                                    }
                                    else if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined)
                                    {
                                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].updateRecord)
                                        {
                                            requiredChildIds.push('\''+$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']['Id']+'\'');
                                        }
                                    }
                                }
                            }
                            var selectedFields = new Array();
                            for(var i=0;i<$scope.fields.length;i++)
                            { 
                                if($scope.fields[i].fieldDetail.updateable=='true' && $scope.fields[i].selected && $scope.fields[i].fieldDetail.name!='Id')
                                {
                                    selectedFields.push($scope.fields[i].fieldDetail.name);
                                }
                            }
                            selectedFields.push('Id');
                            var selectedChildFields = new Array();
                            for(var i=0;i<$scope.ChildRelationShipFields.length;i++)
                            { 
                                if($scope.ChildRelationShipFields[i].fieldDetail.updateable=='true' && $scope.ChildRelationShipFields[i].selected && $scope.ChildRelationShipFields[i].fieldDetail.name!='Id')
                                {
                                     selectedChildFields.push($scope.ChildRelationShipFields[i].fieldDetail.name);
                                }
                            }
                            selectedChildFields.push('Id');
                            
                            if(requiredParentIds.length>0)
                            {
                                updateParentList = sforce.connection.query('select '+selectedFields.join(',')+' from '+$scope.objectName+' where id in ( '+requiredParentIds.join(',') +' )');
                                updateParentList = updateParentList['records'];
                                if(!Array.isArray(updateParentList))
                                {
                                    var newArray = new Array();
                                    newArray.push(updateParentList);
                                    updateParentList = newArray;
                                }
                                var count=0;
                                for(var i=0;i<$scope.parentAndChildRecordsList.length && count<updateParentList.length;i++)
                                {
                                    for(var j=0;j<updateParentList.length;j++)
                                    {
                                        if(updateParentList[j]['Id']==$scope.parentAndChildRecordsList[i]['Id'])
                                        {
                                            count++;
                                            for(var k=0;k<$scope.fields.length;k++)
                                            {
                                                if($scope.fields[k].selected && $scope.fields[k].fieldDetail.updateable=='true')
                                                {
                                                    if($scope.fields[k].fieldDetail.type=='date' || $scope.fields[k].fieldDetail.type=='datetime')
                                                    {
                                                        $scope.parentAndChildRecordsList[i][$scope.fields[k].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.fields[k].fieldDetail.name].toJSON();
                                                    }
                                                    updateParentList[j][$scope.fields[k].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.fields[k].fieldDetail.name];
                                                }
                                            }
                                        }
                                    }
                                }
                                var updateResult = sforce.connection.update(updateParentList);
                                for(var i=0;i<updateResult.length;i++)
                                {
                                    if(updateResult[i].getBoolean('success'))
                                    {
                                        
                                        $scope.logs.push({time:$scope.getDateTime(),operation:'Update',message:'update on record '+updateResult[i].Id+ ' successful'});
                                    }
                                    else
                                    {
                                        $scope.errors.push({time:$scope.getDateTime(),operation:'Update',message:'update failed cause'+updateResult[i].errors.message});
                                        $scope.showErrors = true;
                                        $scope.showToolbar =false;
                                        $scope.showLogs = false;
                                        $scope.showParentFields = false;
                                        $scope.showChildFields = false;
                                    }
                                }
                            }
                            if(requiredChildIds.length>0)
                            {
                                updateChildList = sforce.connection.query('select '+selectedChildFields.join(',')+' from '+$scope.selectedChildDetails.name+' where id in ( '+requiredChildIds.join(',') +' )');
                                updateChildList = updateChildList['records'];
                                if(!Array.isArray(updateChildList))
                                {
                                    var newArray = new Array();
                                    newArray.push(updateChildList);
                                    updateChildList = newArray;
                                }
                                var count=0;
                                for(var i=0;i<$scope.parentAndChildRecordsList.length && count<updateChildList.length;i++)
                                {
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=null && $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=undefined)
                                    {
                                        if(Array.isArray($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']))
                                        {
                                            for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++)
                                            {
                                                for(var k=0;k<updateChildList.length;k++)
                                                {
                                                     if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']['Id'] == updateChildList[k]['Id'])
                                                     {
                                                         for(var l=0;l<$scope.ChildRelationShipFields.length;l++)
                                                         {
                                                             if($scope.ChildRelationShipFields[l].selected && $scope.ChildRelationShipFields[l].fieldDetail.updateable=='true')
                                                             {
                                                                 count++;
                                                                 if($scope.ChildRelationShipFields[l].fieldDetail.type=='datetime' || $scope.ChildRelationShipFields[l].fieldDetail.type=='date')
                                                                 {
                                                                     $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j][$scope.ChildRelationShipFields[l].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j][$scope.ChildRelationShipFields[l].fieldDetail.name].toJSON();
                                                                 }
                                                                 updateChildList[k][$scope.ChildRelationShipFields[l].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j][$scope.ChildRelationShipFields[l].fieldDetail.name];
                                                             }
                                                         }
                                                     }
                                                }
                                            }
                                        }
                                        else if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined)
                                        {
                                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].updateRecord)
                                            {
                                                for(var k=0;k<updateChildList.length;k++)
                                                {
                                                     if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']['Id'] == updateChildList[k]['Id'])
                                                     {
                                                         for(var l=0;l<$scope.ChildRelationShipFields.length;l++)
                                                         {
                                                             if($scope.ChildRelationShipFields[l].selected && $scope.ChildRelationShipFields[l].fieldDetail.updateable=='true')
                                                             {
                                                                 count++;
                                                                 if($scope.ChildRelationShipFields[l].fieldDetail.type=='datetime' || $scope.ChildRelationShipFields[l].fieldDetail.type=='date')
                                                                 {
                                                                     $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][$scope.ChildRelationShipFields[l].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][$scope.ChildRelationShipFields[l].fieldDetail.name].toJSON();
                                                                 }
                                                                 updateChildList[k][$scope.ChildRelationShipFields[l].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][$scope.ChildRelationShipFields[l].fieldDetail.name];
                                                             }
                                                         }
                                                     }
                                                }
                                            }
                                        }
                                    }
                                }
                                var updateResult = sforce.connection.update(updateChildList);
                                for(var i=0;i<updateResult.length;i++)
                                {
                                    if(updateResult[i].getBoolean('success'))
                                    {
                                        
                                        $scope.logs.push({time:$scope.getDateTime(),operation:'Update',message:'update on record '+updateResult[i].Id+ ' successful'});
                                    }
                                    else
                                    {
                                        $scope.errors.push({time:$scope.getDateTime(),operation:'Update',message:'update failed cause'+updateResult[i].errors.message});
                                        $scope.showErrors = true;
                                        $scope.showToolbar =false;
                                        $scope.showLogs = false;
                                        $scope.showParentFields = false;
                                        $scope.showChildFields = false;
                                    }
                                }
                            }
                        }
                    $scope.getParentChildRecords(false);
                    $scope.cancel();
                }
                $scope.showDeleteButton = function()
                {
                    for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                    {
                        if($scope.parentAndChildRecordsList[i].deleteRecord)
                        {
                            return true;
                        }
                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] != null)
                        {
                            if(Array.isArray($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']))
                            {
                                for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++)
                                {
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].deleteRecord)
                                    {
                                        return true;
                                    }
                                }
                            }
                            else if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined)
                            {
                                if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].deleteRecord)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                    return false;
                }
                $scope.showSelectedFieldsButtonValidate = function()
                {
                    if($scope.massUpdateParentChildSelection == 'Parent')
                    { 
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                        {
                            if($scope.parentAndChildRecordsList[i].updateRecord)
                            {
                                $scope.showSelectedFieldsButton =  true;
                                return null;
                            }
                        }
                    }
                    else if($scope.massUpdateParentChildSelection == 'Child')
                    {
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                        {
                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] != null)
                            {
                                if(Array.isArray($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']))
                                {
                                    for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++)
                                    {
                                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord)
                                        {
                                            $scope.showSelectedFieldsButton = true;
                                            return null;
                                        }
                                    }
                                }
                                else if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined)
                                {
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].updateRecord)
                                    {
                                        $scope.showSelectedFieldsButton = true;
                                        return null;
                                    }
                                }
                            }
                        }
                    }
                        
                    $scope.showSelectedFieldsButton =  false;
                }
                
                $scope.validate = function(type)
                {
                    if(type=='parent')
                    {
                        var isValid = true;
                        for(var i=0;i<$scope.fields.length;i++)
                        {
                            if($scope.fields[i].fieldDetail.nillable == 'false' && $scope.fields[i].fieldDetail.updateable == 'true')
                            {
                                var value = $scope.newParentRecord[$scope.fields[i].fieldDetail.name];
                                if(value==undefined || value==null || value.trim()=='')
                                {
                                    
                                    isValid =false;
                                }
                            }
                        }
                        if(isValid)
                        {
                            $scope.insertParentRecord();
                        }
                    }
                    else if(type=='child')
                    {
                        var isValid = true;
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++)
                        {
                            if($scope.ChildRelationShipFields[i].fieldDetail.nillable == 'false' && $scope.ChildRelationShipFields[i].fieldDetail.updateable == 'true')
                            {
                                var value = $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name];
                                if(value==undefined || value==null || value.trim()=='')
                                {
                                    isValid =false;
                                }
                            }
                        }
                        if(isValid)
                        {
                            $scope.insertChildRecord();
                        }
                    }
                }
                $scope.setValuesButtonValidate = function(type)
                {
                    if(type=='parent')
                    {
                        for(var i=0;i<$scope.fields.length;i++)
                        {
                            if($scope.fields[i].massUpdate)
                            {
                                return true;
                            }
                        }
                    }
                    else if(type=='child')
                    {
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++)
                        {
                            if($scope.ChildRelationShipFields[i].massUpdate)
                            {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                $scope.setForUpdate = function(field,record)
                {
                    if(field.fieldDetail.updateable == 'true')
                    {
                        $scope.updateRecords = true;
                        record.updateRecord = true;
                        $scope.deleteRecords = false;
                        $scope.massUpdateRecords = false;
                    }
                    console.log('field',field);
                }
                $scope.cancel = function()
                {
                    $scope.createNewParent = false;
                    $scope.createNewChild = false;
                    $scope.newParentRecord = null;
                    $scope.newChildRecord = null;
                    $scope.deleteRecords = false;
                    $scope.updateRecords = false;
                    $scope.massUpdateRecords = false;
                    $scope.showParentFieldsForMassUpdate = false;
                    $scope.showChildFieldsForMassUpdate = false;
                    $scope.fieldsSelectedForMassUpdate = false;
                    $scope.massUpdateParentChildSelection = null;
                    $scope.showSelectedFieldsButton = false;
                    $scope.fieldsSelectedForMassUpdate = false;
                    $scope.searchText = '';
                    for(var i=0;i<$scope.fields.length;i++)
                    {
                        $scope.fields[i].massUpdate =false;
                    }
                    for(var i=0;i<$scope.ChildRelationShipFields.length;i++)
                    {
                        $scope.ChildRelationShipFields[i].massUpdate =false;
                    }
                    for(var i=0;i<$scope.parentAndChildRecordsList.length;i++)
                    {
                        $scope.parentAndChildRecordsList[i].updateRecord =false;
                        $scope.parentAndChildRecordsList[i].deleteRecord =false;
                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] != null)
                        {
                            if(Array.isArray($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']))
                            {
                                for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++)
                                {
                                    $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord =false;
                                    $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].deleteRecord =false;
                                }
                            }
                            else if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']!=undefined)
                            {
                                $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].updateRecord =false;
                                $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].deleteRecord =false;
                            }
                        }
                    }
                    $scope.showTable = true;
                    console.log($scope.showTable)
                }
                $scope.cancelUpdate = function()
                {
                    $scope.getParentChildRecords(false);
                    $scope.cancel();
                }
                $scope.changePageNumber = function(amount)
                {
                    $scope.pageNumber = parseInt($scope.pageNumber) + parseInt(amount);
                    $scope.paginateTable();
                }
            });
            
            angular.module("DataTableApp").directive("parentToolBar",function(){
                return {
                    template:'<div class="panel-heading"  ng-click="showParentFields=!showParentFields;"><h1 class="panel-title">{{objectName}}</h1></div><div class="panel-body"><span ng-repeat="field in fields" ng-show="field.selected"   style="padding-left:3%;"><input type="checkbox" ng-model="field.showField"/> {{field.fieldDetail.label}}&nbsp;<br/></span></div>',
                    restrict:'E'
                };
            });
            angular.module("DataTableApp").directive("inputField",function($compile){
                return {
                    template:'<span ng-switch on="type" >'+
                    		'<span ng-switch-when="date"><input ng-class={required:required(field)} type="datetime-local" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                            '<span ng-switch-when="datetime"><input ng-class={required:required(field)} type="datetime-local" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                            '<span ng-switch-when="currency"><input ng-class={required:required(field)} type="currency" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    		'<span ng-switch-when="int"><input ng-class={required:required(field)} min="1" type="number" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                            '<span ng-switch-when="number"><input ng-class={required:required(field)} min="1" type="number" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                            '<span ng-switch-when="double"><input ng-class={required:required(field)} min="0.01" type="number" ng-model="value[field.fieldDetail.name]" step="any" id="inputValue" /></span>'+
                            '<span ng-switch-when="id"><input ng-class={required:required(field)} type="text" pattern=".{15,18}" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                            '<span ng-switch-when="phone"><input ng-class={required:required(field)} type="phone" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                            '<span ng-switch-when="url"><input ng-class={required:required(field)} type="url" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                            '<span ng-switch-when="picklist"><select ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]" id="inputValue"><option ng-repeat="option in picklistvalues" ng-show="option.active" ng-bind="option.label">{{option.label}}</option></select></span>'+
                            '<span ng-switch-when="email"><input ng-class={required:required(field)} type="email" ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                            '<span ng-switch-when="reference"><look-up record="value" references="references" field="field" type="referenceto"></look-up></span>'+
                            '<span ng-switch-when="boolean"><input ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]"  type="checkbox"  id="inputValue" /></span>'+ 
                            '<span ng-switch-when="textarea"><textarea ng-class={required:required(field)} id="inputValue" ng-model="value[field.fieldDetail.name]"></textarea></span>'+	
                    		'<span ng-switch-when="address"><textarea ng-class={required:required(field)} id="inputValue" ng-model="value[field.fieldDetail.name]"></textarea></span>'+	
                    		'<span ng-switch-when="text"><input type="text" ng-class={required:required(field)}  ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                    		'<span ng-switch-when="text"><input type="string" ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                            '<span ng-switch-default ><input type="text" ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                        '</span>',
                    scope:{
                        type:'=',
                        value: '=',
                        picklistvalues: '=',
                        referenceto: '=',
                        field: '=',
                        references: '='
                        },
                    restrict:'E',
                    link:function(scope,element)
                    {
                        if(scope.value != null || scope.value != undefined)
                        {
                            if(scope.type=='datetime')
                            {
                                if(scope.value[scope.field.fieldDetail.name]!=null || scope.value[scope.field.fieldDetail.name]!=undefined)
                                {
                                    var dateTime = scope.value[scope.field.fieldDetail.name];
                                    dateTime = dateTime.replace('Z','').split('T');
                                    var date = dateTime[0].split('-');
                                    var time = dateTime[1].split(':');
                                    var seconds = time[2].split('.');
                                    scope.value = new Date(date[0],date[1],date[2],time[0],time[1],seconds[0],seconds[1]);
                                }
                                else
                                {
                                    scope.value = new Date();
                                }
                                
                            }
                            else if(scope.type=='date')
                            {
                                if(scope.value[scope.field.fieldDetail.name]!=null || scope.value[scope.field.fieldDetail.name]!=undefined)
                                {
                                    var dateTime = scope.value[scope.field.fieldDetail.name];
                                    dateTime = dateTime.replace('Z','').split('T');
                                    var date = dateTime[0].split('-');
                                    scope.value[scope.field.fieldDetail.name] = new Date(date[0],date[1],date[2],0,0,0,0);
                                }
                                else
                                {
                                    scope.value[scope.field.fieldDetail.name] = new Date();
                                }
                                
                            }
                        }
                        
                        
                        scope.required = function(field)
                        {
                            if(field.fieldDetail.nillable=='true')
                                return false;
                            return true;
                        }
                    }
                };
            });
            
            
            angular.module("DataTableApp").directive("outputField",function($compile){
                return {
                    template:'<span ng-switch on="type" >'+
                    		
                            '<span ng-switch-when="reference"><hyperlink record="value" references="references" field="field" type="referenceto"></hyperlink></span>'+
                            
                    		'<span ng-switch-default ><output type="text" ng-bind="value[field.fieldDetail.name]" id="outputValue"/></span>'+
                        '</span>',
                    scope:{
                        type:'=',
                        value: '=',
                        referenceto: '=',
                        field: '=',
                        references: '='
                        },
                    restrict:'E',
                };
            });
            
            angular.module("DataTableApp").directive("hyperlink",function($compile, $window){
                return {
                    template:'<a id="outputValue" href="/{{Id}}">{{Name}}</a>',
                    scope:{
                        type:'=',
                        record: '=',
                        field: '=',
                        references: '='
                        },
                    restrict:'E',
                    link:function(scope,element)
                    {
                        scope.Id = scope.record[scope.field.fieldDetail.name];
                        scope.Name = '';
                        for(var i=0;i<scope.references.length;i++)
                        {
                            if(scope.references[i].type == scope.type)
                            {
                                for(var j=0;j<scope.references[i].values.length;j++)
                                {
                                    if(scope.references[i].values[j].Id == scope.Id )
                                    {
                                        scope.Name = scope.references[i].values[j].Name;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        scope.detail = function()
                        {
                            $window.open('/'+scope.Id);
                        }
                    }
                };
            }); 
            
            angular.module("DataTableApp").directive("lookUp",function(){
            	return{
                    scope:{
                     type: '=',
                        record : '=',
                        field : '=',
                        references : '='
                    },
                    template :'<span>'+
                    '<input type="text" ng-class={required:required(field)} ng-change="updateValues();" ng-model="searchText" id="inputValue"/>'+
                    '<div class="lookupMode" ng-show="autoComplete" style="z-index:3;display:block;position:absolute;background-color:white;width:234px;min-height:0px;border-top:solid black 1px;">'+
                    '<ul style="list-style-type:none;padding-left:initial;display:inline-block;">'+
                    '<li ng-repeat="recordValues in lookupvalues" value="{{recordValues[\'Id\']}}" ng-click="selectedValue(recordValues);" style="margin-left:1px;padding-left:4px;padding-right:4px;width:234px;border-bottom: solid black 1px;border-left: solid black 1px;border-right: solid black 1px;" ng-class="{focussed:hover}" ng-mouseenter="hover = true" ng-mouseleave="hover = false">'+
                    '{{recordValues["Name"]}}'+
                    '</li>'+
                    '</ul>'+
                    '</div>'+
                    '</span>',
                    restrict :'E',
                    link: function (scope, element,attrs) {
                        scope.searchText = ' ';
                        scope.autoComplete = false;
                        scope.typeValues = new Array();
                        
                        for(var i=0;i<scope.references.length;i++)
                        {
                            if(scope.references[i].type == scope.type)
                            {
                                scope.typeValues = scope.references[i].values;
                            }
                        }
                        
                        scope.updateValues = function()
                        {
                            scope.lookupvalues = new Array();
                            var count = 0;
                            for(var i=0;i<scope.typeValues.length && count<5;i++)
                            {
                                if(scope.typeValues[i].Name.toLowerCase().indexOf(scope.searchText.toLowerCase()) >= 0)
                                {
                                    count++;
                                    scope.lookupvalues.push(scope.typeValues[i]);
                                }
                            }
                            if(count<5)
                            {
                                var dbValues =  sforce.connection.query("select id, name from "+scope.type+" where name like '%"+scope.searchText+"%' order by name asc limit 5");
                                if(Array.isArray(dbValues['records']))
                                {
                                    scope.lookupvalues = dbValues['records'];
                                }
                                else
                                {
                                    var arrayList = new Array();
                                    arrayList.push(dbValues['records']);
                                    scope.lookupvalues = arrayList;
                                }
                            }
                            scope.autoComplete = true;
                        }
                        
                        scope.selectedValue = function(records)
                        {
                            scope.searchText = records['Name'];
                            scope.record[scope.field.fieldDetail.name] = records['Id'];
                            scope.autoComplete = false;
                        }
                        
                        scope.required = function(field)
                        {
                            if(field.fieldDetail.nillable=='true')
                                return false;
                            return true;
                        }
                    }
                };
            });
            
            angular.module("DataTableApp").directive("childToolBar",function(){
                return {
                    template:'<div class="panel-heading"  ng-click="showChildFields=!showChildFields;"><h1 class="panel-title">{{selectedChildDetails.label}}</h1></div><div class="panel-body"><span ng-repeat="field in ChildRelationShipFields" ng-show="field.selected"   style="padding-left:3%;"><input type="checkbox" ng-model="field.showField"/> {{field.fieldDetail.label}}&nbsp;<br/></span></div>',
                    restrict:'E'
                };
            }); 
            
            angular.module("DataTableApp").directive("fieldsTree",function(){
                return {
                    template:'<div class="panel-heading"><h1 class="panel-title">{{objectName}}</h1></div><div class="panel-body"><span ng-repeat="field in fields" style="padding-left:3%;" ng-show="!massUpdateRecords || (updateable(field) && !unique(field))" ><input ng-click="displayTableButton();" ng-show="!massUpdateRecords" type="checkbox" ng-model="field.selected"/><input ng-show="massUpdateRecords" type="checkbox" ng-model="field.massUpdate"/> {{field.fieldDetail.label}}&nbsp;<br/></span><hr ng-show="massUpdateRecords"/><table width="100%" ng-show="massUpdateRecords"><tr><td width="50%"><button ng-click="instantiateNewRecord(\'parent\',null);fieldsSelectedForMassUpdate=true;" ng-show="setValuesButtonValidate(\'parent\');">Set Values</button></td><td width="50%"><button ng-click="cancel();">Cancel</button></td></tr></table></div>',
                    restrict:'E'
                };
            });
            
            angular.module("DataTableApp").directive("childFieldsTree",function(){
                return {
                    template:'<div class="panel-heading"><h1 class="panel-title">{{selectedChildDetails.label}}</h1></div><div class="panel-body"><span ng-repeat="field in ChildRelationShipFields" style="padding-left:3%;" ng-show="!massUpdateRecords || (updateable(field) && !unique(field))"><input ng-click="displayTableButton();" ng-show="!massUpdateRecords" type="checkbox" ng-model="field.selected"/><input ng-show="massUpdateRecords" type="checkbox" ng-model="field.massUpdate"/> {{field.fieldDetail.label}}&nbsp;<br/></span><hr ng-show="massUpdateRecords"/><table width="100%" ng-show="massUpdateRecords"><tr><td width="50%"><button ng-click="instantiateNewRecord(\'child\',null);fieldsSelectedForMassUpdate=true;" ng-show="setValuesButtonValidate(\'child\');">Set Values</button></td><td width="50%"><button ng-click="cancel();">Cancel</button></td></tr></table></div>',
                    restrict:'E'
                };
            });
            
            angular.module("DataTableApp").directive("relationTree",function(){
                return {
                    template:'<div class="panel-heading"><h1 class="panel-title">{{objectName}} RelatedList</h1></div><div class="panel-body"><span ng-repeat="childRelation in ChildRelationShips" style="padding-left:3%;" ng-show="!!childRelation.ChildRelationshipDetail.relationshipName"><input type="checkbox" ng-click="getSelectedRelatedListFields(childRelation.ChildRelationshipDetail.relationshipName);displayTableButton();"   ng-model="childRelation.selected"/> {{childRelation.ChildRelationshipDetail.relationshipName}}&nbsp;<br/></span></div>',
                    restrict:'E'
                };
            });
                        
            angular.module("DataTableApp").directive("logs",function(){
                return {
                    template:'<div class="panel-heading" ng-click="showLogs=!showLogs;"><h1 class="panel-title">Logs</h1></div><div class="panel-body"><filterlogs/><hr/><table><tr><th width="35%">Time</th><th width="20%">Operation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th>Message</th></tr><tr ng-repeat="log in logs" ng-show="logsFilter(log.operation);"><td width="35%">{{log.time}}</td><td width="20%">{{log.operation}}</td><td>{{log.message}}</td></tr></table></div>',
                    restrict:'E'
                };
            });
            
            angular.module("DataTableApp").directive("errors",function(){
                return {
                    template:'<div class="panel-heading" ng-click="showErrors=!showErrors;"><h1 class="panel-title">Errors</h1></div><div class="panel-body"><filtererrors/><hr/><table><tr><th width="35%">Time</th><th width="20%">Operation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th >Message</th></tr><tr ng-repeat="error in errors" ng-show="errorsFilter(error.operation);"><td>{{error.time}}</td><td>{{error.operation}}</td><td>{{error.message}}</td></tr></table></div>',
                    restrict:'E'
                };
            });

            angular.module("DataTableApp").directive("filterlogs",function(){
                return {
                    template:'<table><tr><td width="20%">Retrieve&nbsp;&nbsp;<input type="checkbox" ng-model="captureQuery"/></td><td width="20%">Insert&nbsp;&nbsp;<input type="checkbox" ng-model="captureInsert"/></td><td width="20%">Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureUpdate"/></td><td width="20%">Delete&nbsp;&nbsp;<input type="checkbox" ng-model="captureDelete"/></td><td width="20%">Mass Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureMassUpdate"/></td></tr></table>',
                    restrict:'E'
                };
            });
            angular.module("DataTableApp").directive("filtererrors",function(){
                return {
                    template:'<table><tr><td width="20%">Retrieve&nbsp;&nbsp;<input type="checkbox" ng-model="captureQueryError"/></td><td width="20%">Insert&nbsp;&nbsp;<input type="checkbox" ng-model="captureInsertError"/></td><td width="20%">Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureUpdateError"/></td><td width="20%">Delete&nbsp;&nbsp;<input type="checkbox" ng-model="captureDeleteError"/></td><td width="20%">Mass Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureMassUpdateError"/></td></tr></table>',
                    restrict:'E'
                };
            });
           angular.module("DataTableApp").directive("newParentObject",function(){
                return {
                    template:'<div class="panel-heading">'+
                    '<h1 class="panel-title">{{objectName}}</h1></div>'+
                    '<div class="panel-body">'+
                    '<table class="table table-striped table-hover success">'+
                    '<tr ng-repeat="field in fields" style="padding-left:3%;" ng-show="(updateable(field) && !massUpdateRecords) || field.massUpdate">'+
                    '<td>{{field.fieldDetail.label}} &nbsp;</td>'+
                    '<td>'+ 
                    '<input-field references="referenceArray" field="field" type="field.fieldDetail.type" value="newParentRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</td>'+
                    '</tr>'+ 
                    '<tr >'+
                    '<td><button class="createRecordButton" ng-click="validate(\'parent\');"  type="parent"  ng-show="!massUpdateRecords">Create {{objectName}}</button><button ng-click="updateRecordsMethod();"  ng-show="massUpdateRecords">Update Records</button></td>'+
                    '<td>'+ 
                    '<button ng-click="cancel();">Cancel</button>'+
                    '</td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            angular.module("DataTableApp").directive("newChildObject",function(){
                return {
                    template:'<div class="panel-heading">'+
                    '<h1 class="panel-title">{{selectedChildDetails.label}}</h1></div>'+
                    '<div class="panel-body">'+
                    '<table class="table table-striped table-hover success">'+
                    '<tr ng-repeat="field in ChildRelationShipFields" style="padding-left:3%;" ng-show="(updateable(field) && !massUpdateRecords) || field.massUpdate">'+
                    '<td>{{field.fieldDetail.label}} &nbsp;</td>'+
                    '<td>'+ 
                    '<input-field references="referenceArray"  field="field" type="field.fieldDetail.type" value="newChildRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</td>'+
                    '</tr>'+
                    '<tr >'+
                    '<td><button  class="createRecordButton" ng-click="validate(\'child\');"  type="child" ng-show="!massUpdateRecords">Create {{selectedChildDetails.label}}</button><button ng-click="updateRecordsMethod();"  ng-show="massUpdateRecords">Update Records</button></td>'+
                    '<td>'+ 
                    '<button ng-click="cancel();">Cancel</button>'+
                    '</td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            angular.module("DataTableApp").directive("parentTable",function(){
            return {
                    template:'<table><tr><td width="50%">Search: &nbsp;&nbsp;&nbsp;<input ng-model="searchText" placeholder={{objectName}} >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>'+
                    '<td ng-show="!massUpdateRecords && !updateRecords && !deleteRecords"><button ng-click="instantiateNewRecord(\'parent\',null);">Create New {{objectName}}</button></td></tr></table><hr/>'+
                    '<table class="table table-striped table-hover" border="1" >'+
                    '<tr style="background-color: #428bca;border-color: #000000;" >'+
                    '<th  ng-repeat="field in fields"  ng-show="field.selected  && field.showField" ng-click="order(field.fieldDetail.name);sortSelectedOrReveresed(field.fieldDetail.label,fields);" style="background-color: #428bca;border-color: #000000;width:20%;color:#ffffff;">'+
                    '{{field.fieldDetail.label}}&nbsp;&nbsp;&nbsp;<span ng-show="field.sortSelected">&#x25B2;</span><span ng-show="field.sortReverse">&#x25BC;</span>'+
                    '</th>'+
                    '<th ng-show="massUpdateRecords && massUpdateParentChildSelection == \'Parent\'" style="background-color: #428bca;border-color: #000000;width:20%;color:#ffffff;">Select</th>'+
                    '<th ng-show="deleteRecords" style="background-color: #428bca;border-color: #000000;width:20%;color:#ffffff;">Select</th>'+
                    '</tr>'+
                    '<tr class="info" ng-repeat="record in recordsInDisplay | search:searchText | orderBy:OrderByfieldName:isReverseOrdered">'+
                    '<td class="dataHolder" ng-repeat="field in fields" ng-show="field.selected && field.showField" style="width:20%;" ng-dblclick="setForUpdate(field,record);">'+
                    '<span class="viewMode" updateable="{{field.fieldDetail.updateable}}" >'+
                     '<output-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                    '<span class="editMode" style="display:none;" >'+
                    '<input-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+ 
                    '</td>'+
                    '<td ng-show="massUpdateRecords  && massUpdateParentChildSelection == \'Parent\'"><input type="checkbox" ng-click="showSelectedFieldsButtonValidate();" ng-model="record.updateRecord"></td>'+
                    '<td ng-show="deleteRecords"><input type="checkbox" ng-model="record.deleteRecord"></td>'+
                    '</tr>'+
                    '</table>',
                    restrict:'E',
                    link: function(scope, element, attrs)
                    { 
                    }
                };
            });
            angular.module("DataTableApp").directive("parentChildTable",function(){
                return {
                    template:'<table><tr><td width="50%">Search: &nbsp;&nbsp;&nbsp;<input ng-model="searchText" placeholder={{objectName}} >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>'+
                    '<td ng-show="!massUpdateRecords && !updateRecords && !deleteRecords"><button ng-click="instantiateNewRecord(\'parent\',null);">Create New {{objectName}}</button></td></tr></table><hr/>'+
                    '<table class="table table-striped table-hover" border="1" ng-repeat="record in recordsInDisplay | search:searchText | orderBy:OrderByfieldName:isReverseOrdered">'+
                    '<tr style="background-color: #428bca;border-color: #000000;" ng-show="(!collapseChild || $first)">'+
                    '<th  ng-repeat="field in fields"  ng-show="field.selected  && field.showField" ng-click="order(field.fieldDetail.name);sortSelectedOrReveresed(field.fieldDetail.label,fields);" style="background-color: #428bca;border-color: #000000;width:20%;color:#ffffff;">'+
                    '{{field.fieldDetail.label}}&nbsp;&nbsp;&nbsp;<span ng-show="field.sortSelected">&#x25B2;</span><span ng-show="field.sortReverse">&#x25BC;</span>'+
                    '</th>'+
                    '<th ng-show="massUpdateRecords && massUpdateParentChildSelection == \'Parent\'" style="background-color: #428bca;border-color: #000000;width:20%;color:#ffffff;">Select</th>'+
                    '<th ng-show="deleteRecords" style="background-color: #428bca;border-color: #000000;width:20%;color:#ffffff;">Select</th>'+
                    '</tr>'+
                    '<tr class="info">'+
                    '<td class="dataHolder" ng-repeat="field in fields" ng-show="field.selected && field.showField" style="width:20%;" ng-dblclick="setForUpdate(field,record);">'+
                    '<span class="viewMode" updateable="{{field.fieldDetail.updateable}}" >'+
                     '<output-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                    '<span class="editMode" style="display:none;" >'+
                    '<input-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+ 
                    '</td>'+
                    '<td ng-show="massUpdateRecords  && massUpdateParentChildSelection == \'Parent\'"><input type="checkbox" ng-click="showSelectedFieldsButtonValidate();" ng-model="record.updateRecord"></td>'+
                    '<td ng-show="deleteRecords"><input type="checkbox" ng-model="record.deleteRecord"></td>'+
                    '</tr>'+
                   				 '<tr ng-show="!collapseChild">'+
                    				'<td colspan="1000">'+
                                        '<table class="table table-striped table-hover success">'+
                    						'<tr>'+
                    '<td><b><span class="collapseIcon">[+]&nbsp;&nbsp;</span>{{selectedChildRelationName}}({{getChildRecords(record).length}})</b></td>'+
                    							'<td><input ng-model="searchChildText" placeholder={{selectedChildRelationName}} ng-show="getChildRecords(record).length>0"/></td>'+
                    '<td ng-show="!massUpdateRecords && !updateRecords && !deleteRecords"><button ng-click="instantiateNewRecord(\'child\',record);">Create New {{selectedChildDetails.name}}</button></td>'+
                    						'</tr>'+
                                            '<tbody class="childBody">'+
                                            '<tr style="width:20%;background-color: #15A14C;border-color: #000000;color:#ffffff;">'+
                    
                                                '<th ng-repeat="field in ChildRelationShipFields" ng-show="field.selected && field.showField" ng-click="childOrder(field.fieldDetail.name);sortSelectedOrReveresed(field.fieldDetail.label,ChildRelationShipFields);" style="width:20%;background-color: #15A14C;border-color: #000000;color:#ffffff;">'+
                                                        '{{field.fieldDetail.label}}&nbsp;&nbsp;&nbsp;<span ng-show="field.sortSelected">&#x25B2;</span><span ng-show="field.sortReverse">&#x25BC;</span>'+
                                                '</th>'+
                    '<th ng-show="massUpdateRecords  && massUpdateParentChildSelection == \'Child\'" style="width:20%;background-color: #15A14C;border-color: #000000;color:#ffffff;">Select</th>'+
                    '<th ng-show="deleteRecords" style="width:20%;background-color: #15A14C;border-color: #000000;color:#ffffff;">Select</th>'+
                                            '</tr>'+
                                            '<tr class="success" ng-repeat="childRecord in getChildRecords(record) | search:searchChildText | orderBy:childOrderByfieldName:childIsReverseOrdered">'+
                                                
                    '<td ng-repeat="field in ChildRelationShipFields" class="dataHolder" ng-dblclick="setForUpdate(field,childRecord);" ng-show="field.selected && field.showField" style="width:20%;">'+	
                    
                    '<span class="viewMode" updateable="{{field.fieldDetail.updateable}}" >'+
                    '<output-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="childRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                    '<span class="editMode" style="display:none;" >'+
                    '<input-field references="referenceArray"  field="field" type="field.fieldDetail.type" value="childRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                                                '</td>'+
                    '<td ng-show="massUpdateRecords   && massUpdateParentChildSelection == \'Child\'"><input ng-click="showSelectedFieldsButtonValidate();" type="checkbox" ng-model="childRecord.updateRecord"></td>'+
                    '<td ng-show="deleteRecords"><input type="checkbox" ng-model="childRecord.deleteRecord"></td>'+
                                            '</tr>'+
                                            '</tbody>'+
                                        '</table>'+
                    				'</td>'+
                    			'</tr>'+
                    '</table>',
                    restrict:'E',
                    link: function(scope, element, attrs)
                    { 
                    }
                };
            });
            
            angular.module("DataTableApp").filter('search', function() 
            {
                return function(records,word) 
                {
                    var filtered = new Array();
                    if(word!='' && word!=undefined)
                    {
                        for(var i=0;i<records.length;i++)
                        {
                            if(records[i].toString().toLowerCase().indexOf(word.toLowerCase())>0)
                            {
                                filtered.push(records[i]);
                            }
                        }
                        return filtered;
                    }
                    return records;
                };
            });
            
            </script>
        </head>
        <body >
            <div style="z-index:2;width:100%">
                <div style="width:89%;float:left;">
                    
                </div>
            <div id="scrollBottom" style="float:right;width:4.3%;background-color:#DDA0DD;">
                Bottom
            </div>
            </div>
            
            <div id="DetailsController" ng-controller="DetailsController">
                
               <div ng-show="!!sobjectDetail">
                   
                 <div id="Toolbar" ng-show="showToolbar" ng-blur="showToolbar=!showToolbar;" class="panel panel-warning" style ="float:left;background-color: white;position: fixed;margin-left:1.5%;width: 40%;z-index: 3;">
                    <div class="panel-heading" ng-click="showToolbar=!showToolbar;showParentFields=false;showChildFields=false;">
                        <h1 class="panel-title">
                            Tool Bar
                        </h1>
                    </div>
                    <div class="panel-body">
                        <table>
                            <tr>
                                <td >Records Per Page  &nbsp;&nbsp;&nbsp;</td>
                                <td><input ng-model="recordsPerPage" ng-blur="paginateTable();"/></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr>
                                <td >Parent Query Condition  &nbsp;&nbsp;&nbsp;</td>
                                <td><textarea ng-model="queryCondition" ng-blur="getParentChildRecords(false);"/></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr>
                                <td > Child Query Condition  &nbsp;&nbsp;&nbsp;</td>
                                <td><textarea ng-model="childQueryCondition" ng-blur="getParentChildRecords(false);"/></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr>
                                <td >Limit Parent Records &nbsp;&nbsp;&nbsp;</td>
                                <td><input ng-model="limitParentRecords" ng-blur="getParentChildRecords(false);"/></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr>
                                <td >Limit Child Records &nbsp;&nbsp;&nbsp;</td>
                                <td><input ng-model="limitChildRecords" ng-blur="getParentChildRecords(false);"/></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr ng-show="showTable">
                                <td >Collapse Child Table &nbsp;&nbsp;&nbsp;</td>
                                <td><input ng-model="collapseChild" type="checkbox"/></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr ng-show="updateRecords">
                                <td >Updating Records &nbsp;&nbsp;&nbsp;</td>
                                <td><button ng-click="updateRecordsMethod();">Update</button></td>
                                <td ng-show="updateRecords"> <button ng-click="cancelUpdate();">Cancel</button></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr ng-show="showTable && !updateRecords && !deleteRecords">
                                <td >Mass Update Records &nbsp;&nbsp;&nbsp;</td>
                                <td ng-show="!massUpdateRecords" ><input ng-model="massUpdateRecords" type="checkbox"  ng-click="deleteRecords=false;updateRecords=false;"/></td>
                                <td ng-show="massUpdateRecords && !showSelectedFieldsButton"><input  type="radio" ng-model="massUpdateParentChildSelection" value="Parent"/>&nbsp;Parent &nbsp;&nbsp;<input type="radio"  ng-model="massUpdateParentChildSelection" value="Child" />&nbsp;Child</td>
                                <td ng-show="showSelectedFieldsButton"> <button ng-click="showParentFieldsForMassUpdate=(massUpdateParentChildSelection=='Parent');showChildFieldsForMassUpdate=(massUpdateParentChildSelection=='Child');showTable=false;showToolbar = false;">Select Fields</button></td>
                                <td ng-show="massUpdateRecords"> <button ng-click="cancel();">Cancel</button></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                             <tr ng-show="showTable && !updateRecords && !massUpdateRecords">
                                <td >Delete Records &nbsp;&nbsp;&nbsp;</td>
                                <td ng-show="!deleteRecords"><input ng-model="deleteRecords" type="checkbox" ng-click="updateRecords=false;massUpdateRecords=false;"/></td>
                                 <td ng-show="deleteRecords && showDeleteButton()"><button class="btn btn-danger" ng-click="deleteSelectedRecords();">
                                     Delete
                                     </button></td>
                                 <td ng-show="deleteRecords"> <button ng-click="cancel();">Cancel</button></td>
                            </tr>
                            <tr>
                                <td><div height="1%"><p/></div></td>
                            </tr>
                            <tr>
                                <td ng-show="showDisplayButton"><hr/>
                                    <button class="btn btn-success"  ng-click="getParentChildRecords(true);showToolbar = false;displayTableButton();" >
                                        Display Table
                                    </button>
                                </td>
                            </tr>
                            </table>
                    </div>
                     </div>
                     <div style="word-wrap: break-word;float:left;background-color: #faebcc;position: fixed;width:1%;z-index: 3;" ng-show="!showToolbar" ng-click="showToolbar=!showToolbar;showLogs=false;showErrors=false;showParentFields=false;showChildFields=false">
                         <b>TOOLS</b> 
                     </div>
                </div>
                <div id="Logs" ng-show="showTable" >    
                    <logs ng-show="showLogs" class="panel panel-info" style ="float:left;margin-left:1.5%;background-color: white;position: fixed;width: 60%;z-index: 3;"></logs><div ng-show="!showLogs" style="word-wrap: break-word;margin-top:10%;float:left;background-color: #D9E9F7;position: fixed;width:1%;z-index: 10;"  ng-click="showLogs=!showLogs;showErrors=false;showToolbar=false;showParentFields=false;showChildFields=false">
                    <b>LOGS</b> 
                    </div>
                </div>
                <div id="Errors" ng-show="showTable" >    
                    <errors ng-show="showErrors" class="panel panel-danger" style ="float:left;margin-left:1.5%;background-color: white;position: fixed;width: 70%;z-index: 3;"></errors><div ng-show="!showErrors" style="word-wrap: break-word;float:left;margin-top:18%;background-color: #F4A5A5;position: fixed;width:1%;z-index: 10;"  ng-click="showErrors=!showErrors;showLogs=false;showToolbar=false;showParentFields=false;showChildFields=false">
                    <b>ERRORS</b> 
                    </div>
                </div>
                    <div id="ParentToolbar" ng-show="showTable">
                        <parent-tool-bar ng-show="showParentFields" class="panel panel-primary" style ="float:left;margin-left:1.5%;background-color: white;position: fixed;width: 40%;z-index: 3;"></parent-tool-bar>
                        <div ng-show="!showParentFields" style="word-wrap: break-word;margin-top:30%;float:left;color:white;background-color: #428bca;position: fixed;width:1%;z-index: 3;" ng-click="showParentFields=!showParentFields;showLogs=false;showErrors=false;showChildFields=false;showToolbar=false;">
                            <b>PARENT</b> 
                        </div>
                    </div>
                <div id="ChildToolbar" ng-show="showTable && !collapseChild">
                        <child-tool-bar ng-show="showChildFields" class="panel panel-success" style ="float:left;margin-left:1.5%;background-color: white;position: fixed;width: 40%;z-index: 3;"></child-tool-bar>
                        <div ng-show="!showChildFields" style="word-wrap: break-word;margin-top:42%;color:white;float:left;background-color: #15A14C;position: fixed;width:1%;z-index: 3;" ng-click="showChildFields=!showChildFields;showLogs=false;showErrors=false;showParentFields=false;showToolbar=false;">
                            <b>CH  I LD</b> 
                        </div>
                    </div>
                <div ng-show="!showTable || showParentFieldsForMassUpdate || showChildFieldsForMassUpdate">
                <fields-tree class="panel panel-primary" style="float:left;width:30%;margin-left:1.5%;" ng-show="(!showTable || showParentFieldsForMassUpdate) && !showChildFieldsForMassUpdate && !fieldsSelectedForMassUpdate"/>
                <div style="float:left;width:2%;"><p/></div>
                <relation-tree style="width:30%;float:left;" ng-show="!showTable && !showParentFieldsForMassUpdate && !showChildFieldsForMassUpdate" class="panel panel-success"/> 
                <div style="float:left;width:2%;"><p/></div>
                <child-fields-tree style="width:30%;float:left;" ng-show="(!!selectedChildRelationName) && (!showTable || showChildFieldsForMassUpdate) && !showParentFieldsForMassUpdate && !fieldsSelectedForMassUpdate" class="panel panel-danger"/>
                <div style="float:left;width:2%;"><p/></div>
              
                
                </div>
                <div ng-show="createNewParent || fieldsSelectedForMassUpdate && (massUpdateParentChildSelection=='Parent')">
                    <new-parent-object class="panel panel-primary" style="width:50%;"></new-parent-object>
                </div>
                <div ng-show="createNewChild || fieldsSelectedForMassUpdate && (massUpdateParentChildSelection=='Child')">
                    <new-child-object class="panel panel-success" style="width:50%;"></new-child-object>
                </div>
                
                <div ng-show="showTable && !createNewParent && !createNewChild" style="margin-left:1.5%;height:100%;" >
                    <parent-child-table ng-show="!collapseChild" ></parent-child-table><parent-table ng-show="collapseChild"></parent-table><hr/>
                    <div >
                        <div style="float:left;min-width:30%;"><a ng-show="pageNumber!=1" href="" ng-click="changePageNumber(-1);" style="text-decoration:none;width:30%;">&lt;--Previous</a><p>&nbsp;</p></div>
                        <div style="float:left;min-width:40%;"><center>Page Number: <input ng-model="pageNumber" ng-blur="paginateTable();" style="width:6%;" /> / {{totalPages}}</center></div>
                        <div style="float:right;min-width:4%;"><a ng-show="pageNumber!=totalPages" href="" ng-click="changePageNumber(1);" style="text-decoration:none;width:30%;">Next--&gt;</a><p>&nbsp;</p></div>
                    </div>
                    
                </div>
                
                <div ng-show="!sobjectDetail">
                    <h1> Sorry No Permissions to Access this Object </h1>
                </div>
            </div >
              <div style="z-index:2;position:absolute;bottom:3px;width:100%">
                <div style="width:89%;float:left;">
                    
                </div>
            <div id="scrollTop" style="float:right;width:3%;margin-right:30px;background-color:#DDA0DD;">
                Top
            </div>
            </div>  
        </body>
    </html>
</apex:page>