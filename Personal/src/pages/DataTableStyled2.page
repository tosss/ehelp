<apex:page sidebar="" >
    <html ng-app="DataTableApp">
        <head>
            <apex:includeScript value="/soap/ajax/33.0/connection.js"/>
            <apex:includeScript value="/soap/ajax/33.0/apex.js"/>
            <apex:includeScript value="{!URLFOR($Resource.jQuery, 'js/jquery-1.10.2.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.jQuery, 'js/jquery-ui-1.10.4.custom.min.js')}" />
            <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.js"/>
            <apex:stylesheet value="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"/>
            <apex:stylesheet value="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" />
            <style>
                .parentHeader
                {
                background-color : #AACFEF !important;
                }
                .childHeader
                {
                background-color:#BBB4F1 !important;
                }
                 i
                {
                font-size:larger !important;
                color:black;
                }
                .pointer
                {
                cursor:pointer;
                }
                .focussed
                {
                background-color: #58A6E8;
                color: white;
                }
                #lock, #pencil
                {
                display:none;
                }
                .required
                {
                border-left:solid red 4px;
                }
                hyperlink:hover
                {
                text-decoration: underline;
                }            
            </style>
            <script>
            var j$= jQuery.noConflict();
            
            //DOM Manipulations in jQuery
            
            j$(document).ready(function(){
                
                //Scrolling for panel when exceeds limit
                j$(document).on('mousemove','body',function(){
                    var offset = j$('.noSidebarCell').offset();
                    j$('.scrollable').each(function(){
                        if(j$(this).height() > j$(window).height()-offset.top){
                            j$(this).css('overflow-y','scroll');
                            j$(this).css('min-height','600px');
                            j$(this).css('max-height',(j$(window).height()-offset.top));
                        }
                    });
                });
                
                //Change to Edit Mode from View Mode 
                j$('body').on('dblclick','.dataHolder',function(){
                    j$(this).find('.viewMode').each(function(){
                        if(j$(this).attr('updateable')=='true'){
                            j$(this).hide();
                            j$(this).siblings('.editMode').show();
                            j$(this).siblings('.editMode').find('#inputValue').focus();
                        }
                    });
                });
                
                //Show Glyphicon 
                j$('body').on('mouseenter','.dataHolder',function(){
                    j$(this).find('#lock, #pencil').each(function(){
                        j$(this).css('display','inline-block');
                    });
                });
                
                //Hide Glyphicon 
                j$('body').on('mouseleave','.dataHolder',function(){
                    j$(this).find('#lock, #pencil').each(function(){
                        j$(this).css('display','none');
                    });
                });
                
                //Easy Scroll for page
                j$('body').on('click','#scrollTop',function(){
                    window.scrollTo(0,0);
                });
                
                j$('body').on('click','#scrollBottom',function(){
                    window.scrollTo(0,j$(window).height()*1000);
                });
                
                //focus back on required field for invalid input
                j$('body').on('blur','.required',function(){
                    if(j$(this).val()==null || j$(this).val()==undefined || j$(this).val().trim()==''){
                        j$(this).focus();
                    }
                });
                
                //Give Id value for Lookup fields
                j$('body').on('blur','#inputValue',function(){
                    var tagName = j$(this).parent().parent().prop('tagName');
                    if(tagName == 'LOOK-UP'){
                        var value = j$(this).val();
                        var Id='';
                        j$(this).siblings('.lookupMode').find('li').each(function(){
                            if(j$(this).html() == value){
                                Id = j$(this).attr('value');
                            }
                        });
                        j$(this).closest('td').find('#outputValue').each(function(){
                            j$(this).html(value);
                            j$(this).attr('href','/'+Id);
                        });
                    }                    
                });
                
                //Autocomplete functionality
                j$('body').on('click','.lookupMode',function(){
                    j$(this).prev().focus();
                });
                
                //Change from Edit Mode to View Mode
                j$('body').on('blur','.editMode',function(){
                    var isRequired = j$(this).find('#inputValue').attr('class');
                    isRequired = isRequired.indexOf('required');
                    isRequired = (isRequired  >= 0);
                    var isEmpty = j$(this).find('#inputValue').val();
                    isEmpty = ( isEmpty==undefined || isEmpty==null || isEmpty.trim()=='' );
                    if(!isRequired || !(isRequired && isEmpty)){
                        if(j$('.focussed').html()==undefined){
                            j$(this).hide();
                            j$(this).siblings('.viewMode').show();
                        }
                    }
                });
                
                //Collapse Child
                j$('body').on('click','.collapseIcon',function(){
                    if(j$(this).hasClass('glyphicon-chevron-up')){
                        j$(this).closest('.list').find('.childBody').hide();
                        j$(this).removeClass('glyphicon-chevron-up');
                        j$(this).addClass('glyphicon-chevron-down');
                    }
                    else{
                        j$(this).closest('.list').find('.childBody').show();
                        j$(this).removeClass('glyphicon-chevron-down');
                        j$(this).addClass('glyphicon-chevron-up');
                    }
                });
                
                //Validate input fields
                j$('body').on('click','.createRecordButton',function(){
                    var valid = true;
                    var type= j$(this).attr('type');
                    j$(this).closest('table').find('.required').each(function(){
                        if( j$(this).is(':visible') && (j$(this).val()==null || j$(this).val()==undefined || j$(this).val().trim()=='')){
                            valid = false;
                            j$(this).focus();
                        }
                    });
                });
                
            });
            
            //To send Element Data to print
            function PrintElem(elem){
                Popup(j$(elem).html());
            }
            
            //To Print Logs and Errors
            function Popup(data){
                var mywindow = window.open('', 'my div', 'height=400,width=600');
                mywindow.document.write('<html><head><title></title>');
                /*optional stylesheet*/ //mywindow.document.write('<link rel="stylesheet" href="main.css" type="text/css" />');
                mywindow.document.write('</head><body >');
                mywindow.document.write(data);
                mywindow.document.write('</body></html>');
                
                mywindow.document.close(); // necessary for IE >= 10
                mywindow.focus(); // necessary for IE >= 10
                
                mywindow.print();
                mywindow.close();
                
                return true;
            }
            
            //to get Object Name from url
            
            function getObjectName(){
                objectName = location.href;
                var startIndex = objectName.indexOf('?objectName=')+12;
                objectName = objectName.substring(startIndex,objectName.length);
                return objectName;
            }
            
            //Module
            
            angular.module("DataTableApp",[]);
            
            //Controller
            
            angular.module("DataTableApp").controller("DetailsController",function($scope,$window,$compile, $filter){
                
                //General Details
                sforce.connection.sessionId = '{!$Api.Session_ID}';
                $scope.requiredIdsPerReference = new Array();
                $scope.referenceArray = new Array();
                
                //Parent Details
                $scope.objectName = getObjectName();
                $scope.sobjectDetail = sforce.connection.describeSObject($scope.objectName);
                console.clear();
                $scope.fields = new Array();
                $scope.ChildRelationShips = new Array();
                $scope.collapseChild = false;
                
                //Child Details
                $scope.selectedChildDetails;
                $scope.selectedChildRelationName;
                $scope.ChildRelationShipFields = new Array();
                $scope.childRecordsPerParent = new Array();
                $scope.childToParentFieldName ='';
                $scope.parentRecordName='';
                
                //Query Conditions
                $scope.queryCondition='';
                $scope.childQueryCondition ='';
                $scope.orderParentBy='';
                $scope.orderChildBy ='';
                $scope.limitParentRecords = 10;
                $scope.limitChildRecords = 10;
                
                //Records List
                $scope.parentRecordsList = new Array();
                $scope.parentAndChildRecordsList = new Array();
                
                //Filtering and Ordering
                $scope.OrderByfieldName = 'Id';
                $scope.isReverseOrdered = false;
                $scope.childOrderByfieldName = 'Id';
                $scope.isChildReverseOrdered = false;
                $scope.searchText = '';
                
                //Pagination
                $scope.showTable = false;
                $scope.recordsPerPage = 2;
                $scope.pageNumber = 1;
                $scope.totalPages = $scope.limitParentRecords;
                $scope.recordsInDisplay = new Array();
                                
                //Show Buttons
                $scope.showDisplayButton = false;
                $scope.showParentFieldsForMassUpdate = false;
                $scope.showChildFieldsForMassUpdate = false;
                $scope.fieldsSelectedForMassUpdate = false;
                $scope.massUpdateParentChildSelection = null;
                $scope.showSelectedFieldsButton = false;
                $scope.showUpdateButton = false;
                
                //Show Panels
                $scope.showToolbar = false;
                $scope.showParentFields = false;
                $scope.showChildFields = false;
                
                //Operation Flags
                $scope.deleteRecords = false;
                $scope.updateRecords = false;
                $scope.massUpdateRecords = false;
                $scope.createNewParent = false;
                $scope.createNewChild = false;
                
                //Logs and Errors Lists
                $scope.errors = new Array();
                $scope.logs = new Array();
                
                //Showing Logs and Errors
                $scope.showErrors = false;
                $scope.showLogs = false;
                
                //Filetring Logs and Errors
                $scope.captureUpdate = true;
                $scope.captureInsert = true;
                $scope.captureMassUpdate = true;
                $scope.captureQuery = true;
                $scope.captureDelete = true;
                $scope.captureUpdateError = true;
                $scope.captureInsertError = true;
                $scope.captureMassUpdateError = true;
                $scope.captureQueryError = true;
                $scope.captureDeleteError = true;
                
                //Ordering Logs and Errors
                $scope.logOrder =false;
                $scope.errorOrder = false;
                
                //Data Fetching Methods
                //get parent child records
                $scope.getParentChildRecords = function(showTable){  
                    if(showTable || $scope.showTable){
                        var selectedFields = new Array();
                        for(var i=0;i<$scope.fields.length;i++){ 
                            if($scope.fields[i].selected){
                                $scope.fields[i].showField = true;
                            }
                            selectedFields.push($scope.fields[i].fieldDetail.name);
                        }
                        if(selectedFields.length==0){
                            selectedFields.push('Id');
                        }
                        var selectedChildFields = new Array();
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++){ 
                            if($scope.ChildRelationShipFields[i].selected){
                                $scope.ChildRelationShipFields[i].showField = true;
                            }
                            selectedChildFields.push($scope.ChildRelationShipFields[i].fieldDetail.name);
                        }
                        if(selectedChildFields.length==0){
                            selectedChildFields.push('Id');
                        }
                        var childQuery = '(select '+selectedChildFields.join(',')+' from '+ $scope.selectedChildRelationName+($scope.childQueryCondition==''?'':' where '+$scope.childQueryCondition +' ')+($scope.orderChildBy==''?'':' order by '+$scope.orderChildBy +' ')+($scope.limitChildRecords==''?'Limit 5000 ) ':' Limit '+$scope.limitChildRecords+' )'); 
                        var result = new Array();
                        try{
                            var subset= sforce.connection.query('select '+selectedFields.join(',')+' ,'+childQuery+' from '+ $scope.objectName+($scope.queryCondition==''?'':' where '+$scope.queryCondition +' ')+($scope.orderParentBy==''?'':' order by '+$scope.orderParentBy +' ')+($scope.limitParentRecords==''?'Limit 5000':' Limit '+$scope.limitParentRecords));
                            var records = subset.getArray("records");
                            result = result.concat(records);
                            var queryMore = true;
                            while (queryMore) {
                                if (subset.getBoolean("done")) {
                                    queryMore = false;
                                } 
                                else {
                                    subset = sforce.connection.queryMore(subset.queryLocator);
                                    records = subset.getArray("records");
                                    result = result.concat(records);
                                }
                            }
                        }
                        catch(error){
                            var errorString = {time:$scope.getDateTime(),operation:'Retrieve',message:error.faultstring};
                            $scope.errors.push(errorString);
                            $scope.captureQueryError =true;
                            $scope.errorPopup();
                        }
                        if(result!=undefined && result.length>0){
                            $scope.parentAndChildRecordsList = result;
                            var output= {time:$scope.getDateTime(),operation:'Retrieve',message:"Retrieved "+$scope.parentAndChildRecordsList.length+" records successfully"};
                            $scope.logs.push(output);
                            $scope.getChildToParentRelation();
                            $scope.requiredIdsPerReference = new Array();
                            for(var i=0;i<$scope.sobjectDetail.fields.length;i++){
                                if($scope.sobjectDetail.fields[i].type=='reference'){
                                    for(j=0;j<$scope.parentAndChildRecordsList.length;j++){
                                        if($scope.parentAndChildRecordsList[j][$scope.sobjectDetail.fields[i].name]!=null){
                                            if($scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo]==null || $scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo]==undefined){
                                                $scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo] = new Array();
                                            }
                                            $scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo].push('\''+$scope.parentAndChildRecordsList[j][$scope.sobjectDetail.fields[i].name]+'\'');
                                        }
                                    }
                                }
                            }
                            for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                                if($scope.ChildRelationShipFields[i].fieldDetail.type=='reference'){
                                    for(j=0;j<$scope.parentAndChildRecordsList.length;j++){
                                        if($scope.childToParentFieldName!=null && $scope.childToParentFieldName!=undefined && $scope.ChildRelationShipFields[i].fieldDetail.name == $scope.childToParentFieldName){
                                            if($scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo]==null || $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo]==undefined){
                                                $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo] = new Array();
                                            }
                                            $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo].push('\''+$scope.parentAndChildRecordsList[j]['Id']+'\'');
                                        }
                                        else if($scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]!=null || $scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]!=undefined){
                                            if(!Array.isArray($scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]['records'])){
                                                var arr = new Array();
                                                arr.push($scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]['records']);
                                                $scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]['records'] =arr;
                                            }
                                            for(k=0;k<$scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]['records'].length;k++){
                                                if($scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]['records'][k][$scope.ChildRelationShipFields[i].fieldDetail.name]!=null){
                                                    if($scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo]==null || $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo]==undefined){
                                                        $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo] = new Array();
                                                    }
                                                    $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo].push('\''+$scope.parentAndChildRecordsList[j][$scope.selectedChildRelationName]['records'][k][$scope.ChildRelationShipFields[i].fieldDetail.name]+'\'');
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    $scope.referenceArray = new Array();
                    for(var i=0;i<$scope.sobjectDetail.fields.length;i++){
                        if($scope.sobjectDetail.fields[i].type=='reference'){
                            if($scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo]!=null && $scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo]!=undefined){
                                $scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo] =  $scope.uniqueList($scope.requiredIdsPerReference[$scope.sobjectDetail.fields[i].referenceTo]);
                                $scope.setReferences($scope.sobjectDetail.fields[i].referenceTo);
                            }
                        }
                    }
                    for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                        if($scope.ChildRelationShipFields[i].fieldDetail.type=='reference'){
                            if($scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo]!=null && $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo]!=undefined){
                                $scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo] =  $scope.uniqueList($scope.requiredIdsPerReference[$scope.ChildRelationShipFields[i].fieldDetail.referenceTo]);
                                $scope.setReferences($scope.ChildRelationShipFields[i].fieldDetail.referenceTo);
                            }
                        }
                    }
                    if(!$scope.showTable){
                        $scope.showTable = showTable;
                    }
                    $scope.paginateTable();
                    console.clear();
                }
                
                //Get child records of Parent
                $scope.getChildRecords = function(record){
                    if(record!=null && record!=undefined){
                        if(record[$scope.selectedChildRelationName]!=null){
                            if(Array.isArray(record[$scope.selectedChildRelationName]['records'])){
                                return record[$scope.selectedChildRelationName]['records'];
                            }
                            var result = new Array();
                            result.push(record[$scope.selectedChildRelationName]['records']);
                            return result;
                        }
                    }
                    return new Array();
                }
                
                //Set Name and ID pairs for LookUP Field
                $scope.setReferences = function(type){
                    var valueSet = false;
                    for(var i=0;i<$scope.referenceArray.length;i++){
                        if($scope.referenceArray[i].type == type){
                            valueSet = true;
                        }
                    }
                    if(!Array.isArray(type) && !valueSet){
                        if($scope.requiredIdsPerReference[type] != undefined){
                            if($scope.requiredIdsPerReference[type].length>900)
                            {
                                var result = new Array();
                                var arrayList = new Array();
                                for(var i=0;i<=$scope.requiredIdsPerReference[type].length/900;i++)
                                {
                                    arrayList = $scope.requiredIdsPerReference[type].slice(900*i,900*(i+1));
                                    var subset = sforce.connection.query("select id, name from "+type+" where id in ( "+arrayList.join(',')+" ) order by name asc limit 50000");
                                    result = result.concat(subset.getArray('records'));
                                }
                                $scope.referenceArray.push({type:type,values:result});
                            }
                            else
                            {
                                var typeValue = sforce.connection.query("select id, name from "+type+" where id in ( "+$scope.requiredIdsPerReference[type].join(',')+" ) order by name asc limit 50000");
                                $scope.referenceArray.push({type:type,values:typeValue.getArray('records')});
                            }
                        }
                    }
                    console.clear();
                }
                
                //For Array of Objects for Parent Object Fields
                for(var i=0;i<$scope.sobjectDetail.fields.length;i++){
                    $scope.fields.push({selected:false,sortSelected:false,massUpdate:false,sortReverse:false,showField:false,fieldDetail:$scope.sobjectDetail.fields[i]});
                }
                
                //get selected relation fields
                $scope.getSelectedRelatedListFields = function(relationName){
                    $scope.selectedChildRelationName = relationName;
                    $scope.ChildRelationShipFields = new Array();
                    var remainingIndex;
                    for(var i=0;i<$scope.ChildRelationShips.length ;i++){
                        if($scope.ChildRelationShips[i].selected){
                            if(relationName.toUpperCase().trim() == $scope.ChildRelationShips[i].ChildRelationshipDetail.relationshipName.toUpperCase().trim()){
                                remainingIndex = i+1;
                                $scope.selectedChildDetails = sforce.connection.describeSObject($scope.ChildRelationShips[i].ChildRelationshipDetail.childSObject);
                                
                                if($scope.selectedChildDetails!=undefined){
                                    for(var j=0;j<$scope.selectedChildDetails.fields.length;j++){
                                        $scope.ChildRelationShipFields.push({selected:false,sortReverse:false,massUpdate:false,sortSelected:false,showField:false,fieldDetail:$scope.selectedChildDetails.fields[j]});
                                    }
                                }
                            }
                            else{
                                $scope.ChildRelationShips[i].selected= false;
                            }
                        }
                    }
                    
                    for(var i=remainingIndex;i<$scope.ChildRelationShips.length;i++){
                        if($scope.ChildRelationShips[i] != undefined){
                            $scope.ChildRelationShips[i].selected= false;
                        }
                    }
                    console.clear();
                }
                
                //For Array of Objects for Parent Object Relations
                for(var i=0;i<$scope.sobjectDetail.childRelationships.length;i++){
                    $scope.ChildRelationShips.push({selected:false,ChildRelationshipDetail:$scope.sobjectDetail.childRelationships[i]});
                }
                
                //show display table button
                $scope.displayTableButton = function(){
                    var checkParentFields=false;
                    for(var i=0;i<$scope.fields.length;i++){
                        checkParentFields = checkParentFields || $scope.fields[i].selected;}
                    var checkRelationSelected = false;
                    for(var i=0;i<$scope.ChildRelationShips.length;i++){
                        checkRelationSelected = checkRelationSelected || $scope.ChildRelationShips[i].selected;}
                    var childRelationFieldsSelected = false;
                    for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                        childRelationFieldsSelected = childRelationFieldsSelected || $scope.ChildRelationShipFields[i].selected;}
                    $scope.showDisplayButton = (!$scope.showTable) && childRelationFieldsSelected &&  checkRelationSelected && checkParentFields;
                    
                }
                                              
                //Set Child to Parent field name for reference
                $scope.getChildToParentRelation = function(){
                    for(var i=0;i<$scope.ChildRelationShips.length;i++){
                        if($scope.ChildRelationShips[i].selected){
                            $scope.childToParentFieldName=  $scope.ChildRelationShips[i].ChildRelationshipDetail.field
                        }
                    }
                }
                                
                //Filtering and Ordering
                //order parent records by field
                $scope.order = function(fieldName){
                    if($scope.OrderByfieldName.trim().toLowerCase() == fieldName.trim().toLowerCase()){
                        $scope.isReverseOrdered = !($scope.isReverseOrdered);
                    }
                    else{
                        $scope.OrderByfieldName = fieldName;
                        $scope.isReverseOrdered = false;
                    }
                }
                
                //Order Child records by field
                $scope.childOrder = function(fieldName){
                    if($scope.childOrderByfieldName.trim().toLowerCase() == fieldName.trim().toLowerCase()){
                        $scope.childIsReverseOrdered = !($scope.childIsReverseOrdered);
                    }
                    else{
                        $scope.childOrderByfieldName = fieldName;
                        $scope.childIsReverseOrdered = false;
                    }
                }
                
                //Reverse Order and show Arrow Icon
                $scope.sortSelectedOrReveresed = function(label,fields){
                    for(var i=0;i<fields.length;i++){
                        if((fields[i].sortSelected || fields[i].sortReverse) && fields[i].fieldDetail.label.trim().toLowerCase() == label.trim().toLowerCase()){
                            fields[i].sortSelected = !fields[i].sortSelected;
                            fields[i].sortReverse = !fields[i].sortReverse;
                            break;
                        }
                        if(fields[i].fieldDetail.label.trim().toLowerCase() == label.trim().toLowerCase()){
                            fields[i].sortSelected = true;
                        }
                        else{
                            fields[i].sortSelected = false; 
                            fields[i].sortReverse = false;
                        }
                    }
                }
                
                //filter logs
                $scope.logsFilter = function(operation){
                    switch(operation){
                        case 'Insert': return $scope.captureInsert;
                        case 'Update': return $scope.captureUpdate;
                        case 'Delete': return $scope.captureDelete;
                        case 'Retrieve': return $scope.captureQuery;
                        case 'Mass Update': return $scope.captureMassUpdate;
                    }
                }
                
                //filter errors
                $scope.errorsFilter = function(operation){
                    switch(operation){
                        case 'Insert': return $scope.captureInsertError;
                        case 'Update': return $scope.captureUpdateError;
                        case 'Delete': return $scope.captureDeleteError;
                        case 'Retrieve': return $scope.captureQueryError;
                        case 'Mass Update': return $scope.captureMassUpdateError;
                    }
                }
                                                
                //Field Properties Method
                //returns true if field is updateable
                $scope.updateable = function(field){
                    if(field.fieldDetail.updateable=='true')
                        return true;
                    return false;
                }
                
                //returns true if field is unique
                $scope.unique = function(field){
                    if(field.fieldDetail.unique =='true')
                        return true;
                    return false;
                }
                
                //Pagination Methods
                //Paginate Table
                $scope.paginateTable = function(){
                    
                    //set Total Pages
                    $scope.totalPages = Math.ceil($scope.parentAndChildRecordsList.length / $scope.recordsPerPage);
                    if( parseInt($scope.totalPages)==0){
                        $scope.totalPages = 1;
                    }
                    var requiredRecords = new Array();
                    
                    //set page number
                    if(parseInt($scope.pageNumber)==0){
                        $scope.pageNumber =1;
                    }
                    else if(parseInt($scope.pageNumber)>parseInt($scope.totalPages)){
                        $scope.pageNumber =$scope.totalPages;
                    }
                    
                    //set start index to display
                    var startIndex =  ($scope.pageNumber-1) * $scope.recordsPerPage;
                    
                    //set records to display
                    for(var i=startIndex;i<(startIndex+$scope.recordsPerPage) && i<$scope.parentAndChildRecordsList.length;i++){
                        requiredRecords.push($scope.parentAndChildRecordsList[i]);
                    }
                    $scope.recordsInDisplay = requiredRecords;
                }
                
                //Page Navigations
                $scope.changePageNumber = function(amount){
                    $scope.pageNumber = parseInt($scope.pageNumber) + parseInt(amount);
                    $scope.paginateTable();
                }
                
                //DML Operations
                //Instantiate new Parent or Child Records for Insert or Mass Update
                $scope.instantiateNewRecord = function(type,parentRecord){
                    
                    //Instantiate new Parrent Record
                    if(type == 'parent'){
                        if(!$scope.fieldsSelectedForMassUpdate){
                            $scope.createNewParent = true;
                        }
                        $scope.newParentRecord = new sforce.SObject($scope.objectName);
                    }
                    
                    //Instantiate new Child Record
                    else if(type == 'child'){
                        if(!$scope.fieldsSelectedForMassUpdate){
                            $scope.createNewChild = true; 
                        }
                        $scope.newChildRecord = new sforce.SObject($scope.selectedChildDetails.name);
                        if(!$scope.massUpdateRecords && $scope.childToParentFieldName!=undefined && $scope.childToParentFieldName!=null && $scope.childToParentFieldName.trim()!=''){
                            $scope.newChildRecord[$scope.childToParentFieldName.trim()] = parentRecord;
                            $scope.setParentRecord();
                        }                        
                    }
                    console.clear();
                }  
                
                //Insert Parent Record
                $scope.insertParentRecord = function(){
                    try{
                        var insertResult = sforce.connection.upsert("Id", [$scope.newParentRecord]);
                    }
                    catch(error){
                        $scope.errors.push({time:$scope.getDateTime(),operation:'Insert',message:error.errors.message});
                        $scope.captureInsertError = true;
                        $scope.errorPopup();
                    }
                    if(insertResult[0].getBoolean('success')){
                        $scope.getParentChildRecords(false);
                        $scope.logs.push({time:$scope.getDateTime(),operation:'Insert',message:insertResult[0].id+" is created successfully"});
                    }
                    else if(insertResult[0].success=='false'){
                        $scope.errors.push({time:$scope.getDateTime(),operation:'Insert',message:insertResult[0].errors.message});
                        $scope.captureInsertError = true;
                        $scope.errorPopup();
                    }
                    $scope.newParentRecord = null;
                    $scope.createNewParent = false;
                    console.clear();
                }
                
                //Insert Child Record
                $scope.insertChildRecord = function(){
                    try{
                        var insertResult = sforce.connection.upsert("Id", [$scope.newChildRecord]);
                    }
                    catch(error){
                        $scope.errors.push({time:$scope.getDateTime(),operation:'Insert',message:error.errors.message});
                        $scope.captureInsertError = true;
                        $scope.errorPopup();
                    }
                    if(insertResult[0].getBoolean('success')){
                        $scope.getParentChildRecords(false);
                        $scope.logs.push({time:$scope.getDateTime(),operation:'Insert',message:insertResult[0].id+" is created successfully"});
                    }
                    else if(insertResult[0].success=='false'){
                        $scope.errors.push({time:$scope.getDateTime(),operation:'Insert',message:insertResult[0].errors.message});
                        $scope.captureInsertError = true;
                        $scope.errorPopup();
                    }
                    $scope.newChildRecord = null;
                    $scope.createNewChild = false;
                    console.clear();
                }
                
                //for mass update and update
                $scope.updateRecordsMethod = function(){
                    
                    //for mass update parent
                    if($scope.massUpdateParentChildSelection == 'Parent' && $scope.newParentRecord!=null){ 
                        var updateParentList =  new Array();
                        var requiredIds = new Array();
                        var selectedMassUpdateFields = new Array();
                        
                        //set mass update fields for parent
                        for(var i=0;i<$scope.fields.length;i++){
                            if($scope.fields[i].massUpdate){
                                selectedMassUpdateFields.push($scope.fields[i].fieldDetail.name);
                            }
                        }
                        selectedMassUpdateFields.push('Id');
                        
                        //set parent record ids for mass update
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                            if($scope.parentAndChildRecordsList[i].updateRecord){
                                requiredIds.push('\''+$scope.parentAndChildRecordsList[i]['Id']+'\'');
                            }
                        }
                        
                        //fetch parent records
                        updateParentList = sforce.connection.query('select '+selectedMassUpdateFields.join(',')+' from '+$scope.objectName+' where id in ( '+requiredIds.join(',')+' )');
                        updateParentList = updateParentList['records'];
                        if(!Array.isArray(updateParentList)){
                            var newArray = new Array();
                            newArray.push(updateParentList);
                            updateParentList = newArray;
                        }
                        
                        //set fields for parent mass update
                        for(var i=0;i<$scope.fields.length;i++){
                            if($scope.fields[i].massUpdate){
                                for(j=0;j<updateParentList.length;j++){
                                    if($scope.fields[i].fieldDetail.type=="datetime" ||$scope.fields[i].fieldDetail.type=="date"){
                                        if( $scope.newParentRecord[$scope.fields[i].fieldDetail.name]  != null){
                                            $scope.newParentRecord[$scope.fields[i].fieldDetail.name] = new Date($scope.newParentRecord[$scope.fields[i].fieldDetail.name]);
                                            $scope.newParentRecord[$scope.fields[i].fieldDetail.name] = $scope.newParentRecord[$scope.fields[i].fieldDetail.name].toJSON();
                                        }
                                    }
                                    updateParentList[j][$scope.fields[i].fieldDetail.name] = $scope.newParentRecord[$scope.fields[i].fieldDetail.name];
                                }
                            }
                        }
                        
                        if(updateParentList.length>0){
                            var updateResult = sforce.connection.update(updateParentList);
                            $scope.getParentChildRecords(false);
                            $scope.cancel();
                            for(var i=0;i<updateResult.length;i++){
                                if(updateResult[i].getBoolean('success')){
                                    $scope.logs.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update on record '+updateResult[i].id+ ' successful'});
                                }
                                else{
                                    $scope.errors.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update failed cause'+updateResult[i].errors.message});
                                    $scope.captureUpdateError = true;
                                    $scope.errorPopup();
                                }
                            }
                        }
                    }
                    
                    //for mass update child
                    else if($scope.massUpdateParentChildSelection == 'Child' && $scope.newChildRecord!=null){ 
                        var updateChildList =  new Array();
                        var requiredIds = new Array();
                        var selectedMassUpdateFields = new Array();
                        
                        //set masspdate fields
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                            if($scope.ChildRelationShipFields[i].massUpdate){
                                selectedMassUpdateFields.push($scope.ChildRelationShipFields[i].fieldDetail.name);
                            }
                        }
                        selectedMassUpdateFields.push('Id');
                        
                        //set record ids for Mass update child
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=null && $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=undefined){
                                if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined){
                                    for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++){
                                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord){
                                            requiredIds.push('\''+$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j]['Id']+'\'');
                                        }
                                    }
                                }
                            }
                        }
                        updateChildList = sforce.connection.query('select '+selectedMassUpdateFields.join(',')+' from '+$scope.selectedChildDetails.name+' where id in ( '+requiredIds.join(',')+' )');
                        updateChildList = updateChildList['records'];
                        if(!Array.isArray(updateChildList)){
                            var newArray = new Array();
                            newArray.push(updateChildList);
                            updateChildList = newArray;
                        }
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                            if($scope.ChildRelationShipFields[i].massUpdate) {
                                for(j=0;j<updateChildList.length;j++){
                                    if($scope.ChildRelationShipFields[i].fieldDetail.type=="datetime" ||$scope.ChildRelationShipFields[i].fieldDetail.type=="date"){                                    
                                        if($scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name]!=null){
                                            $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name] = new Date($scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name]);
                                            $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name] = $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name].toJSON();
                                        }
                                    }
                                    updateChildList[j][$scope.ChildRelationShipFields[i].fieldDetail.name] = $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name];
                                }
                            }
                        }
                        if(updateChildList.length>0){
                            var updateResult = sforce.connection.update(updateChildList);
                            $scope.getParentChildRecords(false);
                            $scope.cancel();
                            for(var i=0;i<updateResult.length;i++){
                                if(updateResult[i].getBoolean('success')){
                                    $scope.logs.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update on record '+updateResult[i].id+ ' successful'});
                                }
                                else{
                                    $scope.errors.push({time:$scope.getDateTime(),operation:'Mass Update',message:'update failed cause'+updateResult[i].errors.message});
                                    $scope.captureUpdateError = true;
                                    $scope.errorPopup();
                                }
                            }                                
                        }
                    }
                    
                    //for update operation
                        else{
                            var updateParentList = new Array();
                            var updateChildList = new Array();
                            var requiredParentIds = new Array();
                            var requiredChildIds = new Array();
                            
                            //set updated parent record ids
                            for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                                if($scope.parentAndChildRecordsList[i].updateRecord){
                                    requiredParentIds.push('\''+$scope.parentAndChildRecordsList[i]['Id']+'\'');
                                }
                            }
                            
                            //set updated child record ids
                            for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                                if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=null){
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined){
                                        for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++){
                                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord){
                                                requiredChildIds.push('\''+$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j]['Id']+'\'');
                                            }
                                        }
                                    }
                                }
                            }
                            
                            //selecing updateable fields in parent
                            var selectedFields = new Array();
                            for(var i=0;i<$scope.fields.length;i++){ 
                                if($scope.fields[i].fieldDetail.updateable=='true' && $scope.fields[i].fieldDetail.name!='Id'){
                                    selectedFields.push($scope.fields[i].fieldDetail.name);
                                }
                            }
                            selectedFields.push('Id');
                            
                            //selecing updateable fields in child
                            var selectedChildFields = new Array();
                            for(var i=0;i<$scope.ChildRelationShipFields.length;i++){ 
                                if($scope.ChildRelationShipFields[i].fieldDetail.updateable=='true' && $scope.ChildRelationShipFields[i].fieldDetail.name!='Id'){
                                    selectedChildFields.push($scope.ChildRelationShipFields[i].fieldDetail.name);
                                }
                            }
                            selectedChildFields.push('Id');
                            
                            //Update Child Records
                            if(requiredParentIds.length>0){
                                updateParentList = sforce.connection.query('select '+selectedFields.join(',')+' from '+$scope.objectName+' where id in ( '+requiredParentIds.join(',') +' )');
                                updateParentList = updateParentList['records'];
                                if(!Array.isArray(updateParentList)){
                                    var newArray = new Array();
                                    newArray.push(updateParentList);
                                    updateParentList = newArray;
                                }
                                var count=0;
                                for(var i=0;i<$scope.parentAndChildRecordsList.length && count<updateParentList.length;i++){
                                    for(var j=0;j<updateParentList.length;j++){
                                        if(updateParentList[j]['Id']==$scope.parentAndChildRecordsList[i]['Id']){
                                            count++;
                                            for(var k=0;k<$scope.fields.length;k++){
                                                if($scope.fields[k].fieldDetail.updateable=='true'){
                                                    if(($scope.fields[k].fieldDetail.type=='date' || $scope.fields[k].fieldDetail.type=='datetime') && $scope.parentAndChildRecordsList[i][$scope.fields[k].fieldDetail.name] != null){
                                                        $scope.parentAndChildRecordsList[i][$scope.fields[k].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.fields[k].fieldDetail.name].toJSON();
                                                    }
                                                    updateParentList[j][$scope.fields[k].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.fields[k].fieldDetail.name];
                                                }
                                            }
                                        }
                                    }
                                }
                                var updateResult = sforce.connection.update(updateParentList);
                                for(var i=0;i<updateResult.length;i++){
                                    if(updateResult[i].getBoolean('success')){
                                        $scope.logs.push({time:$scope.getDateTime(),operation:'Update',message:'update on record '+updateResult[i].id+ ' successful'});
                                    }
                                    else{
                                        $scope.errors.push({time:$scope.getDateTime(),operation:'Update',message:'update failed cause'+updateResult[i].errors.message});
                                        $scope.captureUpdateError = true;
                                        $scope.errorPopup();
                                    }
                                }
                            }
                            
                            //Update Child Records
                            if(requiredChildIds.length>0){
                                updateChildList = sforce.connection.query('select '+selectedChildFields.join(',')+' from '+$scope.selectedChildDetails.name+' where id in ( '+requiredChildIds.join(',') +' )');
                                updateChildList = updateChildList['records'];
                                if(!Array.isArray(updateChildList)){
                                    var newArray = new Array();
                                    newArray.push(updateChildList);
                                    updateChildList = newArray;
                                }
                                var count=0;
                                for(var i=0;i<$scope.parentAndChildRecordsList.length && count<updateChildList.length;i++){
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=null && $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] !=undefined){
                                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined){
                                            for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++){
                                                for(var k=0;k<updateChildList.length;k++){
                                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j]['Id'] == updateChildList[k]['Id']){
                                                        for(var l=0;l<$scope.ChildRelationShipFields.length;l++){
                                                            if($scope.ChildRelationShipFields[l].fieldDetail.updateable=='true'){
                                                                count++;
                                                                if(($scope.ChildRelationShipFields[l].fieldDetail.type=='datetime' || $scope.ChildRelationShipFields[l].fieldDetail.type=='date') && $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j][$scope.ChildRelationShipFields[l].fieldDetail.name] != null){
                                                                    $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j][$scope.ChildRelationShipFields[l].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j][$scope.ChildRelationShipFields[l].fieldDetail.name].toJSON();
                                                                }
                                                                updateChildList[k][$scope.ChildRelationShipFields[l].fieldDetail.name] = $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j][$scope.ChildRelationShipFields[l].fieldDetail.name];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                var updateResult = sforce.connection.update(updateChildList);
                                for(var i=0;i<updateResult.length;i++){
                                    if(updateResult[i].getBoolean('success')){
                                        $scope.logs.push({time:$scope.getDateTime(),operation:'Update',message:'update on record '+updateResult[i].Id+ ' successful'});
                                    }
                                    else{
                                        $scope.errors.push({time:$scope.getDateTime(),operation:'Update',message:'update failed cause'+updateResult[i].errors.message});
                                        $scope.captureUpdateError = true;
                                        $scope.errorPopup();
                                    }
                                }
                            }
                            
                            $scope.getParentChildRecords(false);
                            $scope.cancel();
                        }
                    
                    console.clear();
                }
                
                 //delete records
                $scope.deleteSelectedRecords = function(){
                    var count=0;
                    var deleteIdsList = new Array();
                    
                    //set record Ids to delete
                    for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                        if($scope.parentAndChildRecordsList[i].deleteRecord){
                            count++;
                            deleteIdsList.push($scope.parentAndChildRecordsList[i]['Id']);
                        }
                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]){
                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].deleteRecord){
                                for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++){
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].deleteRecord){
                                        count++;
                                        deleteIdsList.push($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j]['Id']);                                        
                                    }
                                }
                            }
                        }
                    }
                    var confirmResult = confirm('Are You Sure you want to delete '+count+' records selected?');
                    if(confirmResult){
                        var delResult = sforce.connection.deleteIds(deleteIdsList);
                        for(var i=0;i<delResult.length;i++){
                            if (delResult[i].getBoolean("success")) {
                                $scope.logs.push({time:$scope.getDateTime(),operation:'Delete',message:" record with id " + deleteIdsList[i] + " deleted"});
                            }
                            else {
                                $scope.errors.push({time:$scope.getDateTime(),operation:'Delete',message:" "+deleteIdsList[i]+" failed, "+"Cause: "+delResult[i].errors.message});
                                $scope.captureDeleteError =true;
                                $scope.errorPopup();
                            }
                        }
                        console.clear();
                        $scope.getParentChildRecords(false);
                        cancel();
                    }
                }
                
                //Set parent reference for newly creating child
                $scope.setParentRecord = function(){
                    var parentId = $scope.newChildRecord[$scope.childToParentFieldName.trim()] ; 
                    var valueSet =false;
                    for(var i=0;i<$scope.referenceArray.length;i++){
                        for(var j=0;j<$scope.referenceArray[i].values.length;j++){
                            if($scope.referenceArray[i].values[j].Id == parentId){
                                $scope.parentRecordName = $scope.referenceArray[i].values[j].Name;
                                valueSet = true;
                                break;
                            }
                        }
                        if(valueSet){
                            break;
                        }
                    }
                }
                
                //set records for update
                $scope.setForUpdate = function(field,record){
                    if(field.fieldDetail.updateable == 'true'){
                        $scope.showUpdateButton = true;
                        $scope.updateRecords = true;
                        record.updateRecord = true;
                        $scope.deleteRecords = false;
                        $scope.massUpdateRecords = false;
                    }
                }
                
                //Cancel Operations
                //Cancel Current running Operation
                $scope.cancel = function(){
                    $scope.createNewParent = false;
                    $scope.createNewChild = false;
                    $scope.newParentRecord = null;
                    $scope.newChildRecord = null;
                    $scope.deleteRecords = false;
                    $scope.updateRecords = false;
                    $scope.massUpdateRecords = false;
                    $scope.showParentFieldsForMassUpdate = false;
                    $scope.showChildFieldsForMassUpdate = false;
                    $scope.fieldsSelectedForMassUpdate = false;
                    $scope.massUpdateParentChildSelection = null;
                    $scope.showSelectedFieldsButton = false;
                    $scope.fieldsSelectedForMassUpdate = false;
                    $scope.searchText = '';
                    for(var i=0;i<$scope.fields.length;i++){
                        $scope.fields[i].massUpdate =false;
                    }
                    for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                        $scope.ChildRelationShipFields[i].massUpdate =false;
                    }
                    for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                        $scope.parentAndChildRecordsList[i].updateRecord =false;
                        $scope.parentAndChildRecordsList[i].deleteRecord =false;
                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] != null){
                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records']!=undefined){
                                for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++){
                                    $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord =false;
                                    $scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].deleteRecord =false;
                                }
                            }
                        }
                    }
                    $scope.showTable = true;
                }
                
                //Cancel update Operation
                $scope.cancelUpdate = function(){
                    for(var i=0;i<$scope.fields.length;i++){
                        $scope.fields[i].showField = $scope.fields[i].selected;
                    }
                    for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                        $scope.ChildRelationShipFields[i].showField = $scope.fields[i].selected;
                    }
                    if($scope.showUpdateButton){
                        $scope.showUpdateButton = false;
                        $scope.getParentChildRecords(false);
                    }
                    $scope.cancel();
                }
                
                //Show Buttons and Panels
                //Show Delete button
                $scope.showDeleteButton = function(){
                    for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                        if($scope.parentAndChildRecordsList[i].deleteRecord){
                            return true;
                        }
                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] != null){
                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined){
                                for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++){
                                    if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].deleteRecord){
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    return false;
                }
                
                //show Select Fields Button
                $scope.showSelectedFieldsButtonValidate = function(){
                    if($scope.massUpdateParentChildSelection == 'Parent'){ 
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                            if($scope.parentAndChildRecordsList[i].updateRecord){
                                $scope.showSelectedFieldsButton =  true;
                                return null;
                            }
                        }
                    }
                    else if($scope.massUpdateParentChildSelection == 'Child'){
                        for(var i=0;i<$scope.parentAndChildRecordsList.length;i++){
                            if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName] != null){
                                if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'] != undefined){
                                    for(var j=0;j<$scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'].length;j++){
                                        if($scope.parentAndChildRecordsList[i][$scope.selectedChildRelationName]['records'][j].updateRecord){
                                            $scope.showSelectedFieldsButton = true;
                                            return null;
                                        }
                                    }
                                }
                            }
                        }
                    } 
                    $scope.showSelectedFieldsButton =  false;
                }
                
                //show set values button
                $scope.setValuesButtonValidate = function(type){
                    if(type=='parent'){
                        for(var i=0;i<$scope.fields.length;i++){
                            if($scope.fields[i].massUpdate){
                                return true;
                            }
                        }
                    }
                    else if(type=='child'){
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                            if($scope.ChildRelationShipFields[i].massUpdate){
                                return true;
                            }
                        }
                    }
                    return false;
                }
                
                //Popup Error
                $scope.errorPopup = function(){
                    $scope.showErrors = true;
                    $scope.showToolbar =false;
                    $scope.showLogs = false;
                    $scope.showParentFields = false;
                    $scope.showChildFields = false;
                }
                
                //Validation Methods
                //Validate Fields
                $scope.validate = function(type){
                    
                    //validate Parent fields 
                    if(type=='parent'){
                        var isValid = true;
                        for(var i=0;i<$scope.fields.length;i++){
                            if($scope.fields[i].fieldDetail.nillable == 'false' && $scope.fields[i].fieldDetail.updateable == 'true'){
                                var value = $scope.newParentRecord[$scope.fields[i].fieldDetail.name];
                                if(value==undefined || value==null){
                                    isValid =false;
                                }
                            }
                        }
                        if(isValid){
                            $scope.insertParentRecord();
                        }
                    }
                    
                    //validate Child fields 
                    else if(type=='child'){
                        var isValid = true;
                        for(var i=0;i<$scope.ChildRelationShipFields.length;i++){
                            if($scope.ChildRelationShipFields[i].fieldDetail.nillable == 'false' && $scope.ChildRelationShipFields[i].fieldDetail.updateable == 'true'){
                                var value = $scope.newChildRecord[$scope.ChildRelationShipFields[i].fieldDetail.name];
                                if(value==undefined || value==null || value.trim()==''){
                                    isValid =false;
                                }
                            }
                        }
                        if(isValid){
                            $scope.insertChildRecord();
                        }
                    }
                }
                
                // General Methods
                //To Convert List into unique value List
                $scope.uniqueList = function(ArrayList){
                    var unique = new Set(ArrayList);
                    ArrayList = new Array();
                    unique.forEach(function(value){
                        ArrayList.push(value);
                    });
                    return ArrayList;
                }
                
                //Get date time stamp
                $scope.getDateTime = function(){
                    var now     = new Date(); 
                    var year    = now.getFullYear();
                    var month   = now.getMonth()+1; 
                    var day     = now.getDate();
                    var hour    = now.getHours();
                    var minute  = now.getMinutes();
                    var second  = now.getSeconds(); 
                    if(month.toString().length == 1) {
                        var month = '0'+month;
                    }
                    if(day.toString().length == 1) {
                        var day = '0'+day;
                    }   
                    if(hour.toString().length == 1) {
                        var hour = '0'+hour;
                    }
                    if(minute.toString().length == 1) {
                        var minute = '0'+minute;
                    }
                    if(second.toString().length == 1) {
                        var second = '0'+second;
                    }   
                    var dateTime = year+'/'+month+'/'+day+' '+hour+':'+minute+':'+second;   
                    return dateTime;
                }
            });
            
            //Directives
            
            //Field Selection Directives
            
            //Startup Selection for Parent Fields
            angular.module("DataTableApp").directive("fieldsTree",function(){
                return {
                    template:'<div class="panel-heading" style="background-color:#AACFEF !important;border:#AACFEF !important;">'+
                    '<h1 class="panel-title">{{objectName}}</h1>'+
                    '</div>'+
                    '<div class="scrollable panel-body">'+
                    '<span ng-repeat="field in fields" style="padding-left:3%;" ng-show="!massUpdateRecords || (updateable(field) && !unique(field))" >'+
                    '<input ng-click="displayTableButton();" ng-show="!massUpdateRecords" ng-click="field.showField=field.selected" type="checkbox" ng-model="field.selected"/>'+
                    '<input ng-show="massUpdateRecords" type="checkbox" ng-model="field.massUpdate"/> {{field.fieldDetail.label}}&nbsp;<br/>'+
                    '</span>'+
                    '<hr ng-show="massUpdateRecords"/>'+
                    '<table width="100%" ng-show="massUpdateRecords">'+
                    '<tr>'+
                    '<td width="50%"><button ng-click="instantiateNewRecord(\'parent\',null);fieldsSelectedForMassUpdate=true;" ng-show="setValuesButtonValidate(\'parent\');">Set Values</button></td>'+
                    '<td width="50%"><button ng-click="cancel();">Cancel</button></td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            //Startup Selection for Parent Relations
            angular.module("DataTableApp").directive("relationTree",function(){
                return {
                    template:'<div class="panel-heading" style="background-color:#AACFEF !important;border:#AACFEF !important;">'+
                    '<h1 class="panel-title">{{objectName}} RelatedList</h1>'+
                    '</div>'+
                    '<div class="scrollable panel-body">'+
                    '<span ng-repeat="childRelation in ChildRelationShips" style="padding-left:3%;" ng-show="!!childRelation.ChildRelationshipDetail.relationshipName">'+
                    '<input type="checkbox" ng-click="getSelectedRelatedListFields(childRelation.ChildRelationshipDetail.relationshipName);displayTableButton();"   ng-model="childRelation.selected"/> {{childRelation.ChildRelationshipDetail.relationshipName}}&nbsp;<br/>'+
                    '</span>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            //Startup Selection for Child Fields
            angular.module("DataTableApp").directive("childFieldsTree",function(){
                return {
                    template:'<div class="panel-heading" style="background-color:#AACFEF !important;border:#AACFEF !important;">'+
                    '<h1 class="panel-title">{{selectedChildDetails.label}}</h1>'+
                    '</div>'+
                    '<div class="scrollable panel-body">'+
                    '<span ng-repeat="field in ChildRelationShipFields" style="padding-left:3%;" ng-show="!massUpdateRecords || (updateable(field) && !unique(field))">'+
                    '<input ng-click="displayTableButton();" ng-show="!massUpdateRecords" type="checkbox" ng-model="field.selected"/>'+
                    '<input ng-show="massUpdateRecords" type="checkbox" ng-model="field.massUpdate"/> {{field.fieldDetail.label}}&nbsp;<br/>'+
                    '</span>'+
                    '<hr ng-show="massUpdateRecords"/>'+
                    '<table width="100%" ng-show="massUpdateRecords">'+
                    '<tr>'+
                    '<td width="50%">'+
                    '<button ng-click="instantiateNewRecord(\'child\',null);fieldsSelectedForMassUpdate=true;" ng-show="setValuesButtonValidate(\'child\');">Set Values</button>'+
                    '</td>'+
                    '<td width="50%">'+
                    '<button ng-click="cancel();">Cancel</button>'+
                    '</td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            //Input and Output field related Directives
            
            //Generic Input Field for all types
            angular.module("DataTableApp").directive("inputField",function($compile){
                return {
                    template:'<span ng-switch on="type" >'+
                    '<span ng-switch-when="date"><input ng-class={required:required(field)} ng-focus="setValue();" type="datetime-local" ng-blur="changed();"  ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="datetime"><input ng-class={required:required(field)} ng-focus="setValue();" type="datetime-local" min="1970-01-02" ng-blur="changed();" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="currency"><input ng-class={required:required(field)} type="currency" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="int"><input step="any" ng-blur="changed();" ng-class={required:required(field)} min="1" type="number" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="number"><input step="any" ng-blur="changed();" ng-focus="setValue();" ng-focus="setValue();" ng-class={required:required(field)} min="1" type="number" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="double"><input ng-blur="changed();" ng-focus="setValue();" ng-class={required:required(field)} min="0.01" type="number" ng-model="value[field.fieldDetail.name]" step="any" id="inputValue" /></span>'+
                    '<span ng-switch-when="id"><input ng-class={required:required(field)} type="text" pattern=".{15,18}" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="phone"><input ng-class={required:required(field)} type="phone" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="url"><input ng-class={required:required(field)} type="url" ng-model="value[field.fieldDetail.name]" id="inputValue" /></span>'+
                    '<span ng-switch-when="picklist"><select ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]" id="inputValue"><option ng-repeat="option in picklistvalues" ng-show="option.active" ng-bind="option.label">{{option.label}}</option></select></span>'+
                    '<span ng-switch-when="email"><input ng-class={required:required(field)} type="email" ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                    '<span ng-switch-when="reference"><look-up record="value" references="references" field="field" type="referenceto"></look-up></span>'+
                    '<span ng-switch-when="boolean"><input ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]"  type="checkbox"  id="inputValue" /></span>'+ 
                    '<span ng-switch-when="textarea"><textarea ng-class={required:required(field)} id="inputValue" ng-model="value[field.fieldDetail.name]"></textarea></span>'+	
                    '<span ng-switch-when="address"><textarea ng-class={required:required(field)} id="inputValue" ng-model="value[field.fieldDetail.name]"></textarea></span>'+	
                    '<span ng-switch-when="text"><input type="text" ng-class={required:required(field)}  ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                    '<span ng-switch-when="string"><input type="text" ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                    '<span ng-switch-default ><input type="text" ng-class={required:required(field)} ng-model="value[field.fieldDetail.name]" id="inputValue"/></span>'+
                    '</span>',
                    scope:{
                        type:'=',
                        value: '=',
                        picklistvalues: '=',
                        referenceto: '=',
                        field: '=',
                        references: '='
                    },
                    restrict:'E',
                    link:function(scope,element){
                        
                        //type cast input values on focus
                        scope.setValue = function(){
                            if(scope.value != null || scope.value != undefined){ 
                                
                                //typecast input to datetime
                                if(scope.type=='datetime'){
                                    if(scope.value[scope.field.fieldDetail.name]!=null || scope.value[scope.field.fieldDetail.name]!=undefined){
                                        var dateTime = scope.value[scope.field.fieldDetail.name];
                                        scope.value[scope.field.fieldDetail.name] = new Date(dateTime);
                                    }
                                    else{
                                        scope.value[scope.field.fieldDetail.name] = new Date(null);
                                    } 
                                }
                                
                                //typecast input to date
                                else if(scope.type=='date'){
                                    if(scope.value[scope.field.fieldDetail.name]!=null || scope.value[scope.field.fieldDetail.name]!=undefined){
                                        var dateTime = scope.value[scope.field.fieldDetail.name];
                                        scope.value[scope.field.fieldDetail.name] = new Date(dateTime);
                                    }
                                    else{
                                        scope.value[scope.field.fieldDetail.name] = new Date(null);
                                    }
                                }
                                
                                //typecast input to number
                                else if(scope.type=='number' || scope.type=='double' || scope.type=='int'){    
                                    	if(scope.value[scope.field.fieldDetail.name] != null || scope.value[scope.field.fieldDetail.name] != undefined){
                                    	scope.value[scope.field.fieldDetail.name] = parseFloat(scope.value[scope.field.fieldDetail.name],10);
                                	}
                                }
                            }
                        }
                        
                        //when input changes typecast to corresponding type
                        scope.changed = function(){
                            
                            //sets changed value to datetime type
                            if(scope.type=="date" || scope.type=="datetime"){
                                if(scope.value[scope.field.fieldDetail.name] != null || scope.value[scope.field.fieldDetail.name] != undefined){
                                    scope.value[scope.field.fieldDetail.name] = new Date(scope.value[scope.field.fieldDetail.name]);
                                    var sample = new Date(null);
                                    if(scope.value[scope.field.fieldDetail.name]-sample == 0){
                                        scope.value[scope.field.fieldDetail.name] = null;
                                    }
                                }
                            }
                            
                            //sets changed value to number type
                            else if(scope.type=="number" || scope.type=="int" || scope.type=="double"){
                                if(scope.value[scope.field.fieldDetail.name] != null || scope.value[scope.field.fieldDetail.name] != undefined){
                                    scope.value[scope.field.fieldDetail.name] = parseFloat(scope.value[scope.field.fieldDetail.name],10);
                                }
                            }
                        }
                        
                        //returns true if required
                        scope.required = function(field){
                            if(field.fieldDetail.nillable=='true')
                                return false;
                            return true;
                        }
                    }
                };
            });
            
            //Lookup Autocomplete
            angular.module("DataTableApp").directive("lookUp",function(){
                return{
                    scope:{
                        type: '=',
                        record : '=',
                        field : '=',
                        references : '='
                    },
                    template :'<span>'+
                    '<input type="text" ng-class={required:required(field)} ng-change="updateValues();" ng-model="searchText" id="inputValue"/>'+
                    '<div class="lookupMode" ng-show="autoComplete" style="z-index:3;display:block;position:absolute;background-color:white;width:234px;min-height:0px;border-top:solid black 1px;">'+
                    '<ul style="list-style-type:none;padding-left:initial;display:inline-block;">'+
                    '<li ng-repeat="recordValues in lookupvalues" value="{{recordValues[\'Id\']}}" ng-click="selectedValue(recordValues);" style="margin-left:1px;padding-left:4px;padding-right:4px;width:234px;border-bottom: solid black 1px;border-left: solid black 1px;border-right: solid black 1px;" ng-class="{focussed:hover}" ng-mouseenter="hover = true" ng-mouseleave="hover = false">'+
                    '{{recordValues["Name"]}}'+
                    '</li>'+
                    '</ul>'+
                    '</div>'+
                    '</span>',
                    restrict :'E',
                    link: function (scope, element,attrs) {
                        
                        scope.searchText = ' ';
                        scope.autoComplete = false;
                        scope.typeValues = new Array();
                        
                        //set Autocomplete values
                        for(var i=0;i<scope.references.length;i++){
                            if(scope.references[i].type == scope.type){
                                scope.typeValues = scope.references[i].values;
                                break;
                            }
                        }
                        
                        //Change options when entry changes
                        scope.updateValues = function(){
                            if(scope.searchText.trim()!=''){
                                scope.lookupvalues = new Array();
                                var count = 0;
                                for(var i=0;i<scope.typeValues.length && count<5;i++){
                                    if(scope.typeValues[i].Name.toLowerCase().indexOf(scope.searchText.toLowerCase()) >= 0){
                                        count++;
                                        scope.lookupvalues.push(scope.typeValues[i]);
                                    }
                                }
                                
                                //Search for non-retrieved records for required values
                                if(count<5){
                                    if(Array.isArray(scope.type)){
                                        scope.type = 'User';
                                    }
                                    var dbValues =  sforce.connection.query("select id, name from "+scope.type+" where name like '%"+scope.searchText+"%' order by name asc limit 5");
                                    if(Array.isArray(dbValues['records'])){
                                        scope.lookupvalues = dbValues['records'];
                                    }
                                    else{
                                        var arrayList = new Array();
                                        arrayList.push(dbValues['records']);
                                        scope.lookupvalues = arrayList;
                                    }
                                }
                                scope.autoComplete = true;
                            }
                            else{
                                scope.autoComplete = false;
                            }
                        }
                        
                        //to give id value for lookup
                        scope.selectedValue = function(records){
                            scope.searchText = records['Name'];
                            scope.record[scope.field.fieldDetail.name] = records['Id'];
                            scope.autoComplete = false;
                        }
                        
                        //returns true if field is required
                        scope.required = function(field){
                            if(field.fieldDetail.nillable=='true')
                                return false;
                            return true;
                        }
                    }
                };
            });
            
            //Generic Outputfield for all types
            angular.module("DataTableApp").directive("outputField",function($compile){
                return {
                    template:'<span ng-switch on="type" >'+
                    '<span ng-switch-when="reference" style="display:inline-block;">'+
                    '<hyperlink record="value" references="references" field="field" type="referenceto"></hyperlink>'+
                    '</span>'+
                    '<span ng-switch-default ><output style="display:inline-block;" ng-show="(val!=undefined && val!=null && val!=\'\') || value.updateRecord" type="text" ng-bind="value[field.fieldDetail.name]" id="outputValue"/><output style="display:inline-block;" ng-show="(val==undefined || val==null || val==\'\') && !value.updateRecord" type="text" id="outputValue"/></span>'+
                    '</span>&nbsp;&nbsp;&nbsp;'+
                    '<i id="lock" ng-show="!updateable(field)" class="fa fa-lock"></i>'+
                    '<span id="pencil" ng-show="updateable(field)" class="glyphicon glyphicon-pencil"></span>',
                    scope:{
                        type:'=',
                        value: '=',
                        referenceto: '=',
                        field: '=',
                        references: '='
                    },
                    restrict:'E',
                    link:function(scope,element)
                    {
                        scope.val =  scope.value[scope.field.fieldDetail.name];
                        
                        //To set the value of datetime fields
                        if(scope.type=='date'|| scope.type == 'datetime'){
                            scope.value[scope.field.fieldDetail.name] = new Date(scope.value[scope.field.fieldDetail.name]);
                            var sampleDate = new Date(null);
                            if(scope.val!=null && scope.val- sampleDate==0){
                                scope.value[scope.field.fieldDetail.name] = null;
                            }
                        }
                        
                        //To set the value of number fields
                        else if(scope.type=='number'|| scope.type == 'int' || scope.type=='double'){
                            if(scope.value[scope.field.fieldDetail.name]!=null || scope.value[scope.field.fieldDetail.name]!= undefined)
                            scope.value[scope.field.fieldDetail.name] = parseFloat(scope.value[scope.field.fieldDetail.name]);
                        }
                        
                        //returns true if fields is updateable
                        scope.updateable = function(field){
                            if(field.fieldDetail.updateable=='true')
                                return true;
                            return false;
                        }
                    }
                };
                
            });
            
            //Hyperlink to Show Lookup value details
            angular.module("DataTableApp").directive("hyperlink",function($compile, $window){
                return {
                    template:'<a id="outputValue" href="/{{Id}}">{{Name}}</a>',
                    scope:{
                        type:'=',
                        record: '=',
                        field: '=',
                        references: '='
                    },
                    restrict:'E',
                    link:function(scope,element){
                        scope.Id = scope.record[scope.field.fieldDetail.name];
                        scope.Name = '';
                        for(var i=0;i<scope.references.length;i++){
                            if(scope.references[i].type == scope.type){
                                for(var j=0;j<scope.references[i].values.length;j++){
                                    if(scope.references[i].values[j].Id == scope.Id ){
                                        scope.Name = scope.references[i].values[j].Name;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                };
            }); 
            
            //Sidebar Directives
                        
            //Panel for doing Operations
            angular.module("DataTableApp").directive("toolBar",function(){
                return {
                    template:'<div class="panel-heading" ng-click="showToolbar=!showToolbar;showParentFields=false;showChildFields=false;">'+
                    '<h1 class="panel-title">Tool Bar</h1>'+
                    '</div>'+
                    '<div class="panel-body">'+
                    '<table>'+
                    '<tr>'+
                    '<td >Records Per Page  &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><input ng-model="recordsPerPage" ng-blur="paginateTable();"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td >Parent Query Condition  &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><textarea ng-model="queryCondition" ng-blur="queryChanged();"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td > Child Query Condition  &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><textarea ng-model="childQueryCondition" ng-blur="queryChanged();"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td >Order Parent Rows By  &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><input ng-model="orderParentBy" ng-blur="queryChanged();"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td >Order Child Rows By  &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><input ng-model="orderChildBy" ng-blur="queryChanged();"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td >Limit Parent Records &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><input ng-model="limitParentRecords" ng-blur="queryChanged();"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td >Limit Child Records &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><input ng-model="limitChildRecords" ng-blur="queryChanged();"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr ng-show="showTable">'+
                    '<td >Collapse Child Table &nbsp;&nbsp;&nbsp;</td>'+
                    '<td><input ng-model="collapseChild" type="checkbox"/></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr ng-show="showTable && !deleteRecords && !massUpdateRecords">'+
                    '<td >Update Records &nbsp;&nbsp;&nbsp;</td>'+
                    '<td ng-show="!updateRecords" ><input ng-model="updateRecords" type="checkbox"  ng-click="deleteRecords=false;massUpdateRecords=false;"/></td>'+
                    '<td ng-show="updateRecords && showUpdateButton"><button ng-click="updateRecordsMethod();">Update</button></td>'+
                    '<td ng-show="updateRecords"> <button ng-click="cancelUpdate();">Cancel</button></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr ng-show="showTable && !updateRecords && !deleteRecords">'+
                    '<td >Mass Update Records &nbsp;&nbsp;&nbsp;</td>'+
                    '<td ng-show="!massUpdateRecords" ><input ng-model="massUpdateRecords" type="checkbox"  ng-click="deleteRecords=false;updateRecords=false;"/></td>'+
                    '<td ng-show="massUpdateRecords && !showSelectedFieldsButton"><input  type="radio" ng-model="massUpdateParentChildSelection" value="Parent"/>&nbsp;Parent &nbsp;&nbsp;<input type="radio"  ng-model="massUpdateParentChildSelection" value="Child" />&nbsp;Child</td>'+
                    '<td ng-show="showSelectedFieldsButton"><button ng-click="showParentFieldsForMassUpdate=(massUpdateParentChildSelection==\'Parent\');showChildFieldsForMassUpdate=(massUpdateParentChildSelection==\'Child\');showTable=false;showToolbar = false;">Select Fields</button></td>'+
                    '<td ng-show="massUpdateRecords"><button ng-click="cancel();">Cancel</button></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr ng-show="showTable && !updateRecords && !massUpdateRecords">'+
                    '<td >Delete Records &nbsp;&nbsp;&nbsp;</td>'+
                    '<td ng-show="!deleteRecords"><input ng-model="deleteRecords" type="checkbox" ng-click="updateRecords=false;massUpdateRecords=false;"/></td>'+
                    '<td ng-show="deleteRecords && showDeleteButton()"><button class="btn btn-danger" ng-click="deleteSelectedRecords();">Delete</button></td>'+
                    '<td ng-show="deleteRecords"> <button ng-click="cancel();">Cancel</button></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><div height="1%"><p/></div></td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td ng-show="showDisplayButton"><hr/>'+
                    '<button class="btn btn-success"  ng-click="getParentChildRecords(true);showToolbar = false;displayTableButton();" >Display Table</button>'+
                    '</td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E',
                    link:function(scope){
                        var prevParentLimit = scope.limitParentRecords;
                        var prevChildLimit = scope.limitChildRecords;
                        var prevParentOrder =scope.orderParentBy;
                        var prevChildOrder = scope.orderChildBy;
                        var prevParentCondition = scope.queryCondition;
                        var prevChildCondition = scope.childQueryCondition;
                        scope.queryChanged = function(){
                            if(prevParentLimit != scope.limitParentRecords || prevChildLimit != scope.limitChildRecords || prevParentOrder !=scope.orderParentBy || prevChildOrder != scope.orderChildBy || prevParentCondition != scope.queryCondition || prevChildCondition != scope.childQueryCondition){
                                prevParentLimit = scope.limitParentRecords;
                                prevChildLimit = scope.limitChildRecords;
                                prevParentOrder =scope.orderParentBy;
                                prevChildOrder = scope.orderChildBy;
                                prevParentCondition = scope.queryCondition;
                                prevChildCondition = scope.childQueryCondition;
                                scope.getParentChildRecords(false);
                                scope.showToolbar = true;
                            }
                        }
                    }
                };
            }); 
            
            //Panel for listing Logs
            angular.module("DataTableApp").directive("logs",function(){
                return {
                    template:'<div class="panel-heading" ng-click="showLogs=!showLogs;">'+
                    '<h1 class="panel-title">Logs</h1>'+
                    '</div>'+
                    '<div class="scrollable panel-body">'+
                    '<table>'+
                    '<tr>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"><span id="printLogs" onClick="PrintElem(\'#LogPrint\')" class="glyphicon glyphicon-print">&nbsp;Print Logs</span></td>'+
                    '</tr>'+
                    '</table>'+
                    '<hr/>'+
                    '<table>'+
                    '<tr>'+
                    '<td width="20%">Retrieve&nbsp;&nbsp;<input type="checkbox" ng-model="captureQuery"/></td>'+
                    '<td width="20%">Insert&nbsp;&nbsp;<input type="checkbox" ng-model="captureInsert"/></td>'+
                    '<td width="20%">Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureUpdate"/></td>'+
                    '<td width="20%">Delete&nbsp;&nbsp;<input type="checkbox" ng-model="captureDelete"/></td>'+
                    '<td width="20%">Mass Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureMassUpdate"/>'+
                    '</td>'+
                    '</tr>'+
                    '</table>'+
                    '<hr/>'+
                    '<table>'+
                    '<tr ng-click="logOrder=!logOrder;">'+
                    '<th width="35%">Time</th>'+
                    '<th width="20%">Operation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>'+
                    '<th>Message</th>'+
                    '</tr>'+
                    '<tr ng-repeat="log in logs | orderBy : \'time\' :logOrder" ng-show="logsFilter(log.operation);">'+
                    '<td width="35%">{{log.time}}</td>'+
                    '<td width="20%">{{log.operation}}</td>'+
                    '<td>{{log.message}}</td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            //Panel for listing Errors
            angular.module("DataTableApp").directive("errors",function(){
                return {
                    template:'<div class="panel-heading" ng-click="showErrors=!showErrors;">'+
                    '<h1 class="panel-title">Errors</h1>'+
                    '</div>'+
                    '<div class="scrollable panel-body">'+
                    '<table>'+
                    '<tr>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"></td>'+
                    '<td width="20%"><span id="printLogs" onClick="PrintElem(\'#ErrorPrint\')" class="glyphicon glyphicon-print">&nbsp;Print Errors</span></td>'+
                    '</tr>'+
                    '</table>'+
                    '<hr/>'+
                    '<table>'+
                    '<tr>'+
                    '<td width="20%">Retrieve&nbsp;&nbsp;<input type="checkbox" ng-model="captureQueryError"/></td>'+
                    '<td width="20%">Insert&nbsp;&nbsp;<input type="checkbox" ng-model="captureInsertError"/></td>'+
                    '<td width="20%">Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureUpdateError"/></td>'+
                    '<td width="20%">Delete&nbsp;&nbsp;<input type="checkbox" ng-model="captureDeleteError"/></td>'+
                    '<td width="20%">Mass Update&nbsp;&nbsp;<input type="checkbox" ng-model="captureMassUpdateError"/></td>'+
                    '</tr>'+
                    '</table>'+
                    '<hr/>'+
                    '<table>'+
                    '<tr ng-click="errorOrder=!errorOrder;">'+
                    '<th width="35%">Time</th>'+
                    '<th width="20%">Operation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>'+
                    '<th >Message</th>'+
                    '</tr>'+
                    '<tr ng-repeat="error in errors | orderBy : \'time\' :errorOrder" ng-show="errorsFilter(error.operation);">'+
                    '<td>{{error.time}}</td>'+
                    '<td>{{error.operation}}</td>'+
                    '<td>{{error.message}}</td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            //Panel for selecting Parent Fields
            angular.module("DataTableApp").directive("parentToolBar",function(){
                return {
                    template:'<div class="panel-heading"  ng-click="showParentFields=!showParentFields;" style="background-color:#AACFEF !important; border-color:#AACFEF !important;">'+
                    '<h1 class="panel-title">{{objectName}} Fields</h1>'+
                    '</div>'+
                    '<div class="scrollable panel-body">'+
                    '<span ng-repeat="field in fields" ng-show="field.selected || updateRecords"   style="padding-left:3%;"><input type="checkbox" ng-model="field.showField"/> {{field.fieldDetail.label}}&nbsp;<br/></span>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            //Panel for selecting child Fields
            angular.module("DataTableApp").directive("childToolBar",function(){
                return {
                    template:'<div class="panel-heading"  ng-click="showChildFields=!showChildFields;" style="background-color:#BBB4F1;border-color:#BBB4F1;">'+
                    '<h1 class="panel-title">{{selectedChildDetails.label}} Fields</h1>'+
                    '</div>'+
                    '<div class="panel-body">'+
                    '<span ng-repeat="field in ChildRelationShipFields" ng-show="field.selected || updateRecords"   style="padding-left:3%;"><input type="checkbox" ng-model="field.showField"/> {{field.fieldDetail.label}}&nbsp;<br/></span>'+
                    '</div>',
                    restrict:'E'
                };
            }); 
            
            //New Object Creation Directives
            
            // To create new Parent Object
            angular.module("DataTableApp").directive("newParentObject",function(){
                return {
                    template:'<div class="panel-heading" style="background-color:#AACFEF !important; border-color:#AACFEF !important;">'+
                    '<h1 class="panel-title">{{objectName}}</h1></div>'+
                    '<div class="panel-body">'+
                    '<table class="table table-striped table-hover">'+
                    '<tr ng-repeat="field in fields" style="padding-left:3%;" ng-show="(updateable(field) && !massUpdateRecords) || field.massUpdate">'+
                    '<td>{{field.fieldDetail.label}} &nbsp;</td>'+
                    '<td><input-field references="referenceArray" field="field" type="field.fieldDetail.type" value="newParentRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" /></td>'+
                    '</tr>'+ 
                    '<tr >'+
                    '<td><button class="createRecordButton" ng-click="validate(\'parent\');"  type="parent"  ng-show="!massUpdateRecords">Create {{objectName}}</button><button ng-click="updateRecordsMethod();"  ng-show="massUpdateRecords">Update Records</button></td>'+
                    '<td><button ng-click="cancel();">Cancel</button></td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            // To create new Child Object
            angular.module("DataTableApp").directive("newChildObject",function(){
                return {
                    template:'<div class="panel-heading" style="background-color:#BBB4F1;border-color:#BBB4F1;">'+
                    '<h1 class="panel-title">{{selectedChildDetails.label}}</h1>'+
                    '</div>'+
                    '<div class="panel-body">'+
                    '<table class="table table-striped table-hover ">'+
                    '<tr ng-repeat="field in ChildRelationShipFields" style="padding-left:3%;" ng-show="(updateable(field) && !massUpdateRecords) || field.massUpdate">'+
                    '<td>{{field.fieldDetail.label}} &nbsp;</td>'+
                    '<td ng-show="field.fieldDetail.name!=childToParentFieldName || massUpdateRecords">'+ 
                    '<input-field references="referenceArray" field="field" type="field.fieldDetail.type" value="newChildRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</td>'+
                    '<td ng-show="field.fieldDetail.name==childToParentFieldName && !massUpdateRecords">'+ 
                    '<a href="/{{newChildRecord[field.fieldDetail.name]}}">{{parentRecordName}} </a>'+
                    '</td>'+
                    '</tr>'+
                    '<tr>'+
                    '<td><button  class="createRecordButton" ng-click="validate(\'child\');"  type="child" ng-show="!massUpdateRecords">Create {{selectedChildDetails.label}}</button><button ng-click="updateRecordsMethod();"  ng-show="massUpdateRecords">Update Records</button></td>'+
                    '<td><button ng-click="cancel();">Cancel</button></td>'+
                    '</tr>'+
                    '</table>'+
                    '</div>',
                    restrict:'E'
                };
            });
            
            //Table Directives
            
            //Parent Table
            angular.module("DataTableApp").directive("parentTable",function(){
                return {
                    template:'<table class="list">'+
                    '<tr class="dataRow">'+
                    '<td width="50%">Search: &nbsp;&nbsp;&nbsp;<input ng-model="searchText" placeholder={{objectName}} >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>'+
                    '<td ng-show="!massUpdateRecords && !updateRecords && !deleteRecords"><button ng-click="instantiateNewRecord(\'parent\',null);">Create New {{objectName}}</button></td>'+
                    '</tr>'+
                    '</table>'+
                    '<table class="table table-hover list" style="border-collapse: initial !important;border:solid 0.1em;"  border="1" >'+
                    '<tr style="background-color: #AACFEF;border-color: #000000;" >'+
                    '<th  class="headerRow parentHeader" ng-repeat="field in fields"  ng-show="field.selected  && field.showField || (updateRecords && field.showField)" ng-click="order(field.fieldDetail.name);sortSelectedOrReveresed(field.fieldDetail.label,fields);" >'+
                    '{{field.fieldDetail.label}}&nbsp;&nbsp;&nbsp;<span ng-show="field.sortSelected">&#x25B2;</span><span ng-show="field.sortReverse">&#x25BC;</span>'+
                    '</th>'+
                    '<th class="headerRow parentHeader" ng-show="massUpdateRecords && massUpdateParentChildSelection == \'Parent\'" >Select</th>'+
                    '<th class="headerRow parentHeader" ng-show="deleteRecords" >Select</th>'+
                    '</tr>'+
                    '<tr class="dataRow" ng-repeat="record in recordsInDisplay | search:searchText | orderBy:OrderByfieldName:isReverseOrdered">'+
                    '<td class="dataHolder dataCell" ng-repeat="field in fields" ng-show="field.selected && field.showField || (updateRecords && field.showField)" style="width:20%;" ng-dblclick="setForUpdate(field,record);">'+
                    '<span class="viewMode" updateable="{{field.fieldDetail.updateable}}" >'+
                    '<output-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                    '<span class="editMode" style="display:none;" >'+
                    '<input-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+ 
                    '</td>'+
                    '<td class="dataCell" ng-show="massUpdateRecords  && massUpdateParentChildSelection == \'Parent\'"><input type="checkbox" ng-click="showSelectedFieldsButtonValidate();" ng-model="record.updateRecord"></td>'+
                    '<td class="dataCell" ng-show="deleteRecords"><input type="checkbox" ng-model="record.deleteRecord"></td>'+
                    '</tr>'+
                    '</table>',
                    restrict:'E'
                };
            });
            
            //Parent Child Table
            angular.module("DataTableApp").directive("parentChildTable",function(){
                return {
                    template:'<table class="list" style="width:90%;">'+
                    '<tr class="dataRow">'+
                    '<td width="50%">Search: &nbsp;&nbsp;&nbsp;<input ng-model="searchText" placeholder={{objectName}} >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>'+
                    '<td ng-show="!massUpdateRecords && !updateRecords && !deleteRecords"><button ng-click="instantiateNewRecord(\'parent\',null);">Create New {{objectName}}</button></td>'+
                    '</tr>'+
                    '</table>'+
                    '<table style="border-collapse: initial !important;border:solid 0.1em;" class="table table-hover list" border="1" ng-repeat="record in recordsInDisplay | search:searchText | orderBy:OrderByfieldName:isReverseOrdered">'+
                    '<tr class="dataRow " style="background-color:#AACFEF;border-color: #000000;" ng-show="(!collapseChild || $first)">'+
                    '<th ng-repeat="field in fields" ng-show="field.selected  && field.showField || (updateRecords && field.showField)" ng-click="order(field.fieldDetail.name);sortSelectedOrReveresed(field.fieldDetail.label,fields);" class="headerRow parentHeader">'+
                    '{{field.fieldDetail.label}}&nbsp;&nbsp;&nbsp;<span ng-show="field.sortSelected">&#x25B2;</span><span ng-show="field.sortReverse">&#x25BC;</span>'+
                    '</th>'+
                    '<th class="headerRow parentHeader" ng-show="massUpdateRecords && massUpdateParentChildSelection == \'Parent\'" >Select</th>'+
                    '<th class="headerRow parentHeader" ng-show="deleteRecords" >Select</th>'+
                    '</tr>'+
                    '<tr class="dataRow">'+
                    '<td class="dataHolder dataCell " ng-repeat="field in fields" ng-show="field.selected && field.showField || (updateRecords && field.showField)" style="width:20%;" ng-dblclick="setForUpdate(field,record);">'+
                    '<span class="viewMode" updateable="{{field.fieldDetail.updateable}}" >'+
                    '<output-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                    '<span class="editMode" style="display:none;" >'+
                    '<input-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="record" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+ 
                    '</td>'+
                    '<td class="dataCell" ng-show="massUpdateRecords  && massUpdateParentChildSelection == \'Parent\'"><input type="checkbox" ng-click="showSelectedFieldsButtonValidate();" ng-model="record.updateRecord"></td>'+
                    '<td class="dataCell" ng-show="deleteRecords"><input type="checkbox" ng-model="record.deleteRecord"></td>'+
                    '</tr>'+
                    '<tr class="dataRow"  ng-show="!collapseChild">'+
                    '<td colspan="1000" class="dataCell" >'+
                    '<table class="table  table-hover list" style="border-collapse: initial !important;border:solid 0.1em;">'+
                    '<tr>'+
                    '<td colspan="100">'+
                    '<table style="width:100%;">'+
                    '<tr>'+
                    '<td ><b><span class="glyphicon glyphicon-chevron-up collapseIcon" ></span>&nbsp;&nbsp;{{selectedChildRelationName}}({{getChildRecords(record).length}})</b></td>'+
                    '<td class="dataCell" align="center"><span ng-show="getChildRecords(record).length>0">Search:&nbsp;&nbsp;&nbsp;<input ng-model="searchChildText" placeholder={{selectedChildRelationName}} /></span></td>'+
                    '<td align="right" ng-show="!massUpdateRecords && !updateRecords && !deleteRecords"><button ng-click="instantiateNewRecord(\'child\',record.Id);">Create New {{selectedChildDetails.name}}</button></td>'+
                    '</tr>'+
                    '</table>'+
                    '</td>'+
                    '</tr>'+
                    '<tbody class="childBody">'+
                    '<tr class="dataRow childHeader" style="background-color:#BBB4F1;">'+
                    '<th class="headerRow childHeader" style="border-right: #ECECEC solid 0.1em;" ng-repeat="field in ChildRelationShipFields" ng-show="field.selected && field.showField || (updateRecords && field.showField)" ng-click="childOrder(field.fieldDetail.name);sortSelectedOrReveresed(field.fieldDetail.label,ChildRelationShipFields);" >'+
                    '{{field.fieldDetail.label}}&nbsp;&nbsp;&nbsp;<span ng-show="field.sortSelected">&#x25B2;</span><span ng-show="field.sortReverse">&#x25BC;</span>'+
                    '</th>'+
                    '<th class="headerRow childHeader" style="border-right: #ECECEC solid 0.1em;" ng-show="massUpdateRecords  && massUpdateParentChildSelection == \'Child\'" style="width:20%;background-color: #15A14C;border-color: #000000;color:#ffffff;">Select</th>'+
                    '<th class="headerRow childHeader" style="border-right: #ECECEC solid 0.1em;" ng-show="deleteRecords" style="width:20%;background-color: #15A14C;border-color: #000000;color:#ffffff;">Select</th>'+
                    '</tr>'+
                    '<tr class="dataRow" class="success" ng-repeat="childRecord in getChildRecords(record) | search:searchChildText | orderBy:childOrderByfieldName:childIsReverseOrdered">'+                     
                    '<td class="dataCell dataHolder" style="border-right: #ECECEC solid 0.1em;" ng-repeat="field in ChildRelationShipFields"  ng-dblclick="setForUpdate(field,childRecord);" ng-show="field.selected && field.showField || (updateRecords && field.showField)" style="width:20%;">'+	
                    '<span class="viewMode" updateable="{{field.fieldDetail.updateable}}" >'+
                    '<output-field  references="referenceArray"  field="field" type="field.fieldDetail.type" value="childRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                    '<span class="editMode" style="display:none;" >'+
                    '<input-field references="referenceArray"  field="field" type="field.fieldDetail.type" value="childRecord" picklistvalues="field.fieldDetail.picklistValues" referenceto="field.fieldDetail.referenceTo" />'+
                    '</span>'+
                    '</td>'+
                    '<td class="dataCell" style="border-right: #ECECEC solid 0.1em;" ng-show="massUpdateRecords   && massUpdateParentChildSelection == \'Child\'"><input ng-click="showSelectedFieldsButtonValidate();" type="checkbox" ng-model="childRecord.updateRecord"></td>'+
                    '<td ng-show="deleteRecords" style="border-right: #ECECEC solid 0.1em;" class="dataCell"><input type="checkbox" ng-model="childRecord.deleteRecord"></td>'+
                    '</tr>'+
                    '</tbody>'+
                    '</table>'+
                    '</td>'+
                    '</tr>'+
                    '</table>',
                    restrict:'E'
                };
            });
            
            //Filters
            
            //Filtering records based on text
            angular.module("DataTableApp").filter('search', function(){
                return function(records,word){
                    var filtered = new Array();
                    if(word!='' && word!=undefined){
                        for(var i=0;i<records.length;i++){
                            if(records[i].toString().toLowerCase().indexOf(word.toLowerCase())>0){
                                filtered.push(records[i]);
                            }
                        }
                        return filtered;
                    }
                    return records;
                };
            });
            
            </script>
        </head>
        <body class="pointer">
            
            <!--to scroll bottom -->
            <div style="z-index:2;width:100%">
                <div style="width:89%;float:left;"></div>
                <div id="scrollBottom" style="float:right;width:4.3%;">
                    <button type="button" class="btn btn-default btn-sm">
                        <span class="glyphicon glyphicon-hand-down"></span> Down
                    </button>
                </div>
            </div>
            
            <!-- Table Content -->
            <div id="DetailsController" ng-controller="DetailsController">
                
                 <!-- Panel to perform operations -->
                <div id="Toolbar" ng-show="!!sobjectDetail">
                    <tool-bar ng-show="showToolbar" ng-blur="showToolbar=!showToolbar;" class="panel panel-warning" style ="float:left;border:black solid 0.1em;background-color: white;position: fixed;margin-left:1.5%;width: 40%;z-index: 3;"/>
                    <div style="word-wrap: break-word;float:left;position: fixed;margin-top:10%;width:1%;z-index: 3;" ng-show="!showToolbar" ng-click="showToolbar=!showToolbar;showLogs=false;showErrors=false;showParentFields=false;showChildFields=false">
                        <b><i class="fa fa-cog fa-2x"></i></b> 
                    </div>
                </div> 
                
                <!-- Panel to list logs -->
                <div id="Logs" ng-show="showTable" >    
                    <logs ng-show="showLogs" id="LogPrint" class="panel panel-success" style ="float:left;margin-left:1.5%;border:black solid 0.1em;background-color: white;position: fixed;width: 60%;z-index: 3;"></logs>
                    <div ng-show="!showLogs" style="word-wrap: break-word;margin-top:13%;float:left;position: fixed;width:1%;z-index: 10;"  ng-click="showLogs=!showLogs;showErrors=false;showToolbar=false;showParentFields=false;showChildFields=false">
                        <b><i class="fa fa-sign-in "></i></b> 
                    </div>
                </div>
                
                <!-- Panel to list errors and popup -->
                <div id="Errors" ng-show="showTable" >    
                    <errors ng-show="showErrors" id="ErrorPrint" class="panel panel-danger" style ="float:left;margin-left:1.5%;border:black solid 0.1em;background-color: white;position: fixed;width: 70%;z-index: 3;"></errors>
                    <div ng-show="!showErrors" style="word-wrap: break-word;float:left;margin-top:16%;position: fixed;width:1%;z-index: 10;"  ng-click="showErrors=!showErrors;showLogs=false;showToolbar=false;showParentFields=false;showChildFields=false">
                        <b><i class="fa fa-flash "></i></b> 
                    </div>
                </div>
                
                <!-- Panel to select parent fields to be shown in the table -->
                <div id="ParentToolbar" ng-show="showTable">
                    <parent-tool-bar ng-show="showParentFields" class="panel panel-default" style ="float:left;border:black solid 0.1em;margin-left:1.5%;background-color: white;position: fixed;width: 40%;z-index: 3;"></parent-tool-bar>
                    <div ng-show="!showParentFields" style="word-wrap: break-word;margin-top:19%;float:left;color:white;position: fixed;width:1%;z-index: 3;" ng-click="showParentFields=!showParentFields;showLogs=false;showErrors=false;showChildFields=false;showToolbar=false;">
                        <b><i class="fa fa-user"></i></b> 
                    </div>
                </div>
                
                <!-- Panel to select child fields to be shown in the table -->
                <div id="ChildToolbar" ng-show="showTable && !collapseChild">
                    <child-tool-bar ng-show="showChildFields" class="panel panel-default" style ="float:left;border:black solid 0.1em;margin-left:1.5%;background-color: white;position: fixed;width: 40%;z-index: 3;"></child-tool-bar>
                    <div ng-show="!showChildFields" style="word-wrap: break-word;margin-top:22%;color:white;float:left;position: fixed;width:1%;z-index: 3;" ng-click="showChildFields=!showChildFields;showLogs=false;showErrors=false;showParentFields=false;showToolbar=false;">
                        <b><i class="fa fa-group"></i></b> 
                    </div>
                </div>
                
                <!-- Start up for selecting fields and relationship -->
                <div ng-show="!showTable || showParentFieldsForMassUpdate || showChildFieldsForMassUpdate">
                    <fields-tree class="panel panel-default" style="float:left;width:30%;margin-left:1.5%;border:black solid 0.1em;" ng-show="(!showTable || showParentFieldsForMassUpdate) && !showChildFieldsForMassUpdate && !fieldsSelectedForMassUpdate"/>
                    <div style="float:left;width:2%;"><p/></div>
                    <relation-tree style="width:30%;float:left;border:black solid 0.1em;" ng-show="!showTable && !showParentFieldsForMassUpdate && !showChildFieldsForMassUpdate" class="panel panel-default"/> 
                    <div style="float:left;width:2%;"><p/></div>
                    <child-fields-tree style="width:30%;float:left;border:black solid 0.1em;" ng-show="(!!selectedChildRelationName) && (!showTable || showChildFieldsForMassUpdate) && !showParentFieldsForMassUpdate && !fieldsSelectedForMassUpdate" class="panel panel-default"/>
                    <div style="float:left;width:2%;"><p/></div>
                </div>
                
                <!-- create parent record or mass updating parent fields -->
                <div ng-show="createNewParent || fieldsSelectedForMassUpdate && (massUpdateParentChildSelection=='Parent')">
                    <new-parent-object class="panel panel-default" style="width:50%;"></new-parent-object>
                </div>
                
                <!-- create child record or mass updating child fields -->
                <div ng-show="createNewChild || fieldsSelectedForMassUpdate && (massUpdateParentChildSelection=='Child')">
                    <new-child-object class="panel panel-default" style="width:50%;"></new-child-object>
                </div>
                 
                <!-- Table and pagination -->
                <div class="pointer" ng-show="showTable && !createNewParent && !createNewChild" style="margin-left:1.5%;height:100%;" >
                    <parent-child-table ng-show="!collapseChild" ></parent-child-table><parent-table ng-show="collapseChild"></parent-table><hr/>
                    
                    <!-- Pagination -->
                    <div >
                        <div style="float:left;min-width:30%;">
                            <a ng-show="pageNumber!=1" href="" ng-click="changePageNumber(-1);" style="text-decoration:none;width:30%;">
                                <button type="button" class="btn btn-default btn-sm">
                                    <span class="glyphicon glyphicon-circle-arrow-left"></span> Previous
                                </button>
                            </a><p>&nbsp;</p>
                        </div>
                        <div style="float:left;min-width:40%;"><center>Page Number: <input ng-model="pageNumber" ng-blur="paginateTable();" style="width:6%;" /> / {{totalPages}}</center></div>
                        <div style="float:right;min-width:4%;">
                            <a ng-show="pageNumber!=totalPages" href="" ng-click="changePageNumber(1);" style="text-decoration:none;width:30%;">
                                <button type="button" class="btn btn-default btn-sm">
                                   Next <span class="glyphicon glyphicon-circle-arrow-right"></span>
                                </button>
                            </a><p>&nbsp;</p></div>
                    </div>
                </div>
                
                <!--Show Error if details not found -->
                <div ng-show="!sobjectDetail">
                    <h1> Sorry No Permissions to Access this Object </h1>
                </div>
            </div>
            
            <!-- to scroll top -->
            <div style="z-index:2;position:absolute;bottom:3px;width:100%">
                <div style="width:89%;float:left;"></div>
                <div id="scrollTop" style="float:right;width:3%;margin-right:30px;">
                    <button type="button" class="btn btn-default btn-sm">
                        <span class="glyphicon glyphicon-hand-up"></span> Up
                    </button>
                </div>
            </div>  
        </body>
    </html>
</apex:page>