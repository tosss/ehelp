<apex:page showHeader="false" sidebar="false" controller="sma.MapAnythingMobile" docType="html-5.0" extensions="sma.MARemoteFunctions">
   
    <script>
        var MARemoting = {
            phase_4 : '{!$RemoteAction.MARemoteFunctions.GetRecords}',
            getShapes : '{!$RemoteAction.MARemoteFunctions.GetShapeInfo}',
            placeSearch : '{!$RemoteAction.MARemoteFunctions.googleAPISearch}',
            geocodeRecord : '{!$RemoteAction.MARemoteFunctions.geoCodeRecord}',
            live_phase_4 : '{!$RemoteAction.MARemoteFunctions.GetDevicesCurrentLocation}',
            live_history: '{!$RemoteAction.MARemoteFunctions.GetLiveDeviceHistory}',
            getEsriToken : '{!$RemoteAction.MARemoteFunctions.getEsriToken}',
            getEsriRoute : '{!$RemoteAction.MARemoteFunctions.getEsriRoute}',
            get_service_area: '{!$RemoteAction.MARemoteFunctions.getServiceArea}',
            processAJAXRequest : '{!$RemoteAction.MARemoteFunctions.processAJAXRequest}',
            processAJAXRequestReadOnly : '{!$RemoteAction.MARemoteFunctions.processAJAXRequestReadOnly}'
        }
    </script>
    
    <!-- Glyphicons -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/MapAnything.css')}"/>
    
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'MAMarkerBuilder.js')}"></script>
    <!-- jQuery -->   
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/jquery-1.7.1.min.js')}"></script>

    <!-- Autocomplete (can't use jQuery UI due to a conflict with jQuery mobile so using this for now) -->
    <script type='text/javascript' src='https://cdn.rawgit.com/devbridge/jQuery-Autocomplete/d27a586af2440e97ad069a34eb5aa0c5e8d803cd/dist/jquery.autocomplete.min.js'></script>

    <!-- async -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'async/async.min.js')}"></script>
    
    <!-- jQuery UI -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.min.js')}"></script>
    
    <!-- jQuery Touch Punch (https://github.com/furf/jquery-ui-touch-punch) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'jquery/jquery.ui.touch-punch.min.js')}"></script>
    
    <!-- toastr -->
    <script type="text/javascript" src="{!URLFOR($Resource.MapAnything, 'toastr/toastr.min.js')}"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MapAnything, 'toastr/toastr.min.css')}"></link>
    
    <!-- Moment (date parsing) -->
    <script src="{!URLFOR($Resource.MapAnything, 'js/moment.js')}" type="text/javascript"></script>
    
    <!-- jQuery Mobile -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'jquery.mobile-1.0/jquery.mobile-1.0.min.css')}"/>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'jquery.mobile-1.0/jquery.mobile-1.0.js')}"></script>

    <!-- CryptoJS (https://code.google.com/p/crypto-js/) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/cryptojs/core-min.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/cryptojs/enc-utf16-min.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/cryptojs/enc-base64-min.js')}"></script>
    
    <!-- Google Maps -->
    <script>
        //fix google maps touch events, forced
        navigator = navigator || {};
        if(('ontouchstart' in window) || (navigator.msMaxTouchPoints > 0)) {
            navigator.msPointerEnabled = true;
            navigator.msMaxTouchPoints = navigator.msMaxTouchPoints || 2;
        }
        
    </script>
    <script type='text/javascript' src='https://maps.googleapis.com/maps/api/js?client=gme-cloudbiltinc&libraries=places,visualization,drawing,geometry'></script>

    <!-- Google Maps - InfoBubble (http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobubble/examples/example.html) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/infobubble/infobubble.js')}"></script>
    <script type='text/javascript'>

        //InfoBubble does not support padding when panning to view.  Adding the padding that MA needs
        InfoBubble.prototype.panToView = function() {

            //disabling this for now because on an ipad, it forces the tooltip to be cut off every time (because the sidebar overlaps the map)
            return;

            //make sure projection and bubble are available
            var projection = this.getProjection();
            if (!projection || !this.bubble_) { return; }

            //this is the magic var
            var MAPaddingTop = 65;

            var anchorHeight = this.getAnchorHeight_();
            var height = this.bubble_.offsetHeight + anchorHeight + MAPaddingTop;
            var map = this.get('map');
            var mapDiv = map.getDiv();
            var mapHeight = mapDiv.offsetHeight;

            var latLng = this.getPosition();
            var centerPos = projection.fromLatLngToContainerPixel(map.getCenter());
            var pos = projection.fromLatLngToContainerPixel(latLng);

            // Find out how much space at the top is free
            var spaceTop = centerPos.y - height;

            // Fine out how much space at the bottom is free
            var spaceBottom = mapHeight - centerPos.y;

            var needsTop = spaceTop < 0;
            var deltaY = 0;

            if (needsTop) {
                spaceTop *= -1;
                deltaY = (spaceTop + spaceBottom) / 2;
            }

            pos.y -= deltaY;
            latLng = projection.fromContainerPixelToLatLng(pos);

            if (map.getCenter() != latLng) { map.panTo(latLng); }
        };
        InfoBubble.prototype['panToView'] = InfoBubble.prototype.panToView;

        //need to avoid moving the close button if overflow is hidden
        InfoBubble.prototype.positionCloseButton_ = function () {
            var br = this.getBorderRadius_();
            var bw = this.getBorderWidth_();

            var right = 2;
            var top = 2;

            if (this.tabs_.length && this.tabHeight_) {
                top += this.tabHeight_;
            }

            top += bw;
            right += bw;

            var c = this.contentContainer_;
            if (c && c.clientHeight < c.scrollHeight && c.style['overflowY'] != 'hidden') {     //here's the change - DK 12/4/14
                // If there are scrollbars then move the cross in so it is not over
                // scrollbar
                right += 15;
            }

            this.close_.style['right'] = this.px(right);
            this.close_.style['top'] = this.px(top);
        }

        //infobubble won't allow a bubble larger than the map viewport.  changing that so max dimensions can be handled manually
        InfoBubble.prototype.figureOutSize_ = function() {
            var map = this.get('map');

            if (!map) {
                return;
            }

            var padding = this.getPadding_();
            var borderWidth = this.getBorderWidth_();
            var borderRadius = this.getBorderRadius_();
            var arrowSize = this.getArrowSize_();

            var mapDiv = map.getDiv();
            var gutter = arrowSize * 2;
            var mapWidth = mapDiv.offsetWidth - gutter;
            var mapHeight = mapDiv.offsetHeight - gutter - this.getAnchorHeight_();
            var tabHeight = 0;
            var width = /** @type {number} */ (this.get('minWidth') || 0);
            var height = /** @type {number} */ (this.get('minHeight') || 0);
            var maxWidth = /** @type {number} */ (this.get('maxWidth') || 0);
            var maxHeight = /** @type {number} */ (this.get('maxHeight') || 0);

            maxWidth = Math.min(mapWidth, maxWidth);
            maxHeight = Math.min(mapHeight, maxHeight);

            var tabWidth = 0;
            if (this.tabs_.length) {
                // If there are tabs then you need to check the size of each tab's content
                for (var i = 0, tab; tab = this.tabs_[i]; i++) {
                    var tabSize = this.getElementSize_(tab.tab, maxWidth, maxHeight);
                    var contentSize = this.getElementSize_(tab.content, maxWidth, maxHeight);

                    if (width < tabSize.width) {
                        width = tabSize.width;
                    }

                    // Add up all the tab widths because they might end up being wider than
                    // the content
                    tabWidth += tabSize.width;

                    if (height < tabSize.height) {
                        height = tabSize.height;
                    }

                    if (tabSize.height > tabHeight) {
                        tabHeight = tabSize.height;
                    }

                    if (width < contentSize.width) {
                        width = contentSize.width;
                    }

                    if (height < contentSize.height) {
                        height = contentSize.height;
                    }
                }
            } 
            else {
                var content = /** @type {string|Node} */ (this.get('content'));
                if (typeof content == 'string') {
                    content = this.htmlToDocumentFragment_(content);
                }
                if (content) {
                    var contentSize = this.getElementSize_(content, maxWidth, maxHeight);

                    if (width < contentSize.width) {
                        width = contentSize.width;
                    }

                    if (height < contentSize.height) {
                        height = contentSize.height;
                    }
                }
            }

            if (maxWidth) {
                width = Math.min(width, maxWidth);
            }

            if (maxHeight) {
                height = Math.min(height, maxHeight);
            }

            width = Math.max(width, tabWidth);

            if (width == tabWidth) {
                width = width + 2 * padding;
            }

            arrowSize = arrowSize * 2;
            width = Math.max(width, arrowSize);

            // Maybe add this as a option so they can go bigger than the map if the user
            // wants
            if (width > mapWidth) {
                //width = mapWidth;
            }

            if (height > mapHeight) {
                //height = mapHeight - tabHeight;
            }

            if (this.tabsContainer_) {
                this.tabHeight_ = tabHeight;
                this.tabsContainer_.style['width'] = this.px(tabWidth);
            }

            this.contentContainer_.style['width'] = this.px(width);
            this.contentContainer_.style['height'] = this.px(height);
        };

    </script>

    <div id="invisible" style="opacity: 0; position: absolute; z-index: -9999999999; top: -999999px; left: -99999999px;"></div>

    <!-- Google Maps - RichMarker (https://googlemaps.github.io/js-rich-marker/examples/richmarker.html) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/richmarker/richmarker.js')}"></script>
    <script type='text/javascript'>

        //richmarker doesn't support a rightclick event.  adding it
        RichMarker.prototype.onAdd = function() {
            if (!this.markerWrapper_) {
                this.markerWrapper_ = document.createElement('DIV');
                this.markerWrapper_.style['position'] = 'absolute';
            }

            if (this.getZIndex()) {
                this.markerWrapper_.style['zIndex'] = this.getZIndex();
            }

            this.markerWrapper_.style['display'] = this.getVisible() ? '' : 'none';

            if (!this.markerContent_) {
                this.markerContent_ = document.createElement('DIV');
                this.markerWrapper_.appendChild(this.markerContent_);

                var that = this;
                google.maps.event.addDomListener(this.markerContent_, 'click', function(e) {
                    google.maps.event.trigger(that, 'click');
                    e.stopPropagation();
                    e.preventDefault();
                });
                google.maps.event.addDomListener(this.markerContent_, 'mouseover', function(e) {
                    google.maps.event.trigger(that, 'mouseover');
                });
                google.maps.event.addDomListener(this.markerContent_, 'mouseout', function(e) {
                    google.maps.event.trigger(that, 'mouseout');
                });

                //adding rightclick event - DK 11/26/14
                google.maps.event.addDomListener(this.markerContent_, 'contextmenu', function (e) {
                    google.maps.event.trigger(that, 'rightclick');
                    e.stopPropagation();
                    e.preventDefault();
                });
            }

            this.ready_ = true;
            this.content_changed();
            this.flat_changed();
            this.draggable_changed();

            var panes = this.getPanes();
            if (panes) {
                panes.overlayMouseTarget.appendChild(this.markerWrapper_);
            }

            google.maps.event.trigger(this, 'ready');
        };
        RichMarker.prototype['onAdd'] = RichMarker.prototype.onAdd;

    </script>

    <!-- Google Maps - Marker Cluster Plus (http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclustererplus/examples/advanced_example.html) -->
    <script>var clusterPrefix = '{!sitePrefix}';</script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/markerclustererplus/markerclusterer.js')}"></script>
    <script type='text/javascript'>

        //markerclusterer doesn't support a rightclick event on clusters.  adding it
        var clusterClicked = false;     //sf1 is not stopping propagation for some reason so we need to track when a cluster is clicked and check it in the map click handler
        ClusterIcon.prototype.onAdd = function () {
            var cClusterIcon = this;
            var cMouseDownInCluster;
            var cDraggingMapByCluster;

            this.div_ = document.createElement("div");
            this.div_.className = this.className_;
            if (this.visible_) {
                this.show();
            }

            this.getPanes().overlayMouseTarget.appendChild(this.div_);

            // Fix for Issue 157
            this.boundsChangedListener_ = google.maps.event.addListener(this.getMap(), "bounds_changed", function () {
                cDraggingMapByCluster = cMouseDownInCluster;
            });

            google.maps.event.addDomListener(this.div_, "mousedown", function () {
                cMouseDownInCluster = true;
                cDraggingMapByCluster = false;
            });

            google.maps.event.addDomListener(this.div_, "click", function (e) {
                cMouseDownInCluster = false;
                clusterClicked = true;
                if (!cDraggingMapByCluster) {
                    var theBounds;
                    var mz;
                    var mc = cClusterIcon.cluster_.getMarkerClusterer();
                    /**
                    * This event is fired when a cluster marker is clicked.
                    * @name MarkerClusterer#click
                    * @param {Cluster} c The cluster that was clicked.
                    * @event
                    */
                    google.maps.event.trigger(mc, "click", cClusterIcon.cluster_);
                    google.maps.event.trigger(mc, "clusterclick", cClusterIcon.cluster_); // deprecated name

                    // The default click handler follows. Disable it by setting
                    // the zoomOnClick property to false.
                    if (mc.getZoomOnClick()) {
                        // Zoom into the cluster.
                        mz = mc.getMaxZoom();
                        theBounds = cClusterIcon.cluster_.getBounds();
                        mc.getMap().fitBounds(theBounds);
                        // There is a fix for Issue 170 here:
                        setTimeout(function () {
                            mc.getMap().fitBounds(theBounds);
                            // Don't zoom beyond the max zoom level
                            if (mz !== null && (mc.getMap().getZoom() > mz)) {
                                mc.getMap().setZoom(mz + 1);
                            }
                        }, 100);
                    }

                    // Prevent event propagation to the map:
                    e.cancelBubble = true;
                }

                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            });

            //adding rightclick event handling - DK 11/25/14
            google.maps.event.addDomListener(this.div_, "contextmenu", function (e)
            {
                //trigger rightclick event
                google.maps.event.trigger(cClusterIcon.cluster_.getMarkerClusterer(), "rightclick", cClusterIcon.cluster_);

                // Prevent event propagation to the map:
                e.cancelBubble = true;
                if (e.stopPropagation) { e.stopPropagation(); }
                if (e.preventDefault) { e.preventDefault(); }
            });

            google.maps.event.addDomListener(this.div_, "mouseover", function () {
                var mc = cClusterIcon.cluster_.getMarkerClusterer();
                /**
                * This event is fired when the mouse moves over a cluster marker.
                * @name MarkerClusterer#mouseover
                * @param {Cluster} c The cluster that the mouse moved over.
                * @event
                */
                google.maps.event.trigger(mc, "mouseover", cClusterIcon.cluster_);
            });

            google.maps.event.addDomListener(this.div_, "mouseout", function () {
                var mc = cClusterIcon.cluster_.getMarkerClusterer();
                /**
                * This event is fired when the mouse moves out of a cluster marker.
                * @name MarkerClusterer#mouseout
                * @param {Cluster} c The cluster that the mouse moved out of.
                * @event
                */
                google.maps.event.trigger(mc, "mouseout", cClusterIcon.cluster_);
            });
        };

    </script>

    <!-- Google Maps - Spiderfy (https://github.com/jawj/OverlappingMarkerSpiderfier) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/overlappingmarkerspiderfier/oms.min.js')}"></script>
    
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'notify/jquery.notify.js')}"></script>
    
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'notify/ui.notify.css')}"/>
    
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/style.css')}"/>    
    
    <style>
        
        /* Tooltip Tabs */
        #tooltip-content .tooltip-header 
        {
            padding: 5px 5px 5px 35px;
            filter: progid:DXImageTransform.Microsoft.gradient(GradientType = 1, startColorstr = '#000000', endColorstr = '#ffffff');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(GradientType = 1, startColorstr = '#000000', endColorstr = '#ffffff')";
            background-image: -moz-linear-gradient(left, #000000, #ffffff);
            background-image: -ms-linear-gradient(left, #000000, #ffffff);
            background-image: -o-linear-gradient(left, #000000, #ffffff);
            background-image: -webkit-gradient(linear, left top, right top, from(#000000), to(#ffffff));
            background-image: -webkit-linear-gradient(left, #000000, #ffffff);
            background-image: linear-gradient(left, #000000, #ffffff);
        }
        #tooltip-content .tooltip-header .take-me-there
        {
            position: absolute;
            top: 5px;
            left: 2px;
            width: 30px;
            height: 30px;
            overflow: hidden;
        }
        #tooltip-content .navbar a
        {
            text-decoration: none !important;
            font-size: 10px !important;
            color: #555555 !important;
        }
        #tooltip-content .navbar a.ui-btn-active
        {
            color: #ffffff !important;
        }
        #tooltip-content .pane
        {
            padding: 10px;
            max-height: 300px;
            overflow-x: hidden;
            overflow-y: auto;
        }
        #RecentSQList {
            width: 285px;
        }
        #tooltip-content .name {
            color: white !important;
            font-size: 12px !important;
            font-weight: bold;
            text-decoration: none;
            text-shadow: none;
        }
        #tooltip-content .address {
            color: white !important;
            font-size: 10px !important;
            text-decoration: none;
            text-shadow: none;
        }
        #tooltip-content .pane a {
            color: #333333 !important;
        }
        
        /* Tooltip Chatter */
        #tooltip-content .pane.loading {
            background: transparent url('{!URLFOR($Resource.sma__MapAnything, 'images/chatterstatus-loader.gif')}') no-repeat center;
        }
        #tooltip-content .publisherpollchoiceinput {
            width: 200px;
        }
        #tooltip-content .fileFormInputElement {
            width: 250px;
        }
        .contentPublisherSlideDown table.postInput td {
            text-align: left !important;
        }
        .contentPublisherSlideDown table.postInput td {
            text-align: left !important;
        }

        /* Tooltip Fields */
        #tooltip-content .tooltip-row .value {
            max-width: 350px;
        }
        
        #mapdiv
        {
          height: calc(100% - 47px);
        }
        
        /********* Route Order Popup *****/
        .routeOrderPopup.active, .emailRoutePopup.active {
            display:block;
        }
        .routeOrderPopup {
            position: absolute;
            z-index: 1001;
            top: 10%;
            left: 46%;
            background: #F0F0F0;
            display:none;
            padding: 15px;
            width: 125px;
        }
        .emailRoutePopup {
            position: absolute;
            z-index: 1001;
            top: 10%;
            left: 33%;
            background: #F0F0F0;
            display:none;
            padding: 15px;
            width: 40%;
            border-radius: 10px;
            border: 1px solid silver;
        }
        .routeOrderPopup .panel-body {
            max-height: calc(100vh - 200px);
            overflow: auto;
            -webkit-overflow-scrolling: touch;
        }
        button.RowNumber {
            height: 30px;
            min-width: 40px;
            max-width: 60px;
            vertical-align: top;
            margin-right: 5px;
        }
        .routeOrderPopup .mapType-btn {
            display: block;
            width: 100px;
            height: 30px;
        }
        /******* Load Mask *********/
        #loading-mask {
            height: 100%;
            position: fixed;
            width: 100%;
            background: rgba(31, 31, 31, 0.5);
            z-index: 1000;
            display: none;
            top:0px;
            left:0px;
        }
        #loading-mask.active {
            display: block;
        }

        #visibleAreaRefeshMap {
            line-height: 20px;
            padding: 5px 10px;
            transition: 1s;
            opacity : 0;
            position: absolute;
            bottom: 30px;
            right: 30px;
        }
        #visibleAreaRefeshMap.visible {
            transition: 1s;
            opacity : 1;
        }
        #visibleAreaRefeshMap.refreshing::before {
            -webkit-animation-name: spin;
            -webkit-animation-duration: 2000ms;
            -webkit-animation-iteration-count: infinite;
            -webkit-animation-timing-function: linear;
            -moz-animation-name: spin;
            -moz-animation-duration: 2000ms;
            -moz-animation-iteration-count: infinite;
            -moz-animation-timing-function: linear;
            -ms-animation-name: spin;
            -ms-animation-duration: 2000ms;
            -ms-animation-iteration-count: infinite;
            -ms-animation-timing-function: linear;
        }
        
        #SideBar          
        {
            position:absolute;
            z-index: 12;
            left: 0px;
            top: 46px; 
            height: calc(100% - 60px);
            width: 310px; 
            background-color: #f0f0f0;
            border-right: 1px solid silver;
            
            padding-top: 10px;
            padding-right: 3px;
            padding-bottom: 3px;
            padding-left: 3px;
            overflow-y: scroll;
          -webkit-overflow-scrolling: touch;
        }

        .display-inline {
            display: inline-block;
        }
        .waypoint-optimize {
            float: right;
            margin-right: 20px;
        }
        #optimize-route-btn {
            margin: 0px !important;
        }
        #optimize-route-btn span {
            padding: 0px 5px 0px 5px;
            max-width: 115px;
        }
    
        tr.PlottedRowUnit 
        {
            display:block;
            float:left;
            width:275px;
            margin:0 0 6px 0;
            padding:0;
            font-size: 12px; 
            background:#eee; 
            border:1px solid #ddd;
            border-radius:2px;
            box-shadow:none;
        }
        
        .ui-li-icon
        {
            top:0.47em;
        }
        .ui-li-has-icon .ui-btn-inner a.ui-link-inherit, .ui-li-static.ui-li-has-icon
        {
            min-height:10px;
        } 

        @media only screen and (max-width : 585px) {
            .ui-page {
                min-height: 300px !important;
            }
            #mapdiv
            {
                height: calc(100% - 47px);
            }
            #SideBar 
              {
                  position:absolute;
                  z-index: 12;
                  left: 0px;
                  height: calc(100% - 60px);
                  width: 310px; 
                  background-color: #f0f0f0;
                  border-right: 1px solid silver;
                  -webkit-overflow-scrolling:touch;
                  overflow:auto;
                  
            }
        }

        /* iPads (landscape) ----------- */
        @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) {
          .ui-page {
            min-height: 300px !important;
          }
          #mapdiv
          {
            height: calc(100% - 47px);
          }
          #SideBar 
          {
              position:absolute;
              z-index: 12;
              left: 0px;
              top: 47px; 
              height: calc(100% - 60px);
              width: 310px; 
              background-color: #f0f0f0;
              border-right: 1px solid silver;
              -webkit-overflow-scrolling:touch;
              overflow:auto;
          }
        }
         
        /* iPads (portrait) ----------- */
        @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) {
          .ui-page {
            min-height: 300px !important;
          }
          #mapdiv
          {
            height: calc(100% - 47px);
          }
          #SideBar 
          {
              position:absolute;
              z-index: 12;
              left: 0px;
              top: 47px;
              height: height: calc(100% - 60px);
              width: 310px; 
              background-color: #f0f0f0;
              border-right: 1px solid silver;
              -webkit-overflow-scrolling:touch;
              overflow:auto;
              
          }
        }

        .dataLayerIcon {
            background-image: url('{!URLFOR($Resource.sma__MapAnything, "/malayersv2/img/data_icon.svg")}');
            background-repeat: no-repeat;
            border: 0 !important;
            background-position: center 0;
            height: 19px;
            width: 19px;
            margin: -4px 0 0 0;
            position: absolute;
            left: 10px;
            top: .9em;
        }

        .scrollable {
            -webkit-overflow-scrolling:touch;
            overflow:auto;
        }
        
        /* LinkedIn Integration */ 
        .IN-widget {
            width: 100% !important;
        }
        .linkedin-cluster-table-wrapper {
            max-height: 400px;
            overflow: auto;
        }
        .linkedin-cluster-header {
            font-weight: bold;
            font-size: 12px;
            color: #757575;
        }
        .linkedin-info {
            width: 350px;
            vertical-align: top;
        }
        .linkedin-info div {
            white-space: pre-wrap;   
            white-space: -moz-pre-wrap;    
            white-space: -pre-wrap;   
            white-space: -o-pre-wrap;    
            word-wrap: break-word;
        }
        .linkedin-info .linkedin-name {
            font-weight: bold;
            font-size: 14px;
        }
        .linkedin-info .linkedin-name a {
            text-decoration: none;
            color: #2265bb;
        }
        .linkedin-info .linkedin-name span {
            vertical-align: top;
            margin-left: 5px;
            padding: 1px;
            background-color: #ededed;
            border: 1px solid rgb(219, 219, 219);
            -moz-border        -radius: 8px;
            -webkit-border-radius: 4px;
            border-radius: 4px;
            -moz-box-shadow: 0px 0px 2px #000000;
            -webkit-box-shadow: 0px 0px 2px rgb(0, 0, 0);
            box-shadow: 0px 0px 2px #000000;
            font-size: 9px;
        }
        .linkedin-info .linkedin-name span b {
            vertical-align: top;
        }
        .linkedin-info .linkedin-headline {
            font-weight: bold;
            font-size: 12px;
        }
        .linkedin-info .linkedin-industry {
            font-size: 10px !important;
        }
        .linkedin-actions button {
            display: block;
            margin: 3px 0;
            cursor: pointer;
        }
        
        /* Tooltip Actions */
        .layout-tooltip .buttoncolumn {
            float: left;
            margin: 0 10px 0 0;
        }
        .layout-tooltip .buttonset-section {
            overflow: hidden;
        }
        .layout-tooltip .actionbutton {
            position: relative;
            display: block;
            background-color: #F5F5F5;
            background: #F8F8F8;
            background: url('images/white-button-bg.png');
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FFF), to(#F5F5F5));
            background: -webkit-linear-gradient(top, #FFF, #F5F5F5);
            background: -moz-linear-gradient(center top , #FFF 20%, #F5F5F5 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
            background: -ms-linear-gradient(top, #FFF, #F5F5F5);
            background: -o-linear-gradient(top, #FFF, #F5F5F5);
            background-repeat: repeat-x;
            border: medium none;
            border-radius: 3px 3px 3px 3px;
            border: 1px solid #BBB;
            box-shadow: 0 1px 0 #FFF inset, 0 0 4px rgba(255, 255, 255, 0.5) inset, 0 1px 2px rgba(0, 0, 0, 0.1);
            color: #555;
            font-family: "Helvetica Neue", Helvetica, arial, sans-serif;
            font-size: 10px;
            font-weight: normal;
            line-height: auto;
            text-align: center;
            margin: 5px 0;
            padding: 4px 9px;
            height: auto;
            width: 100px;
            cursor: pointer;
        }
        .layout-tooltip .actionbutton:hover {
            background: #FFF;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset, 0 1px 2px rgba(0, 0, 0, 0.2);
            color: #666;
            text-decoration: none;
        }
        .layout-tooltip .actionbutton.disabled {
            display: none;
        }
        .layout-tooltip .actionbutton[data-type="Blank"] {
            -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
            filter: alpha(opacity=0);
            -moz-opacity: 0;
            -khtml-opacity: 0;
            opacity: 0;
            cursor: default;
        }
        
        /* Layers Tree */
        #RecentSQList img, #FolderSQList img {
            margin: -4px 0 0 0;
        }
        
        .isLink {
            text-decoration: underline;
        }
   
        /* Plotted Queries */
        #PlottedQueriesContainer .PlottedRowUnit {
            display: block;
            position: relative;
            width: 275px;
            margin: 0 0 6px 0;
            padding: 0;
            text-align: left;
            font-size: 11px;
            background: #eee;
            border: 1px solid #ddd;
            border-radius: 2px;
            box-shadow: none;
        }
        #PlottedQueriesContainer .PlottedRowUnit div {
            margin: 0;
            padding: 0;
        }
        #PlottedQueriesContainer .PlottedRowUnit .header {
            float: none;
            width: auto; height: 25px;
            padding: 5px 5px 5px 25px;
        }
        
        #PlottedQueriesContainer .PlottedRowUnit .basicinfo {
            margin-bottom: 10px;
        }
        #PlottedQueriesContainer .PlottedRowUnit .basicinfo-name {
            font-weight: bold;
        }
        #PlottedQueriesContainer .PlottedRowUnit .basicinfo-baseobjectname {
            color: gray;
        }
        
        #PlottedQueriesContainer .PlottedRowUnit .plottinginfo-wrapper {
            padding: 5px;
        }
        #PlottedQueriesContainer .PlottedRowUnit .plottinginfo-wrapper .link.geocode {
            font-size: 10px;
        }
        
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons {
            position: absolute;
            top: 2px;
            right: 2px;
            height: 20px;
            padding: 0;
            font-size: 0px;
        }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button {
            display: inline-block;
            width: 28px;
            height: 27px;
            cursor: pointer;
            border: none;
            padding: 0;
            background: transparent url("{!URLFOR($Resource.sma__MapAnything, '/images/renderbuttons.png')}") no-repeat;
        }
        #PlottedQueriesContainer .PlottedRowUnit.error .renderButtons-button, #PlottedQueriesContainer .PlottedRowUnit.error .renderButtons-button.on {
            display: none;
        }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.heatmap { background-position: -84px -13px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.markers { background-position: -11px -13px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.cluster { background-position: -48px -13px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.scatter { background-position: -120px -13px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.heatmap.on { background-position: -84px -53px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.markers.on { background-position: -11px -53px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.cluster.on { background-position: -48px -53px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.scatter.on { background-position: -120px -53px; }
        #PlottedQueriesContainer .PlottedRowUnit .renderButtons-spacer {
            display: inline-block;
            width: 8px;
        }
        
        #PlottedQueriesContainer .PlottedRowUnit .btn-remove {
            display: block; width: 18px; height: 24px;
            position: absolute; top: 2px; left: 4px;
            font-size: 24px; line-height: 24px; font-weight: bold;
            cursor: pointer;
        }
        #PlottedQueriesContainer .PlottedRowUnit .btn-remove div {
            color: red;
        }
        #PlottedQueriesContainer .PlottedRowUnit.loading .btn-remove {
            background: transparent url("{!URLFOR($Resource.sma__MapAnything, 'ajax-loader.gif')}") center no-repeat;
        }
        #PlottedQueriesContainer .PlottedRowUnit.unloading .btn-remove {
            background: transparent url("{!URLFOR($Resource.sma__MapAnything, 'ajax-unloader.gif')}") center no-repeat;
        }
        #PlottedQueriesContainer .PlottedRowUnit.loading .btn-remove div, #PlottedQueriesContainer .PlottedRowUnit.unloading .btn-remove div {
            display: none;
        }
        
        #PlottedQueriesContainer .PlottedRowUnit .loadMask {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 99;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            background-color: #ffffff;
            opacity: 0.4;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 40);
            filter: alpha(opacity = 40);
        }
        #PlottedQueriesContainer .PlottedRowUnit.loading .loadMask, #PlottedQueriesContainer .PlottedRowUnit.unloading .loadMask {
            display: block;
        }
        
        #PlottedQueriesContainer .PlottedRowUnit .legend {
            width: 100%;
            font-weight: 10px;
        }
        #PlottedQueriesContainer .PlottedRowUnit .legend .legend-row td {
            text-align: left;
            padding: 3px;
        }
        #PlottedQueriesContainer .PlottedRowUnit .legend .legend-row td.legend-color {
            text-align: center;
            width: 20px;
        }
        #PlottedQueriesContainer .PlottedRowUnit .legend .legend-row td.legend-color.image {
            text-align: center;
            border: none;
        }
        
        /* Tooltip */
        .tooltip-header-order {
            position: absolute;
            top: 5px;
            left: 2px;
            font-size: 9px !important;
            -moz-border-radius: 50px;
            -webkit-border-radius: 50px;
            border-radius: 50px;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#ff8590', endColorstr = '#ff4552');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#ff8590', endColorstr = '#ff4552')";
            background-image: -moz-linear-gradient(top, #ff8590, #ff4552);
            background-image: -ms-linear-gradient(top, #ff8590, #ff4552);
            background-image: -o-linear-gradient(top, #ff8590, #ff4552);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#ff8590), to(#ff4552));
            background-image: -webkit-linear-gradient(top, #ff8590, #ff4552);
            background-image: linear-gradient(top, #ff8590, #ff4552);
            -moz-background-clip: padding;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
            padding: 2px 5px;
            color: white;
            font-weight: bold;
        }
        
        /* Cluster Tooltips */
        .standard-cluster-tooltip a {
            color: #333333 !important;
        }
        
        .overflow-touch {
            -webkit-overflow-scrolling: touch;
            overflow-x: auto;
            overflow-y: hidden;
        }
        .overflow-touch * {
            -webkit-transform: translate3d(0,0,0);
        }
        
        /* Routes */
        #routeCalendarTable li.route.loading {
            opacity: 0.5;
            cursor: default;
        }
        #routeCalendarTable li.route.loading .ui-icon {
            background: transparent url('{!URLFOR($Resource.sma__MapAnything, 'images/chatterstatus-loader.gif')}') center no-repeat;
        }
        .marker {
            padding: 10px;
            min-width: 250px;
            position: relative;
        }
        .waypointmarker .address {
            color: #757575;
            font-size: 10px;
        }
        .waypointmarker .notes {
            padding-top: 5px;
        }
        .waypointmarker .buttons {
            margin: 18px 0;
        }
        .waypointmarker .footer {
            color: #757575;
            font-size: 8px !important;
            position: absolute;
            bottom: 0;
            left: 10px;
        }
        
        #MapViewTypes > a.active {
            background: #5E5E5E;
            color: white;
            text-shadow: none;
        }

        /*********************
        * Tooltip Layout
        *********************/
        .layout-tooltip {
            width: 400px;
        }
        .layout-tooltip .buttoncolumn {
            float: left;
            margin: 0 10px 0 0;
        }
        .layout-tooltip .buttonset-section {
            overflow: hidden;
        }
        .layout-tooltip .actionbutton {
            position: relative;
            display: block;
            background-color: #F5F5F5;
            background: #F8F8F8;
            background: url('images/white-button-bg.png');
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FFF), to(#F5F5F5));
            background: -webkit-linear-gradient(top, #FFF, #F5F5F5);
            background: -moz-linear-gradient(center top , #FFF 20%, #F5F5F5 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
            background: -ms-linear-gradient(top, #FFF, #F5F5F5);
            background: -o-linear-gradient(top, #FFF, #F5F5F5);
            background-repeat: repeat-x;
            border: medium none;
            border-radius: 3px 3px 3px 3px;
            border: 1px solid #BBB;
            box-shadow: 0 1px 0 #FFF inset, 0 0 4px rgba(255, 255, 255, 0.5) inset, 0 1px 2px rgba(0, 0, 0, 0.1);
            color: #555;
            font-family: "Helvetica Neue", Helvetica, arial, sans-serif;
            font-size: 10px;
            font-weight: normal;
            line-height: auto;
            text-align: center;
            margin: 5px 0;
            padding: 4px 9px;
            height: auto;
            width: 100px;
            cursor: pointer;
        }
        .layout-tooltip .actionbutton:hover {
            background: #FFF;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset, 0 1px 2px rgba(0, 0, 0, 0.2);
            color: #666;
            text-decoration: none;
        }
        .layout-tooltip .actionbutton.disabled {
            display: none;
        }
        .layout-tooltip .actionbutton[data-type="Blank"] {
            -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
            filter: alpha(opacity=0);
            -moz-opacity: 0;
            -khtml-opacity: 0;
            opacity: 0;
            cursor: default;
        }
        
        /*********************
        * Cluster Tooltips
        *********************/
        .standard-cluster-tooltip .legend {
            padding: 0;
            text-align: left;
            width: 100%;
            font-weight: 10px;
        }
        .standard-cluster-tooltip .legend .legend-row td {
            text-align: left;
            padding: 3px;
        }
        .standard-cluster-tooltip .legend .legend-row td.legend-color {
            text-align: right;
            width: 20px;
        }
        .standard-cluster-tooltip .legend .legend-row td.legend-color.image {
            text-align: center;
        }
        
        /*********************
        * MapViewPopup Fix
        *********************/
        #MapViewPopup {
            z-index: 99999999;
            position: absolute;
            top: 15px;
            left: 50%;
            background: #F0F0F0;
            padding: 30px;
            width: 200px;
            box-sizing: border-box;
            margin-left: -100px;
            border-radius: 20px; box-shadow: 0px 0px 20px #000;
        }
        #MapViewPopup h1 {
            color: #5E87B0;
            font-size: 18px;
            text-align: center;
            display: block;
        }
        #MapViewPopup #MapViewTypes > br {
            display: none;
        }
        #MapViewPopup #MapViewTypes > a {
            display: block;
            margin: 15px 0; padding: 10px 0;
            border-radius: 20px; box-shadow: inset 0px 0px 4px #000;
            text-align: center;
            font-weight: bold;
            background: #FFFFFF;
        }
        #MapViewPopup #MapViewTypes > a.active {
            background: #5E5E5E;
        }
        #myPosButtonWrapper {
            position: absolute;
            right: 20px;
            bottom: 20px;
            background: white;
            border-radius: 45px;
            height: 45px;
            width: 45px;
            border: 1px solid silver;
        }

        /***************************
        * Custom Disposition Popup
        ***************************/
        #CustomDispositionPopup {
            z-index: 99999999;
            position: absolute; top: 15px; 
            left: 45%;
            background: #FAFAFA;
            padding: 30px;
            width: 500px;
            box-sizing: border-box;
            margin-left: -100px;
            border-radius: 20px; box-shadow: 0px 0px 20px #000;
            max-height: 600px;
        }
        #customDis-loadmask {
            position: absolute; top: 0; left: 0;
            width: 100%; height: 100%;
            z-index: 99999999;
            background: rgba(0, 0, 0, 0.04) url('{!URLFOR($Resource.sma__MapAnything, 'images/chatterstatus-loader.gif')}') center no-repeat;
        }
        #customDis-fieldset {
            overflow: auto;
            max-height: 500px;
            -webkit-overflow-scrolling: touch;
        }

        /*********************
        * Create Record Popup
        *********************/
        #CreateRecordPopup {
            z-index: 99999999;
            position: fixed; top: 15px; left: 50%;
            background: #FAFAFA;
            padding: 30px;
            width: 80%;
            left: 20%;
            box-sizing: border-box;
            margin-left: -100px;
            border-radius: 20px; box-shadow: 0px 0px 20px #000;
        }
        #CreateRecordPopup h1 {
            color: #5E87B0;
            font-size: 18px;
            display: block;
        }
        #createrecord-loadmask {
            position: absolute; top: 0; left: 0;
            width: 100%; height: 100%;
            z-index: 99999999;
            background: rgba(0, 0, 0, 0.04) url('{!URLFOR($Resource.sma__MapAnything, 'images/chatterstatus-loader.gif')}') center no-repeat;
        }
        #createrecord-fieldset {
            overflow: auto;
        }
        #createrecord-fieldset-errors {
            padding: 5px 15px;
            border: 1px solid #F00;background-color: rgba(255, 0, 0, 0.05);
            color: #DF5555;font-weight: bold;font-size: 10px;
        }
        #createrecord-name {
            font-family: helvetica,arial,sans-serif; color: #2265BB; font-size: 14px; font-weight: bold;
            margin-top: 15px;
            cursor: pointer;
        }
        #createrecord-address {
            font-family: helvetica,arial,sans-serif; color: #000; font-size: 12px; font-weight: bold;
            margin-top: 10px;
            cursor: pointer;
        }
        .createrecord-formitem > label {
            display: block;
            margin-top: 10px;
        }
        .createrecord-formitem > select {
            width: 100%;
            padding: 5px;
        }
        .createrecord-buttons {
            margin-top: 15px;
        }
        .createrecord-buttons > button {
            padding: 8px 12px;
            cursor: pointer;
        }
        .createrecord-buttons > button.createrecord-cancel {
            background: none; border: none;
            color: #00F; font-size: 10px;
        }

        .hidden {
            display:none !important;
        }

        /*************************
        * Devbridge Autocomplete
        **************************/
        .autocomplete-suggestions { border: 1px solid #999; background: #FFF; overflow: auto; }
        .autocomplete-suggestion { padding: 8px 5px; white-space: nowrap; overflow: hidden; }
        .autocomplete-selected { background: #F0F0F0; }
        .autocomplete-suggestions strong { font-weight: normal; color: #3399FF; }
        .autocomplete-group { padding: 2px 5px; }
        .autocomplete-group strong { display: block; border-bottom: 1px solid #000; }

        div.slider-tabs {
            clear:both;
            margin-bottom:12px;
            padding:0;
        }
  
        div.slider-tabs ul.ui-grid-a li.ui-block-a a span.ui-btn-inner,
        div.slider-tabs ul.ui-grid-a li.ui-block-b a span.ui-btn-inner {
            padding:0;
        }
  
        div.slider-tabs ul.ui-grid-a li.ui-block-a a span.ui-btn-inner span.ui-btn-text,
        div.slider-tabs ul.ui-grid-a li.ui-block-b a span.ui-btn-inner span.ui-btn-text {
            padding:4px;
            display:block;
        }
    
        div.ui-navbar ul.ui-grid-c .ui-btn-icon-top .ui-btn-inner {
            padding:12px 2px;
        }
  
        div#Sidebar a#tabQueries{
            -moz-border-radius-bottomleft: 1em;
            -webkit-border-bottom-left-radius: 1em;
            border-bottom-left-radius: 1em;
            -moz-border-radius-topleft: 1em;
            -webkit-border-top-left-radius: 1em;
            border-top-left-radius: 1em;
        }
  
        div#Sidebar div.ui-navbar ul.ui-grid-c li a.ui-btn span.ui-btn-inner{
            padding:1em 0;
        }

        div#Header .ui-btn{
            margin:1px 0 0 5px;
        }
        div#Header .ui-field-contain {
            clear:none;
        }  
        div#Header .ui-select {
            width:100%;
        }
               
        div#Header label{
            margin:7px 0 0 0;
            font-size:14px;
        }       
        
        div.bx-wrapper {
            display:block;float:left;
        }
                    
                    
        div#Queries, div#Routes, div#Legend, div#Ranges {
            background: none;
            display: block;
            position: relative;
            z-index: 11;
            /*height:630px;*/
            padding:0;
            margin:0;
        }

        #Sidebar {
        padding:10px;
        width:310px;
        }

        ul#FolderSQList {
            width: 285px;
        }

        div#Sidebar div#Queries fieldset.ui-grid-a div.ui-block-a a#TreeTab.ui-btn span.ui-btn-inner,
        div#Sidebar div#Routes fieldset.ui-grid-a div.ui-block-a a#TreeTab.ui-btn span.ui-btn-inner{
        padding:.6em 5px;
        }

        div#Queries fieldset.ui-grid-a div.ui-block-a a,
        div#Routes fieldset.ui-grid-a div.ui-block-a a{
        margin:0 2px 10px 3px;
          -moz-border-radius-bottomright: .5em;
          -webkit-border-bottom-right-radius: .5em;
          border-bottom-right-radius: .5em;
          -moz-border-radius-topright: .5em;
          -webkit-border-top-right-radius: .5em;
          border-top-right-radius: .5em;
        }

        div#Queries fieldset.ui-grid-a div.ui-block-b a,
        div#Routes fieldset.ui-grid-a div.ui-block-b a{
        margin:0 3px 10px 2px;
          -moz-border-radius-bottomleft: .5em; 
          -webkit-border-bottom-left-radius: .5em;
          border-bottom-left-radius: .5em;
          -moz-border-radius-topleft: .5em;
          -webkit-border-top-left-radius: .5em;
          border-top-left-radius: .5em;
        }
        body a.ui-btn:hover {color:#666;}
        body a.ui-btn-active:hover {color:#fff;}

        ul#sortable {
        display;block;
        float:left;
        width:295px;
        margin:0;
        padding:0 0 0 5px;
        list-type:none;
        list-style-type:none;
        }

        ul#sortable li{
        margin:0 5px 5px 0;
        padding:2px;
        border:none;
        background:none;
        display:block;
        float:left;
        width:280px;
        }

        ul#sortable li span#RowNumber{
        display:block;
        float:left;
        margin:3px 0 0 0;
        padding:0;
        width:15px;
        font-size:18px;
        text-align:center;
        }

        ul#sortable li input{
        margin:0;
        padding:2px 8px;
        width:180px;
        font-size:18px;
        float:right;
        }

        ul#sortable li .flag {
            padding: 0 !important;
            display: inline-block;
            vertical-align: super;
        }
        ul#sortable li .flag img {
            height: 23px;
        }
        ul#sortable li[data-locktype="startend"] .flag img {
            height: 22px;
        }

        a.TreeTab-Active {
        background:#000;
        }

        div#Routes div.ui-controlgroup{
        display:block;
        float:left;
        width:100%;
        }

        div#Routes div.ui-controlgroup a {
        width:30%;
        }

        div#Routes div.ui-controlgroup a.ui-controlgroup-last {
        width:39%;
        }

        div#Routes div.ui-controlgroup a.ui-corner-left span.ui-btn-inner {
        padding:.6em 0 .6em 20px;
        }

        div#Routes div.ui-controlgroup a.ui-corner-right:hover {
        color:#fff;
        }

        div#Routes div.ui-controlgroup a.ui-corner-right span.ui-btn-inner {
        padding:.6em 8px .6em 8px;
        }

        div#Routes div.ui-controlgroup a.ui-btn span.ui-btn-inner span.ui-icon{
        left:7px;
        }

        [data-role="page"] {
            min-width: 0px !important;
        }

        div#POI {
            margin-right: 5px;
        }

        div#POI .poi-image {
            float: right;
            height: 30px;
            padding-top: 10px;
        }
        .poi-row {
            padding-bottom: 5px;
            border-bottom: 1px solid silver;
            padding-top: 5px;
            cursor: pointer;
            min-height: 50px;
        }
        .poi-row .poi-name {
            font-size: 120%;
            font-weight: bold;
            color: #2265bb;
        }
        #poiResults {
            margin-top: 10px;
            border-top: 2px solid #F15A24;
        }

        #routeCalendarTable li[data-role="list-divider"] {
            font-size: 10px;
            padding: 4px 2px;
        }

        #container a
        {
            color:white;
        }
        #tooltip-content .name a {
            color:white;
        }
        #tooltip-content .tooltip-header td {
            color: white;
            text-shadow: none;
        }
        /* MOBILE SYTLES UPDATES */
        .MAheader-bar .icon-left:before {
            top: 3px !important;
        }
        .MAheader-bar .MAbutton {
            float: left;
            border-right:none;
            border-radius: 0px;
            padding: 5px 10px;
        }
        .MAheader-bar .ui-controlgroup-horizontal .MAbutton:last-child {
            border-right: 1px solid #2A6598;
        }
        .popup_block {
            position: fixed!important;
        }
        @media screen and (max-width: 745px) {
            .MAheader-bar .btn-text {
                display:none;
            }
            .MAheader-bar .MAbutton:before {
                margin-right: 0px !important;
            }
            .MAheader-bar .icon-left:before {
                top: 0px !important;
            }
            .MAheader-bar .MAbutton {
                padding: 7px 15px !important;
            }
            #CreateRecordPopup {
                left: 0px;
                width: 100%;
                min-height: 100%;
                margin: 0;
                top: 0px;
                border-radius: 0px;
                overflow-y: scroll;
                height: 100%;
            }
            #CustomDispositionPopup {
                position: fixed!important;
                left: 0px !important;
                width: 100% !important;
                min-height: 100% !important;
                margin: 0 !important;
                top: 0px !important;
                border-radius: 0px !important;
                max-height: 100% !important;
                position: fixed !important;
                padding: 10px !important;
            }
            #DynamicFilterPopup {
                left: 0px !important;
                width: 100% !important;
                min-height: 100% !important;
                margin: 0 !important;
                top: 0px !important;
                border-radius: 0px !important;
                max-height: 100% !important;
                position: fixed !important;
                padding: 0px !important;
            }
            #DynamicFilterPopup .loadmask-wrapper {
                padding : 10px;
            }
            .routeOrderPopup {
                top: 10px;
                left: 40%;
            }
            #visibleAreaRefeshMap {
                line-height: 28px;
                font-size: 24px;
                height: 40px;
                width: 40px;
                border-radius: 40px;
                padding-top: 4px;
            }
            #visibleAreaRefeshMap:before {
                width:20px;
                font-size: 24px;
            }
            #visibleAreaRefeshMap .resfreshText {
                display:none;
            }
        }
        @media screen and (max-width: 380px) {
            .MAheader-bar .MAbutton {
                padding: 7px 10px !important;
            }
        }
        #tooltip-content.demographics .tooltip-header {
            padding-left: 5px;
            background: white;
        }
        #tooltip-content.demographics .tooltip-header td {
            color: black;
        }
        .MA2-loading-mask {
            height: 100%;
            width: 100%;
            position: absolute;
            top: 0px;
            left: 0px;
            background: rgba(255,255,255,0.5);
            z-index: 10;
        }
        
        .loadingText {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 300px;
            z-index: 11;
            margin-left: -150px;
            margin-top: -12px;
            text-align: center;
            font-size:14px;
            font-family:helvetica, arial, sans-serif;
            color:#333;
        }
        


        .MA2-loader {    
            position: relative;
            vertical-align: middle;
            margin: 0;
            left: 0;
            top: 0;
            -webkit-transform: none;
            -ms-transform: none;
            transform: none;
        }

        .MA2-loader::after, .MA2-loader:after {
            position: absolute;
            content: '';
            top: 0;
            left: 50%;
            border-radius: 500rem;
            border: 2px solid rgba(0,0,0,.1);
            width:18px;
            height:18px;
            margin:0 0 0 -11px;
        }

        .MA2-loader::before, .MA2-loader:before {
            position: absolute;
            content: '';
            top: 0;
            left: 50%;
            -webkit-animation: loader .6s linear;
            animation: loader .6s linear;
            -webkit-animation-iteration-count: infinite;
            animation-iteration-count: infinite;
            border-radius: 500rem;
            border-color: #52a5f5 transparent transparent;
            border-style: solid;
            border-width: 2px;
            box-shadow: 0 0 0 1px transparent;
            width:18px;
            height:18px;
            margin:0 0 0 -11px;
        }

        .MA2-loader.loader-inline {
            display: inline;
            margin-right: 20px;
            margin-top: -2px;
            padding-top: 4px;
        }       
        
        @-moz-keyframes loader { 100% { -moz-transform: rotate(360deg); } }
        @-webkit-keyframes loader { 100% { -webkit-transform: rotate(360deg); } }
        @keyframes loader { 100% { -webkit-transform: rotate(360deg); transform:rotate(360deg); } }
        
        .type-interior {
            height: 100% !Important;
        }
        
        
    </style>
    
    <!-- JS -->
    <c:MA />
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'JSHelperFunctions.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'JSActionFramework.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'MADemographicsJS.js')}"></script>
    <c:JSMapAnythingPlottingLegacy /> 
    <c:MADemographicLayer />

    <apex:outputPanel layout="none" rendered="{!TotangoEnabled == 'true'}">
        
        <script type='text/javascript'>
             var totango_options = {
                  service_id: "SP-8618-01",                  
                  username: '{!$User.Email}',             
                  account:                                  
                  {
                      id: '{!$Organization.Id}',            
                      name: "{!JSENCODE($Organization.Name)}",
                      status: "Unknown"                       
                  }
            };
        
            (function() {
                var e = document.createElement('script'); e.type = 'text/javascript'; e.async = true;
                e.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 's3.amazonaws.com/totango-cdn/totango2.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(e, s);
            })();
        </script>
    
    </apex:outputPanel>

    <!-- IOS Salesfoce fix  https://success.salesforce.com/issues_view?id=a1p300000008Y6nAAE -->
    <script> 
        //https://success.salesforce.com/issues_view?id=a1p30000000T5l1AAC
        window.onkeydown=function(){window.focus();} 
    
    /*(function(){
        try{
            var a=navigator.userAgent;
            if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('OS/8')!=-1||a.indexOf('OS 8')!=-1)&&(a.indexOf('Safari')==-1)){ 
                var s=document.createElement('style'); 
                s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}"; 
                document.getElementsByTagName('head')[0].appendChild(s);
            }
            if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('OS/9')!=-1||a.indexOf('OS 9')!=-1)&&(a.indexOf('Safari')==-1)){ 
                var s=document.createElement('style'); 
                s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}"; 
                document.getElementsByTagName('head')[0].appendChild(s);
            }
        }catch(e){}})(); */
    </script>

    <script>        
        var pageSuffix = '';
        var namespace = '{!namespace}';

        var userSettings = $.extend({}, MA.defaults.userSettings);
        var customButtons = [];
        
        var IsCorporateAdmin = true;

        var BaseObjectsForSubMenu = new Array();
        
        var UserId = '{!$User.Id}';
        
        var LoadingGIFUrl = '{!URLFOR($Resource.sma__MapAnything, 'ajax-loader.gif')}';
        var MALoaddingGIFUrl = '{!URLFOR($Resource.sma__MapAnything, "MapLoadingGif.gif")}';
        
        var VisibleQueries = new Array(); //Used to Determine Which Queries are Visible (List of Ids)
        var SavedQueriesObjectIdArray = new Array(); //Used to Store Information about Processed Saved Queries
        
        var ProcessedSavedQueries = new Array();
        
        var UserEmailAddress = "{!$User.Email}";
        
        var TrafficIsOn = false;
        
        var OnUserLoadEventCompletd = false;
        var map = null;
        var ProximityCircle = null;
        var DOMNode = null;
        var router = null;
        var mapRoute = null;
        
        var AllLocationMarkers = new Array();
        
        var RangeColorIndex = new Array();
        var NumberField=null;
        var MinIndex;
        var MaxIndex;
        var RangeEnabled;
        
        var VisibleLocationMarkers = new Array();
        var legacyMobile = true;
        var ObjectsToUpdateWithLatLong = new Array();
        
        //Proximity Search Vars
        var pc_Added    = false;
        var pc_Lat      = 0;
        var pc_Long     = 0;
        var pc_Diameter = 0;
        
        //Position Vars
        var PositionMarker;
        var PositionEnabled = false;
        
        var DebugMode = false;
        
        var GeoCodePointsIsRunning = false; //No Longer Needed
        
        var WayPointArray = new Array();
        var HasRoutingErrors = false;
        
        var PlottedLegendSavedQryId = "";
        
        var GeocOdeListIndex = 1;
        
        var GeoCoderCounter = 0;
        
        //var currentState = '';
        
        var slider1;
        
        var slider2;
        
        //PIP Vars
        var pipZoomLevel = 10;
        var proxHitTestCanvases = {};
        var proxHitTestCircles = [];
        var proxHitTestNeeded = false;
        
        $(document).bind("mobileinit", function(){
            $.mobile.touchOverflowEnabled = true;
        });
        var isMAMobile = true;
        //set page height
        var isMobile = {
            Android: function() {
                return navigator.userAgent.match(/Android/i);
            },
            BlackBerry: function() {
                return navigator.userAgent.match(/BlackBerry/i);
            },
            iOS: function() {
                return navigator.userAgent.match(/iPhone|iPad|iPod/i);
            },
            Opera: function() {
                return navigator.userAgent.match(/Opera Mini/i);
            },
            Windows: function() {
                return navigator.userAgent.match(/IEMobile/i);
            },
            any: function() {
                return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
            }
        };
        
        $(document).ready(function() {
        
            //fix home button
            $('#sfdchome').attr('href', MA.resources.SFDCHome);
            
            try { totango.track("Load Mobile Page", "Old Mobile");} catch(err) { }
            
            //conditional buttons
            if ('{!RoutePlannerEnabled}' == 'true') {
                $('#RoutePlannerBtn').css('display', 'inline-block');
            }

            //salesforce1 android cordova does not support vh yet, check later to see if enabled
            if(isMobile.Android()) {
                var barHeight = $('.ui-bar.ui-bar-b').height()+15;
                var windowHeight = $(window).height();
                //check if using small screen
                var windowWidth = $(window).width();
                var sidebarHeight = windowHeight-barHeight-15; //window height - padding in sidebar and header
                $('#SideBar').height(sidebarHeight);
                $('#SideBar').css('top',barHeight);
                var mapHeight = windowHeight-barHeight; //window height - header
                $('#mapdiv').height(mapHeight);

            }
            else if (!isMobile.any()) {
                $('#page-wrapper').css('height','100vh');
                isMobileDevice = false;
            }

            
            /************************************
            *   Plotted Query Handlers
            ************************************/
        
            //handle clicking on plotted query render buttons
            $('#PlottedQueriesContainer').on('click', '.PlottedRowUnit .renderButtons-button', function () {
                var $plottedQuery = $(this).closest('.PlottedRowUnit').addClass('loading');
                
                var $button = $(this);
                setTimeout(function () {
                    if ($button.is('.on'))
                    {
                        unrenderQuery($plottedQuery, $button.attr('data-renderAs'), function () {
                            $plottedQuery.removeClass('loading');
                            $plottedQuery.find('.queryIcon').show();
                            $plottedQuery.find('.loading-icon').hide(); 
                        });
                    }
                    else
                    {
                        renderQuery($plottedQuery, $button.attr('data-renderAs'), function () {
                            $plottedQuery.removeClass('loading');
                            $plottedQuery.find('.queryIcon').show();
                            $plottedQuery.find('.loading-icon').hide();
                        }); 
                    }
                }, 100);
            });
            
            //handle clicking query close buttons
            $('#PlottedQueriesContainer').on('click', '.PlottedRowUnit .btn-remove', function () {
                var $plottedLayer = $(this).closest('.PlottedRowUnit');
                if($plottedLayer.hasClass('DataLayer')) {
                    MADemographicLayer.RemoveLayerFromDom($plottedLayer,false,function() {
                        PlottedQueries_Show();
                    });
                }
                else {
                    removeQuery($plottedLayer.addClass('unloading'));
                }
            });
            
            //handle clicking to show/hide the legend or empty legend rows
            $('#PlottedQueriesContainer').on('click', '.legend-showhide', function () {
                var $plottedQuery = $(this).closest('.PlottedRowUnit');
                if ($(this).text() == '--Hide Legend--') {
                    $(this).text('--Show Legend--');
                    $plottedQuery.find('.legend, .legend-moreless').hide();
                }
                else {
                    $(this).text('--Hide Legend--');
                    $plottedQuery.find('.legend').show();
                    if ($plottedQuery.find('.legend-row.empty').length > 0) {
                        $plottedQuery.find('.legend-moreless').show();
                    }
                }
            });
            $('#PlottedQueriesContainer').on('click', '.legend-moreless', function () {
                var $plottedQuery = $(this).closest('.PlottedRowUnit');
                if ($(this).text() == '--Show More--') {
                    $(this).text('--Show Less--');
                    $plottedQuery.find('.legend-row.empty').show();
                }
                else {
                    $(this).text('--Show More--');
                    $plottedQuery.find('.legend-row.empty').hide();
                }
            });
            
            //handle clicking on plotted query legend items
            $('#PlottedQueriesContainer').on('change', '.legend-checkbox', function () {
            
                //grab some basic info about this legend item
                var $legendCheckbox = $(this);
                var $legendRow = $legendCheckbox.closest('.legend-row');
                var $plottedQuery = $(this).closest('.PlottedRowUnit');
                var markerMetadata = $plottedQuery.data('markerMetadata');
                var queryProximityEnabled = ($plottedQuery.data('proximityOptions') && $plottedQuery.data('proximityOptions').enabled);
                var queryProximityHideMarkers = queryProximityEnabled && $plottedQuery.data('proximityOptions').hideMarkers;
                
                //show loading
                $plottedQuery.addClass('loading');
                                
                //loop through all markers and build a list of those that need to be modified
                var clusterMarkers = [];
                var needToUpdateVisibility = false;
                $.each($plottedQuery.data('records'), function (index, record) 
                {
                    //determine if our picklist value matches
                    var picklistValueMatches = record.legendRow && record.legendRow[0] == $legendRow[0];
                
                    //check this marker against all of our criteria to see if it should be added to the list
                    if ($legendCheckbox.is(':checked'))
                    {
                        //this record must have a marker, be hidden, match, and not violate any prox layers
                        if ((((record.marker && !record.isVisible) || (queryProximityEnabled && MA.Util.g(record, 'marker.maData.proximityCircle') && MA.Util.g(record, 'marker.maData.proximityCircle').getMap() == null)) || (record.clusterMarker && !record.isClustered) || (record.scatterMarker && !record.isScattered)) && picklistValueMatches)
                        {
                            //check for proximity if needed, otherwise just add this marker to the list
                            if (MA.Map.hitTestShapeMgr.hasShapes())
                            {
                                //loop through all prox objects to see if this marker falls inside or outside
                                var hitTestGood = MA.Map.hitTestShapeMgr.containsLatLng(record.marker.getPosition());

                                //add it to the list if needed
                                if ($plottedQuery.find('.renderButtons-button.markers').is('.on') && (hitTestGood || queryProximityEnabled)) {
                                    if (record.marker && !record.isVisible && !queryProximityHideMarkers) {
                                        record.isVisible = true;
                                        record.marker.setMap(MA.map);
                                    }
                                    if (queryProximityEnabled && MA.Util.g(record, 'marker.maData.proximityCircle') && MA.Util.g(record, 'marker.maData.proximityCircle').getMap() == null) {
                                        record.marker.maData.proximityCircle.setMap(MA.map);
                                        needToUpdateVisibility = true;
                                    }
                                }
                                if ($plottedQuery.find('.renderButtons-button.cluster').is('.on') && record.clusterMarker && !record.isClustered && hitTestGood) {
                                    record.isClustered = true;
                                    clusterMarkers.push(record.clusterMarker);
                                }
                                if ($plottedQuery.find('.renderButtons-button.scatter').is('.on') && record.scatterMarker && !record.isScattered && hitTestGood) {
                                    record.isScattered = true;
                                    record.scatterMarker.setMap(MA.map);
                                }
                            }
                            else
                            {
                                //add it to the list
                                if ($plottedQuery.find('.renderButtons-button.markers').is('.on')) {
                                    if (record.marker && !record.isVisible && !queryProximityHideMarkers) {
                                        record.isVisible = true;
                                        record.marker.setMap(MA.map);
                                    }
                                    if (queryProximityEnabled && MA.Util.g(record, 'marker.maData.proximityCircle') && MA.Util.g(record, 'marker.maData.proximityCircle').getMap() == null) {
                                        record.marker.maData.proximityCircle.setMap(MA.map);
                                        needToUpdateVisibility = true;
                                    }
                                }
                                if ($plottedQuery.find('.renderButtons-button.cluster').is('.on') && record.clusterMarker && !record.isClustered) {
                                    record.isClustered = true;
                                    clusterMarkers.push(record.clusterMarker);
                                }
                                if ($plottedQuery.find('.renderButtons-button.scatter').is('.on') && record.scatterMarker && !record.isScattered) {
                                    record.isScattered = true;
                                    record.scatterMarker.setMap(MA.map);
                                }
                            }
                        }
                    }
                    else
                    {
                        //this record must have a marker, be visible, and match
                        if ($plottedQuery.find('.renderButtons-button.markers').is('.on') && picklistValueMatches) {
                            if (record.marker && record.isVisible) {
                                record.isVisible = false;
                                record.marker.setMap(null);
                            }
                            if (queryProximityEnabled && MA.Util.g(record, 'marker.maData.proximityCircle') && MA.Util.g(record, 'marker.maData.proximityCircle').getMap() != null) {
                                record.marker.maData.proximityCircle.setMap(null);
                                needToUpdateVisibility = true;
                            }
                        }
                        if ($plottedQuery.find('.renderButtons-button.cluster').is('.on') && record.clusterMarker && record.isClustered && picklistValueMatches) {
                            record.isClustered = false;
                            clusterMarkers.push(record.clusterMarker);
                        }
                        if ($plottedQuery.find('.renderButtons-button.scatter').is('.on') && record.scatterMarker && record.isScattered && picklistValueMatches) {
                            record.isScattered = false;
                            record.scatterMarker.setMap(null);
                        }
                    }
                });
                
                //show/hide our cluster markers (this is done separately because the clusterer supports mass add/remove)
                if ($legendCheckbox.is(':checked') && $plottedQuery.find('.renderButtons-button.cluster').is('.on')) {
                    $plottedQuery.data('clusterGroup').addMarkers(clusterMarkers);
                }
                else if ($plottedQuery.find('.renderButtons-button.cluster').is('.on')) {
                    $plottedQuery.data('clusterGroup').removeMarkers(clusterMarkers);
                }
                
                //reload any popups that this may have affected
                refreshPopups({ removeOnly: true });

                //update legend info
                updateQueryInfo($plottedQuery);
                
                //hide loading
                $plottedQuery.removeClass('loading');
                $plottedQuery.find('.queryIcon').show();
                $plottedQuery.find('.loading-icon').hide();

                //update marker visibility if needed
                if (needToUpdateVisibility) {
                    ChangeVisibilityWhenCircleIsAdded();
                }
                
            });
        
        StartUpJS();

        /**********************
        * POI Addition 
        **********************/
        MA.Map.Search.autocomplete = new google.maps.places.SearchBox(document.getElementById('search-autocomplete'));
        google.maps.event.addListener(MA.Map.Search.autocomplete, 'places_changed', function() {
            var placesService = new google.maps.places.PlacesService(MA.map);
                var places = MA.Map.Search.autocomplete.getPlaces();
                $.each(MA.Map.Search.markers, function (i, marker) {
                    marker.setMap(null);
                });
                MA.Map.Search.markers = [];
                MA.Map.InfoBubble.hide();
                $('#POI .poi-row').remove();
                $('#POI .poi-watermark').hide();
                var requestsOut = 0;

                //get today
                var today = new Date();
                var dayOfWeek = today.getDay();

                for (var i=0; i < Math.min(10, places.length); i++)
                {
                    //get more details about this place
                    var place = places[i];
                    requestsOut++;
                    placesService.getDetails({ placeId: place.place_id }, function (place, status) {
                        if (status == google.maps.places.PlacesServiceStatus.OK)
                        {
                            //create a marker
                            var marker = new google.maps.Marker({
                                map: MA.map,
                                position: place.geometry.location,
                                title: place.name,
                                maData: {place:place},
                                animation: google.maps.Animation.DROP,
                                icon: {
                                    url: place.icon,
                                    size: new google.maps.Size(71, 71),
                                    origin: new google.maps.Point(0, 0),
                                    anchor: new google.maps.Point(12, 25),
                                    scaledSize: new google.maps.Size(25, 25)
                                },
                                zIndex: 999
                            });
                            MA.Map.Search.markers.push(marker);

                            //handle marker events
                            google.maps.event.addListener(marker, 'click', function () {

                                var place = this.maData.place;
                                //check for place hours ensure all 7 days returned and get today's hours
                                var openHours = 'Not Available';
                                if(place.opening_hours && place.opening_hours.weekday_text.length >=7) {
                                    var openToday = place.opening_hours.open_now == true ? 'Open Today' : 'Closed Today';
                                    openHours = openToday +' - <span style="font-weight:bold;">'+place.opening_hours.weekday_text[dayOfWeek-1]+'</span>';
                                }

                                //create tooltip content
                                var $tooltipContent = $(
                                    '<div>' +
                                        '<table cellpadding="3" style="width: 100%; padding-bottom: 5px;">' +
                                            '<tr><td><b>Name</b></td><td>' + (place.website ? '<a href='+place.website+' target="_blank">' + place.name + '</a>' : place.name) + '</td></tr>' +
                                            '<tr><td><b>Address</b></td><td>' + (place.formatted_address || 'Not Available') + '</td></tr>' +
                                            '<tr><td><b>Hours</b></td><td>' + openHours + '</td></tr>' +
                                            '<tr><td><b>Phone</b></td><td>' + (place.international_phone_number || 'Not Available') + '</td></tr>' +
                                        '</table>' +
                                        '<div class="layout-tooltip" style="min-width: 300px;">' +
                                            MAActionFramework.buildLayoutFromContents(userSettings.ButtonSetSettings.poiLayout).html() +
                                        '</div>' +
                                    '</div>'
                                );

                                MA.Map.InfoBubble.show({
                                    position: this.getPosition(),
                                    anchor: this,
                                    minWidth: 420,
                                    content: $tooltipContent.get(0)
                                });

                                //handle clicking an action button
                                $tooltipContent.find('.actionbutton').click(function (e) {
                                    var $button = $(this);
                                    var frameworkAction = $button.attr('data-type') == 'Custom Action'
                                        ? MAActionFramework.customActions[$button.attr('data-action')] || null
                                        : MAActionFramework.standardActions[$button.attr('data-action')] || null;
                                    
                                    if (frameworkAction) {
                                        switch (frameworkAction.Action)
                                        {
                                            case 'Iframe':
                                            
                                                //get a component index from the action framework to make this tab unique and build the iframe url 
                                                var componentIndex = MAActionFramework.componentIndex++;
                                                var iframeURL = frameworkAction.ActionValue 
                                                    + (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '')
                                                    + '&Button=' + encodeURIComponent(frameworkAction.Label)
                                                    + '&RecordId=' + record.record.Id;
                                                
                                                //build the new tab and the corresponding pane
                                                var $newTab = $("<li id='CustomTab-"+componentIndex+"'><a href='#pane-customaction-"+componentIndex+"'>"+frameworkAction.Label+"</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>");
                                                var $newPane = $("<div id='pane-customaction-"+componentIndex+"'><iframe src='"+iframeURL+"' style='width: 100%; height: 100%;'></iframe></div>");
                                                
                                                //append the tab and pane to the tooltip tabs and refresh
                                                $('#tooltip-content').find('.ui-tabs-nav').append($newTab).closest('.tabs').append($newPane).tabs('refresh').find('#CustomTab-'+componentIndex+' a').click();
                                                
                                                //handle clicking the close button for this new tab
                                                $newTab.css({'width': 'auto', 'padding-right': '5px'}).find('.ui-icon-close').css({'cursor': 'pointer', 'position': 'absolute', 'right': '0'}).click(function () {
                                                    if ($newTab.is('.ui-tabs-active')) {
                                                        $('#tooltip-content').find('.ui-tabs-nav > li:first-child a').click();
                                                    }
                                                    
                                                    $newTab.remove();
                                                    $newPane.remove();
                                                });
                                            break;
                                            case 'NewWindow':
                                            
                                                var newURL = frameworkAction.ActionValue 
                                                    + (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '')
                                                    + '&Button=' + encodeURIComponent(frameworkAction.Label)
                                                    + '&type=POI'
                                                    + '&latitude=' + place.geometry.location.lat()
                                                    + '&longitude=' + place.geometry.location.lng()
                                                    + '&address=' + place.formatted_address;
                                                window.open(newURL);
                                            break;
                                            case 'Javascript':
                                            
                                                frameworkAction.ActionValue.call(this, {
                                                    mode: 'Mobile',
                                                    button: $button,
                                                    customMarkers: [{ type: 'POI', place: place, title: place.name || 'My POI', phone: place.international_phone_number || '', website: place.website || '', latlng: place.geometry.location, address: place.formatted_address }]
                                                });
                                                
                                            break;
                                    
                                            default:
                                            break;
                                        }
                                    }

                                    //stop the click from getting to the map
                                    e.stopPropagation();
                                });
                            });

                            //create a row in the poi table
                            $('#POI #poiResults').append(poi_CreateRow({ place: place, marker: marker}));
                        }
                        else {
                            MA.log(status);
                        }
                        requestsOut--;
                    });                 
                }

                var placesInterval = setInterval(function () {
                    if (requestsOut == 0) {
                        clearInterval(placesInterval);

                        $('#POI .poiResults-wrapper').show();
                        MA.Map.Search.clearSearch();

                        //if there was only one place then zoom to it (just seems like the right move because a single return most likely means they're searching for a specific place rather than a type)
                        if (places.length == 1) {
                            MA.map.panTo(places[0].geometry.location);
                            MA.map.setZoom(Math.max(MA.map.getZoom(), 12));
                        }
                    }
                }, 1000);

                //clear the address input
                MA.Map.Search.clearSearch();
        }); 

        google.maps.event.addListener(MA.map, 'bounds_changed', function() {
            var bounds = MA.map.getBounds();
            MA.Map.Search.autocomplete.setBounds(bounds);
            
        });

        //POI tab results click
        $('#POI #poiResults').on('click', '.poi-row', function() {
            MA.map.panTo($(this).data('marker').getPosition());
            google.maps.event.trigger($(this).data('marker'), 'click');
        });
    });

    function removePOI ()
    {
        //remove previous markers and table info
        try
        {
            $.each(MA.Map.Search.markers || [], function (i, marker) {
                marker.setMap(null);
            });
            MA.Map.Search.markers = [];
            MA.Map.InfoBubble.hide();
            $('#POI .poi-row').remove();
            $('.poi-search').val('');
            $('#POI .poiResults-wrapper').hide();
            $('#POI .poi-watermark').show();
        }
        catch (e)
        {
            //do nothing
        }
    }

    function poi_CreateRow(options)
    {
        options = $.extend({ 
            place: {} 
        }, options);
    
        var $row = $('#poi-results-content-template .poi-row').removeClass('template').clone();
        $row.find('.poi-name').text(options.place.name);
        $row.find('.poi-address').text(options.place.formatted_address || '');
        $row.find('.poi-phone').text(options.place.formatted_phone_number || '');
        $row.find('.poi-image').attr('src', options.place.icon);
        $row.data('marker', options.marker);
        return $row;
    }
    
    function refreshPopups(options)
    {
        options = $.extend({ removeOnly: true }, options);

        try {
            if (MA.Map.InfoBubble._bubble.anchor instanceof google.maps.Marker) {
                if (MA.Map.InfoBubble._bubble.anchor.getMap() == null) {
                    MA.Map.InfoBubble.hide();
                }
                else if (!options.removeOnly) {
                    google.maps.event.trigger(MA.Map.InfoBubble._bubble.anchor, 'click');
                }
            }
            else if ($(MA.Map.InfoBubble._bubble.content).is('.standard-cluster-tooltip')) {
                MA.Map.InfoBubble.hide();
            }
        }
        catch (err) {}
    }

// JavaScript Document

var MaxExportSize;
var MaxQuerySize = 2000;

function StartUpJS()
{
    //create map
    MA.map = new google.maps.Map(document.getElementById('mapdiv'), {
        center: { lat: 36.98500309285596, lng: -97.8662109375},
        zoom: 5,
        panControl: false,
        zoomControl: false,
        streetViewControl: false,
        mapTypeControl: false,
        scaleControl: false,
        gestureHandling : 'greedy'
    });

    //remove standard POI functionality
    MA.map.setOptions({
        styles: [
            { featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'off' }] },
            { featureType: 'transit', elementType: 'labels', stylers: [{ visibility: 'off' }] },
            { featureType: 'landscape', elementType: 'labels', stylers: [{ visibility: 'off' }] }
        ]
    });

    //create canvas overlay that will be used for position support
    MA.Map.offsetOverlay = new google.maps.OverlayView();
    MA.Map.offsetOverlay.draw = function() {};
    MA.Map.offsetOverlay.setMap(MA.map);

    //spiderfier to hold markers
    MA.Map.spiderfier = new OverlappingMarkerSpiderfier(MA.map, { keepSpiderfied: true });
    MA.Map.spiderfier.addListener('click', function (marker, e) {
        if (marker.spiderfied || MA.Map.spiderfier.markersNearMarker(marker, true).length == 0) {
            marker_Click.call(marker, { markerType: 'Marker' });
        }
    });
    MA.Map.spiderfier.addListener('spiderfy', function (markersAffected, markersNotAffected) {
        $.each(markersAffected, function (i, marker) {
            marker.spiderfied = true;
        });
    });
    MA.Map.spiderfier.addListener('unspiderfy', function (markersAffected, markersNotAffected) {
        $.each(markersAffected, function (i, marker) {
            marker.spiderfied = false;

            //oms "forgets" the original zindex of its markers.  resetting waypoint markers when unspiderfying
            if (marker.layerType == 'waypoint-marker') {
                marker.setZIndex(1000);
            }
            else {
                marker.setZIndex(999);
            }
        });
    });
    
    //handle clicking the map
    google.maps.event.addListener(MA.map, 'click', function (e)
    {
        //remove info bubble
        if (!clusterClicked) {  //super hack because sf1 won't stop click propagation to the map
            MA.Map.InfoBubble.hide();
        }
        clusterClicked = false;
    });

    //map idle listener
    google.maps.event.addListener(MA.map, 'idle', function () {
        //check if we have queries plotted
        var $plottedQueries = $('#PlottedQueriesContainer .PlottedRowUnit');

        if($plottedQueries.length > 0) {
            
            if($('#visibleAreaRefeshMap').hasClass('refreshing')) {
                //if refreshing do nothing until finished
            }
            else if(!$('#visibleAreaRefeshMap').hasClass('visible')) {
                //if done refeshing and not visible, show button
                $('#visibleAreaRefeshMap .resfreshText').text('Refresh in this area');
                $('#visibleAreaRefeshMap').removeClass('finished button-dark ion-checkmark-round').addClass('update ion-android-refresh button-blue');
                $('#visibleAreaRefeshMap').addClass('visible')
            }
        }
    });

    //refresh map button
    $('#visibleAreaRefeshMap').on('click',function() {
        if(!$('#visibleAreaRefeshMap').hasClass('ready')) {
            return;
        }

        try{MA.Map.InfoBubble.hide();}catch(e){}

        //remove ready class
        $('#visibleAreaRefeshMap').removeClass('ready update button-dark').addClass('refreshing button-blue ion-android-refresh');
        $('#visibleAreaRefeshMap .resfreshText').text('Refresh in this area')    
        $('#visibleAreaRefeshMap .resfreshText').text('Refreshing...');

        //grab queries
        var plottedQueries = $('#PlottedQueriesContainer .PlottedRowUnit');

        var q = async.queue(function (options, callback) {
            var $pq = options.pq;
            if($pq.hasClass('DataLayer')) {
                var dlOptions = {
                    isMobile : true
                };
                MADemographicLayer.refreshDataLayer($pq,dlOptions,function(res) {
                    $pq.removeClass('visibleLoading');
                    callback({success:true,data:options});
                });
            }
            else {
                refreshQuery($pq).then(function(res) {
                    $pq.removeClass('visibleLoading');
                    callback({success:true,data:options});
                });
            }
        });

        //create a que to unrender and rerender queries
        for(var pq = 0, pqI = plottedQueries.length; pq < pqI; pq++) {
            var $plottedQuery = $(plottedQueries[pq]);
            var queryOptions = {
                pq : $plottedQuery
            };
            q.push(queryOptions,function(res){});
        }


        q.drain = function() {
            //udate refresh button
            $('#visibleAreaRefeshMap').removeClass('refreshing button-blue ion-android-refresh').addClass('button-dark finished ion-checkmark-round');
            $('#visibleAreaRefeshMap .resfreshText').text('Done');
    
            //wait 3 seconds then hide button
            setTimeout(function() {
                //if map has moved since we started this process just show the normal button
                if($('#visibleAreaRefeshMap').hasClass('finished')) {
                    $('#visibleAreaRefeshMap').removeClass('visible update finished').addClass('ready');
                }
            },1000);
        }
    });

    /*Initialize Notification Container*/
    $("#container").notify({
        speed: 200,
        expires: false
    });

    MA.CheckIn.getFields().then(function(res) {
        //overwrite with options
        MA.CheckIn.general = res.data;
    });
    
    //show loading on initial folder load
    $('#FolderSQList').empty();
    $('<li data-role="list-divider">{!$Label.sma__ma_folders}</li>').appendTo('#FolderSQList');
    $('<li data-icon="false"></li>').attr('id','PersonalRoot').append('<a>'+MASystem.Labels.MA_Loading+'...</a>').appendTo('#FolderSQList');
    $("#FolderSQList").attr({ 'data-type': 'root', 'data-id': 'root' }).listview("refresh");   
    
    var processData = { 
        ajaxResource : 'MAUserAJAXResources',
        action: 'get_user_prefs',
        id: UserId
    };
    
    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
        processData,
        function(json, event){
            if(json.success)
            {
                var record = removeNamespace('{!namespace}', json.record);
                
                Debug("User Query Result: " + record);
                if(json.Currency)
                {
                    //store currency information for later use (aggregates and potential other areas);
                    userSettings.currency = json.Currency;
                    userSettings.userCurrency = record.DefaultCurrencyIsoCode;
                    $.each(json.Currency, function (index, currency) {
                        if(currency.IsoCode == record.DefaultCurrencyIsoCode) {
                            userSettings.userConverstionRate = currency.ConversionRate;
                        }
                    });
                }
                else {
                    userSettings.userCurrency = MASystem.User.CurrencySymbol;
                }
                IsCorporateAdmin = record.EditMapAnythingOrgWirdeQueries__c;
                
                //extend our user settings object with these settings (will be used later)
                try {
                    $.extend(userSettings, JSON.parse(record.MapAnythingSettings__c));
                }
                catch (err) { }
                
                if (record.MADefaultLatitude__c != null && record.MADefaultLongitude__c != null)
                {
                    Debug("Setting Center Point");
                    CenterLat = parseFloat(record.MADefaultLatitude__c);
                    CenterLong = parseFloat(record.MADefaultLongitude__c);
                    
                    MA.map.panTo(new google.maps.LatLng(parseFloat(record.MADefaultLatitude__c),parseFloat(record.MADefaultLongitude__c)));
                }
    
                if (record.MAMaxQuerySize__c != null)
                {
                    Debug("Setting Max Query Size");
                    MaxQuerySize = parseInt(record.MAMaxQuerySize__c);
                    
                    if (MaxQuerySize > 10001)
                    {
                        MaxQuerySize = 10000;    
                    }
                }
                else
                {
                    MaxQuerySize = 2000;
                }
                
                
                if (record.MADefaultZoomLevel__c != null)
                {
                    Debug("Setting Default Zoom Level");
                    DefaultZoomLevel = parseInt(record.MADefaultZoomLevel__c);
                    MA.map.setZoom(parseInt(record.MADefaultZoomLevel__c));
                }
                
                if (record.AllowMapAnythingExports__c == 'false')
                {
                    $('#tabs-nav').tabs( "remove" , 2 );
                    MaxExportSize = 0;
                }
                else
                {
                    if (record.MAMaxExportSize__c == null)
                    {
                        MaxExportSize = 1000000;
                    }
                    else
                    {
                        MaxExportSize = parseInt(record.MAMaxExportSize__c);
                    }
                }
                
                if (record.DefaultProximityRadius__c == null)
                {
                    document.getElementById("ProximityRadius").value = "50";
                }
                else
                {
                    document.getElementById("ProximityRadius").value = record.DefaultProximityRadius__c;
                }
                
                if (record.PreferredTypeOfMeasurement__c == null)
                {
                    document.getElementById("ProximityRadiusMeasurementType").value = "MILES";
                }
                else
                {
                    var MesType = record.PreferredTypeOfMeasurement__c;
                    document.getElementById("ProximityRadiusMeasurementType").value = MesType.toUpperCase();
                }
                
                //new style user settings.  make sure settings are defined
                if(typeof record.MapAnythingSettings__c == 'undefined' || record.MapAnythingSettings__c == null || record.MapAnythingSettings__c == "") {
                    record.MapAnythingSettings__c = '{}';
                }
                
                //try to parse and use settings
                try 
                {
                    //try to parse user settings
                    var MASettingsObj;
                    try {
                        MASettingsObj = JSON.parse(record.MapAnythingSettings__c);
                    }
                    catch (err) {
                        MASettingsObj = {};
                    }
                    
                    var MASettingsObj = JSON.parse(record.MapAnythingSettings__c);
                        
                    //extend our user settings object with these settings (will be used later)
                    $.extend(userSettings, MASettingsObj);
                        
                    //button set
                    if (userSettings.ButtonSetSettings && userSettings.ButtonSetSettings.Id && userSettings.ButtonSetSettings.Id.length >= 15)
                    {
                        //we have a button set defined so send a request to get the details
                        var processData = { 
                            ajaxResource : 'MAAdminAJAXResources',
                            action: 'get_buttonset',
                            id: userSettings.ButtonSetSettings.Id
                        };
                        
                        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                            processData,
                            function(response, event){
                                if (response.success)
                                {
                                    var buttonSet = removeNamespace('{!namespace}', response.result);
                                    userSettings.ButtonSetSettings.tooltipLayout = JSON.parse(buttonSet.TooltipLayout__c);
                                    userSettings.ButtonSetSettings.myPositionLayout = JSON.parse(buttonSet.MyPositionLayout__c || '[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[]]}]');
                                    userSettings.ButtonSetSettings.poiLayout = JSON.parse(buttonSet.POILayout__c || '[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[],[]]}]');
                                }
                                else { 
                                }
                            },{buffer:false,escape:false}
                        );
                    }
                    else {
                        
                        //no button set defined so use defaults
                        userSettings.ButtonSetSettings = {
                            tooltipLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[{"Label":"Remove Marker","Type":"Standard Action"},{"Label":"Check In","Type":"Standard Action"}]]},{"Label":"Admin","Columns":[[{"Label":"Set Verified Location","Type":"Standard Action"}],[{"Label":"Clear Coordinates","Type":"Standard Action"}],[{"Label":"Change Owner","Type":"Standard Action"}]]},{"Label":"Activities","Columns":[[{"Label":"Log a Call","Type":"Standard Action"}],[{"Label":"Send Email","Type":"Standard Action"}],[{"Label":"New Event","Type":"Standard Action"},{"Label":"Add to Campaign","Type":"Standard Action"}]]}]'),
                            myPositionLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[]]}]'),
                            poiLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[],[]]}]')
                        };
                        
                    }
                }
                catch (err) { }
    
                //load defaults if needed
                userSettings.RouteDefaults = userSettings.RouteDefaults || $.extend({}, MA.defaults.userSettings.RouteDefaults);
                
                //case 00012110, proximity not using default unit
                var defaultUnit = getProperty(userSettings || {},'RouteDefaults.unit') || 'mi';
                //make uppercase to match mobile layout
                try {
                    var upperCaseUnit = defaultUnit.toUpperCase();
                    //set the select box
                    $('#ProximityRadiusMeasurementType').val(upperCaseUnit).change();
                }
                catch(e){
                    //just keep as miles
                }
                
                //start the map at "My Position" (need to clean up the code above this that sets the position to the users "home")
                myPosition(true);
                
                
                OnUserLoadEventCompletd = true;
                
                //check if we need to hide the personal folder
                DisplayRootFolders();
                
                
                MA.options = JSON.parse($('[id$=":serializedOptions"]').val());
                //PlotQuery(this.id, $('#VisibleAreaCB').is(':checked'));
                
                //plot layers
                if (MA.options.layers && MA.options.layers.length > 0) {
                
                    $.each(MA.options.layers || [], function (index, layer) {
                        
                        //console.log(layer);
                        
                        switch(layer.layerType)
                        {
                            case 'Query':
                                
                                $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data({}).prependTo($('#PlottedQueriesTable'));
                                $plottedQuery.find('.status').html('Running query...');
                                
                                var options = { 
                                    id: 'Record-',
                                    plottedQuery: $plottedQuery,
                                    RecordId: layer.recordIds.join(','),
                                    BaseObjectId: layer.baseObjectId,
                                    advancedOptions: {},
                                    tooltipFieldsString: layer.tooltipFields.join(','),
                                    markerColor: layer.markerColor
                                    
                                }
                                
                                //console.log(options);
                                
                                PlotQuery(options
                                , 
                                false, 
                                { success: function () { layer.done = true; } });
                                
                                
                            break;
                        }
                    });
                    
                    //set an interval to zoom to fit when all layers have been plotted
                    var layersInterval = setInterval(function () {
                        
                        var done = true;
                        $.each(MA.options.layers, function (index, layer) {
                            if (!layer.done) {
                                done = false;
                            }
                        });
                        
                        if (done) {
                            clearInterval(layersInterval);
                            
                            //special zoom to fit for just these layers (we don't want to include plot on load items...right?)
                            try {
                                var queries = [];
                                $.each(MA.options.layers, function (index, layer) {
                                    if (layer.el && layer.el.data('records')) {
                                        queries.push(layer.el);
                                    }
                                });
                                ZoomToFit({ queries: queries });
                                
                                //zoom out if too close
                                if (map.zoomLevel > 15) map.set("zoomLevel", 15);
                            }
                            catch (err) {
                                //this most likely means that there are no features on the map so just do nothing
                            }
                        }
                        
                    }, 500);
                }
                
                
                
                
                
                
                
                
                
                
                
                
                
            }
            else
            {
                Debug("Error Querying User, " + json.error);
                DisplayPropertiesOfObject(json.error,0);
                HideLoadingDialog();
            }
        },{buffer:false,escape:false}
    );
    
    
    DisplayRecentSavedQueries();  
}

function SaveLatLong(lat,lng, data, pTp)
{
    //Check if Lat & Long Fields are Set
    if ( pTp.LongitudeField != null && pTp.LatitudeField != null && pTp.sObjectId != null && pTp.sObjectId != "")
    {  
        /*
        $.each(data.getLocations(), function(index, value) { 
            Debug("Index: " + index);
            DisplayPropertiesOfObject(value,0);
            DisplayPropertiesOfObject(value.mapView,0);
            DisplayPropertiesOfObject(value.address,0);
        });
        */     
       
        //var relevance = data.relevance;
        //var matchLevel = data.matchLevel;
        
        var LatLongJSObj = new Object();
        
        var SearchResult = data.getLocations()[0];
        LatLongJSObj.latitude = lat;
        LatLongJSObj.longitude = lng;
        LatLongJSObj.street = SearchResult.address.street;
        LatLongJSObj.city = SearchResult.address.city;
        LatLongJSObj.state = SearchResult.address.state;
        LatLongJSObj.country = SearchResult.address.country;
        LatLongJSObj.county = SearchResult.address.county ;
        LatLongJSObj.district = SearchResult.address.district;
        LatLongJSObj.postalcode = SearchResult.address.postalCode;
        LatLongJSObj.suite = SearchResult.address.suite;
        LatLongJSObj.floor = SearchResult.address.floor;
        LatLongJSObj.houseNumber = SearchResult.address.houseNumber;                       
        LatLongJSObj.compiledStreet = (LatLongJSObj.houseNumber != null ? LatLongJSObj.houseNumber + " " : "") + (LatLongJSObj.floor != null ? "Floor - " + LatLongJSObj.floor + " " + ", " : "") + (LatLongJSObj.street != null ? LatLongJSObj.street + " " : "") + (LatLongJSObj.suite != null ? "Suite - " + LatLongJSObj.suite : ""); 
        LatLongJSObj.pTp = pTp;
        
        var HasUpdates = false;
        
        if ((pTp.LatitudeField != null && pTp.LatitudeField != "") || (pTp.LongitudeField != null && pTp.LongitudeField != "") || (pTp.CleanStreet != null && pTp.CleanStreet != "") 
            || (pTp.CleanCity != null && pTp.CleanCity != "") || (pTp.CleanState != null && pTp.CleanState != "") || (pTp.CleanCounty != null && pTp.CleanCounty != "") 
            || (pTp.CleanCountry != null && pTp.CleanCountry != "") || (pTp.CleanDistrict != null && pTp.CleanDistrict != "") || (pTp.CleanPostalCode != null && pTp.CleanPostalCode != ""))
        {
            HasUpdates = true;
        }
        
        if (HasUpdates)
        {
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject] == null)
            {
                ObjectsToUpdateWithLatLong[pTp.BaseObject] = new Array();
            }
            
            ObjectsToUpdateWithLatLong[pTp.BaseObject].push(LatLongJSObj);
            
            //Debug("ObjectsToUpdateWithLatLong[" + pTp.BaseObject + "]: " + ObjectsToUpdateWithLatLong[pTp.BaseObject].length);            
            //Debug("ObjectsToUpdateWithLatLong: " + ObjectsToUpdateWithLatLong.length);
    
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject].length  >= pTp.BatchAmount)
            {
                Debug("Above Batch Size (" + ObjectsToUpdateWithLatLong[pTp.BaseObject].length + ")");
                
                var MyJSObject = {
                    action: 'save_lat_long',                
                    ObjectsToUpdateWithLatLong: ObjectsToUpdateWithLatLong[pTp.BaseObject]
                };
                
                var processData = {
                    ajaxResource : 'MAGeoCodeAJAXResources',
                    
                    action: 'save_lat_long',
                    MyJSObject: JSON.stringify(MyJSObject)
                };
                
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        if(event.status) {
                            var obj = $.parseJSON(response.responseText);                      
                            
                            if(obj.success)
                            {
                                //Debug("Successfully saved Lat/Long.");                        
                            }
                            else
                            {
                                NotifyError("Error Saving Lat/Long",obj.error);
                                Debug("Error Saving Lat/Long " + obj.error);
                                HideLoadingDialog();
                            }
                        }
                    },{buffer: false,escape:false}
                ); 
                
                ObjectsToUpdateWithLatLong[pTp.BaseObject]= new Array();
            }
            else
            {
                //Debug("Not above batch size (" + pTp.BatchAmount + ")");
            }
        }
    }
    else
    {
        Debug("Missing Lat/Long Field");
    }
}

function ShowCheckInDisposition(options) {
    //console.log('here');
    var $button = options.button;
    var record = options.record;
    var marker = options.marker;
    //verify the checkin location
    var requestData = {};
    if (myCachedPositionInfo != null)
    {
        var distance = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude), marker.getPosition());
        requestData = {
            SavedQueryId: marker.SavedQryId,
            id: UserId,
            lid:marker.record.record.Id,
            tooltip1: marker.title,
            clat: myCachedPositionInfo.coords.latitude,
            clong: myCachedPositionInfo.coords.longitude,
            caccuracy: myCachedPositionInfo.coords.accuracy,
            length: distance
        };
    }
    else {
        requestData = {
            SavedQueryId: marker.SavedQryId,
            id: UserId,
            lid:marker.record.record.Id,
            tooltip1: marker.title,
            clat: null,
            clong: null,
            caccuracy: null,
            length: null
        };
    }
    
    MA.CheckIn.verifyCheckin(requestData).then(function(res) {
        if(res.success) {
            var $but = $('<button class="saveDisposition MAbutton button-blue">Finish</button>');
            if(res.settings && res.settings.CheckInPostTo && res.settings.CheckInPostTo.indexOf('Task') >= 0) {
                //show the disposition
                $('#CustomDispositionPopup .customDis-buttons .saveDisposition').remove();
                //var $but = $('<button class="saveDisposition MAbutton button-silver">Finish</button>');
                $('#CustomDispositionPopup .customDis-buttons').prepend($but)
                $('#customDis-loadmask').show();
                $('#CustomDispositionPopup').show();

                //show the disposition
                var fieldSetName = MA.CheckIn.general['Activity-FieldSet']; 
                $("#customDis-fieldset").html('Loading...').load(MA.resources.CustomDisposition, 'fieldset=' + fieldSetName + '&platform=' + (MA.IsMobile ? 'tablet' : 'desktop'), function () {
                    $('#customDis-loadmask').hide();

                    //fill
                    try { $('#customDis-fieldset .fieldInput[data-field="Subject"]').find('.get-input').val('CheckIn @ ' + marker.title); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="Status"]').find('.get-input').val('Completed'); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutAccuracy"]+'"]').find('.get-input').val(myCachedPositionInfo.coords.accuracy); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDate"]+'"]').find('.get-input').val(UserContext.today); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDistanceFromRecord"]+'"]').find('.get-input').val(distance*0.000621371); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLatitude"]+'"]').find('.get-input').val(myCachedPosition.lat()); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLongitude"]+'"]').find('.get-input').val(myCachedPosition.lng()); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLatitude"]+'"]').find('.get-input').val(myCachedPosition.lat()); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLongitude"]+'"]').find('.get-input').val(myCachedPosition.lng()); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLocationAccuracy"]+'"]').find('.get-input').val(myCachedPositionInfo.coords.accuracy); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-DistanceFromRecord"]+'"]').find('.get-input').val(distance*0.000621371); } catch (err) {}
                });
            }
            else {
                //do normal check in
                CheckIn(marker,function(response) {
                    var CheckInId = response.taskId || response.eventId;
                    if (CheckInId) {
                        var isC2C = false;
                        if($button.hasClass('c2cAction')) {
                            isC2C = true;
                        }
                    
                        if (!MA.enabledFeatures.autoCheckOut) {
                            if(!isC2C) {
                                $button.data('CheckInId', CheckInId).text("{!$Label.sma__maactionframework_check_out}").attr('data-action', 'Check Out');
                            }
                            else {
                                //hide check in, show check out
                                $button.hide();
                                $button.closest('.buttons').find('.checkOut').show();
                            }
                        }
                        
                        //add this check in record to the raw plot data
                        if (CheckInId.substring(0,3) == '00T') {
                            if (!record.record.Tasks) { record.record.Tasks = {records: []}; }
                            record.record.Tasks.records.push({
                                Id: CheckInId, 
                                IsClosed: MA.enabledFeatures.autoCheckOut
                            });
                        }
                        else {
                            if (!record.record.Events) { record.record.Events = {records: []}; }
                            record.record.Events.records.push({
                                Id: CheckInId,
                                Subject: MA.enabledFeatures.autoCheckOut ? 'Check Out @' : 'Check In @'
                            });
                        }
                    }
                    $('#CustomDispositionPopup #customDis-loadmask').hide();
                    //reset the disposistion
                    cancelDisposition();
                });
            }
        }
        else {
            NotifyError("Error Checking In", res.data);
        }

        //handle finish button
        $but.on('click',function() {
            //get the field data
            var fields = {};
            var FieldsFoundArray = [];

            //show loading
            $('#CustomDispositionPopup #customDis-loadmask').show();

            //grab fields from the field set
            $('#customDis-fieldset [class^="field::"]').each(function () 
            {
                var $row = $(this);
                var fieldName = $(this).attr('data-field');
                var fieldType = $(this).attr('data-type');
                
                FieldsFoundArray.push(fieldName);

                var value = '';
                if(jQuery(this).find('.get-input').is('img') && fieldType != 'multipicklist') {
                  value = undefined;
                }
                else if(fieldType == 'picklist') {
                    //find the select value
                    value = $(this).find('select').val();
                }
                else if (fieldType == 'reference') 
                {
                    if($(this).find('select').length == 0 && $(this).find('input').val() != '000000000000000') 
                    {
                        value = $(this).find('input').val();
                    }
                    else if ($(this).find('select').length == 1 && $(this).find('input').length > 0) {
                        value = $(this).find('input').val();
                    }
                    else 
                    {
                        value = $(this).find('select').val();
                    }
                }
                else if (fieldType == 'boolean') {
                    if($(this).find('input').is(':checked')) {
                        value = true;
                    }
                    else {
                        value = false;
                    }
                }
                else if (fieldType == 'multipicklist') {
                    //grab the select possibilities
                    var selectPossible = $row.find('select.get-input');
                    for(var i = 0; i < selectPossible.length; i++) {
                        var multiSelect = selectPossible[i];
                        
                        if(multiSelect.getAttribute('title') != null && multiSelect.getAttribute('title').indexOf('Chosen') >= 0) {
                            var selectOptions = $(multiSelect).find('option');
                            value = '';
                            for(var so = 0; so < selectOptions.length; so++) {
                                var $option = $(selectOptions[so]);
                                value += $option.text() + ';';
                
                            }
                            break;
                        }
                    }
                }
                else 
                {
                    value = $(this).find('.get-input').val();
                }

                //if(value != '' && value != undefined)
                if(value != undefined) 
                {
                    fields[fieldName] = value;
                }
            });

            //convert fields to an array (this used to be the structure so for now it's easier to just convert back)
            var fieldsArr = [];
            $.each(fields, function (name, val) {
                fieldsArr.push({ name: name, value: val });
            });
            fields = fieldsArr;

            //extend our request data with the new fields and fieldset
            requestData = $.extend(requestData , {fields : JSON.stringify(fields), fieldSet : MA.CheckIn.general['Activity-FieldSet']} );
            $('#CustomDispositionPopup .customDis-buttons').data('dispositionData',requestData);

            CheckIn(marker,function(response) {
                var CheckInId = response.taskId || response.eventId;
                if (CheckInId) {
                    var isC2C = false;
                    if($button.hasClass('c2cAction')) {
                        isC2C = true;
                    }
                
                    if (!MA.enabledFeatures.autoCheckOut) {
                        if(!isC2C) {
                            $button.data('CheckInId', CheckInId).text("{!$Label.sma__maactionframework_check_out}").attr('data-action', 'Check Out');
                        }
                        else {
                            //hide check in, show check out
                            $button.hide();
                            $button.closest('.buttons').find('.checkOut').show();
                        }
                    }
                    
                    //add this check in record to the raw plot data
                    if (CheckInId.substring(0,3) == '00T') {
                        if (!record.record.Tasks) { record.record.Tasks = {records: []}; }
                        record.record.Tasks.records.push({
                            Id: CheckInId, 
                            IsClosed: MA.enabledFeatures.autoCheckOut
                        });
                    }
                    else {
                        if (!record.record.Events) { record.record.Events = {records: []}; }
                        record.record.Events.records.push({
                            Id: CheckInId,
                            Subject: MA.enabledFeatures.autoCheckOut ? 'Check Out @' : 'Check In @'
                        });
                    }
                }
                $('#CustomDispositionPopup #customDis-loadmask').hide();
                //reset the disposistion
                cancelDisposition();
            });
        });
    });
}

function ShowCheckOutDisposition (options) {
    var record = options.record;
    var marker = options.marker;
    var $button = options.button;
    var checkInId = $button.data('CheckInId');

    //query for task id info, fields may be in field set
    var queryString = 'Select Subject,';
    var fieldsArr = [];
    for(key in MA.CheckIn.general) {
        var field = MA.CheckIn.general[key];
        if(key != 'AutoCheckOutEnabled' && key != 'Activity-FieldSet' && field != 'Select') {
            //queryString = queryString + ' ' + field+',';
            if($.inArray(field , fieldsArr) === -1) fieldsArr.push(field );
        }
    }
    queryString += fieldsArr.join();
    queryString += " From Task Where Id = '"+checkInId+"'";
    
    var processData = { 
        ajaxResource : 'MATooltipAJAXResources',
        
        action: 'do_query',
        q: queryString
    };
    
    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
        processData,
        function(response, event){
            if(response.records) {
                var record = response.records[0];
                //show the disposition
                $('#CustomDispositionPopup .customDis-buttons .saveDisposition').remove();
                var $but = $('<button class="saveDisposition MAbutton button-blue">Finish</button>');
                $('#CustomDispositionPopup .customDis-buttons').prepend($but);
                $('#customDis-loadmask').show();
                $('#CustomDispositionPopup').show();
    
                //show the disposition
                var fieldSetName = MA.CheckIn.general['Activity-FieldSet']; 
                $("#customDis-fieldset").html('Loading...').load(MA.resources.CustomDisposition, 'fieldset=' + fieldSetName + '&platform=' + (MA.IsMobile ? 'tablet' : 'desktop'), function () {
                    $('#customDis-loadmask').hide();
    
                    //fill
                    try { $('#customDis-fieldset .fieldInput[data-field="Subject"]').find('.get-input').val(record.Subject); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="Status"]').find('.get-input').val('Completed'); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutAccuracy"]+'"]').find('.get-input').val(myCachedPositionInfo.coords.accuracy); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDate"]+'"]').find('.get-input').val(UserContext.today); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDistanceFromRecord"]+'"]').find('.get-input').val(distance*0.000621371); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLatitude"]+'"]').find('.get-input').val(myCachedPosition.lat()); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLongitude"]+'"]').find('.get-input').val(myCachedPosition.lng()); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLatitude"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-CreatedLatitude"]]); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLongitude"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-CreatedLongitude"]]); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLocationAccuracy"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-CreatedLocationAccuracy"]]); } catch (err) {}
                    try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-DistanceFromRecord"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-DistanceFromRecord"]]); } catch (err) {}
                });
    
                $but.on('click',function() {
                    //get the field data
                    var fields = {};
                    var FieldsFoundArray = [];
    
                    //show loading
                    $('#CustomDispositionPopup #customDis-loadmask').show();
    
                    //grab fields from the field set
                    $('#customDis-fieldset [class^="field::"]').each(function () 
                {
                    var $row = $(this);
                    var fieldName = $(this).attr('data-field');
                    var fieldType = $(this).attr('data-type');
                    
                    FieldsFoundArray.push(fieldName);
    
                    var value = '';
                    if(jQuery(this).find('.get-input').is('img') && fieldType != 'multipicklist') {
                      value = undefined;
                    }
                    else if(fieldType == 'picklist') {
                        //find the select value
                        value = $(this).find('select').val();
                    }
                    else if (fieldType == 'reference') 
                    {
                        if($(this).find('select').length == 0 && $(this).find('input').val() != '000000000000000') 
                        {
                            value = $(this).find('input').val();
                        }
                        else if ($(this).find('select').length == 1 && $(this).find('input').length > 0) {
                            value = $(this).find('input').val();
                        }
                        else 
                        {
                            value = $(this).find('select').val();
                        }
                    }
                    else if (fieldType == 'boolean') {
                        if($(this).find('input').is(':checked')) {
                            value = true;
                        }
                        else {
                            value = false;
                        }
                    }
                    else if (fieldType == 'multipicklist') {
                        //grab the select possibilities
                        var selectPossible = $row.find('select.get-input');
                        for(var i = 0; i < selectPossible.length; i++) {
                            var multiSelect = selectPossible[i];
                            
                            if(multiSelect.getAttribute('title') != null && multiSelect.getAttribute('title').indexOf('Chosen') >= 0) {
                                var selectOptions = $(multiSelect).find('option');
                                value = '';
                                for(var so = 0; so < selectOptions.length; so++) {
                                    var $option = $(selectOptions[so]);
                                    value += $option.text() + ';';
                    
                                }
                                break;
                            }
                        }
                    }
                    else 
                    {
                        value = $(this).find('.get-input').val();
                    }
    
                    //if(value != '' && value != undefined)
                    if(value != undefined) 
                    {
                        fields[fieldName] = value;
                    }
                });
    
                    //convert fields to an array (this used to be the structure so for now it's easier to just convert back)
                    var fieldsArr = [];
                    $.each(fields, function (name, val) {
                        fieldsArr.push({ name: name, value: val });
                    });
                    fields = fieldsArr;
    
                    //store the request data for saving
                    var dispositionData = {fields : JSON.stringify(fields), fieldSet : MA.CheckIn.general['Activity-FieldSet']};
                    $('#CustomDispositionPopup .customDis-buttons').data('dispositionData',dispositionData);
    
                    CheckOut(marker,$button.data('CheckInId'),function(CheckInId) {
                        var isC2C = false;
                        if($button.hasClass('c2cAction')) {
                            isC2C = true;
                        }
    
                        if(!isC2C) {
                            $button.data('CheckInId', null).text('Check In');
                        }
                        else {
                            //hide check in, show check out
                            $button.data('CheckInId', null).hide();
                            $button.closest('.buttons').find('.checkIn').show();
                        }
    
                        //update this check in record in the raw plot data
                        if (CheckInId.indexOf('00T') == 0) {
                            var rec = options.record;
                            jQuery.each(rec.record.Tasks.records, function (index, task) {
                                if (task.Id == CheckInId) {
                                    task.IsClosed = true;
                                    return false;
                                }
                            });
                        }
                        else {
                            jQuery.each(rec.record.Events.records, function (index, event) {
                                if (event.Id == CheckInId) {
                                    event.Subject = event.Subject.replace('Check In @', 'Check Out @');
                                    return false;
                                }
                            });
                        }
                        $('#CustomDispositionPopup #customDis-loadmask').hide();
                        //reset the disposistion
                        cancelDisposition();
                    });
                });
            }
        },{buffer:false,escape:false}
    );
}

function cancelDisposition () {
    //clear the inputs
    $('#CustomDispositionPopup .get-input').val('');

    //remove data
    $('#CustomDispositionPopup .customDis-buttons').removeData('dispositionData');

    //close the popup
    $('#CustomDispositionPopup').hide();
}

function CheckIn(pMarker, callback)
{
    //check if we have a field set
    var fieldSet = false;
    if(MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select') {
        fieldSet = true;
    }

    //myCachedPositionInfo is populated from watchPosition
    if (myCachedPositionInfo != null)
    {
        //calculate the distance between the marker that was clicked and the current location and then check in
        var requestData = {
            action      : 'check_in',
            SavedQueryId: pMarker.SavedQryId || '',
            id: UserId,
            lid:pMarker.record.record.Id,
            tooltip1: pMarker.title || pMarker.record.record.Id,
            clat: myCachedPositionInfo.coords.latitude,
            clong: myCachedPositionInfo.coords.longitude,
            caccuracy: myCachedPositionInfo.coords.accuracy,
            length: google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude), pMarker.getPosition())
        };

        //check if we have a field set
        if(fieldSet) {
            dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
            requestData = $.extend(requestData , dispositionData );
        }
        
        $.extend(requestData,{
            ajaxResource : 'MATooltipAJAXResources',
        });
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            requestData,
            function(json, event){
                if(json.success)
                {
                    NotifyWarning("Successfully checked in!", '');
                    try { callback(json); } catch (err) { MALog('Unable to perform check in callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                }
                else
                {
                    //check if error msgs
                    var errorMsg = 'Field Set Error:';
                    if(json.errMsgs) {
                        for(i=0; i < json.errMsgs.length;i++) {
                            errorMsg += '</br>' + json.errMsgs[i];
                        }
                    }
                    else { errorMsg = json.error; }
                    NotifyError("Error Checking In", errorMsg);
                    $('#CustomDispositionPopup #customDis-loadmask').hide();
                }
            },{buffer:false,escape:false}
        );
        
    }
    else
    {
        var requestData = {
            action      : 'check_in',
            SavedQueryId: pMarker.SavedQryId || '',
            id: UserId,
            lid:pMarker.record.record.Id,
            tooltip1: pMarker.title || pMarker.record.record.Id,
            clat: '',
            clong: '',
            caccuracy: '',
            length: ''
        };

        //check if we have a field set
        if(fieldSet) {
            dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
            requestData = $.extend(requestData , dispositionData );
        }

        $.extend(requestData,{
            ajaxResource : 'MATooltipAJAXResources',
        });
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            requestData,
            function(json, event){
                if(json.success)
                {
                    NotifyWarning("Successfully checked in!", '');
                    try { callback(json); } catch (err) { MALog('Unable to perform check in callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                }
                else
                {
                    //check if error msgs
                    var errorMsg = 'Field Set Error:';
                    if(json.errMsgs) {
                        for(i=0; i < json.errMsgs.length;i++) {
                            errorMsg += '</br>' + json.errMsgs[i];
                        }
                    }
                    else { errorMsg = json.error; }
                    NotifyError("Error Checking In", errorMsg);
                    $('#CustomDispositionPopup #customDis-loadmask').hide();
                }
            },{buffer:false,escape:false}
        );
    }
}

function CheckOut(pMarker, checkInId, callback)
{
    //check if we have a field set
    var fieldSet = false;
    if(MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select') {
        fieldSet = true;
    }

    if (myCachedPositionInfo != null)
    {
        //calculate the distance between the marker that was clicked and the current location and then check in
        var requestData = {
            action      : 'check_out',
            checkInId   : checkInId,
            clat        : myCachedPositionInfo.coords.latitude,
            clong       : myCachedPositionInfo.coords.longitude,
            caccuracy   : myCachedPositionInfo.coords.accuracy,
            distance    : google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude), pMarker.getPosition())
        };

        //check if we have a field set
        if(fieldSet) {
            var dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
            requestData = $.extend(requestData , dispositionData );
        }

        $.extend(requestData,{
            ajaxResource : 'MATooltipAJAXResources',
        });
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            requestData,
            function(response, event){
                if(response.success)
                {
                    NotifyWarning("Successfully checked out!", '');
                    try { callback(response.checkInId); } catch (err) { MALog('Unable to perform check out callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                }
                else
                {
                    //check if error msgs
                    var errorMsg = 'Field Set Error:';
                    if(response.errMsgs) {
                        for(i=0; i < response.errMsgs.length;i++) {
                            errorMsg += '</br>' + response.errMsgs[i];
                        }
                    }
                    else { errorMsg = response.error; }
                    NotifyError("Error Checking In", errorMsg);
                    $('#CustomDispositionPopup #customDis-loadmask').hide();
                }
            },{buffer:false,escape:false}
        );
    }
    else
    {
        var requestData = {
            action      : 'check_out',
            checkInId   : checkInId,
            clat        : '',
            clong       : '',
            caccuracy   : '',
            distance    : ''
        };
        //check if we have a field set
        if(fieldSet) {
            var dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
            requestData = $.extend(requestData , dispositionData );
        }
        $.extend(requestData,{
            ajaxResource : 'MATooltipAJAXResources',
        });
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            requestData,
            function(response, event){
                if(response.success)
                {
                    NotifyWarning("Successfully checked out!", '');
                    try { callback(response.checkInId); } catch (err) { MALog('Unable to perform check out callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                }
                else
                {
                    //check if error msgs
                    var errorMsg = 'Field Set Error:';
                    if(response.errMsgs) {
                        for(i=0; i < response.errMsgs.length;i++) {
                            errorMsg += '</br>' + response.errMsgs[i];
                        }
                    }
                    else { errorMsg = response.error; }
                    NotifyError("Error Checking In", errorMsg);
                    $('#CustomDispositionPopup #customDis-loadmask').hide();
                }
            },{buffer:false,escape:true}
        );
    }
}

function RemoveMarker(pMarker, options)
{
    options = $.extend({ updateQueryInfo: true }, options);

    //keep track of record info
    var record = pMarker.record;
    var $plottedQuery = record.plottedQuery;
    
    //delete record
    delete $plottedQuery.data('records')[record.record.Id];
    
    //remove any markers from the map
    if ($plottedQuery.find('.renderButtons-button.markers').is('.on') && record.marker && record.isVisible) {
        record.marker.setMap(null);
    }
    if ($plottedQuery.find('.renderButtons-button.cluster').is('.on') && record.clusterMarker && record.isClustered) {
        $plottedQuery.data('clusterGroup').removeMarker(record.clusterMarker);
    }
    if ($plottedQuery.find('.renderButtons-button.scatter').is('.on') && record.scatterMarker && record.isScattered) {
        record.scatterMarker.setMap(null);
    }

    if (options.updateQueryInfo) {
        updateQueryInfo($plottedQuery);
    }
}

function SetVerifiedLocation(pMarker)
{
    //attempt to find the current location
    navigator.geolocation.getCurrentPosition(
        function(position) {
        
            //send request to update the verified lat/long for this record
            var requestData = {
                action          : 'set_verified_location',
                baseObjectId    : pMarker.record.plottedQuery.data('BaseObjectId'),
                recordId        : pMarker.record.record.Id,
                latitude        : position.coords.latitude,
                longitude       : position.coords.longitude
            };
            $.extend(requestData,{
                ajaxResource : 'MATooltipAJAXResources',
            });
            
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                requestData,
                function(response, event){
                    if(response.success)
                    {
                        //update the verified latitude and longitude on this marker
                        pMarker.Lat = pMarker.record.markerLatitude = pMarker.record.verifiedLatitude = position.coords.latitude;
                        pMarker.Long = pMarker.record.markerLongitude = pMarker.record.verifiedLongitude = position.coords.longitude;
                        pMarker.setPosition(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
                    }
                    else
                    {
                        //show error
                        NotifyError('Error', 'Unable to set verified location');
                    }
                },{buffer:false,escape:false}
            );
        },
        function (e) {
            
            //log error
            MALog(e);
            
            //show error
            var errorMsg = "Location could not be determined";
            NotifyError("Error Getting Position", errorMsg);
        }
    );
}

function marker_Click(options)
{
    
    options = $.extend({
        markerType: 'marker'
    }, options || {});
    
    var marker = this;
    var record = this.record;
    var queryMetadata = record.plottedQuery.data();
        
    //start building tooltip content from template
    var $tooltipContent = $('#tooltip-content-template').clone().attr('id', 'tooltip-content');
            
    //remove related list tab if not needed
    if (queryMetadata.relatedListCount == 0) { 
        $tooltipContent.find('#tab-relatedlist').remove(); 
    }
    
    //remove weather tab if not needed
    if (!userSettings.ShowWeather) {
        $tooltipContent.find('#tab-weather').remove();
    }
            
    //show picklist field info if needed 
    if (queryMetadata.markerMetadata.ColorAssignmentType == 'Dynamic, Field') { 
        $tooltipContent.find('.picklistinfo').show(); 
    }
            
    //show dynamic order if needed
    if (queryMetadata.markerMetadata.ColorAssignmentType == 'Dynamic-Order') {
        var recordIndex = record.index + 1;
        var recordIndexPixelOffset = (((recordIndex+'').length - 1) * 5) + 20;
        $tooltipContent.find('.tooltip-header').css('padding-left',  recordIndexPixelOffset+'px').append("<div class='tooltip-header-order'>"+recordIndex+"</div>");
    }
            
    //add tooltips
    var $tooltips = $tooltipContent.find('.tooltips > table');
    var tooltip1Value = 'Tooltip 1';
    $.each(queryMetadata.tooltips, function (index, tooltip) 
    {
        //if this is the first tooltip, keep track of the value for use later.  otherwise, append it to the tooltips
        if (index == 0)
        {
            tooltip.needsLink = true;
            tooltip1Value = extractTooltipValue(tooltip, record);
            $tooltipContent.find('.name').html(tooltip1Value);
        }
        else
        {
            //create a new tooltip row
            var $newTooltip = $("<tr class='tooltip-row'><td class='icon'></td><td class='label'><b>"+htmlEncode(tooltip.FieldLabel)+"</b></td><td class='value'>"+extractTooltipValue(tooltip, record)+"</td></tr>");
            if ( !(/tooltip/i).test(tooltip.TooltipType) ) {
                var newTooltipTitle = typeof tooltip.TooltipType == 'string' ? tooltip.TooltipType.split(':').reduce(function(acc, curr){return curr+' '+acc}) + ' field' : 'field';
                $newTooltip.find('.icon').attr('title', newTooltipTitle);
            }
            
            //if this tooltip row is for a textarea, allow wrapping
            if (tooltip.DisplayType == 'TEXTAREA') {
                $newTooltip.find('td.label').css('vertical-align', 'top');
                $newTooltip.find('td.value').css('white-space', 'normal');
            }
            
            // assign classes
            if(typeof tooltip.TooltipType == 'string')
            {
                tooltip.TooltipType.split(':').map(function(item){ $newTooltip.addClass(item); });
            }
            
            //append this new row to the tooltips table
            $newTooltip.appendTo($tooltips).data('tooltip', tooltip);
        }
    });

    //populate template merge fields
    $tooltipContent = $(
        $tooltipContent.wrap('<div></div>').show().parent().html()
            .replace(/::ContentKey::/g, record.contentKey)
            .replace(/\/::Id::/g, MA.SitePrefix+'/'+record.record.Id)
            .replace(/::Name::/g, tooltip1Value)
            .replace(/::Address::/g, record.markerAddress)
            .replace(/::PicklistFieldLabel::/g, 'PicklistFieldLabel')
            .replace(/::PicklistFieldValue::/g, 'PicklistFieldValue')
    );

    //launch infobubble
    MA.Map.InfoBubble.show({
        position: this.getPosition(),
        anchor: marker,
        minWidth: 450,
        content: $tooltipContent.get(0)
    });

    //update popup css for mobile
    MA.Map.InfoBubble._bubble.setBorderRadius(0);
    MA.Map.InfoBubble._bubble.setPadding(0);
    $(MA.Map.InfoBubble._bubble.contentContainer_).css('min-width', '415px');
    MA.Map.InfoBubble._bubble.arrowPosition_changed();

    //if this is sf1, navigate to the sf1 record when clicking the tooltip
    /*if (sforce && sforce.one) {
        $tooltipContent.find('.tooltip-header .name a').attr('href', '#').click(function (e) {
            sforce.one.navigateToSObject(record.record.Id);
            e.preventDefault();
        });
    }*/
    
    //handle clicking the take me there icon
    $tooltipContent.find('.take-me-there').click(function () {
        MAActionFramework.standardActions['Take Me There'].ActionValue.call(this, { records: [record], startPosition: myCachedPositionInfo });
    });

    //add position info
    if(myCachedPosition == null) {
        $tooltipContent.find('.position p').text('Distance could not be determined');
    }
    else {
        var positionInfo = {
            latitude    : myCachedPositionInfo.coords.latitude,
            longitude   : myCachedPositionInfo.coords.longitude,
            accuracy    : myCachedPositionInfo.coords.accuracy,
            distance    : google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude), record.marker.getPosition())
        };
        
        if(userSettings.RouteDefaults.unit == 'km') {
            if (positionInfo.distance > 999) {
                 positionInfo.distance =  (positionInfo.distance / 1000).toFixed(2) + ' km';
            } else {
                positionInfo.distance =  (positionInfo.distance).toFixed(2) + ' m';
            }
        } else {
            //simplify distance unit
            if (positionInfo.distance > 1610) {
                positionInfo.distance = (positionInfo.distance / unitFactors['MILES']['METERS']).toFixed(2) + ' mi';
            }
            else {
                positionInfo.distance = (positionInfo.distance / unitFactors['YARDS']['METERS']).toFixed(2) + ' yd';
            }
        }
    
        //update position info
        $tooltipContent.find('.position p').text(positionInfo.distance + MASystem.Labels.FROM_CURRENT_LOCATION);
    }

    //handle clicking the weather tab
    $tooltipContent.find('#tab-weather a').click(function () {
            
        //build a request url 
        var AJAXURL = "https://api.aerisapi.com/forecasts/closest?p=[lat],[log]&client_id=aMmtNIJO93b1YWgxPPzjw&client_secret=N4Bbg4p2hMMhXgO7NgNwGxTjHxbG0DbMeq9YZhPo"
            .replace('[lat]',marker.Lat)
            .replace('[log]',marker.Long);
     
        //show loading
        $('#weather-ajax-' + record.contentKey).html('Loading...');
 
        //send request to get weather content
        $.ajax({
            url: AJAXURL,
            dataType: "jsonp",
            success: function(json) {
                var WeatherIconURL = "{!$Resource.sma__WeatherIcons}";
                $.each(json.response[0].periods, function(index, value) {
                                
                    var WeatherObj = value;
                    var WeatherDate = new Date(value.timestamp * 1000);
                    if (index == 0)
                    {
                        $('#weather-ajax-' + record.contentKey).html(
                            $('#CurrentLocationWeatherTemplate').clone().html()
                                .replace(/::date::/g, WeatherDate.toLocaleDateString())
                                .replace(/::maxTempF::/g, WeatherObj['maxTempF'])
                                .replace(/::maxTempC::/g, WeatherObj['maxTempC'])
                                .replace(/::minTempC::/g, WeatherObj['minTempC'])
                                .replace(/::minTempF::/g, WeatherObj['minTempF'])
                                .replace(/::avgTempF::/g, WeatherObj['avgTempF'])
                                .replace(/::feelslikeF::/g, WeatherObj['feelslikeF'])
                                .replace(/::icon::/g, '<img src="' + WeatherIconURL + '/' + WeatherObj['icon'] + '" />')
                                .replace(/::weather::/g, WeatherObj['weather'])
                                .replace(/::pop::/g, WeatherObj['pop'])
                                .replace(/::humidity::/g, WeatherObj['humidity'])
                                .replace(/::windDir::/g, WeatherObj['windDir'])
                                .replace(/::windSpeedMPH::/g, WeatherObj['windSpeedMPH'])
                        );
                    }
                    else
                    {
                        $('#weather-ajax-' + record.contentKey).append(
                            $('#LocationWeatherTemplate').clone().html()
                                .replace(/::date::/g, WeatherDate.toLocaleDateString())
                                .replace(/::maxTempF::/g, WeatherObj['maxTempF'])
                                .replace(/::maxTempC::/g, WeatherObj['maxTempC'])
                                .replace(/::minTempC::/g, WeatherObj['minTempC'])
                                .replace(/::minTempF::/g, WeatherObj['minTempF'])
                                .replace(/::icon::/g, '<img src="' + WeatherIconURL + '/' + WeatherObj['icon'] + '" />')
                                .replace(/::weather::/g, WeatherObj['weather'])
                                .replace(/::pop::/g, WeatherObj['pop'])
                                .replace(/::humidity::/g, WeatherObj['humidity'])
                                .replace(/::windDir::/g, WeatherObj['windDir'])
                                .replace(/::windSpeedMPH::/g, WeatherObj['windSpeedMPH'])
                        );
                    }
                    MA.Map.InfoBubble.adjust();
                            
                });
            },
            error: function () {
                MA.log('Unable to get weather data');
            }
        });
    });
            
    //build actions layout using the button set settings
    if (!userSettings.ButtonSetSettings)
    {
    }
    else if (!userSettings.ButtonSetSettings.tooltipLayout)
    {
    }
    else
    {
        var tooltipLayout = userSettings.ButtonSetSettings.tooltipLayout;
        var $tooltipLayout = $tooltipContent.find('.layout-tooltip');
        $.each(tooltipLayout, function (sectionIndex, section) {
                
            //add this section
            var $section = $('#templates .buttonset-section').clone().appendTo($tooltipLayout);
        
            $section.find('.buttonset-section-header').text(section.Label);
                    
            //loop over each column in this section
            $.each(section.Columns, function (columnIndex, column) {
                        
                //loop over each button in this column
                var $column = $section.find('.buttoncolumn').eq(columnIndex);
                $.each(column, function (buttonIndex, button) {
                            
                    //find the definition of this button in the action framework
                    var buttonDefinition = {};
                    if (button.Type == 'Custom Action' && MAActionFramework.customActions[button.Label]) {
                        $.extend(buttonDefinition, MAActionFramework.customActions[button.Label]);
                    }
                    else if (MAActionFramework.standardActions[button.Label]) {
                        $.extend(buttonDefinition, MAActionFramework.standardActions[button.Label]);
                    }
                    
                    //add this button
                    var $button = $('<div class="actionbutton" />').attr({'data-type': button.Type, 'data-action': button.Label}).text(buttonDefinition.Label).appendTo($column);
                            
                    //validate that this button meets mode requirements.  if it doesn't then disable it
                    if ($.inArray('Mobile', buttonDefinition.Modes) == -1) {
                        $button.addClass('disabled'); return;
                    }
                    
                    //validate that this button meets visibility requirements.  if it doesn't then disable it
                    $.each(buttonDefinition.Requirements, function (index, requirement) {
                        if (requirement == 'Activity Support' && !queryMetadata.supportsActivities) {
                            $button.addClass('disabled'); return false;
                        }
                        else if (requirement == 'Verified Location Support' && !(queryMetadata.coordinateFields.VerifiedLatitude && queryMetadata.coordinateFields.VerifiedLongitude)) {
                            $button.addClass('disabled'); return false;
                        }
                        else if (requirement == 'Contact Or Lead' && $.inArray(record.record.Id.substring(0, 3), ['003', '00Q']) == -1) {
                            $button.addClass('disabled'); return false;
                        }
                        else if (requirement == 'Chatter Support' && !queryMetadata.supportsChatter) {
                            $button.addClass('disabled'); return false;
                        }
                    });
                    
                    //validate that this button meets render type requirements
                    if (buttonDefinition.RenderModes && $.inArray(options.markerType, buttonDefinition.RenderModes) == -1) {
                        $button.addClass('disabled');
                    }
                        
                });
                
            });
        });
    }
            
    //show chatter tab if needed
    if (queryMetadata.supportsChatter) {
        $tooltipContent.find('#tab-chatter').show().find('a').data('recordId', record.record.Id).data('contentKey', record.contentKey).data('loaded', false).click(function () {
            if (!$(this).data('loaded')) 
            {
                //mark as loaded so we don't load again
                $(this).data('loaded', true);
                
                //load chatter integration
                var $pane = $(this).closest('#tooltip-content').find('#pane-chatter-'+$(this).data('contentKey')).html("<div style='height: 285px;' />");
                var recordId = $(this).data('recordId');
                setTimeout(function () {
                    $pane.empty().append("<iframe src='"+MA.resources.ChatterFeed+"?entityId="+recordId+"' style='width: 100%; height: 285px;'></iframe>");
                }, 1000);
            }
            MA.Map.InfoBubble.adjust();
        });
    }
    else {
        $tooltipContent.find('#tab-chatter').remove();
    }
            
    //load related list integration
    if (queryMetadata.relatedListCount > 0)
    {
        $.ajax({
            url: MA.resources.RelatedLists,
            type: 'GET',
            dataType: 'HTML',
            data: {
                parentid : record.record.Id,
                sqid :  queryMetadata.id
            }
        })
        .complete(function(res){
            MA.Map.InfoBubble.adjust();
            if(res.statusText == 'OK') {
                var getHTML = res.responseText || '';
                var decodedHTML = htmlDecode(getHTML);
                $tooltipContent.find("#ajax-" + record.contentKey).html(decodedHTML);
                
                if (sforce && sforce.one)
                {
                    //this is sf1 so we need to modify links to open in sf1 instead of a new tab
                    $tooltipContent.find('#ajax-'+record.contentKey+' a.recordlink').each(function () {
                        if ($(this).attr('data-id')) {
                            //remove target="_blank" to keep from opening new tab in salesforce one
                            $(this).attr("target","");
                            $(this).attr('href', '#').click(function () {
                                sforce.one.navigateToSObject($(this).attr('data-id'));
                            });
                        }
                    });
                }
                
                MA.Map.InfoBubble.adjust();
            }
        });/*
        $tooltipContent.find("#ajax-" + record.contentKey)
            .html('Loading')
            .load(MA.resources.RelatedLists,"parentid=" + record.record.Id + '&sqid=' + queryMetadata.id, function () {
                if (sforce && sforce.one)
                {
                    //this is sf1 so we need to modify links to open in sf1 instead of a new tab
                    $tooltipContent.find('#ajax-'+record.contentKey+' a.recordlink').each(function () {
                        if ($(this).attr('data-id')) {
                            //remove target="_blank" to keep from opening new tab in salesforce one
                            $(this).attr("target","");
                            $(this).attr('href', '#').click(function () {
                                sforce.one.navigateToSObject($(this).attr('data-id'));
                            });
                        }
                    });
                }
                MA.Map.InfoBubble.adjust();
            });  */
    }
            
    //handle clicking an action button
    $tooltipContent.on('click', '.actionbutton', function (e) {
        var $button = $(this);
        var frameworkAction = $button.attr('data-type') == 'Custom Action'
            ? MAActionFramework.customActions[$button.attr('data-action')] || null
            : MAActionFramework.standardActions[$button.attr('data-action')] || null;
        
        if (frameworkAction) {
            switch (frameworkAction.Action)
            {
                case 'Iframe':
                        
                    //attempt to find the current location
                    navigator.geolocation.getCurrentPosition(
                        function(position) {
                        
                            //get a component index from the action framework to make this tab unique and build the iframe url 
                            var iframeURL = 
                                MA.resources.VFPageProxy+'?url=' +
                                encodeURIComponent(
                                    frameworkAction.ActionValue +
                                    (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '') +
                                    '&Button=' + encodeURIComponent(frameworkAction.Label) +
                                    '&RecordId=' + record.record.Id +
                                    '&Latitude=' + position.coords.latitude + 
                                    '&Longitude=' + position.coords.longitude +
                                    '&Accuracy=' + position.coords.accuracy +
                                    '&Distance=' + google.maps.geometry.spherical.computeDistanceBetween(record.marker.getPosition(), new google.maps.LatLng(position.coords.latitude, position.coords.longitude))
                                );
                                    
                            var $actionPane = $button.closest('.pane');
                            $actionPane.find('.layout-tooltip').hide();
                            $actionPane.css({ 'overflow-y': 'auto', 'padding': '0' });
                            $actionPane.append("<iframe src='"+iframeURL+"' scrolling='no' style='width: 100%; height: 300px;' />");
                        
                        },
                        function (e) {
                            
                            //log error
                            MALog(e);
                            
                            //get a component index from the action framework to make this tab unique and build the iframe url 
                            var iframeURL = 
                                MA.resources.VFPageProxy+'?url=' +
                                encodeURIComponent(
                                    frameworkAction.ActionValue +
                                    (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '') +
                                    '&Button=' + encodeURIComponent(frameworkAction.Label) +
                                    '&RecordId=' + record.record.Id +
                                    '&Latitude=' + 
                                    '&Longitude=' +
                                    '&Accuracy=' +
                                    '&Distance='
                                );
                                    
                            var $actionPane = $button.closest('.pane');
                            $actionPane.find('.layout-tooltip').hide();
                            $actionPane.css({ 'overflow-y': 'auto', 'padding': '0' });
                            $actionPane.append("<iframe src='"+iframeURL+"' scrolling='no' style='width: 100%; height: 300px;' />");
                        }
                    );
                    break;
                            
                case 'NewWindow':
                    if(myCachedPositionInfo) {
                        MA.Map.InfoBubble.hide();
                        var actionURL = 
                            frameworkAction.ActionValue +
                            (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams=1' : '') + 
                            '&Button=' + encodeURIComponent(frameworkAction.Label) + 
                            '&RecordId=' + record.record.Id + 
                            '&Latitude=' + myCachedPositionInfo.coords.latitude + 
                            '&Longitude=' + myCachedPositionInfo.coords.longitude +
                            '&Accuracy=' + myCachedPositionInfo.coords.accuracy +
                            '&Distance=' + google.maps.geometry.spherical.computeDistanceBetween(record.marker.getPosition(), new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude));
                        if(frameworkAction.Options.method == 'GET') {
                            if(frameworkAction.Options.addRecords) {
                                actionURL += '&'+frameworkAction.Options.paramName+'=' + record.record.Id;
                            }
                            window.open(actionURL);
                            break;
                        }
                        else {
                            var postData = {};
                            if(frameworkAction.Options.addRecords) {
                                postData[frameworkAction.Options.paramName] = record.record.Id;
                            }
                            openNewWindow('POST', actionURL, postData, '_blank');
                            break;
                        }
                    } 
                    else {        
                        //attempt to find the current location
                        navigator.geolocation.getCurrentPosition(
                            function(position) {
                            
                                MA.Map.InfoBubble.hide();
                                var actionURL = 
                                    frameworkAction.ActionValue +
                                    (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams=1' : '') + 
                                    '&Button=' + encodeURIComponent(frameworkAction.Label) + 
                                    '&RecordId=' + record.record.Id + 
                                    '&Latitude=' + position.coords.latitude + 
                                    '&Longitude=' + position.coords.longitude +
                                    '&Accuracy=' + position.coords.accuracy +
                                    '&Distance=' + google.maps.geometry.spherical.computeDistanceBetween(record.marker.getPosition(), new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
                                if(frameworkAction.Options.method == 'GET') {
                                    if(frameworkAction.Options.addRecords) {
                                        actionURL += '&'+frameworkAction.Options.paramName+'=' + record.record.Id;
                                    }
                                    window.open(actionURL);
                                }
                                else {
                                    var postData = {};
                                    if(frameworkAction.Options.addRecords) {
                                        postData[frameworkAction.Options.paramName] = record.record.Id;
                                    }
                                    openNewWindow('POST', newURL, postData, '_blank');
                                }

                            },
                            function (e) {
                                
                                //log error
                                MALog(e);
                                
                                MA.Map.InfoBubble.hide();
                                var actionURL = 
                                    frameworkAction.ActionValue +
                                    (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams=1' : '') + 
                                    '&Button=' + encodeURIComponent(frameworkAction.Label) + 
                                    '&RecordId=' + record.record.Id + 
                                    '&Latitude=' +
                                    '&Longitude=' +
                                    '&Accuracy=' +
                                    '&Distance=';
                                window.open(actionURL);
                            }
                        );
                        break;
                    }
                                                                                
                case 'Javascript':
                
                    frameworkAction.ActionValue.call(this, {
                        button  : $button,
                        records : [record],
                        record  : record,
                        marker  : record.marker,
                        mode    : 'Mobile'
                    });
                    break;
                        
                default:
                    break;
            }
        }

        //stop the click from getting to the map
        e.stopPropagation();
    });
            
    //done setting up action buttons.  fire any ready functions that are attached to them
    $tooltipContent.find('.actionbutton').each(function () {
        var $button = $(this);
        var frameworkAction = $button.attr('data-type') == 'Custom Action'
            ? MAActionFramework.customActions[$button.attr('data-action')] || null
            : MAActionFramework.standardActions[$button.attr('data-action')] || null;
        
        if (frameworkAction) {
            if (frameworkAction.events && frameworkAction.events['ready']) {
                $.each(frameworkAction.events['ready'], function (index, method) {
                    method.call(this, {
                        button  : $button,
                        record  : record,
                        marker  : record.marker,
                        mode    : 'Mobile'
                    }); 
                });
            }
        }
    });
            
    //init navbar
    var navbarSizeMap = { 2: 'a', 3: 'b', 4: 'c', 5: 'd' };
    var navbarItemCount = $tooltipContent.find('.navbar li').length;
    $tooltipContent.find('.navbar').attr('data-grid', navbarSizeMap[navbarItemCount]).navbar().find('a').each(function () {
        $(this).click(function () {
            $tooltipContent.find('.navbar a').removeClass('ui-btn-active').filter(this).addClass('ui-btn-active');
            $tooltipContent.find('.pane').css({ height: '0', padding: '0' });
            $tooltipContent.find($(this).attr('data-pane')).css({ height: 'auto', padding: $(this).attr('data-padding') });
            MA.Map.InfoBubble.adjust();
        });
    });
    $tooltipContent.find('.navbar a').first().click();

    //show the default tab if there is one
    if (queryMetadata.advancedOptions) {
        var defaultTab = queryMetadata.advancedOptions.defaultTab || 'info';
        $tooltipContent.find('#tab-' + defaultTab + ' a').click();
    }
    else {
        MA.Map.InfoBubble.adjust();
    }
}

function closeActionIframe()
{
    $('#tooltip-content:visible .pane.actions iframe').remove();
    $('#tooltip-content:visible .pane.actions').css({ 'overflow-y': 'auto', 'padding': '10px' });
    $('#tooltip-content:visible .pane.actions .layout-tooltip').show();
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

var imgLoaderDimensions = {};
var imgLoaderCounts = {};
var imgLoaderIntervals = {};
function imgLoaded () 
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
    imgLoaderDimensions[this.imgId] = {
        width   : this.width,
        height  : this.height 
    };
}
function imgError ()
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
}

//find my position
var mypositionUpdating = false;
var watchID;
var moveTo = false;
var posInt = 0;
var myCachedPosition = null;
var myCachedPositionInfo = null;
var showError = true;
function myPosition (pan) {
    showError = true;
    //alert(myCachedPosition);
    
    moveTo = pan;
    if(mypositionUpdating == false)
    {
        if(watchID != null) {
            navigator.geolocation.clearWatch(watchID);
        }
        var geo_options = {
            enableHighAccuracy: true, 
            maximumAge        : 5000, 
            timeout           : 10000
        };

        //set to true until position is found
        mypositionUpdating = true;
        
        //locate position
        watchID = navigator.geolocation.watchPosition(onLocationFound, onLocationError,geo_options);

    }
}

function onLocationError(e) {
    //remove pulse and updating
    $('.myposition-button .current-location-svg').attr('class','current-location-svg');
    
    //just set to ATL
    //myCachedPosition = {lat:33.748547,lng:-84.391502};
    /*if (myCachedPositionInfo == null)
    {
        myCachedPositionInfo = null;
    }*/

    if(showError) {
       // NotifyError("Error Getting Position", 'Location could not be determined');
        showError = false;
    }
    mypositionUpdating = false;
    MA.log(e);
}
function onLocationFound(e) {
    
    myCachedPositionInfo = e;
    
    //store location
    myCachedPosition = new google.maps.LatLng(e.coords.latitude, e.coords.longitude);

    //remove previous position if found
    if(PositionMarker) {
        PositionMarker.setPosition(myCachedPosition);
        PositionMarker.gps= e;
        //remove pulse and updating
        mypositionUpdating = false;

        if(moveTo) {
            moveTo = false;
            //pan to position
            MA.map.panTo(myCachedPosition);
            MA.map.setZoom(12);
        }
    }
    else {
        var image = {
            url: "{!URLFOR($Resource.sma__MapAnything, 'images/myLocation3.png')}",
            size: new google.maps.Size(30, 30),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(10, 10),
            scaledSize: new google.maps.Size(20, 20)
        };
        PositionMarker = new google.maps.Marker({
            position: myCachedPosition,
            map: MA.map,
            icon: image,
            gps: e
        });

        //handle click
        google.maps.event.addListener(PositionMarker, 'click', function () {
            var marker = this;
    
            //create marker content
            var $MarkerBubbleContent = $(
                '<div>' +
                    '<table cellpadding="3">' +
                        '<tr><td><b>Accuracy</b></td><td>' + PositionMarker.gps.coords.accuracy + ' meters</td></tr>' +
                        '<tr><td><b>Address</b></td><td id="PositionAddress">' + ' Loading...</td></tr>' +
                    '</table>' +
                    '<div class="layout-tooltip" style="width: 100%; border-top: 1px solid #C0C0C0; padding: 10px 5px 5px 5px;">' +
                        MAActionFramework.buildLayoutFromContents(userSettings.ButtonSetSettings.myPositionLayout).html() +
                    '</div>' +
                '</div>'
            );
    
            //create info bubble
            MA.myPositionInfoBubble = MA.Map.InfoBubble.show({
                position: PositionMarker.getPosition(),
                minWidth: 300,
                content: $MarkerBubbleContent.get(0)
            });
    
            //reverse geocode and add address to infobubble
            google.maps.event.addListener(MA.myPositionInfoBubble, 'domready', function ()
            {
                //send reverse geocode request
                reverseGeocode({
                    latLng: PositionMarker.getPosition(),
                    complete: function (response) {
                        if (response.success && response.results.length > 0) {
                            $('#PositionAddress').text(response.results[0].formatted_address);
                        }
                        else {
                            $('#PositionAddress').text('');
                        }
                        MA.Map.InfoBubble.adjust();
                    }
                });
            });
    
            //handle clicking an action button
            $MarkerBubbleContent.find('.actionbutton').click(function (e) {
                var $button = $(this);
                var frameworkAction = $button.attr('data-type') == 'Custom Action'
                    ? MAActionFramework.customActions[$button.attr('data-action')] || null
                    : MAActionFramework.standardActions[$button.attr('data-action')] || null;
                
                if (frameworkAction) {
                    switch (frameworkAction.Action)
                    {
                        case 'Iframe':
                        
                            //get a component index from the action framework to make this tab unique and build the iframe url 
                            var componentIndex = MAActionFramework.componentIndex++;
                            var iframeURL = frameworkAction.ActionValue 
                                + (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '')
                                + '&Button=' + encodeURIComponent(frameworkAction.Label)
                                + '&RecordId=' + record.record.Id;
                            
                            //build the new tab and the corresponding pane
                            var $newTab = $("<li id='CustomTab-"+componentIndex+"'><a href='#pane-customaction-"+componentIndex+"'>"+frameworkAction.Label+"</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>");
                            var $newPane = $("<div id='pane-customaction-"+componentIndex+"'><iframe src='"+iframeURL+"' style='width: 100%; height: 100%;'></iframe></div>");
                            
                            //append the tab and pane to the tooltip tabs and refresh
                            $('#tooltip-content').find('.ui-tabs-nav').append($newTab).closest('.tabs').append($newPane).tabs('refresh').find('#CustomTab-'+componentIndex+' a').click();
                            
                            //handle clicking the close button for this new tab
                            $newTab.css({'width': 'auto', 'padding-right': '5px'}).find('.ui-icon-close').css({'cursor': 'pointer', 'position': 'absolute', 'right': '0'}).click(function () {
                                if ($newTab.is('.ui-tabs-active')) {
                                    $('#tooltip-content').find('.ui-tabs-nav > li:first-child a').click();
                                }
                                
                                $newTab.remove();
                                $newPane.remove();
                            });
    
                        break;
                        case 'NewWindow':
                        
                            var newURL = frameworkAction.ActionValue 
                                + (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '')
                                + '&Button=' + encodeURIComponent(frameworkAction.Label)
                                + '&type=My%20Position'
                                + '&latitude=' + PositionMarker.gps.coords.latitude
                                + '&longitude=' + PositionMarker.gps.coords.longitude
                                + '&address=' + $('#PositionAddress').text();
                            window.open(newURL);
    
                        break;
                        case 'Javascript':
                        
                            frameworkAction.ActionValue.call(this, {
                                mode: 'Mobile',
                                customMarkers: [{ type: 'MyPosition', title: 'My Position', latlng: new google.maps.LatLng(PositionMarker.gps.coords.latitude, PositionMarker.gps.coords.longitude), address: $('#PositionAddress').text() }]
                            });
    
                        break;
                        default:
                        
                        break;
                    }
                }
    
                //stop the click from getting to the map
                e.stopPropagation();
            });
    
            
        });

        mypositionUpdating = false;

        //pan to position
        MA.map.panTo(myCachedPosition);
    }
}

function GoToHomePosition()
{
    if (CenterLat == undefined && CenterLong == undefined && DefaultZoomLevel == undefined)
    {
        NotifyError("Home Not Set","Please Set Your Home First");
    }
    else
    {
        if (CenterLat != undefined && CenterLong != undefined)
        {
            MA.map.setCenter(new google.maps.LatLng(CenterLat, CenterLong));
            MA.map.setZoom(DefaultZoomLevel || MA.map.getZoom());
        }
    }
}

// JavaScript Document
function RemoveProximityCircle()
{
    ProximityCircle.setMap(null);
} 
        
function AddOval(Lat, Long, record)
{
    $('#ProximityType').val('Circle').change();

    //Check to see if Proximity Window is Open, if not open it.
    OpenMenuIfOpen('ProximityPopup');
    
    StorePreferredMeasurementType();
    
    //remove any current proximity objects
    if (pc_Added && ProximityCircle && ProximityCircle.length && ProximityCircle.length > 0) {
        try {
            $.each(ProximityCircle, function (index, proxCircle) {
                proxCircle.setMap(null);
            });
            ProximityCircle = null;
        }
        catch (err) { }
    }
    else if (pc_Added) {
        ProximityCircle.setMap(null);
    }

    pc_Lat = Lat;
    pc_Long = Long;
    
    var Radius = parseFloat(document.getElementById("ProximityRadius").value);
    var RadiusInMeters;
   
    //Need to Convert to Meters
    var MesType = document.getElementById("ProximityRadiusMeasurementType").value;
    
    if (MesType == "MILES")
    {
        //1 Mile = 1609.344 Meters
        RadiusInMeters = 1609.344 * Radius;
    }
    else if (MesType == "KM")
    {
        //1 Kilometer = 1000 Meters
        RadiusInMeters = 1000 * Radius;
    }
    else if (MesType == "METERS")
    {
        RadiusInMeters = Radius;
    }
    else if (MesType == "YARDS")
    {
        //1 Yard = 0.9144 Meters
         RadiusInMeters = 0.9144 * Radius;
    }
    else if (MesType == "FEET")
    {
        //1 Foot = 0.3048 Meters
        RadiusInMeters = 0.3048 * Radius;
    }
    
    pc_Diameter = RadiusInMeters * 2;
    
    //Check to make sure the Enabled Checkbox is Checked
    //This is primarily used when setting a marker as a circle center
    //and when using an address
    
    if (document.getElementById("ProximityCheckbox").checked == false)
    {
        $('#ProximityCheckbox').attr("checked",true).checkboxradio("refresh");
    }
    
    ProximityCircle = new google.maps.Circle({
        map: MA.map,
        center: new google.maps.LatLng(parseFloat(Lat), parseFloat(Long)),
        radius: RadiusInMeters,
        strokeColor: "#16325C",
        strokeWeight: 2,
        fillColor: "#3083d3",
        fillOpacity: 0.7,
        layerType: 'prox'
    });
    pc_Added = true;
    
    //update the address field on the proximity tab
    if (record) {
        $('#ProximityAddress').val('Lat: ' + record.markerLatitude + '\nLong: ' + record.markerLongitude);
    }
    else {
        $('#ProximityAddress').val('Lat: ' + Lat + '\nLong: ' + Long);
    }
    
    ChangeDivStatus("ProximityAddressStatus","");
    ChangeVisibilityWhenCircleIsAdded();
    HideLoadingDialog();
}

function ClickToCreateProximityCircle(event)
{
    //quick fix to remove this functionality
    return;

    ShowLoadingDialog();
    
    if (event.target === map) 
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    else if (event.target == ProximityCircle)
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    
    HideLoadingDialog();
    
}

function CreateFavorite(options)
{
    //prompt for favorite name
    var favoriteName = prompt('Enter a name for this location', options.name || '');
    if (favoriteName != null)
    {
        //save location
        var processData = {
            action : 'createFavoriteLocationMainTree',
            ajaxResource : 'MAFavoriteLocationsAJAXResources',
            serializedLocation : JSON.stringify(addNamespace(namespace, {
                Name                    : favoriteName,
                User__c                 : '{!$User.Id}',
                MapAnythingFolder__c    : null,
                Id                      : null,
                Latitude__c             : options.latlng.lat(),
                Longitude__c            : options.latlng.lng(),
                Address__c              : options.address,
                Description__c          : '',
                FavoriteMarker__c       : '#00FF00'
            }))
        };
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            processData,
            function(response, event){
                if(event.status) {
                    PlotFavoriteLocation({ id: response.data.Id });
                    if ($('#FolderSQList').attr('data-id') == 'PersonalRoot') {
                        RefreshMAFolder();
                    }
                }
            },{buffer: false,escape:false}
        );
    }
}

function CreateRecord_Launch(options)
{
    $('<div id="fade" style="filter: alpha(opacity=80);"></div>').appendTo('body').fadeIn();
    $('#createrecord-recordtype').closest('.createrecord-formitem').hide();
    $('#createrecord-fieldset-errors').hide();
    $('#CreateRecordPopup .createrecord-step').hide().first().show();
    $('#createrecord-loadmask').show();
    $('#CreateRecordPopup').show();

    var $objectPicklist = $('#createrecord-object').empty();
    var processData = { 
        ajaxResource : 'MATooltipAJAXResources',
        
        action: 'getClick2CreateSettings'
    };
    
    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
        processData,
        function(response, event){
            if (response.success) {
                userSettings.click2CreateSettings = $.extend({ settings: MA.Util.removeNamespace(response.settings) }, options);
                $.each(userSettings.click2CreateSettings.settings, function (objName, setting) {
                    if (setting.record[options.type+'Enabled__c']) {
                        $objectPicklist.append($('<option />').attr('value', objName).text(setting.objectLabel));
                    }
                });
                
                if ($objectPicklist.find('option').length == 0) {
                    CreateRecord_Cancel();
                    alert('Your organization has no Click2Create settings.  Please contact an admin for support.')
                }
                else {
                    $objectPicklist.change();
                }

                userSettings.click2CreateSettings.geoResponse = null;
                if (options.place) {
                    var resultMap = {};
                    var formattedAddress = getProperty(options,'place.formatted_address') || '';
                    var StreetAddressOrder = {
                        'street_number' : 0,
                        'route' : 1,
                        'subpremise' : 100
                    };
                    $.each(options.place.address_components, function (i, component) {
                        
                        $.each(component.types, function (j, type) {
                            
                            //resultMap[type] = component['short_name'];
                        
                            //compare formatted address order
                            if(type === "street_number" || type === "route" || type === "subpremise") {
                                var longName = component['long_name'];
                                var shortName = component['short_name'];
                                var longOrderIndex = formattedAddress.indexOf(longName);
                                var shortOrderIndex = formattedAddress.indexOf(shortName);
                                if(longOrderIndex > -1) {
                                    StreetAddressOrder[type] = longOrderIndex;
                                }
                                if(shortOrderIndex > -1) {
                                    StreetAddressOrder[type] = shortOrderIndex;
                                }
                                //StreetAddressOrder[type] = orderIndex;
                            }
                            
                            
                            //Add in the state code
                            if(type === 'administrative_area_level_1') {
                                resultMap['state_code'] = component['short_name'];
                            }
                            
                            //Add in the country code
                            if(type === 'country') {
                                resultMap['country_code'] = component['short_name'];
                            }
                            
                            resultMap[type] = component['long_name'];
                            
                        });
                        
                    });
                    userSettings.click2CreateSettings.geoResponse = {
                        result: {
                            IsBadAddress        : false,
                            Label               : 'ROOFTOP',
                            Relevance           : 100,
                            Latitude            : options.place.geometry.location.lat(),
                            Longitude           : options.place.geometry.location.lng(),
                            FormattedAddress    : options.place.formatted_address,
                            HouseNumber         : resultMap['street_number'] || '',
                            Street              : resultMap['route'] || '',
                            City                : resultMap['locality'] || '',
                            County              : resultMap['administrative_area_level_2'] || '',
                            State               : resultMap['administrative_area_level_1'] || '',
                            PostalCode          : resultMap['postal_code'] || '',
                            District            : resultMap['neighborhood'] || '',
                            Country             : resultMap['country'] || '',
                            StateCode           : resultMap['state_code'] || '',
                            CountryCode         : resultMap['country_code'] || ''
                        }
                    };
                    //console.log(111,userSettings.click2CreateSettings.geoResponse);
                    //complete street address (house number + route + subpremise)
                    var completeStreetAddressParts = [];
                    if (resultMap['street_number']) {
                        completeStreetAddressParts.push(resultMap['street_number']);
                    }
                    if (resultMap['route']) {
                        completeStreetAddressParts.push(resultMap['route']);
                    }
                    if (resultMap['subpremise']) {
                        completeStreetAddressParts.push('#' + resultMap['subpremise']);
                    }
                    userSettings.click2CreateSettings.geoResponse.result['CompleteStreetAddress'] = completeStreetAddressParts.join(' ');
                }
            }
        },{escape:false,buffer:false}
    );
}
function CreateRecord_Object_Change()
{
    $('#createrecord-loadmask').show();
    $('#createrecord-recordtype').closest('.createrecord-formitem').hide();
    
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    var $recordTypePicklist = $('#createrecord-recordtype').empty();
    var totalType = 0;
    var masterInfo = {
        html : null,
        found : false
    };
    $.each(setting.recordTypes, function (i, recordType) {
        
        if (recordType.available)
        {
            totalType++;
            if (recordType.recordTypeId == '012000000000000AAA')
            {
                if (setting.recordTypes.length > 1)
                {
                    //not sure why we are not showing master... if nothing is avaiable from the total, nothing get shown
                    //addressing above with totalType count.
                    masterInfo.found = true;
                    masterInfo.html = $('<option />').attr('value', recordType.recordTypeId).text(recordType.name + ' (System Default)');
                }
                else
                {
                    $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name + ' (System Default)'));
                }
                
            }
            else
            {
                $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name));
            }
            
            if (recordType.defaultRecordTypeMapping) 
            {
                $recordTypePicklist.val(recordType.recordTypeId);
            }
        }
        
        /*
        if (recordType.available && recordType.recordTypeId != '012000000000000AAA') {
            $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name));
            if (recordType.defaultRecordTypeMapping) {
                $recordTypePicklist.val(recordType.recordTypeId);
            }
        }
        */
    });
    
    if(masterInfo.found && totalType == 1) {
        //we need to put in the master record
        if(masterInfo.html != null) {
            $recordTypePicklist.append(masterInfo.html);
        }
    }
    
    /*
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    var $recordTypePicklist = $('#createrecord-recordtype').empty();
    $.each(setting.recordTypes, function (i, recordType) {
        if (recordType.available && recordType.recordTypeId != '012000000000000AAA') {
            $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name));
            if (recordType.defaultRecordTypeMapping) {
                $recordTypePicklist.val(recordType.recordTypeId);
            }
        }
    });
    */

    if ($recordTypePicklist.find('option').length > 1) {
        $recordTypePicklist.closest('.createrecord-formitem').show();
    }
    $('#createrecord-loadmask').hide();
}
function CreateRecord_Step1_Continue()
{
    var type = userSettings.click2CreateSettings.type;
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    
    var recordTypeId = $('#createrecord-recordtype').val();
    
    var fieldSetName = 'missing';
    
    if (setting.record.FieldSetOptions__c != undefined)
    {
        var FieldSetOptionsArray = JSON.parse(setting.record.FieldSetOptions__c);
        
        $.each(FieldSetOptionsArray, function (i, recordType) {
            if (recordTypeId == recordType.RecordTypeId)
            {
                if (type == "MyPosition")
                {
                    fieldSetName = recordType.MyPositionFieldSetAPIName;
                }
                else if (type == "POI")
                {
                    fieldSetName = recordType.POIFieldSetAPIName;
                }
            }
            
            
        });
        
    }
    else
    {
        fieldSetName = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()].record[userSettings.click2CreateSettings.type+'FieldSet__c'];
    }
    

    
    
    if (fieldSetName == 'missing')
    {
        alert('Unable to find Field Set, please contact your administrator');
    }
    else
    {
        
        $('#CreateRecordPopup .createrecord-step').hide();
        $('#createrecord-step2').show();
        $('#createrecord-loadmask').show();
        var platformOverride = getProperty( (MASystem || {}), 'Organization.EnableMobileLookupFields') || false;
        $("#createrecord-fieldset").html('Loading...').load(MA.resources.Click2Create, "sobject=" + $('#createrecord-object').val() + '&fieldset=' + fieldSetName + '&recordtypeid=' + ($('#createrecord-recordtype').val() || '') + '&platform=' + (platformOverride ? 'desktop' : 'tablet'), function () {
            function reverseGeocodeComplete (geoResponse) {
                if (userSettings.click2CreateSettings.type == 'MyPosition') {
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['MyPositionName__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.name); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['DefaultField__c']+'"]').find('.get-input').val(setting.record['MyPositionDefaultValue__c']); } catch (err) {}
                }
                else if (userSettings.click2CreateSettings.type == 'POI') {
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['POIName__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.name); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['POIPhone__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.phone || ''); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['POIWebsite__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.website || ''); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['DefaultField__c']+'"]').find('.get-input').val(setting.record['POIDefaultValue__c']); } catch (err) {}
                }
                else if (userSettings.click2CreateSettings.type == 'MapClick') {
    
                }
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Street__c']+'"]').find('.get-input').val(geoResponse.result.CompleteStreetAddress); } catch (err) {}
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'City__c']+'"]').find('.get-input').val(geoResponse.result.City); } catch (err) {}
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'State__c']+'"]').find('.get-input').val(geoResponse.result.State); } catch (err) {}
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'PostalCode__c']+'"]').find('.get-input').val(geoResponse.result.PostalCode); } catch (err) {}
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Country__c']+'"]').find('.get-input').val(geoResponse.result.Country); } catch (err) {}
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Latitude__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.position.lat()); } catch (err) {MA.log(err);}
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Longitude__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.position.lng()); } catch (err) {}
                $('#createrecord-loadmask').hide();
            }
    
            if (userSettings.click2CreateSettings.geoResponse) {
                reverseGeocodeComplete(userSettings.click2CreateSettings.geoResponse);
            }
            else {
                MA.Geocoding.reverseGeocode({ latLng: userSettings.click2CreateSettings.position }, function (geoResponse) {
                    userSettings.click2CreateSettings.geoResponse = geoResponse;
                    reverseGeocodeComplete(geoResponse);
                });
            }
        });
    }
}
function CreateRecord_Step2_Continue()
{
    $('#createrecord-loadmask').show();
    $('#createrecord-fieldset-errors').hide();

    //start collecting field values starting with default fields
    var geoResponse = userSettings.click2CreateSettings.geoResponse;
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    var type = userSettings.click2CreateSettings.type;
    var fields = {};


    
    
    var FieldsFoundArray = [];
    

    //now grab fields from the field set
    $('#createrecord-fieldset [class^="field::"]').each(function () {
        var fieldName = $(this).attr('data-field');
        var fieldType = $(this).attr('data-type');
        var $row = $(this);
        FieldsFoundArray.push(fieldName);

        var value = '';
        if(jQuery(this).find('.get-input').is('img') && fieldType != 'multipicklist') {
          value = undefined;
        }
        else if(fieldType == 'picklist') {
            //find the select value
            value = $(this).find('select').val();
        }
        else if (fieldType == 'reference') 
        {
            if($(this).find('select').length == 0 && $(this).find('input').val() != '000000000000000') 
            {
                value = $(this).find('input').val();
            }
            else 
            {
                value = $(this).find('select').val();
            }
        }
        else if (fieldType == 'boolean') {
            if($(this).find('input').is(':checked')) {
                value = true;
            }
            else {
                value = false;
            }
        }
        else if (fieldType == 'multipicklist') {
            //grab the select possibilities
            var selectPossible = $row.find('select.get-input');
            for(var i = 0; i < selectPossible.length; i++) {
                var multiSelect = selectPossible[i];
                
                if(multiSelect.getAttribute('title') != null && multiSelect.getAttribute('title').indexOf('Chosen') >= 0) {
                    var selectOptions = $(multiSelect).find('option');
                    value = '';
                    for(var so = 0; so < selectOptions.length; so++) {
                        var $option = $(selectOptions[so]);
                        value += $option.text() + ';';
        
                    }
                    break;
                }
            }
        }
        else 
        {
            value = $(this).find('.get-input').val();
        }

        //if(value != '' && value != undefined)
        if(value != undefined) 
        {
            fields[fieldName] = value;
        }
    });

    //Add Default values if they aren't already present on the form
    
    if (!MA.Util.isBlank(setting.record.DefaultField__c) && !MA.Util.isBlank(setting.record[type+'DefaultValue__c']) && $.inArray(setting.record[type+'DefaultValue__c'],FieldsFoundArray) == -1) {
        fields[setting.record.DefaultField__c] = setting.record[type+'DefaultValue__c'];
    }

    if (userSettings.click2CreateSettings.type == 'MyPosition') 
    {
        if (!MA.Util.isBlank(setting.record['MyPositionName__c']) && $.inArray(setting.record['MyPositionName__c'],FieldsFoundArray) == -1  ) { fields[setting.record['MyPositionName__c']] = userSettings.click2CreateSettings.name; }
        if (!MA.Util.isBlank(setting.record['DefaultField__c']) && !MA.Util.isBlank(setting.record['DefaultField__c'])) { fields[setting.record['DefaultField__c']] = setting.record['MyPositionDefaultValue__c']; }
    }
    else if (userSettings.click2CreateSettings.type == 'POI') 
    {
        if (!MA.Util.isBlank(setting.record['POIName__c']) && $.inArray(setting.record['POIName__c'],FieldsFoundArray) == -1) { fields[setting.record['POIName__c']] = userSettings.click2CreateSettings.name; }
        if (!MA.Util.isBlank(setting.record['POIPhone__c']) && $.inArray(setting.record['POIPhone__c'],FieldsFoundArray) == -1) { fields[setting.record['POIPhone__c']] = userSettings.click2CreateSettings.phone || ''; }
        if (!MA.Util.isBlank(setting.record['POIWebsite__c']) && $.inArray(setting.record['POIWebsite__c'],FieldsFoundArray) == -1) { fields[setting.record['POIWebsite__c']] = userSettings.click2CreateSettings.website || ''; }
        if (!MA.Util.isBlank(setting.record['DefaultField__c']) && !MA.Util.isBlank(setting.record['DefaultField__c'])) { fields[setting.record['DefaultField__c']] = setting.record['POIDefaultValue__c']; }
        if (!MA.Util.isBlank(setting.record['POIStateShort__c']) && !MA.Util.isBlank(setting.record['POIStateShort__c'])) { fields[setting.record['POIStateShort__c']] = geoResponse.result.StateCode; }
        if (!MA.Util.isBlank(setting.record['POICountryShort__c']) && !MA.Util.isBlank(setting.record['POICountryShort__c'])) { fields[setting.record['POICountryShort__c']] = geoResponse.result.CountryCode; }
    }
    
    //add address fields
    if (setting.record[type+'Street__c'] && $.inArray(setting.record[type+'Street__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Street__c']] = geoResponse.result.CompleteStreetAddress; }
    if (setting.record[type+'City__c'] && $.inArray(setting.record[type+'City__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'City__c']] = geoResponse.result.City; }
    if (setting.record[type+'State__c'] && $.inArray(setting.record[type+'State__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'State__c']] = geoResponse.result.State; }
    if (setting.record[type+'PostalCode__c'] && $.inArray(setting.record[type+'PostalCode__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'PostalCode__c']] = geoResponse.result.PostalCode; }
    if (setting.record[type+'Country__c'] && $.inArray(setting.record[type+'Country__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Country__c']] = geoResponse.result.Country; }
    if (setting.record[type+'Latitude__c'] && $.inArray(setting.record[type+'Latitude__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Latitude__c']] = userSettings.click2CreateSettings.position.lat(); }
    if (setting.record[type+'Longitude__c'] && $.inArray(setting.record[type+'Longitude__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Longitude__c']] = userSettings.click2CreateSettings.position.lng(); }
    


    //convert fields to an array (this used to be the structure so for now it's easier to just convert back)
    var fieldsArr = [];
    $.each(fields, function (name, val) {
        fieldsArr.push({ name: name, value: val });
    });
    fields = fieldsArr;
    
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    var recordTypeId = $('#createrecord-recordtype').val();
    var type = userSettings.click2CreateSettings.type;
    
    var fieldSetName = 'missing';
    
    if (setting.record.FieldSetOptions__c != undefined)
    {
        var FieldSetOptionsArray = JSON.parse(setting.record.FieldSetOptions__c);
        
        $.each(FieldSetOptionsArray, function (i, recordType) {
            if (recordTypeId == recordType.RecordTypeId)
            {
                if (type == "MyPosition")
                {
                    fieldSetName = recordType.MyPositionFieldSetAPIName;
                }
                else if (type == "POI")
                {
                    fieldSetName = recordType.POIFieldSetAPIName;
                }
            }
            
            
        });
        
    }
    else
    {
        fieldSetName = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()].record[userSettings.click2CreateSettings.type+'FieldSet__c'];
    }
    

    //create record
    var processData = { 
        ajaxResource : 'MATooltipAJAXResources',
        
        action: 'createRecord',
        sobject: $('#createrecord-object').val(),
        recordtypeid: $('#createrecord-recordtype').val() || '',
        fieldSet: fieldSetName,
        fields: JSON.stringify(fields)
    };
    
    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
        processData,
        function(response, event){
            if (!response.success) {
                var $errorList = $('#createrecord-fieldset-errors').empty();
                if(response.error) {
                      jQuery('<li/>').text(response.error).appendTo($errorList);
                    }
                else if (response.errors.length > 0) {
                    $.each(response.errors, function (i, errMsg) {
                        $('<li/>').text(errMsg).appendTo($errorList);
                    });
                }
                else {
                    $('<li>Unknown Error</li>').appendTo($errorList);
                }
                $errorList.show();
                $('#createrecord-loadmask').hide();
            }
            else {
                userSettings.click2CreateSettings.record = response.record;

                var recordId = response.record.Id;
                var recordName = MA.Util.isBlank(setting.record[type+'Name__c']) ? userSettings.click2CreateSettings.name : $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Name__c']+'"]').find('input').val();
                var markerShape = MA.Marker.shapes['Favorite'];
                var marker;
                if (!(window.ActiveXObject) && "ActiveXObject" in window) {
                    marker = new RichMarker({
                        map: MA.map,
                        position: userSettings.click2CreateSettings.position,
                        anchor: markerShape.anchor.Rich,
                        flat: true,
                        zIndex: 1000,
                        title: recordName,
                        record: { record: { Id: recordId } },
                        content: MAMarkerBuilder.createSVG({ type: 'Marker', color: '#FF8800:Favorite' })
                    });
                }
                else {
                    marker = new google.maps.Marker({
                        map: MA.map,
                        position: userSettings.click2CreateSettings.position,
                        icon: {
                            url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(MAMarkerBuilder.createSVG({ type: 'Marker', color: '#FF8800:Favorite' }))),
                            anchor: markerShape.anchor
                        },
                        zIndex: 1000,
                        title: recordName,
                        record: { record: { Id: recordId } }
                    });
                }
                marker.record.marker = marker;
                MA.Map.click2CreateMarkers.push(marker);

                //handle marker click
                google.maps.event.addListener(marker, 'click', function ()
                {
                    //create tooltip content
                    var $tooltipContent = $([
                        '<div>',
                            '<div class="tooltip-header">',
                                '<div class="name"><a target="_blank" style="font-family: helvetica,arial,sans-serif;font-size: 12px;color: #2265BB;font-weight: bold;text-decoration: none;white-space: normal;" /></div>',
                                '<div class="address" style="margin: 3px 0 5px 0;padding: 0;font-family: helvetica,arial,sans-serif;font-size: 11px;font-weight: bold;text-decoration: none;color: #000;white-space: normal;" />',
                            '</div>',
                            '<div class="layout-tooltip">',
                                '<div class="buttonset-section-columns">',
                                    '<div class="buttoncolumn"><div class="actionbutton">Add to Route</div><div class="actionbutton">Take Me There</div></div>' +
                                    '<div class="buttoncolumn"><div class="actionbutton checkin">Check In</div></div>' +
                                    '<div class="buttoncolumn"><div class="actionbutton">Remove Marker</div></div>' +
                                '</div>',
                            '</div>',
                        '</div>'
                    ].join(''));

                    //populate values
                    if (sforce && sforce.one) {
                        $tooltipContent.find('.name a').attr('href', '#').attr('target','').text(recordName).click(function () { sforce.one.navigateToSObject(recordId) });
                    }
                    else {
                        $tooltipContent.find('.name a').attr('href', MA.SitePrefix+'/'+recordId).text(recordName);
                    }
                    $tooltipContent.find('.address').text(geoResponse.result.FormattedAddress).click(function () { launchNativeGPS(marker.getPosition().lat(), marker.getPosition().lng()); });

                    //update check in button to check out if needed
                    if (marker.record.record.Tasks) {
                         $.each(marker.record.record.Tasks.records || [], function (index, task) {
                             if (!task.IsClosed) {
                                 $tooltipContent.find('.actionbutton.checkin').data('CheckInId', task.Id).text('Check Out');
                                 return false;
                             }
                         });
                    }

                    //launch infobubble
                    MA.Map.InfoBubble.show({
                        position: this.getPosition(),
                        anchor: marker,
                        minWidth: 420,
                        content: $tooltipContent.get(0)
                    });

                    //handle action button clicks
                    $tooltipContent.find('.actionbutton').click(function () {
                        switch ($(this).text())
                        {
                            case 'Add to Route':
                                response.record.recordType = $('#createrecord-object').val();
                                MAActionFramework.standardActions['Add to Trip'].ActionValue({
                                    mode: 'Mobile',
                                    customMarkers: [{ type: type, title: recordName, latlng: marker.getPosition(), address: geoResponse.result.FormattedAddress, C2CRecord : response.record }]
                                });

                            break;
                            case 'Take Me There':

                                MAActionFramework.standardActions['Take Me There'].ActionValue({
                                    customMarkers: [{ type: type, title: recordName, latlng: marker.getPosition(), address: geoResponse.result.FormattedAddress }]
                                });

                            break;
                            case 'Check In':

                                MAActionFramework.standardActions['Check In'].ActionValue({
                                    mode: 'Mobile',
                                    button: $(this),
                                    records: [marker.record]
                                });

                            break;

                            case 'Check Out':

                                MAActionFramework.standardActions['Check Out'].ActionValue({
                                    mode: 'Mobile',
                                    button: $(this),
                                    records: [marker.record]
                                });

                            break;
                            case 'Remove Marker':

                                marker.setMap(null);

                            break;
                        }
                        MA.Map.InfoBubble.hide();
                    });
                });

                $('#CreateRecordPopup').hide();
                $('#fade').fadeOut(function () { $('#fade').remove(); });
            }
        },{buffer:false,escape:false}
    );
}
function CreateRecord_Cancel()
{
    $('#CreateRecordPopup').hide();
    $('#fade').fadeOut(function () { $('#fade').remove(); });
}

function ProximityCheckChanged(ElementObj)
{
    if (ElementObj.checked)
    {
        Debug("ProximityCheckbox Checked");
    }
    else
    {
        ShowLoadingDialog();
        pc_Added = false;
        
        try {
            $.each(ProximityCircle, function (index, proxCircle) {
                proxCircle.setMap(null);
            });
            ProximityCircle.setMap(null);
        }
        catch (err) {
            RemoveProximityCircle();
        }
        ChangeVisibilityWhenCircleIsAdded();
    }
}

function ProximityTypeChanged(ElementObj)
{
    if ($(ElementObj).val() == 'Circle')
    {
        $('#Proximity tr.isolinerow').hide();
        $('#Proximity tr.circlerow').show();
    }
    else if ($(ElementObj).val() == 'Isoline')
    {
        $('#Proximity tr.circlerow').hide();
        $('#Proximity tr.isolinerow').show();
    }
}

function ProximityUnitChanged(ElementObj)
{
    if ($(ElementObj).val() == 'Distance')
    {
        $('#ProximityIsolineMeasurementType').html('<option value="MILES">{!$Label.sma__maroutes_miles}</option><option value="KM">{!$Label.sma__maroutes_kilometers}</option><option value="METERS">{!$Label.sma__ma_meters}</option><option value="YARDS">{!$Label.sma__ma_yards}</option><option value="FEET">{!$Label.sma__ma_feet}</option>').selectmenu('refresh');
    }
    else if ($(ElementObj).val() == 'Time')
    {
        $('#ProximityIsolineMeasurementType').html('<option value="MINUTES">{!$Label.sma__ma_minutes}</option><option value="HOURS">{!$Label.sma__ma_hours}</option>').selectmenu('refresh');
    }
}

var unitFactors = {
    'MILES': { 'METERS': 1609.344, 'MILES': 1 },
    'KM': { 'METERS': 1000 },
    'METERS': { 'METERS': 1 },
    'YARDS': { 'METERS': 0.9144 },
    'FEET': { 'METERS': 0.3048 },
    'HOURS': { 'SECONDS': 3600 },
    'MINUTES': { 'SECONDS': 60 }
};

function CreateProximityAddress()
{
    var Address = document.getElementById("ProximityAddress").value;
    
    if (Address != null && Address != "")
    {
        ChangeDivStatus("ProximityAddressStatus","<i>Finding Address....</i>");
        
        Address = Address.replace("\n",",");
        
        //this will be called later once we have a lat/long
        function renderProximityShape(lat, long)
        {
            if ($('#ProximityType').val() == 'Circle')
            {
                AddOval(lat, long);
                ChangeDivStatus('ProximityAddressStatus', '');
            }
        }
        
        //remove any current proximity objects
        if (pc_Added && ProximityCircle && ProximityCircle.length && ProximityCircle.length > 0) {
            try {
                $.each(ProximityCircle, function (index, proxCircle) {
                    proxCircle.setMap(null);
                });
                ProximityCircle = null;
            }
            catch (err) { }
        }
        else if (pc_Added) {
            ProximityCircle.setMap(null);
        }
        
        //check if we have a lat/long or if we need to geocode
        var regExp = /^Lat: ([^\n]*)\nLong: ([^\n]*)$/;
        if (regExp.test($('#ProximityAddress').val()))
        {
            //we have a lat/long so parse and use it
            var matches = regExp.exec($('#ProximityAddress').val());
            renderProximityShape(parseFloat(matches[1]), parseFloat(matches[2]));
        }
        else
        {
            //geocode this address
            geocode({
                address: Address,
                complete: function (response)
                {
                    if (response.success)
                    {
                        //show the formatted address
                        $('#ProximityAddress').val(response.results.FormattedAddress);
                        
                        //render the proximity shape
                        renderProximityShape(parseFloat(response.results.Latitude), parseFloat(response.results.Longitude));
                    }
                    else
                    {
                        MALog('fail: ');
                    }
                }
            });
        }
    }
    else
    {
        Debug("Address is Blank");
        ChangeDivStatus("ProximityAddressStatus",'<span style="color:red;font-weight:bold;">Address is Blank</span>');
    }
}

function RedrawProxHitTestCanvases(options)
{
    $('[id^=proxHitTestCanvas-]').remove();
    proxHitTestCanvases = {};
    
    //clear the prox hit test circles
    proxHitTestCircles = [];
    
    //redraw each prox polygon on the appropriate prox hit test canvases and keep track of the circles
    var proxPolygons = [];
    $('#PlottedQueriesTable .layer.proximity').each(function () {
        var $layer = $(this);
        if ($layer.data('proxObject')) {
            if ($layer.find('.proximitytype').val() == 'KML') {
                $.each($layer.data('proxObject')._layers, function (index, obj) {
                    //proxPolygons.push(obj);
                });
            }
            else if ($layer.data('proxObject') instanceof L.Circle) {
                proxHitTestCircles.push($layer.data('proxObject'));
            }
            else {
                proxPolygons.push($layer.data('proxObject'));
            }
        }
        if ($layer.data('proxObjects')) {
            $.each($layer.data('proxObjects'), function (index, proxObject) {
                if (proxObject instanceof L.Circle) {
                    proxHitTestCircles.push(proxObject);
                }
                else {
                    proxPolygons.push(proxObject);
                }
            });
        }
    });
    $('#PlottedQueriesTable .PlottedRowUnit').each(function () {
        var $plottedQuery = $(this);
        $.each($plottedQuery.data('proximityObjects'), function (index, proxObject) {
            proxHitTestCircles.push(proxObject);
        });
    });
    
    //this is special just for the mobile page.  it can go away later
    try {
        if (pc_Added) {
            try {
                if (ProximityCircle instanceof L.Circle) {
                    proxHitTestCircles.push(ProximityCircle);
                }
                else {
                    proxPolygons.push(ProximityCircle);
                }
            }
            catch (err) {
                try {
                    $.each(ProximityCircle, function (index, proxObject) {
                        if (proxObject instanceof L.Circle) {
                            proxHitTestCircles.push(proxObject);
                        }
                        else {
                            proxPolygons.push(proxObject);
                        }
                    });
                }
                catch (err) { }
            }
        }
    }
    catch (err) { }
    
    //keep track of whether or not we have any prox objects
    proxHitTestNeeded = proxHitTestCircles.length + proxPolygons.length > 0;
    
    //actually add the prox polygons to the hit test canvases (in batches to avoid browser lock for large kmls)
    var $status = growlLoading($('#growl-wrapper'), 'Calculating proximity layers...');
    setTimeout(function doBatch () {
        
        //status
        $status = growlLoading($status, 'Calculating proximity layers...' + proxPolygons.length);
        
        //process this batch
        var count = 0;
        while (proxPolygons.length > 0)
        {
            count++;
            addProxLayerToHitTestCanvases(proxPolygons.shift());
            if (count > 1 && proxPolygons.length > 0) {
                count = 0;
                setTimeout(doBatch, 50);
                break;
            }
        }
        
        //done?
        if (proxPolygons.length == 0) {
            $status.remove();
            try {
                options.complete();
            }
            catch (err) {}
        }
        
    });
}
        
function ChangeVisibilityWhenCircleIsAdded()
{   
    //rebuild hit test shape manager
    MA.Map.hitTestShapeMgr = new MA.Map.ShapeManager();
    $('#PlottedQueriesTable .PlottedRowUnit').each(function () {
        var $plottedQuery = $(this);
        if($plottedQuery.hasClass('DataLayer')) {

        }
        else {
            if ($plottedQuery.data('proximityOptions').enabled && $plottedQuery.data('proximityOptions').affectVisibility) {
                $.each($plottedQuery.data('proximityObjects'), function (index, proxObject) {
                    if (proxObject.getMap() != null) {
                        MA.Map.hitTestShapeMgr.addLayer(proxObject);
                    }
                });
            }
        }
    });
    
    try {
        if (pc_Added) {
            try {
                MA.Map.hitTestShapeMgr.addLayer(ProximityCircle);
            }
            catch (err) {
                try {
                    $.each(ProximityCircle, function (index, proxObject) {
                        MA.Map.hitTestShapeMgr.addLayer(proxObject);
                    });
                }
                catch (err) { }
            }
        }
    }
    catch (err) { }

    //loop over each plotted query
    $('#PlottedQueriesContainer .PlottedRowUnit').each(function () {

        //determine which modes need to be rerendered
        var $plottedQuery = $(this);
        if($plottedQuery.hasClass('DataLayer')) {
            MADemographicLayer.RemoveLayerFromDom($plottedQuery,true,function() {
                //refresh the query
                MADemographicLayer.rerenderDataLayer($plottedQuery,function(res) {
                    //console.log(res);
                    $plottedQuery.removeClass('unloading');
                });
            });
        }
        else {
            $plottedQuery.addClass('unloading');
            var modesToRerender = [];
            if ($plottedQuery.find('.renderButtons-button.markers').is('.on')) { modesToRerender.push('Markers'); }
            if ($plottedQuery.find('.renderButtons-button.cluster').is('.on')) { modesToRerender.push('Cluster'); }
            if ($plottedQuery.find('.renderButtons-button.scatter').is('.on')) { modesToRerender.push('Scatter'); }
            
            //rerender this query as needed
            var queryProximityEnabled = ($plottedQuery.data('proximityOptions') && $plottedQuery.data('proximityOptions').enabled);
            if (!queryProximityEnabled && modesToRerender.length > 0) {
                setTimeout(function doRerender() {
                    
                    //rerender this mode
                    var mode = modesToRerender.shift();
                    unrenderQuery($plottedQuery, mode, function () {
                        $plottedQuery.removeClass('unloading').addClass('loading');
                        renderQuery($plottedQuery, mode, function () {
                        
                            //rerender the next mode or we're done
                            if (modesToRerender.length > 0) {
                                $plottedQuery.removeClass('loading').addClass('unloading');
                                setTimeout(doRerender);
                            }
                            else {
                                $plottedQuery.removeClass('loading');
                                $plottedQuery.find('.queryIcon').show();
                                $plottedQuery.find('.loading-icon').hide();
                                updateQueryInfo($plottedQuery);
                                
                                //reload any popups that this may have affected
                                refreshPopups();
                            }
                        
                        });
                    }); 
                    
                });
            }
            else 
            {
                //nothing to rerender
                $plottedQuery.removeClass('unloading');
            }
        }
    });    
}

function SetDefaultMapLocation()
{
    Debug("SetDefaultMapLocation");
    DisplayPropertiesOfObject(map);
    
    var processData = { 
        ajaxResource : 'MAUserAJAXResources',
        
        action: 'set_default_map_location',
        id: UserId,
        zoomlvl : map.zoomLevel,
        lat : map.center.latitude,
        long : map.center.longitude
    };
    
    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
        processData,
        function(json, event){
            if(json.success)
            {
                CenterLat = map.center.latitude;
                CenterLong = map.center.longitude;
                DefaultZoomLevel = map.zoomLevel;
        
                Debug("Default Location Saved");
                alert("Default Location Saved");
            }
            else
            {
                NotifyError("Error Updating Default Location",json.error);
                Debug("Error Updating Default Location " + json.error);
            }
        },{buffer:false,escape:false}
    );
}     
        
function StorePreferredMeasurementType()
{
    if (OnUserLoadEventCompletd)
    {
        var processData = { 
            ajaxResource : 'MAUserAJAXResources',
            
            action: 'store_pref_measure_type',
            id: UserId,
            preftype : document.getElementById("ProximityRadiusMeasurementType").value,
            proxrad : document.getElementById("ProximityRadius").value
        };
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            processData,
            function(json, event){
                if(json.success)
                {
                    Debug("Updated Preferred Unit of Measurement " + json.id);
                }
                else
                {
                    NotifyError("Error Updating Preferred Unit of Measurement:",json.error);
                    Debug("Error Updating Preferred Unit of Measurement: " + json.error);
                }
            },{buffer:false,escape:false}
        );
    }
}

function ToggleTrafficOverlay()
{
    MA.Map.trafficLayer = MA.Map.trafficLayer || new google.maps.TrafficLayer();
    if (!TrafficIsOn)
    {
        TrafficIsOn = true;
        MA.Map.trafficLayer.setMap(MA.map);
    }
    else
    {
        TrafficIsOn = false;
        MA.Map.trafficLayer.setMap(null);
    }
}

function NotifyError(pTitle,pMessage)
{
    $("#container").notify("create", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: false,
            speed: 100
        }
    );
}

function NotifyWarning(pTitle,pMessage)
{
    $("#container").notify("create", "Warning-Template", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: 5000,
            speed: 1000
        }
    );
}

function AbleToPlot(SavedQueryId)
{
    Debug("AbleToPlot: " + SavedQueryId);
    if ($.inArray(SavedQueryId, VisibleQueries) >= 0)
    {
        return false;
    }
    else
    {
        return true;
    }
}

function RemoveQueryIdFromVisibleQueries()
{
    /*Deprecated*/
    Debug("This Function Has Been Deprecated, Please Use RemoveSavedQuery(SavedQueryId)");
}

function GetAddressFieldResults(record, FieldName)
{
    var rValue = "";
    
    if (FieldName != null)
    {
        //Debug("GetAddressFieldResults - FieldName: " + FieldName);
        //Debug("GetAddressFieldResults - record: " + record);
        
        if (FieldName.indexOf(".") > -1)
        {
            if (record[FieldName.split(".")[0]] != null)
            {
                rValue = (record[FieldName.split(".")[0]][FieldName.split(".")[1]]) ? record[FieldName.split(".")[0]][FieldName.split(".")[1]] : "";
            }
        }
        else
        {
            rValue  = (record[FieldName]) ? record[FieldName] : "";
        }
    }
    
    return rValue;  
}

function GetFieldLabel(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.label;
        }
    }
    return "";
}

function GetFieldType(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.type;
        }
    }
    return "";
}

function GetFieldReferenceTo(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.relationshipName == FieldName)
        {
            return field.referenceTo;
        }
    }
    return "";
}

function GetRelationshipName(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.relationshipName;
        }
    }
    return "";
}

function unique(arrayName)
{
    //Return Unique Array
    var ReturnArray = new Array();
    $.each(arrayName, 
        function(index, value) 
        { 
            if ($.inArray(value, ReturnArray) < 0)
            {
                ReturnArray.push(value);
            } 
        }
    );
    
    return ReturnArray;
}
        
////////////////////  Format Tooltip Types  /////////////////////////////////////
var sforce = sforce || {};

sforce.internal = sforce.internal || {};
sforce.internal.stringToDateTime = function(source) {
    var bc = false;
    if (source === null || source.length === 0) {
        throw "Unable to parse dateTime1";
    }

    if (source.charAt(0) == '+') {
        source = source.substring(1);
    }
    if (source.charAt(0) == '-') {
        source = source.substring(1);
        bc = true;
    }

    if (source.length < 19) {
        throw ("Unable to parse dateTime2");
    }

    if (source.charAt(4) != '-' || source.charAt(7) != '-' ||
        source.charAt(10) != 'T') {
        throw ("Unable to parse dateTime3");
    }

    if (source.charAt(13) != ':' || source.charAt(16) != ':') {
        throw ("Unable to parse dateTime4");
    }

    var year = source.substring(0, 4);
    var month = source.substring(5, 7);
    var day = source.substring(8, 10);
    var hour = source.substring(11, 13);
    var min = source.substring(14, 16);
    var sec = source.substring(17, 19);

    var date = new Date(year, month-1, day, hour, min, sec);

    var pos = 19;

    // parse optional milliseconds
    if (pos < source.length && source.charAt(pos) == '.') {
        var milliseconds = 0;
        var start = ++pos;
        while (pos < source.length && sforce.internal.isDigit(source.charAt(pos))) {
            pos++;
        }
        var decimal = source.substring(start, pos);
        if (decimal.length == 3) {
            milliseconds = decimal;
        } else if (decimal.length < 3) {
            milliseconds = (decimal + "000").substring(0, 3);
        } else {
            milliseconds = decimal.substring(0, 3);
            if (decimal.charAt(3) >= '5') {
                ++milliseconds;
            }
        }

        date.setMilliseconds(milliseconds);
    }

    var offset = date.getTimezoneOffset() * 60000;
    //offset in milli;

    // parse optional timezone
    if (pos + 4 < source.length &&
    (source.charAt(pos) == '+' || (source.charAt(pos) == '-'))) {
        
        var hours = (source.charAt(pos + 1) - '0') * 10 + source.charAt(pos + 2) - '0';
        var mins = 0;
        if(source.charAt(pos + 3) == ':' )
        {
            mins = (source.charAt(pos + 4) - '0') * 10 + source.charAt(pos + 5) - '0';
            pos += 6;
        }       
        else
        {
            mins = (source.charAt(pos + 3) - '0') * 10 + source.charAt(pos + 4) - '0';
            pos += 5;
        }
        var mseconds = (hours * 60 + mins) * 60 * 1000;

        // subtract milliseconds from current date to obtain GMT
        if (source.charAt(pos) == '+') {
            mseconds = -mseconds;
        }

        date = new Date(date.getTime() - offset + mseconds);        
    }

    if (pos < source.length && source.charAt(pos) == 'Z') {
        pos++;
        date = new Date(date.getTime() - offset);
    }

    if (pos < source.length) {
        throw ("Unable to parse dateTime " + pos + " " + source.length);
    }

    return date;
};
function FormatsObjectValue(v, type, RefId, options)
{
    options = options || {};

    if(v == null) v = "";
    if(v != "")
    {
        type = type.toLowerCase();
        if(type == "boolean")
        {
            //this might be boolean or it might be a string
            if (typeof v == 'string') {
                v = v.toUpperCase();
            }
            else {
                v = (!v) ? "FALSE" : "TRUE";
            }
        }
        else if(type == "double")
        {
            v = isNaN(v) || v === '' || v === null ? 0 : v;
            
            //var n = v < 0 ? true : false;
            var a = parseFloat(v).toFixed(2).toString().split(".");
            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                        
            if(parseFloat(a[1]) > 0)
            {
                v = (b + "." + a[1]); 
            }
            else
            {
                v = b; 
            }           
        }
        else if(type == "currency")
        {
            v = isNaN(v) || v === '' || v === null ? 0.00 : v;
            var userCurrency = '';
            
            //show user currency in parentheses
            if(options.conversionRate) {
                userCurrency = v/options.conversionRate;
                var c = parseFloat(userCurrency).toFixed(2).toString().split(".");
                var d = c[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                
                userCurrency = ' (' + userSettings.userCurrency + ' ' + d + "." + c[1] + ')';
            }
            
            //var n = v < 0 ? true : false;
            var parts = parseFloat(v).toFixed(options.precision || 2).toString().split(".");
            var integerPartWithCommas = parts[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
            
            v = (options.currency + " " + integerPartWithCommas + "." + parts[1] + userCurrency);
            
            
            /*
            v = parseFloat(v).toFixed(2);
            
            for (var i = 0; i < Math.floor((v.length - (1 + i)) / 2.5); i++){
                if(v.indexOf('.') == v.length - (4 * i + 3))
                {
                    v = v.substring(0, v.length - (4 * i + 3) ) + v.substring(v.length - (4 * i + 3));
                }
                else
                {
                    v = v.substring(0, v.length - (4 * i + 2) ) + "," + v.substring(v.length - (4 * i + 2));
                }
            }
            v = "$" + v;
            */
        }
        else if(type == "date")
        {
            try {
                var formatedDate = formatUserLocaleDate({datepicker: true}).replace('mm','MM').replace('dd','DD').replace('yy','YYYY');
                v = moment(v).format(formatedDate);
            }
            catch (e)
            {
                v = moment(v).format('M/D/YYYY');   //quick fix
                //v = sforce.internal.stringToDate(v).toLocaleDateString();
            }
        }
        else if(type == "datetime")
        {
            try {
                //format date to display correct user locale
                var formatedDate = formatUserLocaleDate({moment: true});
                v = moment(v).format(formatedDate);
            }
            catch (e)
            {
                v = moment(v).format('M/D/YYYY h:mm a');   //quick fix

                //should not get in here but just in case (no user locale set)
                //v = sforce.internal.stringToDateTime(v);
                //v = v.toLocaleDateString() + " " + v.toLocaleTimeString().replace(/([^:]*):([^:]*):00(.*)/, '$1:$2$3'); //remove the seconds portion of the datetime
            }
        }
        else if (type == "percent")
        {
            v = (v != "") ? v + "%" : "";
        }
        else if (type == "url")
        {
            if (v.indexOf("http://") > -1 || v.indexOf("https://") > -1)
            {
                v = '<a href="' + v + '" target=_blank>' + v + "</a>";
            }
            else
            {
                v = '<a href="http://' + v + '" target=_blank>' + v + "</a>";
            }
        }
        else if(type == "reference")
        {
            v = '<a href="/' + RefId + '" target=_blank>' + v + "</a>";
        }
        else if (type == "textarea")
        {
            v = v.replace(/\n/g, '<br />');
        }
        /*
        else
        {
            v = type;
        }
        */
    }
    
    return v;
}


function CreatePopupWindow(popID,popWidth)
{

    //var popID = "popup1";
    //var popURL = "#?w=600";
            
    //Pull Query & Variables from href URL
    //var query= popURL.split('?');
    //var dim= query[1].split('&');
    

    //Fade in the Popup and add close button
    $('#' + popID).fadeIn().css({ 'width': Number( popWidth ) });
    
    //Define margin for center alignment (vertical + horizontal) - we add 80 to the height/width to accomodate for the padding + border width defined in the css
    var popMargTop = ($('#' + popID).height() + 80) / 2;
    var popMargLeft = ($('#' + popID).width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#' + popID).css({ 
        'margin-top' : -popMargTop,
        'margin-left' : -popMargLeft
    });
    
    //Fade in Background
    $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
    $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer 

}

function ClosePopupWindow()
{
    $('#fade , .popup_block').fadeOut(function() {
            $('#fade, a.close').remove();  
    }); //fade them both out
}

function DisplayPropertiesOfObject(obj,LevelsDeep)
{
    for(var key in obj)
    {
        Debug(GenDash(LevelsDeep) + '<b>' + key + '</b>: ' + obj[key]);
        
        if (typeof(obj[key]) == "object")
        {
            //DisplayPropertiesOfObject(obj[key],LevelsDeep+1);
        } 
    }
}
        
function GenDash(LevelsDeep)
{
    if (LevelsDeep == 0)
        return '';
    else if (LevelsDeep == 1)
        return "-";
    else if (LevelsDeep == 2)
        return "--";
    else if (LevelsDeep == 3)
        return "---";
    else if (LevelsDeep == 4)
        return "----";
    else if (LevelsDeep == 5)
        return "-----";
    else if (LevelsDeep == 6)
        return "------";
    else if (LevelsDeep == 7)
        return "-------";
    else
        return "--------";
}

function Debug(str)
{
    $('#DebugOut').append("<br/>" + str);
}

function ClearDebugWindow()
{
    $('#DebugOut').html("<b>Log Cleared</b>");
}

function ShowSavedQryPopup()
{

    $('#tabs-SavedQry').tabs({remote:true}); 
    jscolor.init();
    
    $('#LoadingPopup').fadeOut();
    
    
    $('#SavedQueryPopup').fadeIn().css({ 'width': Number( 700 ) });
    

    var popMargLeft = ($('#SavedQueryPopup').width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#SavedQueryPopup').css({ 
        'margin-left' : -popMargLeft,
        'max-height': '550px'
    });
    
    $('#SavedQueryPopup').css("top", (($(window).height() - $('#SavedQueryPopup').outerHeight()) / 2) + $(window).scrollTop() + "px");
}

function MoveMapComponentsRight()
{
    /*
    ZoomBar.node.style.marginLeft           = "310px";
    ZoomRectangle.node.style.marginLeft     = "239px";
    ViewControl.node.style.marginLeft       = "310px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "50px";
    */
}

function MoveMapComponentsLeft()
{
    /*
    ZoomBar.node.style.marginLeft           = "5px";
    ZoomRectangle.node.style.marginLeft     = "-67px";
    ViewControl.node.style.marginLeft       = "5px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "-250px";
    */
}

function OpenMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":hidden"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function CloseMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":visible"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function DisplayMapViewPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapToolsPopup');

    $('#MapViewPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function DisplayMapToolsPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#MapToolsPopup').slideToggle('normal', function() {
        // Animation complete.
    });  
}

function DisplayProximityPopup()
{
    CloseMenuIfOpen('MapToolsPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#ProximityPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function PreparePickListEntry(str)
{
    return str.replace(/\s/g,"");
}

function ChangeDivStatus(DivId,str)
{
    document.getElementById(DivId).innerHTML = str;
}

function ShowLoadingDialog()
{
    Debug("ShowLoadingDialog");
}

function HideLoadingDialog()
{
    $('#modalPage123').hide();
}

function ZoomToFit(options)
{
    options = $.extend({
        queries: [],
    }, options);

    //loop through the plotted queries to see if they are all heat maps
    var allHeatMaps = true;
    $('#PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.on').each(function () {
        if ($(this).attr('data-renderAs') != 'Heatmap') {
            allHeatMaps = false;
            return false;
        }
    });
    
    //if we only have heat maps, zoom out to country level
    if ($('#PlottedQueriesContainer .PlottedRowUnit').length > 0 && allHeatMaps) {
        MA.map.setZoom(5);
    }
    else {
        try {
            var bounds = new google.maps.LatLngBounds();
            if (options.queries.length > 0) {
                $.each(options.queries, function (index, $query) {
                    $.each($query.data('records'), function (index, record) {
                        if (record.marker && (record.isVisible || record.isClustered || record.isScattered)) {
                            bounds.extend(record.marker.getPosition());
                        }
                    });
                });
            }
            else
            {
                //queries
                $('#PlottedQueriesContainer .PlottedRowUnit').each(function () 
                {
                    //records
                    $.each($(this).data('records'), function (index, record) {
                        if (record.marker && (record.isVisible || record.isClustered || record.isScattered)) {
                            bounds.extend(record.marker.getPosition());
                        }
                    });

                    //distance limit circle
                    if($(this).data('distanceLimitCircle')) {
                        bounds.union($(this).data('distanceLimitCircle').getBounds());
                    }
                });

                //boundary layers
                $('#PlottedQueriesContainer .proximity.layer').each(function () {
                    $.each($(this).data('proxObjects') || [], function (index, proxObj) {
                        if (proxObj instanceof google.maps.Polygon) {
                            proxObj.getPath().forEach(function (latlng, i) {
                                bounds.extend(latlng);
                            });
                        }
                        else {
                            bounds.union(proxObj.getBounds());
                        }
                    });
                    if ($(this).data('proxObject')) {
                        if ($(this).data('proxObject') instanceof google.maps.Polygon) {
                            $(this).data('proxObject').getPath().forEach(function (latlng, i) {
                                bounds.extend(latlng);
                            });
                        }
                        else {
                            bounds.union($(this).data('proxObject').getBounds());
                        }
                    }
                });

                //shape layers
                function processPoints(geometry, callback, thisArg) {
                    if (geometry instanceof google.maps.LatLng) {
                        callback.call(thisArg, geometry);
                    }
                    else if (geometry instanceof google.maps.Data.Point) {
                        callback.call(thisArg, geometry.get());
                    } 
                    else {
                        geometry.getArray().forEach(function(g) { processPoints(g, callback, thisArg); });
                    }
                }
                $('#PlottedQueriesContainer .PlottedShapeLayer').each(function () {
                    try {
                        $(this).data('dataLayer').forEach(function (feature) {
                            processPoints(feature.getGeometry(), bounds.extend, bounds);
                        });
                    }
                    catch (err) { MA.log('Unable to include data layer in zoom to fit calculation', err); }
                });

                //mobile prox circles
                if (pc_Added) {
                    if (ProximityCircle instanceof google.maps.Circle) {
                        bounds.union(ProximityCircle.getBounds());
                    }
                    else {
                        $.each(ProximityCircle, function (index, proxObject) {
                            bounds.union(proxObject.getBounds());
                        });
                    }
                }

                //routes
                if (MA.Routing.mapComponents.polyline && MA.Routing.mapComponents.polyline.map) { //quick fix for zoom to fit not working after a route was plotted
                    MA.Routing.mapComponents.polyline.getPath().forEach(function(e) {
                        bounds.extend(e);
                    });
                }

                //poi
                if (MA.Map.Search.markers.length > 0) {
                    $.each(MA.Map.Search.markers, function (i,m){
                        var point = m.position;
                        bounds.extend(point);
                    });
                }
            }

            if (!bounds.isEmpty()) {
                MA.map.fitBounds(bounds);
            }
        }
        catch (err) {
            //this most likely means that there are no features on the map so just do nothing
        }
    }
}

function ModifyPlottedSavedQueryCount()
{
    if (VisibleQueries.length > 0)
    {
        $('#PlottedSavedQueryCount').html('(' + VisibleQueries.length + ')');
    }
    else
    {
        $('#PlottedSavedQueryCount').html('');
    }
}
function ShowAddressNotFoundPopup()
{
    CreatePopupWindow("AddressNotFoundPopup",600);
}

function SlideToTree()
{
    slider1.goToFirstSlide();
    $('#TreeTab').removeClass('TreeTab-Inactive'); 
    $('#TreeTab').addClass('TreeTab-Active');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Active'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Inactive');
}

function SlideToPlottedQueries()
{
    slider1.goToSlide(1);
    $('#TreeTab').removeClass('TreeTab-Active'); 
    $('#TreeTab').addClass('TreeTab-Inactive');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Inactive'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Active');
}

function SlideToLocations()
{
    slider2.goToFirstSlide();
    $('#DirectionsInputTab').removeClass('TreeTab-Inactive'); 
    $('#DirectionsInputTab').addClass('TreeTab-Active');
    $('#DirectionsOutputTab').removeClass('PlottedQueriesTab-Active'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
}

function SlideToDirectionsOutput()
{    
    $('#DirectionsInputTab').removeClass('TreeTab-Active'); 
    $('#DirectionsInputTab').addClass('TreeTab-Inactive');
    $('#DirectionsOutputTab').removeClass('PlottedQueriesTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Active');
}

function CloseDebugWindow()
{
    ClosePopupWindow();
}

function EmailDebugLog()
{
    var DebugLogComments = prompt("Comments:","");
    var EmailDebugLogArray = new Array();
    EmailDebugLogArray.push('bbrantly@cloudbilt.com');
    
    var MyJSObject = {
        action: 'email_debug_log',
        replyTo: UserEmailAddress,
        subject: 'Map Anything Debug Log',
        htmlBody: '<b>Comments: </b>' + DebugLogComments + '<br /><br />' + $('#DebugOut').html(),
        toAddresses: EmailDebugLogArray
    };
    
    var processData = { 
        ajaxResource : 'MAEmailAJAXResources',
        
        MyJSObject: JSON.stringify(MyJSObject)
    };
    
    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
        processData,
        function(response, event){
            if(response.success)
            {
                alert("Debug Log Sent!");
            }
            else
            {
                NotifyError("Error Sending Debug Log Email",response.error);
                Debug("Error Sending Debug Log Email " + response.error);
            }
        },{buffer: false,escape:false}
    );
}



// JavaScript Document

/*
/*NEW*/
var WayPointLI = 
    '<li class="ui-state-default waypoint">'+
        '<button onclick="showSortRows(this)" class="ui-btn-up-c RowNumber"></button>'+
        '<div style="display:inline-block;">'+
            '<input type="text" />'+
            '<div class="timedetails" style="color: #757575; font-weight: bold; padding-left: 5px; display: none;"></div>'+
        '</div>'+
        '<a style="float:right;margin-right:0;margin-top:0;" onclick="RemoveAddressRow(this);" data-role="button" data-iconpos="notext" data-icon="delete" title="Remove" data-theme="c" class="ui-btn ui-btn-up-c ui-btn-icon-notext ui-btn-corner-all ui-shadow"><span aria-hidden="true" class="ui-btn-inner ui-btn-corner-all"><span class="ui-btn-text">Remove</span><span class="ui-icon ui-icon-delete ui-icon-shadow"></span></span></a>'+
    '</li>';

/*var WayPointLI = 
    '<li class="ui-state-default">'+
        '<select class="RowNumber" style="width: 40px; vertical-align: top; margin-right: 5px; margin-top: 6px;"></select>'+
        '<div style="display:inline-block;">'+
            '<input type="text" />'+
            '<div class="timedetails" style="color: #757575; font-weight: bold; padding-left: 5px; display: none;"></div>'+
        '</div>'+
        '<a style="float:right;margin-right:0;margin-top:0;" onclick="RemoveAddressRow(this);" data-role="button" data-iconpos="notext" data-icon="delete" title="Remove" data-theme="c" class="ui-btn ui-btn-up-c ui-btn-icon-notext ui-btn-corner-all ui-shadow"><span aria-hidden="true" class="ui-btn-inner ui-btn-corner-all"><span class="ui-btn-text">Remove</span><span class="ui-icon ui-icon-delete ui-icon-shadow"></span></span></a>'+
    '</li>';*/

function NewLayerNavigationEnabled () {
return false;
}

function AddMarkerToTrip(pMarker)
{
    var tooltipsArray = [];
    try {
        tooltipsArray = pMarker.record.plottedQuery.data('tooltips');
    }
    catch (err) {}
    
    var tooltipsList = [];
    $.each(tooltipsArray, function (index, tooltip) {
        tooltipsList.push(tooltip.FieldName);
    });

    var $waypoint = $(WayPointLI)
        .attr('Lat', pMarker.Lat)
        .attr('Long', pMarker.Long)
        .attr('Address', pMarker.record.markerAddress)
        .attr('WayPointTitle', pMarker.title)
        .attr('data-linkid', pMarker.record.record.Id)
        .attr('baseobject', pMarker.record.plottedQuery ? pMarker.record.plottedQuery.data('baseObjectName') : 'sma__MALocation__c')
        .attr('savedqueryid', pMarker.record.savedQueryId || null)
        .attr('tooltips', JSON.stringify(tooltipsList))
        .attr('data-locktype','unlocked')
    ;
    var lastWaypointLockType = $('#sortable > li').last().attr('data-locktype') || '';
    if (lastWaypointLockType.indexOf('end') >= 0) {
        $waypoint.insertBefore('#sortable > li:last-child');
    }
    else {
        $waypoint.appendTo('#sortable');
    }
    $waypoint.find('input').val(pMarker.title).prop('disabled', true).addClass('DisabledWaypoint');
    
    $('#sortable').find('input').textinput();
    recalculateRowOrder();
}

function optimizeRoute() {
    var optimizeRte = true;
    //check time based optimization if needed
    var options;
    if($('#CurrentRoute-Slide').data('route') != null) {
        try {
            options = JSON.parse($('#CurrentRoute-Slide').data('route').Options__c);
        }
        catch (e) {
            options = {"TimeBasedOptions":{"Enabled":false,"Start":"9:00 am","End":"7:00 pm"}}
        }
    }
    if (options.TimeBasedOptions.Enabled) {
        optimizeRte = false;
        if (confirm('Optimization will not take times into account.  Do you wish to continue?')) {
            optimizeRte = true;
        } else {
            return;
        }
    }

    //wait to see if continue
    var interval = setInterval(function () {
        if(optimizeRte) {
            //loadmask
            clearInterval(interval);
            $('#tab-routes').append('<div class="loadmask"></div>');

            var $currentRow = $('#sortable .waypoint').first();
            while ($currentRow.nextAll().length > 1)
            {
                //find the next row based on distance to the current row
                var $nextRow;
                var distanceToNextRow = -1;
                $currentRow.nextAll().each(function () {
                    if (!$(this).is('.startend')) {
                        var distanceToThisRow = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng($currentRow.attr('lat'), $currentRow.attr('long')), new google.maps.LatLng($(this).attr('lat'), $(this).attr('long')));
                        if (distanceToNextRow == -1 || distanceToNextRow > distanceToThisRow) {
                            distanceToNextRow = distanceToThisRow;
                            $nextRow = $(this);
                        }
                    }
                });
                
                //insert the next row after the current row
                $nextRow.insertAfter($currentRow);
                
                //update the current row
                $currentRow = $nextRow;
            }
            recalculateRowOrder();
            var wPointArr = $('#sortable .waypoint');
            var optimizeArr = [];
            var options = {};
            var target;
            //set new order;
            for (i = 0; i < wPointArr.length; i++) { 
                var $row = $(wPointArr[i]);

                if($('#routeCalendarTable li.route .ui-icon-delete').length > 0) {
                    //this is a saved route
                    var waypoint = $row.data('waypoint');
                    if(waypoint == null) {
                        //create new waypoints
                        optimizeArr.push({
                            Name        : $row.find('input').val(),
                            Address__c : $row.attr('address'),
                            Notes__c       : '',
                            SortOrder__c   : i + 1,
                            LinkId__c      : $row.attr('data-linkid') || null,
                            BaseObject__c  : $row.attr('baseobject'),
                            AdditionalData__c    : $row.attr('tooltips'),
                            Options__c     : JSON.stringify({ TimeBasedOptions: { Start: 'Set start time...', Duration: '1 hr, 0 min' }, LockType: $row.attr('data-locktype') || 'unlocked' }),
                            Latitude__c    : $row.attr('lat'),
                            Longitude__c   : $row.attr('long'),
                            MASavedQry__c: ($row.attr('savedqueryid') || '').indexOf('Record-') == 0 ? null : $row.attr('savedqueryid')
                        });
                    }
                    else {
                        waypoint.SortOrder__c = i+1;
                        optimizeArr.push(waypoint);
                    }
                }
                else {
                    //create new waypoints
                    optimizeArr.push({
                        Name        : $row.find('input').val(),
                        Address__c : $row.attr('address'),
                        Notes__c       : '',
                        SortOrder__c   : i + 1,
                        LinkId__c      : $row.attr('data-linkid') || null,
                        BaseObject__c  : $row.attr('baseobject'),
                        AdditionalData__c    : $row.attr('tooltips'),
                        Options__c     : JSON.stringify({ TimeBasedOptions: { Start: 'Set start time...', Duration: '1 hr, 0 min' }, LockType: $row.attr('data-locktype') || 'unlocked' }),
                        Latitude__c    : $row.attr('lat'),
                        Longitude__c   : $row.attr('long'),
                        MASavedQry__c: ($row.attr('savedqueryid') || '').indexOf('Record-') == 0 ? null : $row.attr('savedqueryid')
                    });
                }
            }
            if($('#routeCalendarTable li.route .ui-icon-delete').length > 0) {
                target = $('#routeCalendarTable li.route .ui-icon-delete').closest('li.route')[0];
            }
            else {
                $('#routeCalendarTable .tempRouteContainer').remove();
                //create a row, all functions require this row, don't feel like rewritting, this is a bandaid
                var tempRow = '<li style="display:none;" id="tempRoute" data-name="UnsavedRoute" class="route tempRouteContainer ui-btn ui-btn-icon-right ui-li-has-arrow ui-li ui-btn-up-c" onclick="displayRoute({target:this,optimize:false}); return false;" data-theme="c"><div class="ui-btn-inner ui-li" aria-hidden="true"><div class="ui-btn-text"><a href="#" class="ui-link-inherit">UnsavedRoute</a></div><span class="ui-icon ui-icon-arrow-r ui-icon-shadow"></span></div></li>';
                $('#routeCalendarTable').append(tempRow);
                target = $('.tempRouteContainer')[0];
            
            }

            options = {
                target : target,
                optimize : true,
                waypoints : optimizeArr
            }

            //rerender route with new options and order
            displayRoute(options);
        }
    },500);
    
}

function ShowDirectionsTab()
{
    $('#tabRoutes').click();
}

function showSortRows (row) {
    //$('.routeOrderPopup .panel-body').css('max-height', $(window).height() - 300);
    //add active class to selected row value
    var $row = $(row).closest('li');
    var index = $row.attr('index');

    $('.routeOrderPopup, #loading-mask').addClass('active')

    $('.routeOrderPopup .panel-body button').removeClass('ui-btn-active');
    $('.routeOrderPopup .panel-body button[data-value="'+index+'"]').addClass('ui-btn-active');

    $row.find('button').addClass('ui-btn-active');
}

function sortRows (button) {
    $('.routeOrderPopup, #loading-mask').removeClass('active');
    var $button = $(button);
    var index = $button.attr('data-value');
    //get selected row
    var $row = $('#sortable .ui-btn-active').closest('li');
    $row.find('button').removeClass('ui-btn-active');
    var origIndex = $('.routeOrderPopup button.ui-btn-active').attr('data-value');
    //find row being inserted before
    $previousRow = $('.waypoint[index="'+index+'"]');

    //move the row
    if(origIndex == index) {
        //do nothing
    }
    else if(origIndex < index) {
        $row.insertAfter($previousRow);
    }
    else {
        $row.insertBefore($previousRow);
    }

    //recalculate row indexes and buttons
    recalculateRowOrder();
}

function recalculateRowOrder () {
    //get routeList
    var $routeList = $('#sortable .waypoint[data-locktype="unlocked"]');
    var $buttonList = $('.routeOrderPopup .mapType-btn');

    //loop over rows and order 
    var r = $routeList != null ? $routeList.length : 0;

    //did we add any rows
    var buttonLen = $buttonList != null ? $buttonList.length : 0;
    if(r > buttonLen) {
        //add a button
        var button = '<button onclick="sortRows(this);" class="ui-btn ui-btn-up-c mapType-btn" data-value="?">?</button>';
        $('.routeOrderPopup .panel-body').append(button);

        //update list
        $buttonList = $('.routeOrderPopup .mapType-btn');
        buttonLen = $buttonList != null ? $buttonList.length : 0;
    }
    else if (r < buttonLen) {
        //remove button
        var bRemove = buttonLen - r;
        for(i = 0; i < bRemove; i++) {
            //remvoe the last button
            $buttonList.last().remove();
        }
    }

    for(i = 0; i < r; i++) { 
        $row = $routeList.eq(i);
        $row.attr('index',i);
        $row.find('.RowNumber').html(i+1);

        $button = $buttonList.eq(i);
        $button.attr('data-value',i);
        $button.text(i+1);
    }
}

function AddAddressRow()
{
    $( "#sortable" ).append(WayPointLI);
    $( "#sortable" ).find('input').textinput();
    recalculateRowOrder();
}

function RemoveAddressRow(obj)
{
    $(obj).parent().remove();
    recalculateRowOrder();

    //unrender route if plotted
    if($('#routeCalendarTable li.route .ui-icon-delete').length === 1) {
        var $route = $('#routeCalendarTable li.route .ui-icon-delete').closest('li');
        //remove non-record waypoints
        $.each($route.data('nonRecordMarkers') || [], function (index, marker) {
            marker.setMap(null);
        });

        //hide buttons
        $('.route-buttons').hide();
        
        //remove route container
        try { MA.Routing.mapComponents.polyline.setMap(null); } catch (err) {}
        //$('#sortable').removeAttr('data-route');
        
        //unrender this route
        $.each($route.data('plottedQueries') || [], function (index, $plottedQuery) {
            
            //unrender this query
            unrenderQuery($plottedQuery, 'Markers', function () {
                $plottedQuery.data('rendered', false);
                $.each($plottedQuery.data('records'), function (index, record) {
                    if (record.marker) {
                        record.marker.setMap(null);
                    }
                });
            });
            
        });
        
        //start a poller to check for completion of unrendering
        $route.data('unrenderInterval', setInterval(
            function () {
                var done = true;
                $.each($route.data('plottedQueries') || [], function (index, $plottedQuery) {
                    if ($plottedQuery.data('rendered')) {
                        done = false;
                        return false;
                    }
                });
                
                if (done) {
                    clearInterval($route.data('unrenderInterval'));
                    $route.removeClass('loading').find('.ui-icon').removeClass('ui-icon-delete').addClass('ui-icon-arrow-r');
                }
            },
            500
        ));
    }
}

function GetDirections()
{
    ClearDirectionsFromMap();
    
    WayPointArray = new Array();
    HasRoutingErrors = false;
    
    var RequiresGeoCoding = false;
    
    var WPIndex = 0;
    
    $.each($( "#sortable" ).children(), function(key, value) { 
        
        //Does the Attribute Lat Exists?
        if ($(this).attr('Lat') != undefined)
        {
            WayPoint = new Object();
            WayPoint.WayPointTitle = $(this).attr('WayPointTitle');
            WayPoint.Address  = $(this).attr('Address');
            WayPoint.Lat  = $(this).attr('Lat');
            WayPoint.Long  = $(this).attr('Long');
            
            WayPointArray[WPIndex] = WayPoint;
            WPIndex++;
        }
        else if ($(this).find('input').val() != "")
        {
            $AddressInput = $(this).find('input');
            
            $AddressInput.removeClass();
            
            Debug("Input Value: " + $AddressInput.val());
            
            RequiresGeoCoding = true;
            
            WayPoint = new Object();
            WayPoint.WayPointTitle = unescape($AddressInput.val());
            WayPoint.Address  = unescape($AddressInput.val());
            WayPoint.Index = WPIndex;
            
            RoutingGeoCodeList.add(WayPoint);
            WPIndex++;
        }
        else 
        {
            //Remove Element
            $(this).remove();
        }
    });
    
    if (!RequiresGeoCoding)
    {
        Debug("Doesn't Require Geocoding");
        ProcessWayPoints();
    } 
}

function ClearDirectionsFromMap()
{
    if (MA.Routing.mapComponents.polyline != null) {
        MA.Routing.mapComponents.polyline.setMap(null);
        MA.Routing.mapComponents.polyline = null;
    }
    
    //Clear Directions Text
    $('#DirectionsOutput').empty();
}

function ClearDirections()
{   
    $('#tab-routes-route').removeData('route');
    if (MA.Routing.mapComponents.polyline != null) {
        MA.Routing.mapComponents.polyline.setMap(null);
        MA.Routing.mapComponents.polyline = null;
    }
    
    $('#DirectionsOutput').empty();
    $('#DirectionControls').hide();
    
    //Reset Address Elements
    $('#sortable').empty().append(WayPointLI).append(WayPointLI);
    $( "#sortable" ).find('input').textinput();
    $('.routeOrderPopup .panel-body').empty();
    recalculateRowOrder();
}

function printthis(which) {
                
    var directions = document.getElementById(which).innerHTML;
    
    var newwindow = window.open("","","height=500,width=320,location=0,scrollbars=1");
    directions += '<br><a href="http://www.cloudbilt.com" target="_blank"><img style="width: 100px; border:0;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
    newwindow.document.write(directions);
    newwindow.focus();
    newwindow.print();
} 

function SendDirectionsEmail()
{
    //check what is selected
    var EmailAddresses = [];
    if($(".emailMe[type='checkbox']:first").attr("checked") == 'checked' && $(".emailMe[type='checkbox']:first").val() != '') {
        EmailAddresses.push($(".emailMe[type='checkbox']:first").val());
    }
    if($(".emailManager[type='checkbox']:first").attr("checked") == 'checked' && $(".emailManager[type='checkbox']:first").val() != '') {
        EmailAddresses.push($(".emailManager[type='checkbox']:first").val());
    }
    if($('.otherEmail').val() != '') {
        var other = $('.otherEmail').val().split(",");
        var oI = other.length;
        while(oI--) {
            EmailAddresses.push(other[oI]);
        }
    }
    if (EmailAddresses != null && EmailAddresses != "")
    {
        var HTMLBody = $('#printEmailContainer').html();
        HTMLBody += '<br><a href="http://www.cloudbilt.com"><img style="width: 100px; border:0;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
        
        var MyJSObject = {
                action: 'email_directions',
                replyTo: UserEmailAddress,
                subject: 'Map Anything Directions',
                htmlBody: HTMLBody,
                toAddresses: EmailAddresses
        };
        
        var processData = { 
            ajaxResource : 'MAEmailAJAXResources',
            
            MyJSObject: JSON.stringify(MyJSObject)
        };
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            processData,
            function(response, event){                     
                
                if(response.success)
                {
                    alert("Your Directions Have Been Sent!");
                    cancelEmail();
                }
                else
                {
                    NotifyError("Error Sending Directions Email",response.error);
                    Debug("Error Sending Directions Email " + response.error);
                }
            },{buffer: false,escape:false}
        ); 
    }
}
        
function ProcessWayPoints(options)
{
    try
    {
        if (HasRoutingErrors)
        {
            //Cant Process Way Points  
        }
        else
        {
            if (WayPointArray.length >= 2)
            {
                //check for waypoints that aren't geocoded.  at this point, we're going to refuse to plot the route if there are bad waypoints
                var badWaypointTitle = '';
                $.each(WayPointArray, function (index, waypoint) {
                    if (waypoint) {
                        //MULTIDAY
                        console.log(waypoint);
                        if (isNaN(parseFloat(waypoint.Lat)) || isNaN(parseFloat(waypoint.Long))) {
                            badWaypointTitle = waypoint.WayPointTitle;
                            return false;
                        }
                    }
                });
                if (badWaypointTitle != '') {
                    NotifyError('Error!.', badWaypointTitle + ' does not have a valid location');
                    options.route.removeClass('loading').find('.ui-icon').removeClass('ui-icon-arrow-r').addClass('ui-icon-delete');
                    return;
                }
            
                //Array for building initial directions
                var GeocodeArray = [];
                
                //batch requests for TomTom
                var requestsOut = 0;
                var waypointBatch = [];
                var pathParts = {};
                
                //build options for TomTom directions
                var directionsOptions = {
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: userSettings.RouteDefaults.unit == 'mi' ? google.maps.UnitSystem.IMPERIAL : google.maps.UnitSystem.METRIC
                };
                
                //set initial batch count
                var batchCount = 0;

                var legList = '<div>'+
                    '<div class="print-name">Route Name: <b>'+$("#route-name").val()+'</b></div>'+
                    '<div class="print-orders">Visited Orders: '+$("#sortable .waypoint").length+'</div></div>';
                
                //setup batch for TomTom
                $.each(WayPointArray, function (waypointIndex, waypoint)
                {
                    //this is a fix for something weird
                    if (!waypoint) { return; }

                    if (!directionsOptions.origin) {
                        directionsOptions.origin = new google.maps.LatLng(waypoint.Lat, waypoint.Long);
                    }
                    else if (waypointBatch.length == 23 || waypointIndex == WayPointArray.length - 1) {
                        directionsOptions.destination = new google.maps.LatLng(waypoint.Lat, waypoint.Long);
                    }
                    else {
                        waypointBatch.push({ location: new google.maps.LatLng(waypoint.Lat, waypoint.Long), stopover: true });
                    }
                    
                    //send out this batch if we've reached the max or there are no more points
                    var totalSeconds = 0;
                    var totalMeters = 0;
                    var rowIndex = 0;
                    
                    if(directionsOptions.destination)
                    {
                        requestsOut++; 
                        batchCount++;

                        //get route legs
                        var batchIndex = batchCount;
                        MA.Routing.route($.extend({}, { waypoints: waypointBatch }, directionsOptions), function(response) {
                            if (!response.success)
                            {
                                NotifyError("The routing request failed.", '');
                                hideMessage($('#mapdiv'));
                                MA.log(response);
                            }
                            else
                            {
                                var path = [];
                                var rowIndex = 0;
                                var route = response.route.routes[0];
                                $.each(route.legs, function (i, leg) {
                                    //process leg information
                                    var distance = userSettings.RouteDefaults.unit == 'mi' ? (leg.distance.value * 0.000621371).toFixed(1) + ' miles' : (leg.distance.value / 1000).toFixed(1) + ' kilometers';
                                    var distanceTime = distance + ' / ' + leg.duration.text;
                                    legList += '<div><div class="leg-name">Section Start Address: '+ $("#sortable .waypoint").eq(rowIndex).attr("address")+'</div>';
                                    legList += '<div class="leg-total">Section Summary: '+distanceTime+'</div></ul><ul style="list-style-type:decimal;">';
                                    rowIndex++;
                                    totalSeconds += leg.duration.value;
                                    totalMeters += leg.distance.value;

                                    $.each(leg.steps, function (j, step) {
                                        path = path.concat(step.path);

                                        legList += '<li>'+step.instructions + ' ' + step.distance.text + '</li>';

                                    });

                                    legList += '<li>'+$("#sortable .waypoint").eq(rowIndex).attr("address")+'</li></ul></div>';
                                });
                                pathParts[batchIndex] = path;
                            }
                            requestsOut--;
                        });
                        directionsOptions.origin = directionsOptions.destination;
                        directionsOptions.destination = null;
                        waypointBatch = [];
                    }
                });
                
                //set an interval to track when all the batches have returned
                var interval = setInterval(function () {
                
                    if(requestsOut == 0)
                    {
                        //finish print/email
                        legList += '</ul>';
                        $('#printEmailContainer').empty();
                        $('#printEmailContainer').append(legList);

                        //build polyline
                        var path = [];
                        for (var i = 1; i <= batchCount; i++) {
                            path = path.concat(pathParts[i]);
                        }
                        MA.Routing.mapComponents.polyline = new google.maps.Polyline({
                            map: MA.map,
                            path: path,
                            strokeColor: 'blue',
                            strokeWeight: 5,
                            strokeOpacity: 0.7
                        });
                        MA.Map.zoomToFit(MA.Routing.mapComponents.polyline);
                        
                        //Center the map
                        MA.Map.zoomToFit(MA.Routing.mapComponents.polyline);
                        
                        //clear this interval because we're done
                        clearInterval(interval);
                        
                        //hide load image
                        hideMessage($('#mapdiv'));
                        if (options && options.route) {
                            options.route.removeClass('loading').find('.ui-icon').removeClass('ui-icon-arrow-r').addClass('ui-icon-delete');
                        }
                        
                        //fire the callback if we have one
                        try { options.callback(); } catch (err) {}
                    }
                    
                }, 500);
            }
            else
            {
                
            }
        }
    }
    catch(err)
    {
        NotifyError("Error!.","Error Occured While Processing Route Waypoints.");
        MALog(err);
    }
}

/*Map View Buttons*/
function NormalMapView()
{
    map.overlays.remove(map.LABELS);
    map.set("baseMapType", map.NORMAL);
    $('#MapViewPopup').hide();
}

function SatelliteMapView()
{
    map.overlays.remove(map.LABELS);
    map.set("baseMapType", map.SATELLITE);
    $('#MapViewPopup').hide();
}

function TerrainMapView()
{
    map.overlays.remove(map.LABELS);
    map.set("baseMapType", map.TERRAIN);
    //map.overlays.add(map.LABELS);
    $('#MapViewPopup').hide();
}

function DisplayRootFolders()
{
    $.mobile.hidePageLoadingMsg();
    $('#FolderSQList').empty();
    $('<li data-role="list-divider">{!$Label.sma__ma_folders}</li>').appendTo('#FolderSQList');
    
    //check if we need to show the personal folder
    var HidePersonalFolder = getProperty(userSettings || {},'HidePersonalFolder') || false;
    if(!HidePersonalFolder) {
        $('<li data-icon="false"></li>')
            .attr('id','PersonalRoot')
            .append('<a><img src="{!URLFOR($Resource.sma__MapAnything, 'images/mobile/MASQFolder.png')}" alt="F" class="ui-li-icon">{!HTMLENCODE($User.FirstName)} {!HTMLENCODE($User.LastName)}</a>')
            .click(function(e){
                $.mobile.showPageLoadingMsg();
                try {
                    sma.MapAnythingMobile.GetPersonalMAFolder(this.id,DisplayMAFolder);
                }
                catch (err) {
                    MapAnythingMobile.GetPersonalMAFolder(this.id,DisplayMAFolder);
                }
            })
            .appendTo('#FolderSQList');
    }
                
                
    $('<li data-icon="false"></li>')
        .attr('id','CorpRoot')
        .append('<a><img src="{!URLFOR($Resource.sma__MapAnything, 'images/mobile/MASQFolder.png')}" alt="F" class="ui-li-icon">{!HTMLENCODE($Label.sma__ma_corporate)}</a>')
        .click(function(e){
            $.mobile.showPageLoadingMsg();
            try {                      
                sma.MapAnythingMobile.GetCorpMAFolder(this.id,DisplayCorpMAFolder);
            }
            catch (err) {
                MapAnythingMobile.GetCorpMAFolder(this.id,DisplayCorpMAFolder);
            }
        })
        .appendTo('#FolderSQList');
        
    /*
    $('<li data-icon="false"></li>')
        .attr('id','Recent')
        .append('<a><img src="{!URLFOR($Resource.sma__MapAnything, 'images/mobile/MASQFolder.png')}" alt="F" class="ui-li-icon">'+ 'Recent' +'</a>')
        .click(function(e){
            $.mobile.showPageLoadingMsg();
            try {                      
                sma.MapAnythingMobile.GetRecentMAFolder(this.id, DisplayRecentMAFolder);
            }
            catch (err) { }
        })
        .appendTo('#FolderSQList');
    */         
    $("#FolderSQList").attr({ 'data-type': 'root', 'data-id': 'root' }).listview("refresh");
    
    $('#TreeBackButton').hide();
}

function DisplayRecentSavedQueries()
{
    $('#RecentSQList').empty();
    $('<li data-role="list-divider">{!$Label.sma__ma_recent_queries}</li>').appendTo('#RecentSQList');
    try {
        (typeof sma == 'undefined' ? MapAnythingMobile : sma.MapAnythingMobile).GetRecentMAFolder('Recent', function (MAFolder, Type) {
        
            if (MAFolder.SubSavedQueries.length > 0) {
                $.each(MAFolder.SubSavedQueries, function(index,value) {
                    
                    //remove namespace
                    removeNamespace('{!namespace}', value);
                
                    var pLITag;
                    
                    if (AbleToPlot(value.Id)) {
                        pLITag = '<li data-icon="false"></li>';
                    }
                    else {
                        pLITag = '<li data-icon="check"></li>';
                    }
                
                    var iconURL = "";
                    if (value.PicklistField__c == undefined) {
                        iconURL = value.Query__c.indexOf(' IN :Dynamic') == -1 ? "{!URLFOR($Resource.sma__MapAnything, 'images/mobile/StandardSQIcon.png')}" : "{!URLFOR($Resource.sma__MapAnything, 'images/ui-icons/static-dynamic.png')}";
                    }
                    else {
                        iconURL = value.Query__c.indexOf(' IN :Dynamic') == -1 ? "{!URLFOR($Resource.sma__MapAnything, 'images/mobile/LegendSQIcon.png')}" : "{!URLFOR($Resource.sma__MapAnything, 'images/ui-icons/dynamic-dynamic.png')}";;
                    }
                    $(pLITag)
                        .attr('id',this.Id)
                        .append('<a><img src="'+iconURL+'" alt="S" class="ui-li-icon">'+this.Name +'</a>')
                        .click(function(e) {
                            PlotQuery(this.id, $('#VisibleAreaCB').is(':checked'));
                        })
                        .appendTo('#RecentSQList')
                    ;
                
                    
                });
            }
            else
            {    
                $('<li>{!$Label.sma__ma_no_queries}</li>').appendTo('#RecentSQList');
            }
            
            $("#RecentSQList").listview("refresh");
        });
    }
    catch (err) {
        $('<li>Unknown Error</li>').appendTo('#RecentSQList');
    }
    
    $("#RecentSQList").listview("refresh");
}

function DisplayMAFolder(MAFolder,Type)
{
    $.mobile.hidePageLoadingMsg();
    
    $('#TreeBackButton').show();
    
    $("#TreeBackButton").unbind("click");
                    
    if (MAFolder.ParentId == 'Root')
    {
        $('#TreeBackButton').click(function() {
            $.mobile.showPageLoadingMsg(); 
            DisplayRootFolders();
        });
    }
    else
    {   
        $('#TreeBackButton').click(function() {
            $.mobile.showPageLoadingMsg(); 
            if (Type == 'Corp')
            {
                try {
                    sma.MapAnythingMobile.GetCorpMAFolder(MAFolder.ParentId ,DisplayCorpMAFolder);
                }
                catch (err) {
                    MapAnythingMobile.GetCorpMAFolder(MAFolder.ParentId ,DisplayCorpMAFolder);
                }
            }
            else
            {
                try {
                    sma.MapAnythingMobile.GetPersonalMAFolder(MAFolder.ParentId ,DisplayPersonalMAFolder);
                }
                catch (err) {
                    MapAnythingMobile.GetPersonalMAFolder(MAFolder.ParentId ,DisplayPersonalMAFolder);
                }
            }
            
        });
    }
    
    
    $('#FolderSQList').empty();
    
    $('<li data-role="list-divider">{!$Label.sma__ma_folders}</li>').appendTo('#FolderSQList');
    
    if ((MAFolder.SubFolders || []).length > 0)
    {
        $.each(MAFolder.SubFolders, function(index,value)
        {
            $('<li data-icon="false"></li>')
                .attr('id',this.Id)
                .append('<a><img src="{!URLFOR($Resource.sma__MapAnything, 'images/mobile/MASQFolder.png')}" alt="F" class="ui-li-icon">'+this.Name +'</a>')
                .click(function(e){
                    $.mobile.showPageLoadingMsg();  
                    //sma.MapAnythingMobile.GetCorpMAFolder(this.id,DisplayCorpMAFolder);
                    if (Type == 'Corp')
                    {
                        try {
                            sma.MapAnythingMobile.GetCorpMAFolder(this.id ,DisplayCorpMAFolder);
                        }
                        catch (err) {
                            MapAnythingMobile.GetCorpMAFolder(this.id ,DisplayCorpMAFolder);
                        }
                    }
                    else
                    {
                        try {
                            sma.MapAnythingMobile.GetPersonalMAFolder(this.id ,DisplayPersonalMAFolder);
                        }
                        catch (err) {
                            MapAnythingMobile.GetPersonalMAFolder(this.id ,DisplayPersonalMAFolder);
                        }
                    }
                })
                .appendTo('#FolderSQList');
        });
    }
    else
    {
        $('<li>NoFolders</li>').appendTo('#FolderSQList');
    }
    
    $('<li data-role="list-divider">{!$Label.sma__ma_saved_queries}</li>').appendTo('#FolderSQList');
    
    if ((MAFolder.SubSavedQueries || []).length > 0)
    {
        $.each(MAFolder.SubSavedQueries, function(index,value)
        {
            //remove namespace
            removeNamespace('{!namespace}', value);
        
            var pLITag;
            
            if (AbleToPlot(value.Id))
            {
                pLITag = '<li data-icon="false"></li>';
            }
            else
            {
                pLITag = '<li data-icon="check"></li>';
            }
        
            //Debug("SQ Name: " + this.Name + " PLF: " + value.PicklistField__c);
            var iconURL = "";
            if (value.PicklistField__c == undefined) {
                iconURL = value.Query__c.indexOf(' IN :Dynamic') == -1 ? "{!URLFOR($Resource.sma__MapAnything, 'images/mobile/StandardSQIcon.png')}" : "{!URLFOR($Resource.sma__MapAnything, 'images/ui-icons/static-dynamic.png')}";
            }
            else {
                iconURL = value.Query__c.indexOf(' IN :Dynamic') == -1 ? "{!URLFOR($Resource.sma__MapAnything, 'images/mobile/LegendSQIcon.png')}" : "{!URLFOR($Resource.sma__MapAnything, 'images/ui-icons/dynamic-dynamic.png')}";;
            }
            $(pLITag)
                .attr('id',this.Id)
                .append('<a><img src="'+iconURL+'" alt="S" class="ui-li-icon">'+this.Name +'</a>')
                .click(function(e){
                    PlotQuery(this.id, $('#VisibleAreaCB').is(':checked'));
                })
            .appendTo('#FolderSQList');
        });
    }
    else
    {    
        $('<li>{!$Label.sma__ma_no_queries}</li>').appendTo('#FolderSQList');
    }

    $('<li data-role="list-divider">Data Layers</li>').appendTo('#FolderSQList');
    
    if ((MAFolder.SubDataLayers || []).length > 0)
    {
        $.each(MAFolder.SubDataLayers, function(index,value)
        {
            //remove namespace
            removeNamespace('{!namespace}', value);
        
            var $dataLayer = $('<li data-icon="false"></li>')
                .attr('id', value.Id)
                .append('<a style="padding-left: 40px;"><div class="dataLayerIcon"></div>'+value.Name +'</a>')
                .click(function(e){
                    MADemographicLayer.StoreTempLayer(value.Id,{isMobile:true});
                })
                .appendTo('#FolderSQList')
            ;
        });
    }
    else {
        $('<li>No Data Layers</li>').appendTo('#FolderSQList');
    }
    
    //favorites
    $('<li data-role="list-divider">{!$Label.sma__ma_favorites}</li>').appendTo('#FolderSQList');
    if ((MAFolder.SubFavorites || []).length > 0)
    {
        $.each(MAFolder.SubFavorites, function (index, favorite) 
        {
            //remove namespace
            removeNamespace('{!namespace}', favorite);
            
            //add to 
            var $favorite = $('<li data-icon="false"></li>')
                .attr('id', favorite.Id)
                .append('<a><img src="{!URLFOR($Resource.sma__MapAnything, 'images/mobile/FavoriteIcon.png')}" alt="S" class="ui-li-icon">'+favorite.Name +'</a>')
                .click(function(e){
                    PlotFavoriteLocation({ id : favorite.Id }); 
                })
                .appendTo('#FolderSQList')
            ;
        });
    }
    else
    {
        $('<li>No Favorites</li>').appendTo('#FolderSQList');
    }
    
    $("#FolderSQList").attr({ 'data-type': Type == 'Corp' ? 'Corp' : 'Personal', 'data-id': MAFolder.Id }).listview("refresh");

}

function DisplayCorpMAFolder(MAFolder,message)
{
    DisplayMAFolder(MAFolder,'Corp');
}


function DisplayPersonalMAFolder(MAFolder,message)
{
    DisplayMAFolder(MAFolder,'Personal');
}

function DisplayRecentMAFolder(MAFolder,message)
{
    DisplayMAFolder(MAFolder,'Recent');
}

function RefreshMAFolder()
{
    if ($(FolderSQList).attr('data-id') == 'root')
    {
        DisplayRootFolders();
    }
    else if ($(FolderSQList).attr('data-id') == 'CorporateRoot' || $(FolderSQList).attr('data-type') == 'Corp')
    {
        try {
            sma.MapAnythingMobile.GetCorpMAFolder($(FolderSQList).attr('data-id') ,DisplayCorpMAFolder);
        }
        catch (err) {
            MapAnythingMobile.GetCorpMAFolder($(FolderSQList).attr('data-id') ,DisplayCorpMAFolder);
        }
    }
    else
    {
        try {
            sma.MapAnythingMobile.GetPersonalMAFolder($(FolderSQList).attr('data-id'), DisplayPersonalMAFolder);
        }
        catch (err) {
            MapAnythingMobile.GetPersonalMAFolder($(FolderSQList).attr('data-id'), DisplayPersonalMAFolder);
        }
    }
}
    
    
function DisplayPropertiesOfObject(obj,LevelsDeep)
{
    for(var key in obj)
    {
        Debug('<b>' + key + '</b>: ' + obj[key]);
    }
}
function Debug(str)
{
    $('#DebugOut').append("<br/>" + str);
}

function CheckboxValue()
{
    Debug("Visible Area: " + $("#flip-b").val());
}


function AppendSavedQueryToPlottedTable(SavedQryID,SavedQryRecord)
{
    //PlottedQueriesTable
    var HTMLToAppend = '';
    
    HTMLToAppend += '<tr id="Row_' + SavedQryID + '" class="PlottedRowUnit"><td>'; //Start of Row
    HTMLToAppend += '<div id="PrimaryDIV" style="margin:0;padding:0;">'
    
    //Start Information Table
    HTMLToAppend += '<table style="width:270px;">'
    

    HTMLToAppend += '<td rowspan="2" style="width:16px;"><div style="padding:0px 0px 0px 0px;" id="' + SavedQryRecord.Id  + '"><img src="' +LoadingGIFUrl +'"/></div></td>';         
    
    HTMLToAppend += '<td colspan="2"><b>' + SavedQryRecord.Name + '</b></td>';
    
    //remove namespace
    removeNamespace('{!namespace}', SavedQryRecord);
    
    if (SavedQryRecord.PicklistField__c != null)
    {
        HTMLToAppend += '<td rowspan="2" style="width:12px;text-align:left;"><table border="0" cellspacing="0" cellpadding="0" align="right"><tr height="5px;"><td width="5px;" style="background-color:red;"></td><td width="5px;" style="background-color:green;"></td></tr><tr height="5px;"><td width="5px;" style="background-color:blue;"></td><td width="5px;"style="background-color:yellow;"></td></tr></table></td>';
    }
    else
    {
        if (SavedQryRecord.IconColor__c && SavedQryRecord.IconColor__c.indexOf('image:') == 0) {
            HTMLToAppend += '<td rowspan="2" style="text-align:center;"><img src="'+MA.SitePrefix+'/servlet/servlet.FileDownload?file='+SavedQryRecord.IconColor__c.split('image:')[1]+'" style="height: 20px; max-width: 30px;" /></td>';
        }
        else {
            HTMLToAppend += '<td rowspan="2" style="width:12px;text-align:left;"><div style="padding:0px 0px 0px 0px; width: 10px; height: 10px; background-color:' + SavedQryRecord.IconColor__c +';"></div></td>';
        }
    }
    
    
    
    HTMLToAppend += '</tr><tr id="Row_' + SavedQryID + '">';
    HTMLToAppend += '<td style="color:gray;">' + SavedQryRecord.BaseObject__r.Name__c + '</td>';
    HTMLToAppend += '<td style="text-align:left;"><span id="' + SavedQryID + '_Stats" style="display:none;">';
    HTMLToAppend += '<table cellpadding="2" cellspacing="0" align="left"><tr>';
    HTMLToAppend += '<td><span id="' + SavedQryID + '_Count"></span></td>';
    HTMLToAppend += '<td>of</td>';
    HTMLToAppend += '<td><span id="' + SavedQryID + '_Total"></span></td>';
    HTMLToAppend += '</tr></table></span></td>';
    


    HTMLToAppend += "</tr>";
    HTMLToAppend += '</table>' //End Information Table
       
    HTMLToAppend += '</div>'
    HTMLToAppend += '</td></tr>'; //End of Row
    
    $('#PlottedQueriesTable').append(HTMLToAppend);
}   
        
function ToggleMissingAddressContent(obj)
{
    if ($(obj).html() == "Show")
    {
        $(obj).html('Hide');
        
    }
    else
    {
        $(obj).html('Show');
    }
    
    
    
    $(obj).parent().find('div').slideToggle('slow', function() {
        // Animation complete.
      });
    
}   
        
function AddToMissingAddressesTab(pTp,sReason)
{
    try
    {
        //Debug("AddToMissingAddressesTab " + pTp.QryId);
        
        ProcessedSavedQueries[pTp.QryId].AddressesNotFound++;
        
        if (ProcessedSavedQueries[pTp.QryId].AddressesNotFound == 1)
        {
            var HTMLToAdd = '';
            
            HTMLToAdd += '<div id="' + pTp.QryId + '_MissingAddresses_Header" >';
                HTMLToAdd += pTp.queryName + ' <span id="count">(1)</span> <a onclick="ToggleMissingAddressContent(this);">Hide</a>';
                
                HTMLToAdd += '<div id="' + pTp.QryId + '_MissingAddresses_Content">';
                    HTMLToAdd += '<table cellpadding="3" id="' + pTp.QryId + '_MissingAddresses_Table" style="width:100%;">';
                    
                    HTMLToAdd += '<tr>';
                        HTMLToAdd += '<td><a target="_blank" href="/' + pTp.sObject + '">' + pTp.ToolTip1V + '</a></td>';
                        HTMLToAdd += '<td>' + pTp.MarkerAddress + '</td>';
                        HTMLToAdd += '<td style="text-align:right;">' + sReason + '</td>';
                    HTMLToAdd += '</tr>';
                    
                    HTMLToAdd += '</table>';
                HTMLToAdd += '</div>';
            HTMLToAdd += '</div>';
            
            $('#MissingAddressesContent').append(HTMLToAdd);
        }
        else
        {
            HTMLToAdd = '<tr>';
                HTMLToAdd += '<td><a target="_blank" href="/' + pTp.sObject + '">' + pTp.ToolTip1V + '</a></td>';
                HTMLToAdd += '<td>' + pTp.MarkerAddress + '</td>';
                HTMLToAdd += '<td style="text-align:right;">' + sReason + '</td>';
            HTMLToAdd += '</tr>';
            
            $('#' + pTp.QryId + '_MissingAddresses_Table').append(HTMLToAdd);
            
            $('#' + pTp.QryId + '_MissingAddresses_Header > span').html('(' + ProcessedSavedQueries[pTp.QryId].AddressesNotFound + ')');
            
            
        }
        
       
        
        if (ProcessedSavedQueries[pTp.QryId] == undefined)
        {
            DisplayPropertiesOfObject(ProcessedSavedQueries,0);
            Debug('<span style="color:red;">ProcessedSavedQueries[' + pTp.QryId + '] Is Undefined');
        }
        else
        {
            //Debug("Object Id: " + pTp.RecordId);
            ProcessedSavedQueries[pTp.QryId].ProcessedMarkersCount++;
            ProcessedSavedQueries[pTp.QryId].SetProccessingStatus();
        }
        
    }
    catch(err)
    {
        Debug("Error, AddToMissingAddressesTab, " + err.description);
        
        DisplayPropertiesOfObject(err,0);
        
        DisplayPropertiesOfObject(pTp,0);
    }
    
}

function ShowProxDiv()
{
$("#Proximity").show();
$("#Routes").hide();
//$("#Legend").hide();
$("#Queries").hide();
}

function ZoomIn()
{
    if (map.zoomLevel != map.maxZoomLevel)
    {
        map.setZoomLevel(map.zoomLevel + 1,"default");
    }
}

function ZoomOut()
{
    if (map.zoomLevel != map.minZoomLevel)
    {
        map.setZoomLevel(map.zoomLevel - 1,"default");
    }
}

/**************************
 *  LinkedIn Integration
 **************************/
        
function linkedInCluster_Click()
{
    var marker = this;
    
    //create the tooltip content
    var $tooltipContent = $('#templates .linkedin-cluster-tooltip').clone();
    var connectionCount = 0;
    $.each(marker.connectionsMap, function (id, connection) {
        connectionCount++;
        $tooltipContent.find('.linkedin-cluster-table').append(
            populateLinkedInRow($('#templates .linkedin-row').clone(), connection)
        );
    });
    $tooltipContent.find('.linkedin-cluster-header').text(connectionCount + ' Connections');
    
    //create info bubble
    InfoBubbles.addBubble(
        $tooltipContent.wrap('<div/>').parent().html(),
        marker.coordinate
    );
       
    //link the tooltip to this marker
    $('.linkedin-cluster-tooltip:visible').data('marker', marker);
}
        
function populateLinkedInRow($row, connection)
{
    if (connection.type == 'Company')
    {
        $row.attr('data-id', connection.id);
        $row.find('.linkedin-picture').html('<img src="'+(connection.squareLogoUrl || connection.logoUrl || "{! URLFOR($Resource.sma__MapAnything, 'images/LinkedIn-NoPicture.png') }")+'" style="width: 80px;" />');
        $row.find('.linkedin-name').html('<a href="http://linkedin.com/company/'+connection.id+'" target="_blank">'+connection.name+'</a>');
        $row.find('.linkedin-headline').html('<a href="'+(connection.websiteUrl || '')+'">'+(connection.websiteUrl ? 'Company Website' : '')+'</a>');
        $row.find('.linkedin-industry').html(connection.markerAddress);
        
        //show actions for companies instead of connections
        $row.find('.linkedin-actions').hide();
        $row.find('.linkedin-companyactions').show();
    }
    else
    {
        var distanceMap = {
            1   : '<span><b>1</b>st</span>',
            2   : '<span><b>2</b>nd</span>',
            3   : '<span><b>3</b>rd</span>'
        };
    
        $row.attr('data-id', connection.id);
        $row.find('.linkedin-picture').html('<img src="'+(connection.pictureUrl || "{! URLFOR($Resource.sma__MapAnything, 'images/LinkedIn-NoPicture.png') }")+'" style="width: 80px;" />');
        $row.find('.linkedin-name').html('<a href="'+connection.siteStandardProfileRequest.url+'" target="_blank">'+connection.firstName + ' ' + connection.lastName+'</a>' + (distanceMap[connection.distance] || ''));
        $row.find('.linkedin-headline').html(connection.headline);
        $row.find('.linkedin-industry').html(connection.markerAddress + ' | ' + connection.industry);
    }
    
    return $row;
}

function geocodeMultipleRecords(recordsToGeocode, baseObjectId, callback)
{
    MA.Geocoding.geocodeMultipleRecords({ records: recordsToGeocode, baseObjectId: baseObjectId }, function (response) {
        if (response.success) {
            try { callback(response.numSuccess, response.numFail); } catch (err) { MALog(err); }
        }
        else {
            MALog(response);
            
            //mark all as fail
            $.each(recordsToGeocode, function (index, record) {
                record.isGeocoded = record.isBadAddress = true;
            });
            
            //callback
            try { callback(0, recordsToGeocode.length); } catch (err) { }
        }
    });
}

function PlottedQueries_Show()
{
    if ($('#PlottedQueriesTable').children().length == 0) {
        $('#PlottedQueriesWatermark').show();
        $('#PlottedQueriesHeader').hide();
    }
    else {
        $('#PlottedQueriesWatermark').hide();
        $('#PlottedQueriesHeader').show();
    }
    $("#Slider-PlottedSavedQueries").show();
    $("#Slider-Tree").hide();
}

function PlotQuery(requestData, visibleAreaOnly, options)
{
    //we could potentially be sent a saved query id or an object with query data as requestData.  if a saved query id was passed, transform it to an object for consistent use later
    var SavedQryID = '';
    if (typeof requestData == 'string') {
        SavedQryID = requestData;
        requestData = { id: SavedQryID };
    }
    else if (requestData.plottedQuery) 
    {
        //this is a refresh query so the id is passed in the request
        SavedQryID = requestData.id;
    }

    //remove ready class for visible are button until finished
    $('#visibleAreaRefeshMap').removeClass('ready');

    //create a new plotted query from the template
    var $plottedQuery;
    if (requestData.plottedQuery) {
    
        //use the plotted query that was passed
        $plottedQuery = requestData.plottedQuery;
        delete requestData.plottedQuery;
        
        //clear previous data
        try { $plottedQuery.data('distanceLimitCircle').setMap(null); } catch (err) { }
        $plottedQuery.removeData().data(requestData).addClass('loading').find('.legend-showhide, .legend, .legend-moreless').hide().filter('.legend').empty();
        $plottedQuery.find('.status').html('Refreshing query...');
    }
    else {
        $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data(requestData).prependTo($('#PlottedQueriesTable'));
        $plottedQuery.find('.status').html('Running query...');
    }

    //add basic info
    if (SavedQryID == '') {
        $plottedQuery.find('.basicinfo-name').text('Map It');
        $plottedQuery.find('.basicinfo-baseobjectname').text('Plotting');
    }
    else {
        $plottedQuery.find('.basicinfo-name').text($('#SQTree #'+SavedQryID+' a').clone().children().remove().end().text());        //the added complication is just used to get the top-level text element (the actual structure has an ins element that has extra text in it)
        $plottedQuery.find('.basicinfo-baseobjectname').text($('#SQTree #'+SavedQryID).attr('title'));
    }
    
    //show plotted queries
    window.setTimeout(function(){ 
        PlottedQueries_Show();                   
    }, 0);
    
    //populate default data
    $.extend($plottedQuery.data(), {
        recordsToGeocode: [],
        numGeocodeRequestsOut: 0,
        numSuccessfulGeocodes: 0,
        numFailedGeocodes: 0,
        visibleAreaOnly: visibleAreaOnly || false,
        proximityObjects: []
    });
    
    //analyze the query to get the total number of records
    analyzeQuery({
        plottedQuery: $plottedQuery.addClass('testing'),
        callback: function (success, records) {
    
            //status
            $plottedQuery.find('.status').html('Analyzing Query...');
        
            //loop through the returned record ids and send them out for processing in batches
            var recordBatch = [];
            $.each(records, function (index, record) {
                if (recordBatch.length < 100)
                {
                    recordBatch.push(index);
                }
                else
                {
                    //this batch is full.  send it to be processed
                    processBatch($plottedQuery, recordBatch);
                    
                    //move on to the next batch
                    recordBatch = [];
                    recordBatch.push(index);
                }
            });
            
            //send the last batch if needed
            if (recordBatch.length > 0){
                processBatch($plottedQuery, recordBatch);
            }
            
            //all of the batches have been sent for processing.  start a poller that will periodically check if processing is complete
            $plottedQuery.data(
                'processingInterval', 
                setInterval(function () {
                    
                    //loop through all records.  we're done if everything has been processed
                    var processingComplete = true;
                    var numRecords = 0;
                    var numProcessed = 0;
                    $.each($plottedQuery.data('records'), function (index, record) {
                        if (!record.isProcessed) {
                            processingComplete = false;
                        }
                        else {
                            numProcessed++;
                        }
                        numRecords++;
                    });
                    
                    //keep track of the total number of records for use later
                    $plottedQuery.data('numRecords', numRecords);
                    
                    //status
                    $plottedQuery.find('.status').html('Processing: ' + numProcessed + ' of ' + numRecords);
                    
                    //if we're done processing, we need to send geocode requests for those records that do not have lat/long information
                    if (processingComplete)
                    {
                        clearInterval($plottedQuery.data('processingInterval'));
                        
                        //status
                        var needGeocodeCounter = $plottedQuery.data('recordsToGeocode').length;
                        $plottedQuery.data('numGeocodeRequestsNeeded', needGeocodeCounter).data('numGeocodeRequestsCompleted', 0).find('.status').html('Geocoding: 0 of ' + needGeocodeCounter);
                        
                        //build additional request data to be sent with geocode requests
                        var additionalRequestData = {
                            savelatlong             : true,
                            CleanStreetField        : $plottedQuery.data('addressFields').CleanStreet,
                            CleanCityField          : $plottedQuery.data('addressFields').CleanCity,
                            CleanStateField         : $plottedQuery.data('addressFields').CleanState,
                            CleanPostalCodeField    : $plottedQuery.data('addressFields').CleanZip,
                            CleanCountryField       : $plottedQuery.data('addressFields').CleanCountry,
                            CleanCountyField        : $plottedQuery.data('addressFields').CleanCounty,
                            CleanDistrictField      : $plottedQuery.data('addressFields').CleanDistrict,
                            LatitudeField           : $plottedQuery.data('coordinateFields').Latitude,
                            LongitudeField          : $plottedQuery.data('coordinateFields').Longitude,
                            QualityField            : $plottedQuery.data('addressFields').Quality,
                            SimilarityField         : $plottedQuery.data('addressFields').Similarity
                        };
                        
                        //build a finish function to be called when geocoding is complete
                        function geocodingComplete(){
                            clearInterval($plottedQuery.data('geocodingInterval'));
                            
                            //status
                            $plottedQuery.find('.status').html('Creating Markers: ');
                            
                            //create markers
                            var markerCount = 0;
                            $.each($plottedQuery.data('records'), function (index, record) {
                                if (MA.Util.testLatLng(record.markerLatitude, record.markerLongitude)) {
                                    record.marker = CreateMarkerFromRecord(record);
                                    record.clusterMarker = CreateMarkerFromRecord(record, {isForCluster:true});
                                    record.scatterMarker = CreateMarkerFromRecord(record, {isForScatter:true});
                                    markerCount++;
                                }
                                
                                if (markerCount >= (userSettings.maxQuerySize || 10000)) { return false; }
                            });
                            
                            //populate marker labels
                            $plottedQuery.data('numMarkers', markerCount);
                            $plottedQuery.find('.legend-row').each(function () {
                                $(this).find('.visiblemarkers').text('0');
                                $(this).find('.of').text('of');
                                $(this).find('.totalmarkers').text($(this).data('numMarkers'));
                                
                                //mark and show this legend row based on whether or not it has markers (used for the show more/less functionality)
                                if ($(this).data('numMarkers') > 0){
                                    $(this).show();
                                }
                                else {
                                    $(this).addClass('empty');
                                }
                            });
                            
                            //update legend show/hide features based on the data
                            if ($plottedQuery.find('.legend-row').length > 0) {
                                $plottedQuery.find('.legend-showhide').show();
                            }
                            if ($plottedQuery.find('.legend-row.empty').length > 0) {
                                $plottedQuery.find('.legend-moreless').show();
                            }
                            
                            //status
                            $plottedQuery.find('.status').html('Rendering Markers');
                            
                            var mode = $plottedQuery.data('advancedOptions').defaultRenderMode || 'Markers';
                            mode = mode == 'Default' ? 'Markers' : mode;
                            options = $.extend({
                                success: function () {},
                                renderAs : [mode]
                            }, options || {});

                            //render
                            /*var mode = $plottedQuery.data('advancedOptions').defaultRenderMode || 'Markers';
                            mode = mode == 'Default' ? 'Markers' : mode;
                            renderQuery($plottedQuery, markerCount > 500 ? (mode == 'Markers' ? 'Cluster' : mode) : mode, function () {
                            
                                //remove loading status
                                $plottedQuery.removeClass('loading');
                                $plottedQuery.find('.queryIcon').show();
                                $plottedQuery.find('.loading-icon').hide();
                                
                                //if this is a Record query, we need to zoom to the record and potentially place a prox circle
                                if ($plottedQuery.data('id').indexOf('Record-') == 0)
                                {
                                    var mapItRecord;
                                    
                                    //update the name of this plotted query to include a link to the first record (should only be one record)
                                    $.each($plottedQuery.data('records'), function (index, record) {
                                        $plottedQuery.find('.basicinfo-name').html('Map It - <a href="/'+$plottedQuery.data('RecordId')+'" target="_blank">'+extractTooltipValue($plottedQuery.data('tooltips')[0], record)+'</a>');
                                        $plottedQuery.find('.basicinfo-baseobjectname').text($plottedQuery.data('baseObjectLabel'));
                                        mapItRecord = record;
                                        return false;
                                    });
                                
                                    if ($('.mapit-proximity-on').is(':checked'))
                                    {
                                        //this is a map it query and we need to put a prox circle on the marker
                                        try {
                                            addProximityLayer({ proximityType: 'Circle', latitude: mapItRecord.markerLatitude, longitude: mapItRecord.markerLongitude });
                                            ZoomToFit();
                                        }
                                        catch (err) {
                                        }
                                    }
                                    else
                                    {
                                        //no need for a prox circle, just zoom to fit
                                        ZoomToFit();
                                        if (map.zoomLevel > 15) map.set("zoomLevel", 15); //zoom out if too close   
                                    }
                                }
                                
                                //update the saved query name and the base object label
                                $plottedQuery.find('.basicinfo-name').html($plottedQuery.data('savedQueryName'));
                                $plottedQuery.find('.basicinfo-baseobjectname').html($plottedQuery.data('baseObjectLabel'));
                            
                                //success callback
                                options.success();

                            });*/

                            //check total count and remove markers if > 500
                            if(markerCount > 500) {
                                var removeMarker = false;
                                var markerIndex = 0;
                                var containsCluster = false;
                                for (var i = 0; i < options.renderAs.length; i++) {
                                    var mode = options.renderAs[i];
                                    if(mode == 'Markers') {
                                        markerIndex = i;
                                        removeMarker = true;
                                    }
                                    if(mode == 'Cluster') {
                                        containsCluster = true;
                                    }
                                }
                                if(removeMarker) {
                                    options.renderAs.splice(markerIndex,1);
                                }
                                if(removeMarker && !containsCluster) {
                                    options.renderAs.push('Cluster');
                                }
                            }

                            /*** Added for refresh visible area button ***/
                            //render the query in each mode that was requested
                            setTimeout(function doRender() {
                                var mode = options.renderAs.shift();

                                //status
                                $plottedQuery.find('.status').html("{!$Label.sma__ma_rendering} " + mode);
                                
                                //render
                                renderQuery($plottedQuery, mode, function () {
                                    
                                    //done?
                                    if (options.renderAs.length > 0) {
                                        
                                        //no, continue rendering
                                        setTimeout(doRender);
                                    }
                                    else {
                                    
                                        //remove loading status
                                        $plottedQuery.removeClass('loading');
                                        $plottedQuery.find('.queryIcon').show();
                                        $plottedQuery.find('.loading-icon').hide();
                                        
                                        //if this is a Record query, we need to zoom to the record and potentially place a prox circle
                                        if ($plottedQuery.data('id').indexOf('Record-') == 0)
                                        {
                                            var mapItRecord;
                                            
                                            //update the name of this plotted query to include a link to the first record (should only be one record)
                                            $.each($plottedQuery.data('records'), function (index, record) {
                                                $plottedQuery.find('.basicinfo-name').html('Map It - <a href="/'+$plottedQuery.data('RecordId')+'" target="_blank">'+extractTooltipValue($plottedQuery.data('tooltips')[0], record)+'</a>');
                                                $plottedQuery.find('.basicinfo-baseobjectname').text($plottedQuery.data('baseObjectLabel'));
                                                mapItRecord = record;
                                                return false;
                                            });
                                        
                                            if ($('.mapit-proximity-on').is(':checked'))
                                            {
                                                //this is a map it query and we need to put a prox circle on the marker
                                                try {
                                                    addProximityLayer({ proximityType: 'Circle', latitude: mapItRecord.markerLatitude, longitude: mapItRecord.markerLongitude });
                                                    ZoomToFit();
                                                }
                                                catch (err) {
                                                }
                                            }
                                            else
                                            {
                                                //no need for a prox circle, just zoom to fit
                                                ZoomToFit();
                                                if (map.zoomLevel > 15) map.set("zoomLevel", 15); //zoom out if too close   
                                            }
                                        }
                                        
                                        //update the saved query name and the base object label
                                        $plottedQuery.find('.basicinfo-name').html($plottedQuery.data('savedQueryName'));
                                        $plottedQuery.find('.basicinfo-baseobjectname').html($plottedQuery.data('baseObjectLabel'));
                                    
                                        //success callback
                                        options.success();
                                        $('#visibleAreaRefeshMap').addClass('ready');
                                    }
                                });
                            
                            });
                        }
                        
                        //keep sending requests until we're up to 200 or there's nothing left to geocode
                        var initialRequestCounter = 0;
                        var recordsToGeocode = $plottedQuery.data('recordsToGeocode');
                        if (recordsToGeocode.length == 0)
                        {
                            geocodingComplete();
                        }
                        else if (recordsToGeocode.length < 15) {
                            $plottedQuery.data({ numGeocodeRequestsNeeded: recordsToGeocode.length, numGeocodeRequestsOut: recordsToGeocode.length, numGeocodeRequestsOut: recordsToGeocode.length });
                            $plottedQuery.find('.status').html("{!$Label.sma__ma_geocoding}: " + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut')) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));

                            var itemsToUpdate = [];
                            var recordMap = {};
                            $.each(recordsToGeocode, function (i, record) {
                                recordMap[record.record.Id] = record;
                            });

                            var numSuccess = 0;
                            var numFail = 0;
                            var doGeo = function () {
                                var record = recordsToGeocode.splice(0, 1)[0];
                                MA.Geocoding.geocode({ address: record.markerAddress }, function (response) {
                                    if (!response.success) { response.result = { IsBadAddress: true }; }
                                    $.extend(record, {
                                        isBadAddress    : response.result.IsBadAddress,
                                        latitude        : response.result.Latitude,
                                        longitude       : response.result.Longitude,
                                        markerLatitude  : response.result.Latitude,
                                        markerLongitude : response.result.Longitude
                                    });

                                    //keep track of this item for updating the db (also need parent record id if address information is inherited)
                                    var item = { Operation: 'Geocode', Priority: 1, RequestData: { recordId: record.record.Id, address: record.markerAddress }, ResponseData: response.result };
                                    var addressObject = MA.Util.g(record.plottedQuery.data(), 'coordinateFields.AddressObject') || 'SAME';
                                    if (addressObject != 'SAME') {
                                        item.RequestData.addressObjectId = record.record[addressObject];
                                    }
                                    itemsToUpdate.push(item);

                                    //keep track of success rate
                                    if (recordMap[item.RequestData.recordId].isBadAddress) {
                                        numFail++;

                                    }
                                    else {
                                        recordMap[item.RequestData.recordId].latLng = new google.maps.LatLng(response.result.Latitude, response.result.Longitude);
                                        
                                    }
                                    $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') - 1);
                                    $plottedQuery.find('.status').html("{!$Label.sma__ma_geocoding}: " + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut')) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
                                    
                                    if (recordsToGeocode.length > 0) {
                                        doGeo();
                                    }
                                    else {
                                        $plottedQuery.data({ numSuccessfulGeocodes: numSuccess, numFailedGeocodes: numFail });
                                        $plottedQuery.find('.status').html('Saving Geocodes...');
                                        doSave();
                                    }
                                });
                            };
                            var doSave = function () {
                                var processData = {
                                    ajaxResource : 'MAGeoCodeAJAXResources',
                                    
                                    action: 'updateRecordsFromQueueItems',
                                    serializedItems: JSON.stringify(itemsToUpdate), 
                                    baseObjectId: $plottedQuery.data('BaseObjectId')
                                };
                                
                                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                    processData,
                                    function(response, event){
                                        if(event.status) {
                                            $.each(response.updatedRecords, function (i, record) {
                                                $.extend(recordMap[record.Id].record, record);
                                            });
                                        }
                                        else
                                        {
                                            //still proceed, but log an error that we couldn't write back to the database
                                            MA.log('Unable to write back to the database', response);
                                        }
                                        geocodingComplete();
                                    },{buffer: false,escape:false}
                                );
                            };

                            doGeo();
                        }
                        else
                        {
                            while (recordsToGeocode.length > 0 && initialRequestCounter < 200)
                            {
                                initialRequestCounter++;
                                var recordsToSend = recordsToGeocode.splice(0, 10);
                                $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + recordsToSend.length);
                                geocodeMultipleRecords(recordsToSend, $plottedQuery.data('BaseObjectId'), function handleGeocode (numSuccess, numFail) {
                                    $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') - numSuccess - numFail);
                                    $plottedQuery.find('.status').html('Geocoding: ' + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut') - recordsToGeocode.length) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
                                    $plottedQuery.data('numSuccessfulGeocodes', $plottedQuery.data('numSuccessfulGeocodes') + numSuccess);
                                    $plottedQuery.data('numFailedGeocodes', $plottedQuery.data('numFailedGeocodes') + numFail);
                                    
                                    //send out a new request if there are any.  move on to rendering if we're done
                                    if (recordsToGeocode.length > 0) {
                                        var nextRecordsToSend = recordsToGeocode.splice(0, 10);
                                        $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + nextRecordsToSend.length);
                                        geocodeMultipleRecords(nextRecordsToSend, $plottedQuery.data('BaseObjectId'), handleGeocode);
                                    }
                                    else if ($plottedQuery.data('numGeocodeRequestsOut') == 0) {
                                        geocodingComplete();
                                    }
                                }, additionalRequestData);//end geocode record
                            }//end while
                        }
                    }
                }, 500)
            ); 
        }//analyze callback
    });//analyzeQuery
}

var locationMarkers = [];
function PlotFavoriteLocation(options)
{
    options = options || {};
    imgLoaderCounts['FavoriteLocations'] = 0;
    
    //send a request for the metadata for these locations and folders
    var processData = {
        action : 'getLocationInfo',
        ajaxResource : 'MAFavoriteLocationsAJAXResources',
        folderId: options.id
    };
        
    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
        processData,
        function(response, event){
            if(event.status) {
                var location = removeNamespace('{!namespace}', response.data.locations[0]);
                var markerColor = location.FavoriteMarker__c;
                var latitude = location.Latitude__c;
                var longitude = location.Longitude__c;
                var name = location.Name;
                var MarkerCoordinate = new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude));
                var markerOptions = {
                    visibility: true,
                    brush: markerColor,
                    Ignore: false,
                    Lat: latitude,
                    Long: longitude,
                    description: location.Description__c,
                    title: location.Name,
                    record: {
                        record: location,
                        markerAddress: location.Address__c
                    }
                };
                 
                if(markerColor.indexOf('image:') == 0)
                {
                    //done.  preload each image that this query will be using
                    var imgId = markerColor.split('image:')[1];
                    var img = new Image();
                    img.queryId = 'FavoriteLocations';
                    img.imgId = imgId;
                    img.name = MA.SitePrefix+'/servlet/servlet.FileDownload?file='+imgId;
                    img.src = MA.SitePrefix+'/servlet/servlet.FileDownload?file='+imgId;
                    img.onload = imgLoaded;
                    img.onerror = imgError;
                    img.onabort = imgError;
                    imgLoaderCounts['FavoriteLocations'] = imgLoaderCounts['FavoriteLocations'] + 1;
                    
                    var newMarker = new google.maps.Marker($.extend(markerOptions, {
                        position: MarkerCoordinate, 
                        layerType: 'favorite-marker',
                        maData: { visibility: false, markerColor: markerColor }
                    }));
                    google.maps.event.addListener(newMarker, 'click', favLocation_Click);
                    locationMarkers.push(newMarker);
                }
                else
                {
                    //static color marker
                    function shadeColor(color, percent) {   
                        var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) - amt, B = (num >> 8 & 0x00FF) - amt, G = (num & 0x0000FF) - amt;
                        return "#" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
                    }
                    function unshadeColor(color, percent) {
                        var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) + amt, B = (num >> 8 & 0x00FF) + amt, G = (num & 0x0000FF) + amt;
                        return "#" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
                    }
                    function isDark(color) {
                        var num = parseInt(color.slice(1),16);
                        return (num >> 16) + (num >> 8 & 0x00FF) + (num & 0x0000FF) < 225;
                    }
                    
                    var newMarker = new google.maps.Marker($.extend(markerOptions, {
                        map: MA.map,
                        position: MarkerCoordinate,
                        icon: {
                            url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(
                                $('#templates .svg-marker-favorite').clone().wrap('<div/>').parent().html()
                                    .replace(/__INDEX__/g, 'Fav-' + MA.componentIndex++ + '-' + location.Id)
                                    .replace(/__GRADIENT_ONE__/g, markerColor)
                                    .replace(/__GRADIENT_TWO__/g, shadeColor(markerColor, 20))
                                    .replace(/__CIRCLE_STROKE__/g, shadeColor(markerColor, 25))
                                    .replace(/__CIRCLE_FILL__/g, isDark(markerColor) ? unshadeColor(markerColor, 90) : shadeColor(markerColor, 90))
                            )),
                            anchor: new google.maps.Point(14,42)
                        },
                        layerType: 'favorite-marker',
                        maData: { visibility: true }
                    }));
                    google.maps.event.addListener(newMarker, 'click', favLocation_Click);
                    
                    locationMarkers.push(newMarker);
                }
                hideMessage($('#FavoriteCreateLocation .loadmask-wrapper'));
            }
        },{buffer: false,escape:false}
    );
    
    //set an interval to determine when all of the images have loaded so we can continue processing
    imgLoaderIntervals['FavoriteLocations'] = setInterval(
        function () {
             if ((imgLoaderCounts['FavoriteLocations'] || 0) == 0) 
             {
                 clearInterval(imgLoaderIntervals['FavoriteLocations']);
                 try 
                 {
                    $.each(locationMarkers, function (index, newMarker)
                    {
                        if(newMarker.visibility == false)
                        {   
                            newMarker.setIcon({
                                url: MA.SitePrefix+'/servlet/servlet.FileDownload?file=' + newMarker.maData.markerColor.split('image:')[1],
                                anchor: new google.maps.Point(imgLoaderDimensions[newMarker.maData.markerColor.split('image:')[1]].width/2, imgLoaderDimensions[newMarker.maData.markerColor.split('image:')[1]].height)
                            });
                            newMarker.maData.visibility = true;
                            newMarker.setMap(MA.map);
                            locationMarkers.push(newMarker);
                        }
                    });
                 } 
                 catch (err) { }
            }
        }, 400
    );
}

    //helper method for extracting nested objects using a dot notation field name
    function extractValue(obj, field)
    {
        try {
            var fieldParts = field.split('.');
            var currentObj = obj;
            for (var i = 0; i < fieldParts.length; i++)
            {
                currentObj = currentObj[fieldParts[i]];
            }
            return (typeof currentObj == 'undefined' || currentObj == null) ? '' : currentObj;
        }
        catch (err) { }
        
        return '';
    }
    
    function launchNativeGPS(lat, lng)
    {
        //figure out which iOS version this is
        var versions;
        var address;
        var takeMeThereURL;
        
        if( (navigator.platform.indexOf("iPhone") != -1) || (navigator.platform.indexOf("iPod") != -1) || (navigator.platform.indexOf("iPad") != -1))
        {
            takeMeThereURL = "maps://maps.google.com/maps?daddr=" +  encodeURIComponent(lat+','+lng);
        }
        else
        {
            takeMeThereURL = 'http://maps.google.com/maps?daddr=' + encodeURIComponent(lat+','+lng);
        }
        
        /*
        if (/iP(hone|od|ad)/.test(navigator.platform)) {

            // supports iOS 2.0 and later: http://bit.ly/TJjs1V
            var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
            versions = [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];
        }
        if (versions && versions[0] <= 5) {
            takeMeThereURL = 'http://maps.google.com/maps?daddr=' + encodeURIComponent(lat+','+lng);   //native google maps
        }
        else if (versions) {
            takeMeThereURL = 'comgooglemaps://?saddr=&daddr=' + encodeURIComponent(lat+','+lng);
        }
        else {
            takeMeThereURL = 'http://maps.google.com/maps?daddr=' + encodeURIComponent(lat+','+lng);   //not iOS
        }
        */
            
        //launch
        if (sforce && sforce.one && window.navigator.userAgent.toLowerCase().indexOf('salesforce1') != -1) {
            sforce.one.navigateToURL(takeMeThereURL);
        }
        else {
            window.open(takeMeThereURL);
        }
    }

    /********************************
    *   Routing On Ready
    ********************************/
    $(function () {
    
        //set year options
        var today = new Date();
        var year = today.getFullYear();
        for(i = year + 2; i >= year - 5; i--)
        {
            $('#routeyear').append('<option value="'+i+'">'+i+'</option>');
        }
        
        //set the current date
        $('#route-date').val(moment().format('YYYY-MM-DD'));
        $('#routemonth').val(today.getMonth() + 1);
        $('#routeyear').val(year);
        try { $('#routemonth').selectmenu('refresh'); } catch (err) {}
        try { $('#routeyear').selectmenu('refresh'); } catch (err) {}
        
        //handle changing the route date
        $('#routeyear, #routemonth').on('change', routesCalendar_Refresh);
        
        //fire a change to populate the route list
        $('#routeyear').change();
        
        //handle changing a waypoint index
        $('#sortable').on('change', '.RowNumber', function () {
            var lockOffset = $('#sortable li[data-locktype="start"], #sortable li[data-locktype="startend"]:first-child').length == 0 ? 0 : 1;
            var waypointIndex = $(this).val() - 1 + lockOffset;
            if (waypointIndex != $(this).closest('li').index()) {
                if (waypointIndex < $(this).closest('li').index()) {
                    $(this).closest('li').insertBefore($('#sortable').children().eq(waypointIndex));
                }
                else {
                    $(this).closest('li').insertAfter($('#sortable').children().eq(waypointIndex));
                }
                recalculateRowOrder();
            }
        });
    });
    
    /********************************
    *   Routing Support Methods
    ********************************/
    
    //this function will return the total number of days in a month
    function daysInMonth(month, year) 
    {
        return new Date(year, month, 0).getDate();
    }
    
    //refresh the routes calendar based on the selected month
    function routesCalendar_Refresh(options)
    {
        //show loading
        $('#routeCalendarTable').html($('<img style="margin-left: 136px; margin-top: 30px; width: 24px;" />').attr('src', "{!URLFOR($Resource.sma__MapAnything, 'ajax-loader.gif')}"));
    
        //default options
        options = $.extend({
            success: function () {}
        }, options || {});
        
        //send a request to get the routes for this time frame
        var processData = {
            ajaxResource : 'MAWaypointAJAXResources',
            action : 'getRoutes',
            month   : $('#routemonth').val(),
            year    : $('#routeyear').val(),
            lookupId  : '{!userId}',
            lookupField : 'sma__User__c'
        };
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            processData,
            function(response, event){
                if(event.status) {
                    var days = daysInMonth($('#routemonth').val(), $('#routeyear').val());
                    $('#routeCalendarTable').empty();
                    
                    //add routes for each day in this month
                    for(i = 1; i <= days; i++)
                    {
                        if(response.routes[i] && response.routes[i].length > 0)
                        {
                            //var hasroute = false;
                            //$.each(response.routes[i], function(index, wrapper) {
                            //    hasroute = (wrapper.route.Id != null || hasroute);
                            //});
                            // ROUTEPLANNER
                            //if(hasroute)
                            //{
                                $('#routeCalendarTable').append('<li data-role="list-divider">'+i+'</li>');
                                $.each(response.routes[i], function(index, wrapper) {
                                    //if( wrapper.route.Id )
                                        $('#routeCalendarTable').append('<li id="' + wrapper.routeId + '" data-name="' + wrapper.route.Name + '" class="route" onclick="displayRoute({target:this,optimize:false}); return false;"><a href="#">' + wrapper.route.Name + '</a></li>');
                                });
                            //}
                        }
                    }
                    
                    //if there are no routes display a message
                    if ($('#routeCalendarTable').children().length == 0)
                    {
                        $('#routeCalendarTable').append('<li data-role="list-divider"><div style="padding: 5px; font-size: 14px; text-align: center;">' + MASystem.Labels.MA_YOU_HAVENT_CREATED_ANY_ROUTES_FOR_THIS_MONTH+ '.</div></li>');
                    }
                    
                    //refresh the listview to get styling
                    try { $('#routeCalendarTable').listview('refresh'); } catch (err) {}
                    
                    //success callback
                    options.success();
                }
                else
                {
                    //there was a problem so just show an error message
                }
            },{buffer: false,escape:false}
        );
    }
    
    //handle clicking a route
    function displayRoute(options, callback)
    {
        options = $.extend({ 
            target: '',
            optimize: false 
        }, options);
        var target = options.target
        var optimize = options.optimize;
        var newOptions = options;
        var routeDone = false;
        //do nothing if there is already a route loading
        if ($('#routeCalendarTable li.route.loading').length > 0) { return; }

        var $route = $(target).addClass('loading');

        if ($route.find('.ui-icon').is('.ui-icon-delete'))
        {
            //remove non-record waypoints
            $.each($route.data('nonRecordMarkers') || [], function (index, marker) {
                marker.setMap(null);
            });

            //hide buttons
            $('.route-buttons').hide();
            
            //remove route container
            try { MA.Routing.mapComponents.polyline.setMap(null); } catch (err) {}
            
            //remove route details
            $('#route-name').val('New Route');
            $('#route-date').val(moment().format('YYYY-MM-DD'));
            $('#sortable').empty().removeAttr('data-route');
            
            //unrender this route
            $.each($route.data('plottedQueries') || [], function (index, $plottedQuery) {
                
                //unrender this query
                unrenderQuery($plottedQuery, 'Markers', function () {
                    $plottedQuery.data('rendered', false);
                    $.each($plottedQuery.data('records'), function (index, record) {
                        if (record.marker) {
                            record.marker.setMap(null);
                        }
                    });
                });
                
            });
            
            //start a poller to check for completion of unrendering
            $route.data('unrenderInterval', setInterval(
                function () {
                    var done = true;
                    $.each($route.data('plottedQueries') || [], function (index, $plottedQuery) {
                        if ($plottedQuery.data('rendered')) {
                            done = false;
                            return false;
                        }
                    });
                    
                    if (done) {
                        clearInterval($route.data('unrenderInterval'));
                        $route.removeClass('loading').find('.ui-icon').removeClass('ui-icon-delete').addClass('ui-icon-arrow-r');
                        if(newOptions.optimize == true) {
                            newOptions.Id = $route.attr('id');
                            displayRoute(newOptions);
                        }
                        else{
                            try { callback(); } catch(err) {}
                        }
                    }
                },
                500
            ));
        }
        else
        {
            //if there is a rendered route, unrender it and then render this one
            if ($('#routeCalendarTable li.route .ui-icon-delete').length > 0)
            {
                $(target).removeClass('loading');
                var options = {
                    target : $('#routeCalendarTable li.route .ui-icon-delete').closest('li.route')[0],
                    optimize : false
                }
                displayRoute(options, function () {
                    displayRoute({target:target,optimize:false}, callback);
                });
                return;
            }
            var getRoute;
            //render this route
            if(newOptions.optimize == true) {
                //use the route information
                if (newOptions.Id)
                {
                    var $row = $('#'+newOptions.Id+'');
                    getRoute = $row.data('response');
                    //set the new order
                    getRoute.waypoints = newOptions.waypoints;
                    routeDone = true;
                }
                else {
                    //new route info
                    var route = {
                        'Date__c' : $('#route-date').val(),
                        'Id' : '',
                        'Name' : $('#route-name').val(),
                        'Options__c' : '{"TimeBasedOptions":{"Enabled":false,"Start":"9:00 am","End":"5:00 pm"}}'
                    }
                    getRoute = {
                        'route' : route,
                        'success' : true,
                        'waypoints' : newOptions.waypoints
                    }
                    routeDone = true;
                }
            }
            else {
                //query for route
                var processData = {
                    ajaxResource : 'MAWaypointAJAXResources',
                    action : 'getRoute',
                    routeId: $(target).attr('id')
                };
                
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        if(event.status) {
                            getRoute = response;
                            routeDone = true;
                        }
                        else
                        {
                            //there was a problem so just show an error message
                            routeDone = true;
                        }
                    },{buffer: false,escape:false}
                );
            }
            
            
            var routeInt = setInterval(function(){ 
                if(routeDone) {

                    clearInterval(routeInt);
                    //populate basic route info
                    removeNamespace('{!namespace}', getRoute.route);
                    
                    //MULTIDAY CHECK
                    removeNamespace('mamd', getRoute.route);
                    
                    $.extend(getRoute.route,{Date__c : getRoute.route.Route_Date__c}); 
                    $('#CurrentRoute-Slide').data('route', getRoute.route);
                    $('#route-name').val(getRoute.route.Name);
                    $('#route-date').val(getRoute.route.Date__c);
                    $('#sortable').empty().attr('data-route', $(target).attr('id'));
                    $('#sortable').attr('data-multiday', getRoute.route.attributes.type.includes('Multiday_Route__c'));
                    $(target).data('response',getRoute);
                    //loop over the waypoints and build a list of queries that need to be requested and non-record waypoints
                    var routeOptions = {}; try { routeOptions = JSON.parse(getRoute.route.Options__c); } catch (err) {}
                    var queriesToRequest = {};
                    var mapItQueriesToRequest = {};
                    var nonRecordWaypoints = []; 
                    var lockOffset = 0;
                    var sortIndex = 0;

                    var selectOptions = '<div class="panel-body">';

                    $.each(getRoute.waypoints, function(index, waypoint) {
                        removeNamespace('{!namespace}', waypoint);
                        
                        //MULTIDAY CHECK
                        removeNamespace('mamd', waypoint);
                        if( waypoint.Lat_Long__c ) waypoint = $.extend(waypoint,{SortOrder__c : index, Latitude__c : waypoint.Lat_Long__c.latitude,Longitude__c : waypoint.Lat_Long__c.longitude, Options__c : '{ "TimeBasedOptions":{"Start":"Set start time...","Duration":"0 hr, 30 min"},"LockType":"unlocked","DraggablePoint":false }' } );
                        
                        //console.log("WAYPOINT");
                        //console.log(waypoint);
                        
                        
                        //add this waypoint to the current route
                        var $waypoint = $(WayPointLI)
                            .attr('Lat', waypoint.Latitude__c || null)
                            .attr('Long', waypoint.Longitude__c || null)
                            .attr('Address', waypoint.Address__c || null)
                            .attr('WayPointTitle', waypoint.Name || null)
                            .attr('data-linkid', waypoint.LinkId__c || null)
                            .attr('baseobject', waypoint.BaseObject__c || null)
                            .attr('savedqueryid', waypoint.MASavedQry__c || null)
                            .attr('tooltips', waypoint.AdditionalData__c || null)
                            .data('waypoint',waypoint)
                            .appendTo('#sortable')
                        ;
                        $waypoint.find('button.RowNumber').text(sortIndex+1);
                        
                        //var $waypointInput = $waypoint.find('input');
                        //$waypointInput.val(waypoint.Name);
                        //console.log($waypointInput.val());
                        //$waypointInput.prop('disabled', true).addClass('DisabledWaypoint ui-input-text ui-body-c ui-corner-all ui-shadow-inset');
                        $waypoint.find('input').val(waypoint.Name).prop('disabled', true).addClass('DisabledWaypoint ui-input-text ui-body-c ui-corner-all ui-shadow-inset route-input');
                        
                        //options
                        var waypointOptions = {};
                        try {
                            //MULTIDAY CHECK
                            if(waypoint.Options__c)
                            {
                                waypointOptions = JSON.parse(waypoint.Options__c);
                                
                                //MOBILE V1 ISSUE RESIDES IN THIS FILTER
                                if(waypointOptions.LockType != 'unlocked' ) {
                                    $waypoint.addClass('startend');
                                    $waypoint.find('button').replaceWith("<div class='flag'><img src=\"{! URLFOR($Resource.sma__MapAnything, 'images/Routing_Start.png') }\" class='start' /><img src=\"{! URLFOR($Resource.sma__MapAnything, 'images/Routing_Finish.png') }\" class='end' /></div>");
                                    
                                    lockOffset = -1;
                                }
                                else {
                                    $waypoint.attr('index', sortIndex);
                                    selectOptions += '<button onclick="sortRows(this);" class="ui-btn ui-btn-up-c mapType-btn" data-value="'+sortIndex+'">'+(sortIndex+1)+'</button>';
                                    sortIndex++;
                                }
                                $waypoint.attr('data-locktype', waypointOptions.LockType);
                            }
                        }
                        catch (err) {
                            console.log(err);
                        }

                        //add time-based information if this is a time based route
                        if ((routeOptions.TimeBasedOptions || {}).Enabled) {
                            try { 
                                if (waypointOptions.TimeBasedOptions.Start == 'Set start time...') {
                                    $waypoint.find('.timedetails').text(waypointOptions.TimeBasedOptions.Duration).show();
                                }
                                else {
                                    $waypoint.find('.timedetails').text(waypointOptions.TimeBasedOptions.Start + ' - ' + waypointOptions.TimeBasedOptions.Duration).show();
                                }
                               
                            }
                            catch (err) {console.log(err);}
                        }
                        
                        //is this waypoint from a record?
                        if (waypoint.MASavedQry__c) 
                        {
                            //yes, make sure the query exists in our list
                            if (!queriesToRequest[waypoint.MASavedQry__c]) {
                                queriesToRequest[waypoint.MASavedQry__c] = {
                                    waypoints: [],
                                    done: false
                                };
                            }
                            
                            //add this waypoint to the query
                            queriesToRequest[waypoint.MASavedQry__c].waypoints.push(waypoint);
                        }
                        else if (waypoint.BaseObjectId__c && waypoint.AdditionalData__c && waypoint.AdditionalData__c != '[]')
                        {
                            //this is from a map it record
                            mapItQueriesToRequest[waypoint.Id] = {
                                waypoints: [waypoint],
                                done: false
                            };
                        }
                        else 
                        {   
                            //no so add this waypoint to the non-record list
                            nonRecordWaypoints.push(waypoint);
                        }
                      
                    });

                    selectOptions += '</div>';

                    //apped selection options to popup, keeps dom length shorter for 100+ route selections
                    $('.routeOrderPopup .panel-body').remove();
                    $('.routeOrderPopup .panel-primary').append(selectOptions);
                    //recalculateRowOrder();
                    
                    //at this point we need at least 2 waypoints to get directions.  if we don't have them then display a warning and show the waypoints
                    if (getRoute.waypoints.length < 2)
                    {
                        $route.removeClass('loading').find('.ui-icon').removeClass('ui-icon-arrow-r').addClass('ui-icon-delete');
                        NotifyError('Cannot Display Route', 'At least two waypoints are required');
                        $('#CurrentRouteTab').click();
                        try { callback(); } catch (err) {}
                        return;
                    }
                    
                    //plot non-record waypoints
                    $route.data('nonRecordMarkers', []);
                    $.each(nonRecordWaypoints, function (index, waypoint) {
                    
                        if (waypoint.Latitude__c && waypoint.Longitude__c)
                        {
                            //options
                            var lockType = 'unlocked';
                            try { lockType = JSON.parse(waypoint.Options__c).LockType || 'unlocked'; }
                            catch (err) {}
                            //console.log(waypoint,lockOffset);
                            var textLabel = waypoint.SortOrder__c + lockOffset;
                            var marker = new google.maps.Marker({
                                map: MA.map,
                                position: new google.maps.LatLng(waypoint.Latitude__c, waypoint.Longitude__c),
                                icon: $.inArray(lockType, ['start','end','startend']) != -1
                                    ?   {
                                            url: lockType == 'start' || (lockType == 'startend' && waypoint.SortOrder__c == 1) ? "{!URLFOR($Resource.sma__Leaflet, 'images/route_start_angle.png')}" : "{!URLFOR($Resource.sma__Leaflet, 'images/route_finish_angle.png')}",
                                            anchor: new google.maps.Point(lockType == 'start' || (lockType == 'startend' && waypoint.SortOrder__c == 1) ? 31 : 5, 50)
                                        }
                                    :   {
                                            url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, textLabel).replace(/__TEXT__/g, textLabel))),
                                            anchor: new google.maps.Point(14, 42)
                                        }
                                ,
                                layerType: 'waypoint-marker',
                                zIndex: 1000
                            });

                            if(waypoint.BaseObject__c && waypoint.BaseObject__c.indexOf('{C2C}') >= 0) {
                                marker.record = {
                                    record : {Id : waypoint.LinkId__c}
                                }

                                //get tasks
                                MA.restAPI.getTasks(waypoint.LinkId__c).then(function(res) {
                                    if(res.success) {
                                        //append tasks
                                        if(res.data) {
                                            marker.record.record['Tasks'] = res.data

                                            //show checkout if open task
                                            if(res.data.records && res.data.records.length > 0) {
                                                var rec = res.data.records[0];
                                                var checkInId = rec.Id;
                                            }
                                        }
                                    }
                                });

                                marker.SavedQryId = '';
                                marker.title = waypoint.Name;
                            }

                            google.maps.event.addListener(marker, 'click', function () {
                                var $popupContent = $('#templates .waypointmarker').clone();
                                $popupContent.find('.name').html(waypoint.LinkId__c ? $('<a target="_blank"></a>').attr('href', '/'+waypoint.LinkId__c).text(waypoint.Name).wrap('<div/>').parent().html() : waypoint.Name);
                                $popupContent.find('.address').text(waypoint.Address__c || '');
                                $popupContent.find('.notes').text(waypoint.Notes__c || '');
                                $popupContent.find('.takemethere').attr('onclick', "launchNativeGPS("+waypoint.Latitude__c+", "+waypoint.Longitude__c+");");

                                //add a checkin button if this was a c2c, has linkid
                                if(waypoint.LinkId__c && waypoint.BaseObject__c && waypoint.BaseObject__c.indexOf('{C2C}') >= 0) {
                                    //check if a task is open
                                    var checkIn = $('<button class="checkIn c2cAction">Check In</button>');
                                    var checkOut = $('<button style="display:none;" class="checkOut c2cAction">Check Out</button>');
                                    if(marker.record && marker.record.record && marker.record.record.Tasks && marker.record.record.Tasks.records && marker.record.record.Tasks.records) {
                                        //loop over tasks and check if open
                                        var tasks = marker.record.record.Tasks.records;
                                        $.each(tasks,function(i,t) {
                                            if(!t.IsClosed) {
                                                checkIn = $('<button style="display:none;" class="checkIn c2cAction">Check In</button>');
                                                checkOut = $('<button class="checkOut c2cAction">Check Out</button>').data('CheckInId',t.Id);
                                                return false;
                                            }
                                        });
                                    }
                                 
                                    $popupContent.find('.buttons').append(checkIn);
                                    $popupContent.find('.buttons').append(checkOut);
                                    $popupContent.find('.buttons .checkIn').on('click',function() {
                                        if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select' && MA.CheckIn.general['AutoCheckOutEnabled'] == 'true') {
                                            var options = {
                                                button : $popupContent.find('.buttons .checkIn'),
                                                record : marker.record,
                                                marker : marker
                                            }
                                            ShowCheckInDisposition(options);
                                        }
                                        else {
                                            CheckIn(marker,function (res) { 
                                                if(res.success) {
                                                    //update the buttons
                                                    $popupContent.find('.buttons .checkIn').hide();
                                                    $popupContent.find('.buttons .checkOut').show();
                                                    $popupContent.find('.buttons .checkOut').data('CheckInId',res.taskId);
                                                }
                                            });
                                        }
                                    });
                                    $popupContent.find('.buttons .checkOut').on('click',function() {
                                        if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select') {
                                            var options = {
                                                button : $popupContent.find('.buttons .checkOut'),
                                                record : marker.record,
                                                marker : marker
                                            }
                                            ShowCheckOutDisposition(options);
                                        }
                                        else {
                                            CheckOut(marker,$popupContent.find('.buttons .checkOut').data('CheckInId'),function (res) {
                                                if(res) {
                                                    //update the buttons
                                                    $popupContent.find('.buttons .checkIn').show();
                                                    $popupContent.find('.buttons .checkOut').hide();
                                                    $popupContent.find('.buttons .checkOut').data('CheckInId');
                                                }
                                            });
                                        }
                                    });
                                }

                                MA.Map.InfoBubble.show({
                                    position: marker.getPosition(),
                                    anchor: marker,
                                    minWidth: 200,
                                    content: $popupContent.get(0)
                                });
                            });
                            $route.data('nonRecordMarkers').push(marker);
                        }
                    });

                    //now we're ready to send analyze calls for each query
                    $route.data('plottedQueries', []);
                    $.each(queriesToRequest, function (queryId, queryObj) {
                        //build new plotted query
                        var $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data({ id: queryId, rendered: true });
                        $route.data('plottedQueries').push($plottedQuery);
                        
                        //populate default data
                        $.extend($plottedQuery.data(), {
                            records: {},
                            recordsToGeocode: [],
                            numGeocodeRequestsOut: 0,
                            numSuccessfulGeocodes: 0,
                            numFailedGeocodes: 0,
                            visibleAreaOnly: false,
                            proximityObjects: []
                        });
                    
                        //send analyze request
                        analyzeQuery({
                            plottedQuery: $plottedQuery,
                            includeData: false,
                            showDistanceLimit: false,
                            callback: function (success, records) {
                                //build the records for this query based on the waypoints we collected earlier
                                var records = $plottedQuery.data('records');
                                var dupeRecord, dupeWaypoint;
                                $.each(queryObj.waypoints, function (index, waypoint)
                                {
                                    //options
                                    var lockType = 'unlocked';
                                    try { lockType = JSON.parse(waypoint.Options__c).LockType || 'unlocked'; }
                                    catch (err) {}

                                    //add waypoint as a record
                                    if (records[waypoint.LinkId__c]) {
                                        dupeRecord = records[waypoint.LinkId__c];
                                        dupeWaypoint = waypoint;
                                        
                                    }
                                    else {
                                        records[waypoint.LinkId__c] = {
                                            savedQueryId    : $plottedQuery.data('id'),
                                            contentKey      : $plottedQuery.data('id') + '-' + waypoint.LinkId__c,
                                            plottedQuery    : $plottedQuery,
                                            isProcessed     : false,
                                            isGeocoded      : true,
                                            waypointId      : waypoint.Id,
                                            latitude        : waypoint.Latitude__c,
                                            longitude       : waypoint.Longitude__c,
                                            markerLatitude  : waypoint.Latitude__c,
                                            markerLongitude : waypoint.Longitude__c,
                                            isVisible       : false,
                                            isClustered     : false,
                                            isRendered      : false,
                                            index           : lockType == 'unlocked' 
                                                ? waypoint.SortOrder__c + lockOffset
                                                : lockType == 'start' || (lockType == 'startend' && waypoint.SortOrder__c == 1)
                                                    ? 'start'
                                                    : 'end'
                                        };
                                    }
                                });

                                //send a batch request to process these records
                                var recordBatch = [];
                                $.each(records, function (index, record) {
                                    recordBatch.push(index);
                                });
                                $plottedQuery.data('recordBatch',recordBatch || []);
                                processBatch($plottedQuery, recordBatch, { overwriteCoordinates: false });

                                //the batch has been sent for processing.  start a poller that will periodically check if processing is complete
                                $plottedQuery.data(
                                    'processingInterval', 
                                    setInterval(function () {
                                        //loop through all records.  we're done if everything has been processed
                                        var processingComplete = true;
                                        var numRecords = 0;
                                        var numProcessed = 0;
                                        $.each($plottedQuery.data('records'), function (index, record) {
                                            if (!record.isProcessed) {
                                                processingComplete = false;
                                            }
                                            else {
                                                numProcessed++;
                                            }
                                            numRecords++;
                                        });
                                        
                                        //keep track of the total number of records for use later
                                        $plottedQuery.data('numRecords', numRecords);
                                        
                                        //status
                                        $plottedQuery.find('.status').html('Processing: ' + numProcessed + ' of ' + numRecords);
                                        
                                        //if we're done processing, we're ready to actually plot the query
                                        if (processingComplete) {
                                            clearInterval($plottedQuery.data('processingInterval'));
                                            
                                            //case 9125 missing waypoints
                                            //make sure waypoints were found
                                            var recBatch = $plottedQuery.data('recordBatch') || [];

                                            //create markers
                                            $.each($plottedQuery.data('records'), function (index, record) {
                                                var recBatchIndex = recBatch.indexOf(index);
                                                if (recBatchIndex > -1) {
                                                    recBatch.splice(recBatchIndex, 1);
                                                }
                                                
                                                //update the waypoint title
                                                try{
                                                    var recId = record.record.Id;
                                                    
                                                    
                                                    //Bryan James added the following logic for Case 12071.
                                                    var recordName = getProperty(record, 'record.Name');
                                                    if(recordName == undefined)
                                                    {
                                                        var recordSubject = getProperty(record, 'record.Subject');
                                                        var recordCaseNumber = getProperty(record, 'record.CaseNumber');
                                                        if(recordSubject != undefined)
                                                        {
                                                            record.record.Name = recordSubject;
                                                        }
                                                        else if(recordCaseNumber != undefined)
                                                        {
                                                            record.record.Name = recordCaseNumber;
                                                        }
                                                    }
                                                    //end of Case 12071 update 
                                                    //find the record row and update name
                                                    
                                                    $('#DirectionsInput .waypoint[data-linkid="'+recId+'"]').find('input').val(record.record.Name);
                                                    
                                                }
                                                catch (e) {
                                                    
                                                }
                                                
                                                record.marker = CreateMarkerFromRecord(record, {
                                                    markerType: 'Waypoint',
                                                    index: record.index
                                                });
                                            });

                                            //start case 9125
                                            var newNonRecordsWaypoints = [];
                                            if(recBatch.length > 0) {
                                                for(var i = 0; i < recBatch.length; i++) {
                                                    var rec = recordBatch[i];
                                                    var wps = queryObj.waypoints ||[];
                                                    var wpI = wps.length;
                                                    while(wpI--) {
                                                        var wp = wps[wpI];
                                                        if(wp.LinkId__c == rec) {
                                                            newNonRecordsWaypoints.push(wp);
                                                            break;
                                                        }
                                                    }
                                                }

                                            }

                                            $.each(newNonRecordsWaypoints, function (index, waypoint) {
                    
                                                if (waypoint.Latitude__c && waypoint.Longitude__c)
                                                {
                                                    //options
                                                    var lockType = 'unlocked';
                                                    try { lockType = JSON.parse(waypoint.Options__c).LockType || 'unlocked'; }
                                                    catch (err) {}
                                                    //console.log(waypoint,lockOffset);
                                                    var textLabel = waypoint.SortOrder__c + lockOffset;
                                                    var marker = new google.maps.Marker({
                                                        map: MA.map,
                                                        position: new google.maps.LatLng(waypoint.Latitude__c, waypoint.Longitude__c),
                                                        icon: $.inArray(lockType, ['start','end','startend']) != -1
                                                            ?   {
                                                                    url: lockType == 'start' || (lockType == 'startend' && waypoint.SortOrder__c == 1) ? "{!URLFOR($Resource.sma__Leaflet, 'images/route_start_angle.png')}" : "{!URLFOR($Resource.sma__Leaflet, 'images/route_finish_angle.png')}",
                                                                    anchor: new google.maps.Point(lockType == 'start' || (lockType == 'startend' && waypoint.SortOrder__c == 1) ? 31 : 5, 50)
                                                                }
                                                            :   {
                                                                    url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, textLabel).replace(/__TEXT__/g, textLabel))),
                                                                    anchor: new google.maps.Point(14, 42)
                                                                }
                                                        ,
                                                        layerType: 'waypoint-marker',
                                                        zIndex: 1000
                                                    });

                                                    if(waypoint.BaseObject__c && waypoint.BaseObject__c.indexOf('{C2C}') >= 0) {
                                                        marker.record = {
                                                            record : {Id : waypoint.LinkId__c}
                                                        }

                                                        //get tasks
                                                        MA.restAPI.getTasks(waypoint.LinkId__c).then(function(res) {
                                                            if(res.success) {
                                                                //append tasks
                                                                if(res.data) {
                                                                    marker.record.record['Tasks'] = res.data

                                                                    //show checkout if open task
                                                                    if(res.data.records && res.data.records.length > 0) {
                                                                        var rec = res.data.records[0];
                                                                        var checkInId = rec.Id;
                                                                    }
                                                                }
                                                            }
                                                        });

                                                        marker.SavedQryId = '';
                                                        marker.title = waypoint.Name;
                                                    }

                                                    google.maps.event.addListener(marker, 'click', function () {
                                                        var $popupContent = $('#templates .waypointmarker').clone();
                                                        $popupContent.find('.name').html(waypoint.LinkId__c ? $('<a target="_blank"></a>').attr('href', '/'+waypoint.LinkId__c).text(waypoint.Name).wrap('<div/>').parent().html() : waypoint.Name);
                                                        $popupContent.find('.address').text(waypoint.Address__c || '');
                                                        $popupContent.find('.notes').text(waypoint.Notes__c || '');
                                                        $popupContent.find('.takemethere').attr('onclick', "launchNativeGPS("+waypoint.Latitude__c+", "+waypoint.Longitude__c+");");

                                                        //add a checkin button if this was a c2c, has linkid
                                                        if(waypoint.LinkId__c && waypoint.BaseObject__c && waypoint.BaseObject__c.indexOf('{C2C}') >= 0) {
                                                            //check if a task is open
                                                            var checkIn = $('<button class="checkIn c2cAction">Check In</button>');
                                                            var checkOut = $('<button style="display:none;" class="checkOut c2cAction">Check Out</button>');
                                                            if(marker.record && marker.record.record && marker.record.record.Tasks && marker.record.record.Tasks.records && marker.record.record.Tasks.records) {
                                                                //loop over tasks and check if open
                                                                var tasks = marker.record.record.Tasks.records;
                                                                $.each(tasks,function(i,t) {
                                                                    if(!t.IsClosed) {
                                                                        checkIn = $('<button style="display:none;" class="checkIn c2cAction">Check In</button>');
                                                                        checkOut = $('<button class="checkOut c2cAction">Check Out</button>').data('CheckInId',t.Id);
                                                                        return false;
                                                                    }
                                                                });
                                                            }
                                                            
                                                            $popupContent.find('.buttons').append(checkIn);
                                                            $popupContent.find('.buttons').append(checkOut);
                                                            $popupContent.find('.buttons .checkIn').on('click',function() {
                                                                if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select' && MA.CheckIn.general['AutoCheckOutEnabled'] == 'true') {
                                                                    var options = {
                                                                        button : $popupContent.find('.buttons .checkIn'),
                                                                        record : marker.record,
                                                                        marker : marker
                                                                    }
                                                                    ShowCheckInDisposition(options);
                                                                }
                                                                else {
                                                                    CheckIn(marker,function (res) { 
                                                                        if(res.success) {
                                                                            //update the buttons
                                                                            $popupContent.find('.buttons .checkIn').hide();
                                                                            $popupContent.find('.buttons .checkOut').show();
                                                                            $popupContent.find('.buttons .checkOut').data('CheckInId',res.taskId);
                                                                        }
                                                                    });
                                                                }
                                                            });
                                                            $popupContent.find('.buttons .checkOut').on('click',function() {
                                                                if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select') {
                                                                    var options = {
                                                                        button : $popupContent.find('.buttons .checkOut'),
                                                                        record : marker.record,
                                                                        marker : marker
                                                                    }
                                                                    ShowCheckOutDisposition(options);
                                                                }
                                                                else {
                                                                    CheckOut(marker,$popupContent.find('.buttons .checkOut').data('CheckInId'),function (res) {
                                                                        if(res) {
                                                                            //update the buttons
                                                                            $popupContent.find('.buttons .checkIn').show();
                                                                            $popupContent.find('.buttons .checkOut').hide();
                                                                            $popupContent.find('.buttons .checkOut').data('CheckInId');
                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        }

                                                        MA.Map.InfoBubble.show({
                                                            position: marker.getPosition(),
                                                            anchor: marker,
                                                            minWidth: 200,
                                                            content: $popupContent.get(0)
                                                        });
                                                    });
                                                    $route.data('nonRecordMarkers').push(marker);
                                                }
                                            });
                                            //end case 9125

                                            //create an extra marker for the start/end record if we have one
                                            if (dupeRecord) {
                                                var dupeMarker = CreateMarkerFromRecord(dupeRecord, {
                                                    markerType: 'Waypoint',
                                                    index: dupeRecord.index == 'start' ? 'end' : 'start'
                                                });
                                                dupeMarker.setMap(MA.map);
                                                $route.data('nonRecordMarkers').push(dupeMarker);

                                                google.maps.event.addListener(dupeMarker, 'click', function () { marker_Click.call(this); });
                                            }
                                            
                                            //render the query
                                            renderQuery($plottedQuery, 'Markers', function () {
                                                queryObj.done = true;
                                            });
                                        }
                                        
                                    }, 500)
                                );
                            } 
                        });
                    });
                   
                   
                    //send analyze calls for each map it record
                    $.each(mapItQueriesToRequest, function (index, queryObj) {
                        
                        //build new plotted query
                        var waypoint = queryObj.waypoints[0];
                        var $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data({
                            id                  : 'Record-' + waypoint.LinkId__c,
                            BaseObjectId        : waypoint.BaseObjectId__c,
                            RecordId            : waypoint.LinkId__c,
                            markerColor         : '#000000',
                            tooltipFieldsString : JSON.parse(waypoint.AdditionalData__c || '[]').join(','),
                            rendered            : true
                        });
                        $route.data('plottedQueries').push($plottedQuery);
                        
                        //populate default data
                        $.extend($plottedQuery.data(), {
                            records: {},
                            recordsToGeocode: [],
                            numGeocodeRequestsOut: 0,
                            numSuccessfulGeocodes: 0,
                            numFailedGeocodes: 0,
                            visibleAreaOnly: false,
                            proximityObjects: []
                        });
                    
                        //send analyze request
                        analyzeQuery({
                            plottedQuery: $plottedQuery,
                            includeData: false,
                            showDistanceLimit: false,
                            callback: function (success, records) {

                                //options
                                var lockType = 'unlocked';
                                try { lockType = JSON.parse(waypoint.Options__c).LockType || 'unlocked'; }
                                catch (err) {}
                                
                                //build the records for this query based on the waypoints we collected earlier
                                var records = $plottedQuery.data('records');
                                $.each(queryObj.waypoints, function (index, waypoint) {
                                    records[waypoint.LinkId__c] = {
                                        savedQueryId    : $plottedQuery.data('id'),
                                        contentKey      : $plottedQuery.data('id') + '-' + waypoint.LinkId__c,
                                        plottedQuery    : $plottedQuery,
                                        isProcessed     : false,
                                        isGeocoded      : true,
                                        latitude        : waypoint.Latitude__c,
                                        longitude       : waypoint.Longitude__c,
                                        markerLatitude  : waypoint.Latitude__c,
                                        markerLongitude : waypoint.Longitude__c,
                                        isVisible       : false,
                                        isClustered     : false,
                                        isRendered      : false,
                                        index           : lockType == 'unlocked' 
                                            ? waypoint.SortOrder__c + lockOffset
                                            : lockType == 'start' || (lockType == 'startend' && waypoint.SortOrder__c == 1)
                                                ? 'start'
                                                : 'end'
                                    };
                                });
                                
                                //send a batch request to process these records
                                var recordBatch = [];
                                $.each(records, function (index, record) {
                                    recordBatch.push(index);
                                });
                                processBatch($plottedQuery, recordBatch, { overwriteCoordinates: false });
                                
                                //the batch has been sent for processing.  start a poller that will periodically check if processing is complete
                                $plottedQuery.data(
                                    'processingInterval', 
                                    setInterval(function () {
                                        
                                        //loop through all records.  we're done if everything has been processed
                                        var processingComplete = true;
                                        var numRecords = 0;
                                        var numProcessed = 0;
                                        $.each($plottedQuery.data('records'), function (index, record) {
                                            if (!record.isProcessed) {
                                                processingComplete = false;
                                            }
                                            else {
                                                numProcessed++;
                                            }
                                            numRecords++;
                                        });
                                        
                                        //keep track of the total number of records for use later
                                        $plottedQuery.data('numRecords', numRecords);
                                        
                                        //status
                                        $plottedQuery.find('.status').html('Processing: ' + numProcessed + ' of ' + numRecords);
                                        
                                        //if we're done processing, we're ready to actually plot the query
                                        if (processingComplete) {
                                            clearInterval($plottedQuery.data('processingInterval'));
                                            
                                            //create markers
                                            $.each($plottedQuery.data('records'), function (index, record) {
                                                record.marker = CreateMarkerFromRecord(record, {
                                                    markerType: 'Waypoint',
                                                    index: record.index
                                                });
                                            });
                                            
                                            //render the query
                                            renderQuery($plottedQuery, 'Markers', function () {
                                                queryObj.done = true;
                                            });
                                        }
                                        
                                    }, 500)
                                );
                            } 
                        });
                    });
                    
                    //start a poller to determine when the route is done rendering
                    $route.data('renderInterval', setInterval(
                        function () {
                            var done = true;
                            $.each($.extend({}, queriesToRequest, mapItQueriesToRequest), function (index, queryObj) {
                                if (!queryObj.done) {
                                    done = false;
                                    return false;
                                }
                            });
                            
                            if (done) {
                                clearInterval($route.data('renderInterval'));
                                
                                //show buttons
                                $('.route-buttons').show();

                                WayPointArray = new Array();
                                $.each(getRoute.waypoints, function(index, waypoint) {
                                    WayPoint = new Object();
                                    WayPoint.WayPointTitle = waypoint.Name;
                                    WayPoint.Address  = waypoint.Address__c;
                                    WayPoint.Lat  = waypoint.Latitude__c;
                                    WayPoint.Long  = waypoint.Longitude__c;
                                    
                                    WayPointArray[waypoint.SortOrder__c] = WayPoint;
                                });
                                ProcessWayPoints({ 
                                    route: $route, 
                                    callback: function () {
                                        $('#CurrentRouteTab').click();
                                        try { callback(); } catch (err) {}
                                    }
                                });
                            }
                        },
                        500
                    ));
                }
            }, 500);
            
        }//end not currently plotted condition
    }
    
    //handle saving the current route
    function saveRoute()
    {
        //do nothing if already saving
        if ($('#SaveRoute .ui-btn-text').text() != '{!$Label.sma__ma_save}') {
            return;
        }
    
        if( $('#sortable').attr('data-multiday') == "true" )
        {
            $('#route-errors').html('Save Unavailable: Modifying Multiday Routes is not currently supported. ');
            return;
        }
        
        //remove existing error messages
        $('#route-errors').text('');
    
        //make sure the route has a name
        var routeName = $('#route-name').val();
        if(routeName == null || routeName.trim() == '' || moment($('#route-date').val()) == null) {
            $('#route-errors').html('You must select a name and date before saving.');
            return;
        }
        
        //make sure there are at least 2 waypoints
        if ($('#sortable > li').length < 2) {
            $('#route-errors').html('You must add at least 2 waypoints before saving.');
            return;
        }
        
        //show saving
        $('#SaveRoute .ui-btn-text').text('Saving...');
        
        //create an array of waypoint data
        waypoints = [];
        $('#sortable > li').each(function(i, row) {
            waypoints.push({
                name        : $(this).find('input').val(),
                address     : $(this).attr('address'),
                notes       : '',
                sortOrder   : i + 1,
                linkId      : $(this).attr('data-linkid') || null,
                baseObject  : $(this).attr('baseobject'),
                tooltips    : $(this).attr('tooltips'),
                options     : JSON.stringify({ TimeBasedOptions: { Start: 'Set start time...', Duration: '1 hr, 0 min' }, LockType: $(this).attr('data-locktype') || 'unlocked' }),
                latitude    : $(this).attr('lat'),
                longitude   : $(this).attr('long'),
                savedQueryId: ($(this).attr('savedqueryid') || '').indexOf('Record-') == 0 ? null : $(this).attr('savedqueryid')
            });
        });
        
        //stringify route options
        var options = JSON.stringify({
            TimeBasedOptions: {
                Enabled : false,
                Start   : '9:00 am',
                End     : '5:00 pm'
            }
        });
        
        var routeMoment = moment($('#route-date').val());
        var processData = {
            ajaxResource : 'MAWaypointAJAXResources',
            action : 'saveRoute',
            perform             : $('#sortable').attr('data-route') ? 'update' : 'insert',
            routeId             : $('#sortable').attr('data-route'),
            day                 : routeMoment.date(),
            month               : routeMoment.month() + 1,
            year                : routeMoment.year(),
            lookupId              : '{!$User.Id}',
            lookupField         : 'sma__User__c',
            name                : routeName,
            options             : options,
            serializedWaypoints : JSON.stringify(waypoints)
        };
        
        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
            processData,
            function(response, event){
                if(event.status) {
                    //set the routes calendar to the month of this route and then display this route
                    $('#routemonth').val(routeMoment.month() + 1).selectmenu('refresh', true);
                    $('#routeyear').val(routeMoment.year()).selectmenu('refresh', true);
                    if ($('#routesCalendar .ui-icon-delete').length > 0) {
                        displayRoute({target:$('#routesCalendar .ui-icon-delete').first().closest('li.route'),optimize:false}, function () {
                            routesCalendar_Refresh({
                                success: function () {
                                    displayRoute({target:$('#routesCalendar li.route[id="'+response.routeId+'"]')[0],optimize:false}, function () {
                                        $('#SaveRoute .ui-btn-text').text('{!$Label.sma__ma_save}');
                                    });
                                }
                            });
                        });
                    }
                    else {
                        routesCalendar_Refresh({
                            success: function () {
                                displayRoute({target:$('#routesCalendar li.route[id="'+response.routeId+'"]')[0], optimize:false}, function () {
                                    $('#SaveRoute .ui-btn-text').text('{!$Label.sma__ma_save}');
                                });
                            }
                        });
                    }
                }
                else
                {
                    //there was a problem so just show an error message
                }
            },{buffer: false,escape:false}
        );
    }
    
    //handle clicking a favorite location marker
    function favLocation_Click()
    {
        var marker = this;
        
        //build the tooltip content for this location
        var $tooltipContent = $(
            '<div class="favlocation-tooltip-content" style="padding: 5px; overflow: hidden;">' +
                '<table>' +
                    '<tr>' +
                        '<td>Name:</td>' +
                        '<td class="name info"></td>' +
                    '</tr>' +
                    '<tr>' +
                        '<td>Address:</td>' +
                        '<td class="address info"></td>' +
                    '</tr>' +
                    '<tr>' +
                        '<td>Description:</td>' +
                        '<td class="description info"></td>' +
                    '</tr>' +
                '</table>' +
                '<div class="layout-tooltip">' +
                    '<div class="buttonset-section-columns">' +
                        '<div class="buttoncolumn">' +
                            '<div class="actionbutton">Add to Route</div>' +
                            '<div class="actionbutton">Set Proximity Center</div>' +
                        '</div>' +
                        '<div style="margin: 0;" class="buttoncolumn">' +
                            '<div class="actionbutton">Remove Marker</div>' +
                        '</div>' +
                    '</div>' +
                '</div>' +
            '</div>'
        );
        $tooltipContent.find('.name').text(marker.title);
        $tooltipContent.find('.address').text(marker.record.markerAddress);
        $tooltipContent.find('.description').text(marker.description);
        
        //create popup
        MA.Map.InfoBubble.show({
            position: marker.getPosition(),
            anchor: marker,
            content: $tooltipContent.get(0),
            minWidth: 260
        });
        
        //handle clicking action buttons
        $tooltipContent.find('.actionbutton').click(function (e) {
        
            switch ($(this).text())
            {
                case 'Add to Route':
                    AddMarkerToTrip(marker);
                    ShowDirectionsTab();
                    $('#CurrentRouteTab').click();
                    MA.Map.InfoBubble.hide();
                    break;
                case 'Set Proximity Center':
                    AddOval(marker.Lat, marker.Long);
                    break;
                case 'Remove Marker':
                    marker.setMap(null);
                    $.each(locationMarkers, function (index, locationMarker) { if(marker === locationMarker) { locationMarkers.splice(index, 1); } });
                    break;
            }
            MA.Map.InfoBubble.hide();

            //stop the click from getting to the map
            e.stopPropagation();
        });
    }
    function cancelEmail() {
        $('.otherEmail').val('');

        //reset checkboxes
        $(".emailMe[type='checkbox']:first").attr("checked",true).checkboxradio("refresh");
        $(".emailManager[type='checkbox']:first").attr("checked",false).checkboxradio("refresh");

        //hide popup
        $('.emailRoutePopup').removeClass('active');
    }
    function showEmailPopup() {
        //hide popup
        $('.emailRoutePopup').addClass('active');
    }
    
    //format for user locale pass it a type or an actual date
        function formatUserLocaleDate (options)
        {
            //grab salesforce user locale object (capitalize dates for easy modification)
            var returnFormat;
            
            //format the locale for proper use
            if(options.moment == true)
            {
                //moment formating (DD/MM/YYYY HH:mm, MM-DD-YYYY h:mm a, etc...)
                returnFormat = dateTimeFormat.replace('yyyy','YYYY').replace(/d/g,'D');
            }
            else if (options.datepicker == true)
            {
                //date picker format (dd/mm/yy, mm-dd-yy, etc...)
                returnFormat = dateFormat.replace('yyyy','yy');
                //check for 'M' or 'MM'
                if(dateFormat.indexOf('MM') >= 0)
                {
                    returnFormat = returnFormat.replace('MM','mm');
                }
                else
                {
                    returnFormat = returnFormat.replace('M','mm');
                }
                
                //check for 'd' or 'dd'
                if(dateFormat.indexOf('dd') <= -1)
                {
                    returnFormat = returnFormat.replace('d','dd');
                }
            }
            else if (options.salesforce == true)
            {
                //already in sForce format
                returnFormat = dateTimeFormat;
            }
            else if (options.date)
            {
                //replace date format with actual date
                returnFormat = dateTimeFormat.replace('y.', 'y').replace('M.', '').replace('d.', '').replace(/M/g, '').replace(/\//g, '').replace(/-/g,'').replace(/d/g, '').replace('yyyy', options.date)
            }
            return returnFormat;
        }

        /*********************************
        * Legacy (for custom components)
        *********************************/
        function HideBubbles() { MA.Map.InfoBubble.hide(); }

    </script>

<!-- Hidden Communication Vars -->
<apex:form >
    <apex:inputHidden id="serializedCustomButtons" value="{!serializedCustomButtons}" />
</apex:form>

    <div data-role="page" class="type-interior">

        <div class="ui-bar ui-bar-b MAheader-bar" >
            
             <div data-role="controlgroup" data-type="horizontal" style="float:left;" >
                <button data-role="none" id="sidebar-button" class="MAbutton button-blue icon-left ion-android-settings"><span class="btn-text">{!$Label.MA_Side_Bar}</span></button>
                <button data-role="none" onclick="ZoomToFit();" class="MAbutton button-blue icon-left glyphicon-fullscreen"><span class="btn-text">{!$Label.MA_Zoom_To_Fit}</span></button>
                <!--<a data-icon="gear" id="sidebar-button">Side Bar</a>-->
                <!--<a data-icon="plus" onclick="ZoomIn();" data-role="button">Zoom In</a>-->
                <!--<a onclick="ZoomToFit();" data-role="button">{!$Label.MA_Zoom_To_Fit}</a>-->
                <!--<a data-icon="minus" onclick="ZoomOut();" data-role="button" data-iconpos="right">Zoom Out</a>-->
            </div>
            
            <div data-role="controlgroup" data-type="horizontal" style="float:right;" >
                <button data-role="none" onclick="myPosition(true);" class="MAbutton button-blue icon-left ion-android-locate"><span class="btn-text">{!$Label.MA_My_Position}</span></button>
                <button data-role="none" onclick="ToggleTrafficOverlay();" class="MAbutton button-blue icon-left glyphicon-road"><span class="btn-text">{!$Label.MA_Traffic}</span></button>
                <button data-role="none" onclick="$('#MapViewPopup').show(); return false;" class="MAbutton button-blue icon-left ion-android-map"><span class="btn-text">{!$Label.MA_Map_Types}</span></button>
                <button data-role="none" id='RoutePlannerBtn' onclick="if (sforce && sforce.one) { sforce.one.navigateToURL(MA.resources.RouteCalendar); } else { window.location = MA.resources.RouteCalendar; }" class="MAbutton button-blue icon-left ion-android-calendar"><span class="btn-text">{!$Label.MA_Calendar} (Pilot)</span></button>
                <button data-role="none" onclick="if (sforce && sforce.one) { window.open( '/home/home.jsp'); } else { window.location = '/home/home.jsp'; }" class="MAbutton button-blue icon-left ion-android-home" id='sfdchome'><span class="btn-text">{!$Label.MA_SFDC_Home}</span></button>
                <!--<a onclick="myPosition(true);" data-role="button">{!$Label.MA_My_Position}</a>-->
                <!--<a onclick="ToggleTrafficOverlay();" data-role="button">{!$Label.MA_Traffic}</a>-->
                <!--<a href="#" data-enhance="false" onclick="$('#MapViewPopup').show(); return false;">{!$Label.MA_Map_Types}</a>-->
                <!--<a href='#' onclick="if (sforce && sforce.one) { sforce.one.navigateToURL(MA.resources.RouteCalendar); } else { window.location = MA.resources.RouteCalendar; }" data-role='button' data-ajax='false' id='RoutePlannerBtn' style='display: none;'>{!$Label.MA_Calendar} (Pilot)</a>-->
                <!--<a href="#DebugPopup" data-role="button" data-rel="dialog" data-transition="flip" style='display: none;'>Debug</a>-->
                <!--<a href="/home/home.jsp" data-role="button" data-ajax="false" id='sfdchome'>{!$Label.MA_SFDC_Home}</a>-->
            </div>
            
        </div><!-- /header -->
        
        
            <div id="SideBar">
                <div data-role="navbar" style="clear:both;margin-bottom:12px;padding:0;width:100%;">
                <ul>
                    <li><a id="tabQueries" class="ui-btn-active">{!$Label.MA_Queries}</a></li>
                    <li><a id="tabRoutes">{!$Label.MA_Routes}</a></li>
                    <li><a id="tabProximity">{!$Label.MASettings_Proximity}</a></li>
                    <li><a id="tabPoi">{!$Label.MA_Points_of_Interest_Abbreviation}</a></li>
                </ul>
 
           </div><!--navbar -->
            
            
            
            
            <!--<div class="hr" style="display:block;float:left;height:2px;width:100%;background:#bbb;margin:7px 0 10px 0;border-bottom:1px solid #fff"></div>-->
         
            <div id="Proximity">
            
                <input type="checkbox" name="ProximityCheckbox" id="ProximityCheckbox" class="custom" onchange="ProximityCheckChanged(this);" />
                <label for="ProximityCheckbox">{!$Label.MA_Proximity_Enabled}</label>
                
                <table>
                    <tr style='display: none;'>
                        <td>{!$Label.MA_Type}:</td>
                        <td colspan='2'>
                            <select id="ProximityType" data-icon="grid" data-theme="c" datarole="button" data-overlay-theme="c" data-native-menu="false" onchange="ProximityTypeChanged(this);">
                                <option value="Circle">{!$Label.MA_Circle}</option>
                                <!-- <option value="Isoline">Isoline</option> -->
                            </select>
                        </td>
                    </tr>
                    <tr class='circlerow'>
                        <td>{!$Label.MA_Radius}:</td>
                        <td>
                            <input type="text" name="ProximityRadius" id="ProximityRadius" value="" size="5"  style="width:40px;" />
                        </td>
                        <td>
                            <select id="ProximityRadiusMeasurementType" data-icon="grid" data-theme="c" datarole="button" data-overlay-theme="c" data-native-menu="false" >
                                <option value="MILES">{!$Label.MARoutes_Miles}</option>
                                <option value="KM">{!$Label.MARoutes_Kilometers}</option>
                                <option value="METERS">{!$Label.MA_Meters}</option>
                                <option value="YARDS">{!$Label.MA_Yards}</option>
                                <option value="FEET">{!$Label.MA_Feet}</option>
                            </select>
                        </td>
                    </tr>
                    <tr class='isolinerow' style='display: none;'>
                        <td>Unit:</td>
                        <td colspan='2'>
                            <select id="ProximityIsolineUnit" data-icon="grid" data-theme="c" datarole="button" data-overlay-theme="c" data-native-menu="false" onchange="ProximityUnitChanged(this);">
                                <option value='Distance'>Distance</option>
                                <option value='Time'>Time</option>
                            </select>
                        </td>
                    </tr>
                    <tr class='isolinerow' style='display: none;'>
                        <td>Radius</td>
                        <td>
                            <input type ='text' id="ProximityIsolineRadius" size='4' style='-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;' />
                        </td>
                        <td>
                            <select id="ProximityIsolineMeasurementType" data-icon="grid" data-theme="c" datarole="button" data-overlay-theme="c" data-native-menu="false">
                                <option value="MILES">Miles</option>
                                <option value="KM">Km</option>
                                <option value="METERS">Meters</option>
                                <option value="YARDS">Yards</option>
                                <option value="FEET">Feet</option>
                            </select>
                        </td>
                    </tr>
                    <tr class='isolinerow' style='display: none;'>
                        <td>Mode:</td>
                        <td colspan='2'>
                            <select id="ProximityIsolineMode" data-icon="grid" data-theme="c" datarole="button" data-overlay-theme="c" data-native-menu="false">
                                <option value='car'>Car</option>
                                <option value='pedestrian'>Pedestrian</option>
                            </select>
                        </td>
                    </tr>
                    <tr class='isolinerow' style='display: none;'>
                        <td>Traffic:</td>
                        <td colspan='2'>
                            <input type="checkbox" name="ProximityIsolineEnableTraffic" id="ProximityIsolineEnableTraffic" class="custom" />
                            <label for="ProximityIsolineEnableTraffic">Enable Traffic</label>
                        </td>
                    </tr>
                    <tr>
                        <td>{!$Label.MA_Address}</td>
                        <td colspan="2">
                            <textarea  rows="2" cols="20" id="ProximityAddress" ></textarea> 
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td colspan="2">
                            <a onclick="CreateProximityAddress();" data-role="button">{!$Label.MA_Create_Proximity_Circle}</a> 
                        </td>
                    </tr>
                </table>
                <div id="ProximityAddressStatus"></div>
                
            
                <div class="header">

                

                </div><!--header-->


            
            
            </div>
        
            <div id="Queries">
           
            <fieldset class="ui-grid-a" style="display:block;float:left;width:100%;margin-bottom:5px;">
                <div class="ui-block-a"><a id="TreeTab" data-role="button" data-theme="c" data-icon="arrow-l">{!$Label.MA_Folders}</a></div> 
                <div class="ui-block-b"><a id="PlottedQueriesTab" data-role="button" data-theme="c" data-icon="arrow-r" data-iconpos="right">{!$Label.MA_Plotted_Queries}</a></div>
            </fieldset>
          
          

                    <div id="Slider-Tree" style="display:block;float:left;width:100%;" >
                        
                        <table style="width:100%;">
                            <tr>
                                <td style="vertical-align:middle;">
                                    
                                    <apex:outputPanel layout="none" rendered="{!VisibleAreaEnabledMobileDefault = 'true'}">
                                        <input type="checkbox" name="VisibleAreaCB" data-theme="d" id="VisibleAreaCB" class="custom" checked="checked" />
                                    </apex:outputPanel>
                                    
                                    <apex:outputPanel layout="none" rendered="{!VisibleAreaEnabledMobileDefault != 'true'}">
                                        <input type="checkbox" name="VisibleAreaCB" data-theme="d" id="VisibleAreaCB" class="custom" />
                                    </apex:outputPanel>
                                    
                                    
                                    
                                    <label for="VisibleAreaCB">{!$Label.MA_Visible_Area}</label>
                                </td>
                                <td style="vertical-align:middle;padding-bottom:5px;">
                                    <a data-role="button" data-shadow="false"  data-theme="d" data-icon="back"  id="TreeBackButton">{!$Label.MA_Back}</a>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2" style="padding-left:2px; padding-right:2px;">
                                    <ul data-role="listview" data-inset="true" data-theme="c" data-dividertheme="b" id="FolderSQList"></ul>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2" style="padding-left:2px; padding-right:2px; padding-top: 10px;">
                                    <ul data-role="listview" data-inset="true" data-theme="c" data-dividertheme="b" id="RecentSQList"></ul>
                                </td>
                            </tr>
                        </table>
                        
                    </div><!--Slider-Tree-->
          
                    <div id="Slider-PlottedSavedQueries" style="display:block;float:left;overflow:auto;padding:0;margin-top:10px;">
        
                        <div style="display:block;float:left;margin:0;padding:0;">
                            <div id='PlottedQueriesHeader' style="font-size: font-size: 12px;margin-top:0;padding-top:0; display: none;">{!$Label.MA_Plotted_layers}</div>
                            
                            <div id='PlottedQueriesWatermark' style='margin-top: 25px;'>
                                <img style='height: 45px; margin-left: 120px;' src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/layers_watermark.png')}" />
                                <div style='text-align: center; color: #919191; max-width: 260px; margin-left: 20px;'>Plotted query information will appear here.  To plot a query, click the "{!$Label.MA_Folders}" button and select a query.</div>
                            </div>
           
                            <div id="PlottedQueriesContainer" style="display:block;float:left;width:100%;"  >
                                <table id="PlottedQueriesTable" cellpadding="2" cellspacing="0"></table>
                            </div><!--PlottedQueriesContainer-->
        
                        </div><!--displayblockfloatleft-->
                    </div><!--Slider-PlottedSavedQueries-->
        

           </div><!--queries-->

           <div id="POI">
            
                <input type="text" name="search-autocomplete" id="search-autocomplete" class="poi-search" placeholder="{!$Label.MA_Search_Places}..." />

                <!-- WaterMark for empty POI -->
                <div style='padding:20px 0px;' class='poi-watermark'>
                    <div style='padding:0;' ><img style='height: 45px; margin-left: 135px;' src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/poi_watermark.png')}" /></div>
                    <div style='text-align: center; color: #919191; margin-left: 50px; max-width: 200px;'>{!$Label.MA_Poi_Info}...</div>
                </div>

                <div style="display:none;" class="poiResults-wrapper">
                    <div id="poiResults"></div>

                    <a data-role="button" onclick="removePOI();" data-theme="c" class="ui-btn ui-btn-corner-all ui-shadow ui-btn-up-c remove-poi"><span class="ui-btn-inner ui-btn-corner-all" aria-hidden="true"><span class="ui-btn-text">Clear</span></span></a>
                </div>

            </div><!--poi-->
        
        <!-- Routes Tab -->
        <div id="Routes">
        
            <!-- Slide Buttons -->
            <fieldset class="ui-grid-a" style="display:block;float:left;width:100%;margin-bottom:5px;">
                <div class="ui-block-a"><a id="MyRoutesTab" data-role="button" data-theme="c" data-icon="arrow-l">{!$Label.MA_My_Routes}</a></div> 
                <div class="ui-block-b"><a id="CurrentRouteTab" data-role="button" data-theme="c" data-icon="arrow-r" data-iconpos="right">{!$Label.MA_Current_Route}</a></div>
            </fieldset>

            <!-- My Routes Slide -->
            <div id="MyRoutes-Slide" style="display:block;float:left;width:100%;" >
            
                <!-- Route Options -->
                <div class='ui-grid-a' id='routesOptions' style="margin-bottom: 10px; text-align: center;">
                    <div class='ui-block-a'>
                        <select id="routemonth">
                            <option value="1">{!$Label.MA_January}</option>
                            <option value="2">{!$Label.MA_February}</option>
                            <option value="3">{!$Label.MA_March}</option>
                            <option value="4">{!$Label.MA_April}</option>
                            <option value="5">{!$Label.MA_May}</option>
                            <option value="6">{!$Label.MA_June}</option>
                            <option value="7">{!$Label.MA_July}</option>
                            <option value="8">{!$Label.MA_August}</option>
                            <option value="9">{!$Label.MA_September}</option>
                            <option value="10">{!$Label.MA_October}</option>
                            <option value="11">{!$Label.MA_November}</option>
                            <option value="12">{!$Label.MA_December}</option>
                        </select>
                    </div>
                    <div class='ui-block-b'> 
                        <select id="routeyear">
                        </select>
                    </div>
                </div>
                    
                <!-- Routes Calendar -->
                <div id='routesCalendar' style="overflow: auto; width: 100%;">
                    <ul data-role='listview' data-inset='true' id='routeCalendarTable'></ul>
                </div>
            
            </div><!--Slider-Tree-->
            
            <!-- Current Route Slide -->
            <div id="CurrentRoute-Slide" style="display:none;float:left;overflow:auto;padding:0;margin-top:10px;">
            
                <!-- Route Info -->
                <div style='font-weight: bold; font-size: 14px; margin-bottom: 2px;'>{!$Label.MA_Name}</div>
                <div style='width: 95%;'><input type='text' id='route-name' value='New Route' /></div>
                    
                <div style='font-weight: bold; font-size: 14px; margin-top: 10px; margin-bottom: 2px;'>{!$Label.MA_Date}</div>
                <div style='width: 95%;'><input type='date' id='route-date' /></div>
            
                <!-- Waypoints -->
                <div class="route-buttons" style='display:none; font-weight: bold; font-size: 14px; margin-top: 10px; margin-bottom: 2px; line-height: 30px; height: 40px;'>
                    <div style="float:left;" class="display-inline waypoint-optimize"><a id="optimize-route-btn" onclick="optimizeRoute();" data-role="button" data-theme="c">{!$Label.MA_Optimize}</a></div>
                    <div class="display-inline waypoint-optimize"><a id="optimize-route-btn" onclick="showEmailPopup();" data-role="button" data-theme="c">{!$Label.MA_Print_Email}</a></div>
                </div>

                <div id="DirectionsInput" style="overflow:auto; margin-bottom:5px;padding:0 0 5px 0;border-bottom:1px solid #ddd;">
                    <ul id="sortable"></ul>
                </div>
                
                <!-- Buttons -->
                <div data-role="controlgroup" data-type="horizontal" >
                    <!-- <a id="DirectionsAddRow" onclick="AddAddressRow();" data-role="button" data-icon="plus">Add Row</a> -->
                    <a id="DirectionsClear" data-role="button" data-icon="minus" style='width: 130px;'>{!$Label.MA_Clear}</a>
                    <a id="SaveRoute" onclick="saveRoute();" data-role="button" data-theme="b" style='width: 160px;'>{!$Label.MA_Save}</a>
                </div>
                
                <!-- Messages -->
                <div id='route-errors' style='font-size: 12px; color: #F44; font-weight: bold; text-align: center;'></div>
            
            </div><!--Slider-PlottedSavedQueries-->
            
        </div><!--Routes-->   
           
           
    <div id="Legend">
        <div id="LegendInformation"></div>
        <div id="LegendDiv"></div>
    </div><!--Legend-->
    
    <div id="Export">
        

       
   
    
    </div><!--Export-->     
            </div>
                
                <div id="mapdiv"></div>
                
        <!-- Refresh Map Button -->
        <button data-role="none" style="margin-top: 2px;" id="visibleAreaRefeshMap" class="MAbutton button-blue icon-left ion-android-refresh ready"><span class="resfreshText">Refresh in this area</span></button>     
           
        <!-- Route Order Select -->
        <div id="loading-mask"></div>
        <div class="popup routeOrderPopup">
            <div class="popup-wrapper">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <h3 class="panel-title">Select Row Order</h3>
                    </div>
                    <div class="panel-body" style="min-height:100px;"></div>
                </div>
            </div>
        </div>

        <div class="popup emailRoutePopup">
            <div class="popup-wrapper">
                <div  data-role="fieldcontain">
                    <input checked="true" value="{!$User.Email}" type="checkbox" name="checkbox-1a" id="checkbox-1a" class="custom emailMe" />
                    <label for="checkbox-1a">Me: &lt; {!$User.Email} &gt;</label>
                </div>

                <div  data-role="fieldcontain">
                    <input type="checkbox" value="{!managerEmail}" name="checkbox-2a" id="checkbox-2a" class="custom emailManager" />
                    <label for="checkbox-2a">Manager: &lt; {!managerEmail} &gt;</label>
                </div>

                <div data-role="fieldcontain">
                    <label style="width: 100%;" for="name">Other: <span style="font-size: 12px;">(seperate multiple addresses with a ",")</span></label>
                    <input style="width: 98%; background: white;" type="text" name="name" id="name" class="otherEmail" value=""  />
                </div>

                <div>
                    <a onclick="cancelEmail();" data-role="button" data-inline="true">Cancel</a>
                    <a onclick="SendDirectionsEmail();" data-role="button" data-inline="true" data-theme="b">Email</a>
                </div>  
            </div>
        </div>
        
            
        <div data-role="footer" style="height:40px; box-sizing: border-box; display:none;">
            
            <div style="display:block;float:right; display: none;">

                <p style="width:auto;display:block;float:left;margin:5px 0 0 0;" >Geocoders</p>
                <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">1:</p>
                <div id="g1Status" style="display:block;float:left;position:relative;margin:5px 0 0 0;"></div>
                <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">2:</p>
                <div id="g2Status" style="display:block;float:left;position:relative;margin:5px 0 0 0;"></div>
                <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">3:</p>
                <div id="g3Status" style="display:block;float:left;position:relative;margin:5px 0 0 0;"></div>
                <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">4:</p>
                <div id="g4Status" style="display:block;float:left;position:relative;margin:5px 15px 0 0"></div>
        
            </div><!--float-right-->
        
            
        </div>
            
            
            
         
</div>

<!-- Map View Popup -->
<div id="MapViewPopup" data-enhance="false" class="MapViewPopup" style='display: none;'>
    <div>
        <h1>Map View</h1>
    </div>
    <div id="MapViewTypes" >  
        <a onclick="MA.Map.updateMapType('roadmap'); $('#MapViewPopup').hide();">Roadmap View</a><br />
        <a onclick="MA.Map.updateMapType('satellite'); $('#MapViewPopup').hide();">Satellite View</a><br />
        <a onclick="MA.Map.updateMapType('hybrid'); $('#MapViewPopup').hide();">Hybrid View</a><br />
        <a onclick="MA.Map.updateMapType('terrain'); $('#MapViewPopup').hide();">Terrain View</a><br />        
    </div>
</div>

<!-- Custom Dis Popup -->
<div id="CustomDispositionPopup" data-enhance="false" style='display: none;'>
    <!-- Loadmask -->
    <div id='customDis-loadmask'></div>

    <div>
        <label>Fill in the fields below</label>
        <ul id='customDis-fieldset-errors'></ul>
        <div id='customDis-fieldset'></div>
    </div>

    <div class='customDis-buttons'>
        <button class="saveDisposition MAbutton button-blue">Finish</button>
        <button class='customDis-cancel MAbutton button-silver' onclick="cancelDisposition();">Cancel</button>
    </div>      
</div>

<!-- Create Record Popup -->
<div id="CreateRecordPopup" data-enhance="false" style='display: none;'>

    <!-- Loadmask -->
    <div id='createrecord-loadmask'></div>

    <!-- Step 1 -->
    <div id='createrecord-step1' class='createrecord-step'>
        <h1>Step 1</h1>

        <div class='createrecord-formitem'>
            <label>What would you like to create?</label>
            <select id="createrecord-object" onchange="CreateRecord_Object_Change();"></select>
        </div>
        <div class='createrecord-formitem'>
            <label>Select a record type:</label>
            <select id='createrecord-recordtype'></select>
        </div>

        <div class='createrecord-buttons'>
            <button class="MAbutton button-blue" onclick='CreateRecord_Step1_Continue();'>Continue</button>
            <button class='MAbutton button-silver' onclick="CreateRecord_Cancel();">Cancel</button>
        </div>
    </div>
    
    <!-- Step 2 -->
    <div id='createrecord-step2' class='createrecord-step'>
        <h1>Step 2</h1>

        <div>
            <label>Fill in the fields below</label>
            <ul id='createrecord-fieldset-errors'></ul>
            <div id='createrecord-fieldset'></div>
        </div>

        <div class='createrecord-buttons'>
            <button class="MAbutton button-blue" onclick='CreateRecord_Step2_Continue();'>Finish</button>
            <button class='MAbutton button-silver' onclick="CreateRecord_Cancel();">Cancel</button>
        </div>
    </div>

    <!-- Success -->
    <div id='createrecord-success' class='createrecord-step'>
        <h1>Success</h1>

        <div id='createrecord-name' onclick="CreateRecord_GoToRecord();"></div>
        <div id='createrecord-address' onclick="CreateRecord_GPS();"></div>

        <div class='createrecord-buttons'>
            <button onclick='CreateRecord_Cancel();'>Done</button>
        </div>
    </div>

</div>

<!-- Start of third page: #popup -->
<div data-role="page" id="DebugPopup">

    <div data-role="header" data-theme="b">
        <h1>Debug Window</h1>

    </div><!-- /header -->

    <div data-role="content" data-theme="c">    
        <div id="DebugOut"></div>
        
        <table>
            <tr>
                <td>
                    <a data-role="button" data-shadow="false" data-rel="back" data-theme="d" data-icon="back" >Close</a>
                </td>
                <td>
                    <a data-role="button" data-shadow="false"  data-theme="d" onclick="ClearDebugWindow();">Clear</a>
                </td>
                <td>
                    <a data-role="button" data-shadow="false"  data-theme="d" onclick="EmailDebugLog();">Email</a>
                </td>
            </tr>
        </table>
    </div><!-- /content -->
    
    
</div><!-- /page popup -->
    
<div id="container">
    <div id="basic-template">
        <a class="ui-notify-cross ui-notify-close" href="#">x</a>
        <h1 style="color:red;">#{title}</h1>
        <p>#{text}</p>
    </div>
    <div id="Warning-Template">
        <a class="ui-notify-cross ui-notify-close" href="#">x</a>
        <h1 style="color:yellow;">#{title}</h1>
        <p>#{text}</p>
    </div>
</div>

<!-- Tooltip Template -->
<div id='tooltip-content-template' style='display: none;'>

    <!-- Header -->
    <div class='tooltip-header'>
    
        <!-- Take Me There Icon -->
        <div class='take-me-there'>
            <svg class="navigation-svg" width="40" height="40" viewBox="11 11 60 60">
                <g>
                    <path fill="#FFFFFF" d="M35.5,19.6l11,28.5c0.2,0.5,0.1,1-0.4,1.4c-0.1,0-0.2,0.1-0.3,0.2c-0.3,0.2-0.6,0.2-1,0.2c-0.4,0-0.7-0.2-0.9-0.4L34,42.6l-9.9,6.9c-0.3,0.2-0.6,0.4-0.9,0.4c-0.4,0-0.7,0-1-0.2c-0.3-0.2-0.5-0.4-0.7-0.7c-0.1-0.3-0.1-0.6,0-0.9l11-28.6c0.1-0.2,0.2-0.4,0.4-0.5c0.3-0.3,0.7-0.4,1.1-0.4c0.3,0,0.6,0.1,0.9,0.2C35.2,19.1,35.4,19.4,35.5,19.6z"/>
                </g>
            </svg>
        </div>
    
        <!-- Record Name -->
        <div class='name'>
            <a href="/::Id::" target="_blank">::Name::</a>
        </div>
        
        <!-- Record Address -->
        <div class='address'>::Address::</div>
        
    </div>
    
    <!-- Navbar -->
    <div class='navbar' data-role="navbar" data-grid="d">
        <ul>
            <li id='tab-info'><a href="" data-pane="#pane-info-::ContentKey::" data-padding="10px" class="ui-btn-active">{!$Label.MA_Info}</a></li>
            <li id='tab-actions'><a href="" data-pane="#pane-actions-::ContentKey::" data-padding="10px">{!$Label.MA_Actions}</a></li>
            <li id='tab-chatter'><a href="" data-pane="#pane-chatter-::ContentKey::" data-padding="0">Chatter</a></li>
            <li id='tab-relatedlist'><a href="" data-pane="#pane-relatedlist-::ContentKey::" data-padding="10px">{!$Label.MA_RELATED_LIST}</a></li>
            <li id='tab-weather'><a href="" data-pane="#pane-weather-::ContentKey::" data-padding="10px">{!$Label.MA_Weather}</a></li>
        </ul>
    </div>
    
    <!-- Info Tab -->
    <div id="pane-info-::ContentKey::" class='pane'>
        
        <!-- Tooltips -->
        <div class='tooltips'>
            <table>
                
            </table>
        </div>
        
        <!-- Position Info -->
        <div class='position'>
            <p style='padding: 10px 0 0 5px; font-size: 12px !important; font-style: italic; color: #757575;'>Loading position data...</p>
        </div>
        
    </div>
    
    <!-- Actions Tab -->
    <div id="pane-actions-::ContentKey::" class='pane actions iframe overflow-touch'>
        <div class='layout-tooltip'></div>
    </div>
    
    <!--Chatter Tab -->
    <div id="pane-chatter-::ContentKey::" class='loading pane iframe overflow-touch' style='padding: 0;'>
    </div>
    
    <!-- Related Lists Tab -->
    <div id="pane-relatedlist-::ContentKey::" class='pane'>
        <div id="ajax-::ContentKey::" style='overflow: auto;'></div>
    </div>
    
    <!-- Weather Tab -->
    <div id="pane-weather-::ContentKey::" class='pane'>
        <div id="weather-ajax-::ContentKey::"></div>
    </div>
</div>

<!-- Update Field Window -->
<script id='DynamicFilterPopupWrapper' type='text/template'>
    <div class="popup_block" style='max-height: 600px;'>
        <div class='loadmask-wrapper'>
            <h2>Dynamic Filters</h2>
            <p style='color: #757575; font-size: 11px; margin: 2px 0;'>This query contains dynamic filters.  Please enter values for the fields below and click continue.</p>
            
            <!-- Form -->
            <div style='height: 120px; margin-top: 15px;'>
                <table class='form-stretch'>
                    
                    <!-- New value -->
                    <tr class='updatefield-value-wrapper'>
                        <td id='DynamicFilterPopup-FieldLabel'></td>
                        <td class='updatefield-value'><input type='text' id='DynamicFilterPopup-FieldValue' /></td>
                    </tr>
                        
                </table>
            </div>
        
            <!-- Buttons -->
            <button id='DynamicFilterPopup-Continue' class="MAbutton button-blue">Continue</button>
            <button id='DynamicFilterPopup-Cancel' class='MAbutton'>{!$Label.MA_Cancel}</button>

        </div>
    </div>
</script>

<!-- Templates -->
<div id='templates' style='display: none;'>

    
    <div class="dynamicFilterPopup template">
            <div style="padding: 0 5%;color: #757575;">
                <div class="MAIcon ion-information-circled" style="display: inline-block;vertical-align: top;font-size: 20px;"></div>
                <div style="color: #757575;font-size: 11px;display: inline-block;width: 90%;">This query contains dynamic filters.  Please enter values for the fields below and click continue.</div>
            </div>
            <div style='height: 120px; margin-top: 15px;'>
                <table class='form-stretch'>
                        
                </table>
            </div>
        </div>
    <!-- Data Layer Popup V2 -->
    <div class="CreateRecordDataLayerPopup2">
        
        <!-- Step 1 -->
        <div class='createrecordDataLayer2-step1 createrecord-step'>
            <h1>Step 1</h1>

            <div class="overflow" style="max-height:400px; overflow: auto;">
                <div class='createrecord-formitem'>
                    <label>What would you like to create?</label>
                    <select class="createrecordDataLayer2-object" onchange="MAData.createRecordFromDataLayer.object_Change_V2();"></select>
                </div>
                <div class='createrecord-formitem'>
                    <label>Select a record type:</label>
                    <select class='createrecordDataLayer2-recordtype'></select>
                </div>
            </div>
        </div>
        
        <!-- Step 2 -->
        <div class='createrecordDataLayer2-step2 createrecordDataLayer-step' style="display:none;">
            <h1>Step 2</h1>

            <div>
                <label>Fill in the fields below</label>
                <div class="overflow" style="max-height:400px; overflow: auto;">
                    <div class='createrecordDataLayer-fieldset'></div>
                </div>
                <ul class='createrecordDataLayer2-fieldset-errors'></ul>
            </div>
        </div>

    </div>

    <div id='tooltip-demographic-template'>
            
        <!-- Header -->
        <div class='tooltip-header'>
            <table class='tooltip-table'></table>
        </div>
        
        <!-- Tabs -->
        <div class='tabs' id="madata-tabs" data-role="tabs">
            <div class='navbar' data-role="navbar">
                <ul></ul>
            </div>
        </div>

        <!-- Loading -->
        <div class='tooltip-loader'>
            <div class="MA2-loading-mask">
                 <div class="loadingText">
                <div class="MA2-loader loader-inline"></div>
                {!$Label.MA_Loading}...
                </div>
            </div>
        </div>
    </div>

    <div id="printEmailContainer"></div>

    <!-- Current Location Weather Template -->
    <div id="CurrentLocationWeatherTemplate">
        
        <b style="font-size:18px;">{!$Label.MA_Current_Forecast}</b>
    
        <table border="0" style="width:400px; margin-bottom:20px;">
            <tr>
                <td style="font-weight:bold; font-size: 14px;" colspan="3">::weather::</td>
            </tr>
            <tr>
                <td style="width:120px; vertical-align:middle;">
                    ::icon::
                    </td>
                <td style="text-align:center; vertical-align:middle;">
                    <span style="font-weight:bold; font-size: 20px;">::avgTempF::&deg;F</span> 
                    <br />{!$Label.MA_Feels_Like} ::feelslikeF::&deg;F
                </td>
                <td>
                    <table border="0" cellpadding="3" cellspacing="0">
                        <tr>
                            <td><b>{!$Label.MA_High}</b></td>
                            <td>::maxTempF::&deg;F (::maxTempC::&deg;C)</td>
                            </tr>
                            <tr>
                                <td><b>{!$Label.MA_Low}</b></td>
                            <td>::minTempF::&deg;F (::minTempC::&deg;C)</td>
                            </tr>
                            <tr>
                            <td><b>{!$Label.MA_Precipitation}</b></td>
                            <td>::pop::%</td>
                        </tr>
                        <tr>
                            <td><b>{!$Label.MA_HUMIDITY}</b></td>
                            <td>::humidity::%</td>
                        </tr>
                        <tr>
                            <td><b>{!$Label.MAWeather_Winds}</b></td>
                            <td>::windDir:: at ::windSpeedMPH:: mph</td>
                        </tr>
                    
                    </table>
                </td>
                
                
            </tr>
        
        </table>
        
        <b style="font-size:18px;">{!$Label.MA_Future_Forecast}</b>
    </div>
    
    <!-- Location Weather Template -->
    <div id="LocationWeatherTemplate">
        <table border="0" style="border-bottom: 1px solid black; width:400px;">
            <tr>
                <td style="width:120px; vertical-align:middle;">::icon::</td>
                <td>
                    <table border="0" cellpadding="3" cellspacing="0">
                        <tr>
                            <td colspan="4" style="font-weight:bold; font-size: 14px;">
                                ::date::
                            </td>
                        </tr>
                        <tr>
                            <td colspan="4">
                                ::weather::
                            </td>
                        </tr>
                        <tr>
                            <td><b>{!$Label.MA_High}</b></td>
                            <td>::maxTempF::&deg;F (::maxTempC::&deg;C)</td>
                            <td style="padding-left:10px;"><b>Precip</b></td>
                            <td>::pop::%</td>
                        </tr>
                        <tr>
                            <td><b>{!$Label.MA_Low}</b></td>
                            <td>::minTempF::&deg;F (::minTempC::&deg;C)</td>
                            <td style="padding-left:10px;"><b>Humidity</b></td>
                            <td>::humidity::%</td>
                        </tr>
                        <tr>
                            <td><b>{!$Label.MAWeather_Winds}</b></td>
                            <td colspan="3">::windDir:: at ::windSpeedMPH:: mph</td>
                        </tr>
                    
                    </table>
                    
                </td>
                
                
            </tr>
        
        </table>
    
    </div>

    <!-- Plotted Query Template -->
    <div class="PlottedRowUnit">
    
        <!-- Load Mask -->
        <div class='loadMask'></div>
       
        <!-- Header -->
        <div class='header'>
        
            <!-- Rendering Options -->
            <div class='renderButtons'>
                <div class='renderButtons-button markers' data-renderAs='Markers' title='Render Markers'></div>
                <div class='renderButtons-button heatmap' data-renderAs='Heatmap' title='Render Heatmap'></div>
                <div class='renderButtons-button cluster' data-renderAs='Cluster' title='Render Clusters'></div>
                <div class='renderButtons-button scatter' data-renderAs='Scatter' title='Render Scatter'></div>
            </div>
            
            <!-- Loading Indicator -->
            <div class='loader'></div>
        
            <!-- Remove Button -->
            <div class='btn-remove'><div>x</div></div>
            
        </div>
        
        <!-- Plotting Info -->
        <div class='plottinginfo-wrapper'>
        
            <!-- Basic Info -->
            <div class='basicinfo'>
                <div class='basicinfo-name'>&nbsp;</div>
                <div class='basicinfo-baseobjectname'>&nbsp;</div>
            </div>
        
            <div class='inline status'></div>
            <div class='info'></div>
        </div>
        
        <!-- Legend -->
        <div class='legend-showhide' style='display: none; text-align: center; cursor: pointer; padding: 5px 0;'>--{!$Label.MA_Hide_Legend}--</div>
        <table class='legend' style='display: none;'></table>
        <div class='legend-moreless' style='display: none; text-align: center; cursor: pointer; padding: 5px 0;'>--Show More--</div>
        
    </div>

    <!-- LinkedIn Cluster Template -->
    <div class='linkedin-cluster-tooltip'>
        <div class='linkedin-cluster-header'></div>
        
        <div class='linkedin-cluster-table-wrapper'>
            <table class='linkedin-cluster-table'></table>
        </div>
    </div>
    
    <!-- LinkedIn Row Template -->
    <table>
        <tr class='linkedin-row'>
            <td class='linkedin-picture'></td>
            <td class='linkedin-info'>
                <div class='linkedin-name'></div>
                <div class='linkedin-headline'></div>
                <div class='linkedin-industry'></div>
            </td>
            <td class='linkedin-actions'>
                <button class='linkedin-actions-createlead' onclick='linkedIn_CreateLead($(this).closest(".linkedin-row"));'>Create Lead</button>
                <button class='linkedin-actions-inmail' onclick='linkedIn_SendInMail($(this).closest(".linkedin-row"));'>Send InMail</button>
                <button class='linkedin-actions-message' onclick='linkedIn_SendMessage($(this).closest(".linkedin-row"));'>Send Message</button>
            </td>
            <td class='linkedin-companyactions' style='display: none;'>
                <button class='linkedin-actions-createaccount' onclick='linkedIn_CreateAccount($(this).closest(".linkedin-row"));'>Create Account</button>
            </td>
        </tr>
    </table>
    
    <!-- Standard Cluster Template -->
    <div class='standard-cluster-tooltip'>
    
        <!-- Header -->
        <b><div class='standard-cluster-header' style='border-bottom: 1px solid rgb(141, 141, 141); font-size: 105%;'></div></b>
        
        <!-- Buttons -->
        <div class='standard-cluster-buttons-wrapper'>
            <table class='standard-cluster-buttons-table'>
                <tr>
                    <td class='showallmarkers' style='display: none;'><button>Show All Markers</button></td>
                    <td><button>Zoom To Markers</button></td>
                    <td class="drawpolygon"><button>Draw Polygon</button></td>
                </tr>
            </table>
        </div>
        
        <!-- Content -->
        <div class='standard-cluster-content-wrapper' style='min-height: 10px; overflow-y: auto; min-width: 400px; max-width: 700px; padding: 10px 0px 10px 5px;'>
            
        </div>
        
    </div>

    <!-- POI Row Template -->
    <div id='poi-results-content-template' style='display: none;'>
        <div class='poi-row template'>
            <img class='poi-image'/>
            <a style='font-size:12px; padding: 0 30px 0 5px;' class='poi-name' href='' target="_blank"></a>
            <div style='font-size:11px; padding: 0 30px 0 5px;' class='poi-address'></div>
            <div style='font-size:11px; padding: 0 30px 0 5px;' class='poi-phone'></div>
        </div>
    </div>
    
    <!-- Cluster Row Template -->
    <table>
        <tr class='cluster-row'>
            <td class='cluster-info'>
                <div class='cluster-id'>::Id::</div>
            </td>
        </tr>
    </table>
    
    <!-- Button Set Section Template -->
    <div class='buttonset-section'>
        <div class='buttonset-section-header'></div>
        <div class='buttonset-section-columns'>
            <div class='buttoncolumn'></div>
            <div class='buttoncolumn'></div>
            <div class='buttoncolumn'></div>
        </div>
    </div>
    
    <!-- Waypoint Tooltip -->
    <div class='waypointmarker'>
        <h2 class='name'></h2>
        <div class='address'></div>
        <div class='notes'></div>
        <div class='buttons'>
            <button class='takemethere'>{!$Label.MAActionFramework_Take_Me_There}</button>
        </div>
        <div class='footer'>***{!$Label.MA_MANUALLY_ENTER_WAYPOINT_MESSAGE}.</div>
    </div>
    
    <!-- SVG Marker -->
    <svg class='svg-marker' width="28" height="42" viewBox="0 0 28 42" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
        <g>
            <path transform="rotate(180 13.5708 20.8542)" fill="__GRADIENT_ONE__" d="m6.300003,37.5c-4.300003,-3.399994 -5.900002,-8.5 -4.300003,-13.699997c1.700005,-5.800003 11.100006,-23.100006 12,-22.100006c1.400009,1.5 10.800003,20.800003 11.5,23.5c1,3.800003 -1.099991,9.300003 -4.599991,12.300003c-4.100006,3.400009 -10.200012,3.400009 -14.600006,0z" stroke="__CIRCLE_STROKE__"/>
            <circle stroke="__CIRCLE_STROKE__" r="4.5" cy="14" cx="13.5" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__"/>
        </g>
    </svg>
    
    <!-- SVG Marker - Circle -->
    <svg class='svg-marker-circle' width="28" height="28" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
        <g>
            <circle r="13" cy="14" cx="14" fill="__GRADIENT_ONE__" stroke="__CIRCLE_FILL__" stroke-width="1"/>
            <circle r="4.5" cy="14" cx="14" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__" stroke="__CIRCLE_STROKE__"/>
        </g>
    </svg>
    
    <!-- SVG Marker - Triangle -->
    <svg class='svg-marker-triangle' width="28" height="28" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
        <g>
            <path d="M0 28 L14 0 L28 28 Z" fill="__GRADIENT_ONE__" stroke="__CIRCLE_FILL__" stroke-width="1"/>
            <circle r="4.5" cy="18" cx="14" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__" stroke="__CIRCLE_STROKE__"/>
        </g>
    </svg>
    
    <!-- SVG Marker - Square -->
    <svg class='svg-marker-square' width="28" height="28" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
        <g>
            <path d="M0 0 L28 0 L28 28 L0 28 Z" fill="__GRADIENT_ONE__" stroke="__CIRCLE_FILL__" stroke-width="1"/>
            <circle r="4.5" cy="14" cx="14" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__" stroke="__CIRCLE_STROKE__"/>
        </g>
    </svg>
    
    <!-- SVG Marker - Waypoint -->
    <svg class='svg-marker-waypoint' width="28" height="42" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
        <g>
            <title></title>
            <path stroke="#1d649b" id="svg_2" d="m6.300003,37.5c-4.300003,-3.399994 -5.900002,-8.5 -4.300003,-13.699997c1.700005,-5.800003 11.100006,-23.100006 12,-22.100006c1.400009,1.5 10.800003,20.800003 11.5,23.5c1,3.800003 -1.099991,9.300003 -4.599991,12.300003c-4.100006,3.400009 -10.200012,3.400009 -14.600006,0z" fill="#4597d0" transform="rotate(180 13.5708 20.8542)"/>
            <text fill="#ffffff" stroke="#1d649b" stroke-width="0.2" stroke-dasharray="null" stroke-linejoin="null" stroke-linecap="null" x="13" y="21" id="svg_1" font-size="18" font-family="Monospace" text-anchor="middle" xml:space="preserve" font-weight="normal">__TEXT__</text>
        </g>
    </svg>
    
    <!-- SVG Marker - My Position -->
    <svg class='svg-marker-myposition' width="20" height="20" xmlns="http://www.w3.org/2000/svg">
        <defs>
            <radialGradient id="rg_blue" spreadMethod="pad" cx="0.5" cy="0.5" r="0.44989">
                <stop stop-color="#56aaff" stop-opacity="0.99609" offset="0"/>
                <stop stop-color="#007fff" offset="1"/>
            </radialGradient>
        </defs>
        <g>
            <circle fill="url(#rg_blue)" stroke-width="0" cx="9.95" cy="10" r="9.63506" id="svg_1" stroke="#000000"/>
        </g>
    </svg>
    
    <!-- SVG Marker - Favorite -->
    <svg class='svg-marker-favorite' width="28" height="42" xmlns="http://www.w3.org/2000/svg">
        <g>
            <path transform="rotate(180 13.5708 20.8542)" fill="__GRADIENT_ONE__" d="m6.300003,37.5c-4.300003,-3.399994 -5.900002,-8.5 -4.300003,-13.699997c1.700005,-5.800003 11.100006,-23.100006 12,-22.100006c1.400009,1.5 10.800003,20.800003 11.5,23.5c1,3.800003 -1.099991,9.300003 -4.599991,12.300003c-4.100006,3.400009 -10.200012,3.400009 -14.600006,0z" stroke="__CIRCLE_STROKE__"/>
            <path stroke="__CIRCLE_FILL__" fill="__CIRCLE_FILL__" stroke-width="5" d="m13.47797,15.01411l-0.28443,0.20129l0.10872,-0.32559l-0.28433,-0.20126l0.35149,0.00003l0.09341,-0.27995l0.01524,-0.04546l0.10853,0.32538l0.35161,0l-0.28449,0.20127l0.10874,0.32569l-0.28449,-0.20136l0,0l0,-0.00003l0,0l0,0.00001z"/>
        </g>
    </svg>
    
</div>

<script>
$(document).ready(function() {

    customButtons = JSON.parse($('[id$=":serializedCustomButtons"]').val());

               $('#sidebar-button').click(function()
        {
            $('#SideBar').animate(
                {width:'toggle'}, 
                50, 
                function() 
                    {
                        // Animation complete.
                        if (this.style.display == "none")
                        {
                            //Hidden
                            MoveMapComponentsLeft();
                        }
                        else
                        {
                            //Displayed
                            MoveMapComponentsRight();
                        }
                    }
            );
        }
    );    
   
           
});

$(document).ready(function() {
    $("#Queries").show();
    $("#Routes").hide();
    //$("#Legend").hide();
    
    $("#Proximity").hide();
    $("#POI").hide();
    $("#Slider-PlottedSavedQueries").hide();
    $("#Slider-DirectionsOutput").hide();
    
    //Does NOT work with mobile jquery
    /*
    $( "#sortable" ).sortable({
        update: function(ev,ui) {
            recalculateRowOrder();
        }
    });
    */
});

$("#tabProximity").click(function () {
    $("#Proximity").show();
    $("#Routes").hide();
    //$("#Legend").hide();
    $("#Queries").hide();
    $("#POI").hide();
});

$("#tabQueries").click(function () {
    $("#Queries").show();
    $("#Routes").hide();
    //$("#Legend").hide();
    $("#Proximity").hide();
    $("#POI").hide();
});
      
$("#tabRoutes").click(function () {
    $("#Queries").hide();
    $("#Routes").show();
    //$("#Legend").hide();
    $("#Proximity").hide();
    $("#POI").hide();
});
    
$("#tabExport").click(function () {
    $("#Queries").hide();
    $("#Routes").hide();
    //$("#Legend").hide();
    $("#Export").show();
    $("#POI").hide();
});

$("#tabPoi").click(function () {
    $("#Queries").hide();
    $("#Routes").hide();
    //$("#Legend").hide();
    $("#Proximity").hide();
    $('#POI').show();
});
    
    
$("#TreeTab").click(function () {
    $("#Slider-Tree").show();
    $("#Slider-PlottedSavedQueries").hide();
});    
$("#PlottedQueriesTab").click(function () {
    PlottedQueries_Show();
});

$('#MyRoutesTab').click(function () {
    $('#MyRoutes-Slide').show();
    $('#CurrentRoute-Slide').hide();
});
$('#CurrentRouteTab').click(function () {
    $('#CurrentRoute-Slide').show();
    $('#MyRoutes-Slide').hide();
});

$("#DirectionsInputTab").click(function () {
    $("#Slider-DirectionsInput").show();
    $("#Slider-DirectionsOutput").hide();
    });
    
$("#DirectionsOutputTab").click(function () {
    $("#Slider-DirectionsOutput").show();
    $("#Slider-DirectionsInput").hide();
    });

$('#DirectionsClear').click(function () {
    $('#routesCalendar .route .ui-icon-delete').each(function () {
        $(this).closest('.route').click();
    });
});

function TreeTabActive(){

if ($("#Slider-Tree:visible")){
$("#TreeTab").addClass("TreeTab-Active");
} else {
}

};


    
//document.getElementById("DirectionsInput").style.maxHeight =(520) + "px";

    /**********************
    *   Helper Methods
    ***********************/
    
    //helper method for geocoding
    function geocode(options)
    {   
        MA.Geocoding.geocode({ address: options.address }, function (response) {
            try {
                options.complete({
                    success: true,
                    request: options,
                    results: response.result
                });
            }
            catch (err) {
                options.complete({success: false});
            }
        });
    }
    
    //helper method for reverse geocoding
    function reverseGeocode(options)
    {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ latLng: options.latLng }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                options.complete({
                    success: true,
                    request: options,
                    results: results
                });
            }
            else {
                MA.log('Bad Reverse Geocode', status);
                options.complete({success: false});
            }
        });
    }
    
    //determine if point is in prox object
    function pointInProxObject(point, proxObject)
    {
        if (proxObject instanceof L.Circle)
        {
            return point.distanceTo(proxObject.getLatLng()) <= proxObject.getRadius();
        }
        else if (proxObject instanceof L.Polygon)
        {
            return leafletPip.pointInLayer(point, L.geoJson(proxObject.toGeoJSON())).length > 0;
        }
        
        return false;
    }

    function LaunchPopupWindow($popup, width, skipAppend)
    {
        //scroll to top
        $('body').animate({ scrollTop: 0 }, "slow");
        
        //add the popup
        if (skipAppend) {   //quick fix for broken comboboxes due to dom manipulation
            $popup.fadeIn().css({
                width: width + 'px',
                position: 'absolute',
                top: '15px',
                left: Math.floor(($('body').width() - width) / 2) + 'px'
            });
        }
        else {
            $popup.appendTo('body').fadeIn().css({
                width: width + 'px',
                position: 'absolute',
                top: '15px',
                left: Math.floor(($('body').width() - width) / 2) + 'px'
            });
        }
        
        //add the fade layer
        $('body').append('<div id="fade"></div>');
        $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn();
    }

</script>

<apex:form >
    <apex:inputHidden id="serializedOptions" value="{!serializedOptions}" />
</apex:form>

<script>
    $(function() {
        
        
        
    });
</script>


<!-- Dynamic Component Overrides -->
<apex:repeat value="{!overrideComponentStrings}" var="c">
    <apex:outputText escape="false" value="{!c}" />
</apex:repeat>
    
</apex:page>