<apex:page sidebar="false" title="MapAnything Settings" controller="sma.MapAnythingBaseObjects" setup="true" extensions="sma.MARemoteFunctions">

    <script>
        var MARemoting = {
            processAJAXRequest : '{!$RemoteAction.MARemoteFunctions.processAJAXRequest}',
            processAJAXRequestReadOnly : '{!$RemoteAction.MARemoteFunctions.processAJAXRequestReadOnly}'
        }
    </script>

    <!-- Leaflet -->
    <link rel="stylesheet" href="{!URLFOR($Resource.Leaflet, 'leaflet.css')}" />
    <script src="{!URLFOR($Resource.Leaflet, 'leaflet.js')}"></script>

     <!-- async -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'async/async.min.js')}"></script>

    <script type='text/javascript'>
        if (typeof $ == 'undefined')
        {
            document.write("<script type='text/javascript' src='{!URLFOR($Resource.MapAnything, 'js/jquery-1.7.1.min.js')}'></script"+">");
            document.write("<script type='text/javascript' src='{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.min.js')}'></script"+">");
            document.write("<link rel='stylesheet' type='text/css' href='{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.css')}'></link"+">");
            document.write("<script type='text/javascript' src='{!URLFOR($Resource.AdminSettings, 'js/date.js')}'></script"+">");
        }
    </script>

    <!-- jQuery Combo Box (depends on jQuery UI) -->
    <script src="{!URLFOR($Resource.AdminSettings, 'js/combobox/jquery.combobox.js')}" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.AdminSettings, 'js/combobox/jquery.combobox.css')}" />

    <!-- jQuery Notify (growl messages) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'notify/jquery.notify.js')}"></script>
    <link rel='stylesheet' type='text/css' href="{!URLFOR($Resource.MapAnything, 'notify/ui.notify.css')}" />

    <!-- Glyphicons -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/MapAnything.css')}"/>

    <!-- CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/style.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'style.css')}"/>

    <!-- Lightning Design System 2.3.0 -->
    <link type="text/css" rel="stylesheet" href="{!URLFOR($Resource.MapAnythingJS, 'styles/css/salesforce-lightning-design-system-vf-2.3.0.min.css')}" />
    <!-- MapAnything 2.0 UI - uses SASS in static resource -->
    <link type="text/css" rel="stylesheet" href="{!URLFOR($Resource.MapAnythingJS, 'styles/css/ma-ui.css')}" />
    <!-- Select2 replacing combobox -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/select2/select2.full.min.js')}"></script>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'js/select2/select2.min.css')}"></apex:stylesheet>
    <!-- icon-font -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnythingJS, 'styles/styles.css')}"/>
    <!-- MapAnything Configuration Page Styling -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnythingJS, 'styles/css/ma-configuration-ui.css')}"/>
    <c:CSSHelperBlue />
    <c:MA />
    <style>

        /* Boxes */
        #adminsettings .box.gray {
            border: 1px solid #C7C7C7;
            padding:5px;
            margin:5px 0 10px 0;
            background:#efefef;
        }
        #adminsettings .section-header {
            color: #2265BB;
        }

        /* Forms */
        #adminsettings .form td {
            vertical-align: middle;
        }

        /* Tabs */
        #adminsettings .TopTabs
        {
            background: none;
            border: none;
        }
        input.error {
            border: 1px solid #E48585 !important;
            box-shadow: 0 0 0 2px rgba(255,0,0,0.6) !important;
            transition: box-shadow 0.2s !important;
        }
        #adminsettings .TopTabs > ul
        {
            width: auto;
            padding: 0 8px;
            background: none;
            border: none;
            border-bottom: 1px solid #CCC;
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }
        #adminsettings .TopTabs > ul .ui-state-default
        {
            background: #3684c5;
            border: medium none;
            border-radius: 0 0 0 0;
            border: 1px solid #19508C;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
            margin: 0 0 0 0;
        }
        #adminsettings .TopTabs > ul li.ui-tabs-active
        {
            border: 1px solid #CCC;
            background: white;
            color: #222;
        }
        #adminsettings .TopTabs > ul li a
        {
            color: #ffffff;
            font-size: 10px;
            outline: none;
        }
        #adminsettings .TopTabs > ul li.ui-tabs-active a
        {
            color: #3684c5;
        }
        #adminsettings .TopTabs > .ui-tabs-panel
        {
            padding: 15px;
        }

        /* Loadmasks */
        .loadmask {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 99;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            background-color: #ffffff;
            opacity: 0.4;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 40);
            filter: alpha(opacity = 40);
        }
        .loadmask-status {
            position: absolute;
            width: 100%;
            text-align: center;
            z-index: 999999;
            top: 50px;
        }
        .loadmask-status .status {
            margin: 0 auto;
            background-color: white;
            display: inline-block;
            padding: 15px;
            font-size: 10px;
            -moz-border-radius: 12px;
            -webkit-border-radius: 12px;
            border-radius: 12px;
            -moz-box-shadow: 0px 0px 8px #000000;
            -webkit-box-shadow: 0px 0px 8px #000000;
            box-shadow: 0px 0px 8px #000000;
        }
        .loadmask-status .status * {
            vertical-align: middle;
        }
        .loadmask-status .status img {
            margin-right: 5px;
        }

        /* Comboboxes */
        #adminsettings .ui-combobox
        {
            padding-right: 0;
        }
        #adminsettings .ui-combobox input
        {
            background-color: white;
            background: white;
            padding-right: 30px;
            font-weight: bold;
            width: 300px;
        }
        #adminsettings .ui-combobox a
        {
            background: transparent;
            border: none;
            position: absolute;
            right: 0;
        }
        #adminsettings .ui-combobox a .ui-button-icon-primary
        {
            background: transparent url("{!URLFOR($Resource.sma__QueryEditor, 'images/icons/combobox-arrow-16.png')}") no-repeat center;
        }

        /* Buttons */
        #adminsettings .buttons {
            padding: 0 10px;
        }
        #adminsettings .btn {
            width: 70px;
        }
        .btn-blue {
            cursor: pointer;
        }
        .btn-blue.btn-white {
            color: black;
            border: 1px solid gray;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f7f7f7', endColorstr = '#cfcfcf');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f7f7f7', endColorstr = '#cfcfcf')";
            background-image: -moz-linear-gradient(top, #f7f7f7, #cfcfcf);
            background-image: -ms-linear-gradient(top, #f7f7f7, #cfcfcf);
            background-image: -o-linear-gradient(top, #f7f7f7, #cfcfcf);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#f7f7f7), to(#cfcfcf));
            background-image: -webkit-linear-gradient(top, #f7f7f7, #cfcfcf);
            background-image: linear-gradient(top, #f7f7f7, #cfcfcf);
        }
        .btn-blue.btn-white:hover {
            color: black;
            border: 1px solid gray;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#e3e3e3', endColorstr = '#bcbcbc');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#e3e3e3', endColorstr = '#bcbcbc')";
            background-image: -moz-linear-gradient(top, #e3e3e3, #bcbcbc);
            background-image: -ms-linear-gradient(top, #e3e3e3, #bcbcbc);
            background-image: -o-linear-gradient(top, #e3e3e3, #bcbcbc);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#e3e3e3), to(#bcbcbc));
            background-image: -webkit-linear-gradient(top, #e3e3e3, #bcbcbc);
            background-image: linear-gradient(top, #e3e3e3, #bcbcbc);
        }
        .buttonset-deletebtn:hover, .customaction-deletebtn:hover {
            background: #FF5959 !important;
        }

        /* Permissions Filters */
        #permissions-filters td:nth-child(odd) {
            font-weight: bold;
            vertical-align: middle;
        }

        /* Permissions Grid */
        #permissions-grid {
            width: 100%;
            border-spacing: 0;
            border-padding: 0;
        }
        #permissions-grid tr {
            height: 35px;
        }
        .help-btn {
            color: #3684C5;
            font-size: 18px;
            cursor:pointer;
        }
        .help-text {
            color: #3684C5;
            font-size: 12px;
            display: none;
        }
        #permissions-grid th {
            padding: 5px;
            font-size: 12px;
            color: white;
            background-color: #006DB4;
            background: #006DB4;
            background: url('images/blue-tab-bg.png');
            background-repeat: repeat-x;
            background-position: top;
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#197BBB), to(#0059A0));
            background: -webkit-linear-gradient(top, #197BBB, #0059A0);
            background: -moz-linear-gradient(center top , #197BBB 20%, #0059A0 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, #197BBB, #0059A0);
            background: -o-linear-gradient(top, #197BBB, #0059A0);
            border: medium none;
            border: 1px solid #19508C;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0')";
        }
        #permissions-grid th table {
            width: 100%;
            border-spacing: 0;
        }
        #permissions-grid th table td {
            background: transparent;
            filter: none;
            -ms-filter: none;
            border: none;
            color: white;
            padding: 0;
        }
        #permissions-grid th table td:first-child {
            padding-right: 5px;
        }
        #permissions-grid th table td:last-child {
            text-align: right;
        }
        #permissions-grid th .link {
            font-size: 8px;
            cursor: pointer;
        }
        #permissions-grid td {
            vertical-align: middle;
            padding: 5px;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f0f0ed', endColorstr = '#c9c4c3');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f0f0ed', endColorstr = '#c9c4c3')";
            background-image: -moz-linear-gradient(top, #f0f0ed, #c9c4c3);
            background-image: -ms-linear-gradient(top, #f0f0ed, #c9c4c3);
            background-image: -o-linear-gradient(top, #f0f0ed, #c9c4c3);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#f0f0ed), to(#c9c4c3));
            background-image: -webkit-linear-gradient(top, #f0f0ed, #c9c4c3);
            background-image: linear-gradient(top, #f0f0ed, #c9c4c3);
            border: 1px solid #757575;
        }
        #permissions-grid tr:nth-child(even) td {
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#fafafa', endColorstr = '#f0f0f0');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#fafafa', endColorstr = '#f0f0f0')";
            background-image: -moz-linear-gradient(top, #fafafa, #f0f0f0);
            background-image: -ms-linear-gradient(top, #fafafa, #f0f0f0);
            background-image: -o-linear-gradient(top, #fafafa, #f0f0f0);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#fafafa), to(#f0f0f0));
            background-image: -webkit-linear-gradient(top, #fafafa, #f0f0f0);
            background-image: linear-gradient(top, #fafafa, #f0f0f0);
        }
        #permissions-grid input.autosave[type=text] {
            width: 35px;
            font-size: 10px;
        }
        #permissions-grid a:link, #permissions-grid a:active, #permissions-grid a:visited {
            text-decoration: none;
            color: black;
        }
        #permissions-grid a:hover {
            text-decoration: none;
            color: #757575;
        }
        #permissions-grid-wrapper {
            position: relative;
            min-height: 150px;
        }
        #permissions-grid-wrapper.permissions-grid-loading #permissions-grid-loadmask {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 99;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            background-color: #ffffff;
            opacity: 0.4;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 40);
            filter: alpha(opacity = 40);
        }
        #permissions-grid-wrapper.permissions-grid-loading #permissions-grid-loadmask {
            display: block;
        }
        #permissions-grid-status {
            display: none;
            position: absolute;
            width: 100%;
            text-align: center;
            z-index: 999999;
            top: 100px;
        }
        #permissions-grid-wrapper.permissions-grid-loading #permissions-grid-status {
            display: block;
        }
        #permissions-grid-status .status {
            margin: 0 auto;
            background-color: white;
            display: inline-block;
            padding: 15px;
            font-size: 10px;
            -moz-border-radius: 12px;
            -webkit-border-radius: 12px;
            border-radius: 12px;
            -moz-box-shadow: 0px 0px 8px #000000;
            -webkit-box-shadow: 0px 0px 8px #000000;
            box-shadow: 0px 0px 8px #000000;
        }
        #permissions-grid-status * {
            vertical-align: middle;
        }
        #permissions-grid-status img {
            margin-right: 5px;
        }

        /* Notifications */
        #notifications {
            position: fixed;
            top: auto;
            bottom: 10px;
        }

        /* Dialogs */
        .ui-dialog {
            -moz-box-shadow: 0px 0px 20px #000000;
            -webkit-box-shadow: 0px 0px 20px #000000;
            box-shadow: 0px 0px 20px #000000;
        }
        .ui-dialog-titlebar {
            display: none;
        }
        .ui-widget-overlay {
            background: #000000;
        }
        .dialog-instructions {
            font-size: 10px;
            color: #808080;
        }

        /* Button Sets */
        #TopTabs-ButtonSets .section {
            margin: 10px 0;
        }
        #TopTabs-ButtonSets .section-header {
            font-weight: bold;
            border-bottom: 2px solid silver;
        }
        .layout-availablebuttons {
            overflow: hidden;
            padding: 3px;
            -moz-box-shadow: inset 0px 0px 4px #000000;
            -webkit-box-shadow: inset 0px 0px 4px #000000;
            box-shadow: inset 0px 0px 4px #000000;
        }
        .layout-availablebuttons.hovering {
            -moz-box-shadow: inset 0px 0px 6px #000000;
            -webkit-box-shadow: inset 0px 0px 6px #000000;
            box-shadow: inset 0px 0px 6px #000000;
        }
        .buttonset-section-columns {
            overflow: hidden;
        }
        .buttoncolumn {
            float: left;
            width: 116px;
        }
        .buttoncolumn .actionbutton {
            width: 100px;
            height: 10px;
            line-height: 10px;
            font-size: 8px;
            font-weight: bold;
            overflow: hidden;
            padding: 3px 5px;
            margin: 5px 3px;
            cursor: move;

            -moz-box-shadow: 0px 0px 1px #000000;
            -webkit-box-shadow: 0px 0px 1px #000000;
            box-shadow: 0px 0px 1px #000000;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FCFCFC', endColorstr = '#FAFAFA');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FCFCFC', endColorstr = '#FAFAFA')";
            background-image: -moz-linear-gradient(top, #FCFCFC, #FAFAFA);
            background-image: -ms-linear-gradient(top, #FCFCFC, #FAFAFA);
            background-image: -o-linear-gradient(top, #FCFCFC, #FAFAFA);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#FCFCFC), to(#FAFAFA));
            background-image: -webkit-linear-gradient(top, #FCFCFC, #FAFAFA);
            background-image: linear-gradient(top, #FCFCFC, #FAFAFA);
            -moz-background-clip: padding;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
        }
        .buttonset-section {
            position: relative;
        }
        .buttonset-section-header {
            border-bottom: 2px solid #C0C0C0;
            font-weight: bold;
            font-size: 10px;
        }
        .buttonset-section-header .buttonset-section-name {
            min-height: 10px;
        }
        .buttonset-section-columns .buttoncolumn .actionbutton {
            margin: 2px 3px;
        }
        .layout-wrapper {
            border: 2px solid #000;
            width: 370px;
            min-height: 50px;
        }
        .layout-wrapper > .layout {
            padding: 3px 8px;
        }
        .layout-wrapper > .layout .actionbutton[data-type="Blank"] {
            height: 10px;
            line-height: 10px;
            font-weight: normal;
            font-style: italic;
            color: #C0C0C0;
            text-align: center;
            -moz-box-shadow: none;
            -webkit-box-shadow: none;
            box-shadow: none;
            background: none;
        }
        .section-dropzone {
            width: 100%;
            height: 2px;
        }
        .button-dropzone {
            width: 100%;
            height: 2px;
        }
        .button-dropzone-handle {
            width: 1px;
            height: 1px;
            margin: 0 auto;
        }
        .section-dropzone.hovering, .button-dropzone.hovering {
            background: green;
        }
        .layout-massaction .buttonset-section-header {
            padding: 2px 7px;
            background: #E6E6E6;
            border: none;
            text-align: left;
        }
        .layout-massaction .button-dropzone-handle {
            width: 100%;
        }
        .layout-massaction .buttonset-button {
            position: relative;
            padding: 6px 10px 6px 15px;
            color: #555;
            font-family: "Helvetica Neue", Helvetica, arial, sans-serif;
            font-size: 10px;
            font-weight: normal;
            cursor: move;
        }
        .layout-massaction .buttonset-button .arrow-right {
            position: absolute;
            top: 8px;
            border-left-width: 4px;
            border-top-width: 4px;
            border-bottom-width: 4px;
        }
        .layout-massaction .buttonset-button .actionbutton {
            margin-left: 10px;
        }
        .layout-massaction .buttonset-button .actionbutton[data-type="Blank"] {
            font-style: italic;
            color: #C0C0C0;
        }
        .layout-massaction .buttonset-button .actionbutton[data-type="Blank"] ~ .arrow-right {
            display: none;
        }

        /* Custom Actions */
        #TopTabs-CustomActions .section {
            margin: 10px 0;
        }
        #TopTabs-CustomActions .section-header {
            font-weight: bold;
            border-bottom: 2px solid silver;
        }

        /* Map Lock */
        .dragzoomproxy
        {
            position: absolute;
            z-index: 1003;

            background-color: #666666;
            border: 3px solid #000000;
            opacity: 0.44;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 44);
            filter: alpha(opacity = 44);
        }

        /* Temporary fix for header links divider */
        span.divider {
            float: none;
            display: inline;
            background: none;
            margin: 0;
        }
        .layout-wrapper.canDrop {
            background: #EAF2F5;
        }
    </style>

    <apex:outputPanel layout="none" rendered="{! $User.UIThemeDisplayed == 'Theme4d' }">
        <script type='text/javascript'>
            $.ajaxSetup({
                dataFilter: function (rawData,type)
                {
                    try
                    {
                        //console.log('rawdata:', rawData);
                        //console.log(type);

                        if (rawData != undefined  && rawData != '')
                        {
                            if (type === 'JSON' || type == 'JSONP' || type=='json' || type =='jsonp')
                            {
                                //console.log('rawdata 2:', rawData.replace(/<script.*?>.*?<\/script>/igm, ''));
                                return rawData.replace(/<script.*?>.*?<\/script>/igm, '');
                            }
                        }
                    }
                    catch (ex)
                    {

                    }
                }
            });

            jQuery.ajaxSetup({
                dataFilter: function (rawData,type)
                {
                    try
                    {
                        //console.log('rawdata:', rawData);
                        //console.log(type);

                        if (rawData != undefined  && rawData != '')
                        {
                            if (type === 'JSON' || type == 'JSONP' || type=='json' || type =='jsonp')
                            {
                                //console.log('rawdata 2:', rawData.replace(/<script.*?>.*?<\/script>/igm, ''));
                                return rawData.replace(/<script.*?>.*?<\/script>/igm, '');
                            }
                        }
                    }
                    catch (ex)
                    {

                    }
                }
            });

        </script>
    </apex:outputPanel>

    <!-- JS -->
    <script type="text/javascript" src="{!URLFOR($Resource.MapAnything, 'toastr/toastr.min.js')}"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MapAnything, 'toastr/toastr.min.css')}"></link>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'JSHelperFunctions.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'JSActionFramework.js')}"></script>
    <!--<script type='text/javascript' src="{!$Resource.JSActionFramework_Edit}"></script>-->
    <script>
        var pageSize = 30;
        var leafletMap;
        $(function() {

            toastr.options = {
                "positionClass": "toast-bottom-right",
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "3000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut",
                "iconClasses" : {
                    "success" : "toast-success",
                    "error"   : "toast-error",
                    "warning" : "toast-warning",
                    "info"    : "toast-info"
                }
            };

            //init edition-specific features
            if ('{!roleSupport}' == 'true') {
                $('.feature-routingrolesecurity').attr('checked', true).closest('tr').show();
            }

            //init tabs
            $( "#adminsettings .TopTabs" ).tabs();

            //init notifications
            $("#notifications").notify({ speed: 200, expires: false });

            //init dialogs
            $('.dialogs > div').dialog({ autoOpen: false, modal:true, resizable: false, width: 'auto', height: 'auto' });

            //handle add records checkbox
            $('#TopTabs-CustomActions').on('change','.includeRecords',function() {
                var $checkbox = $(this);
                if($checkbox.is(':checked')) {
                    $('#TopTabs-CustomActions .param-info').show();
                }
                else {
                    $('#TopTabs-CustomActions .param-info').hide();
                }

            });

            //create a search for settings group
            $(document).on('keyup', '#newPermissionsFilter-settings-group', function(e){
                var $input = $(this);
                var searchTerm = $input.val();

                //do we have enough characters?
                var loadingRow = '<tr class="slds-hint-parent js-settingRow"><td role="gridcell">'+MASystem.Labels.MA_Loading+'...</td><td role="gridcell"></td><td role="gridcell"></td></tr>';
                $('#permissionSetTable tbody').html(loadingRow);
                if (searchTimeout !== null) {
                    clearTimeout(searchTimeout);
                }

                searchTimeout = setTimeout(function() {
                    if(searchTerm.length > 1) {

                        retrieveSettings(searchTerm).then(function(res) {
                            if(res.success) {

                                var data = res.data || [];
                                var htmlTable = '';
                                $.each(data,function(i,row) {
                                    htmlTable += '<tr class="slds-hint-parent js-settingRow"><td role="gridcell"><a><span data-edit-settingsId="'+htmlEncode(row.Id)+'" class="editSettingsGroup">'+htmlEncode(row.Name)+'</span></a></td><td role="gridcell">'+htmlEncode(row.sma__Description__c || '')+'</td><td role="gridcell"><button data-recid="' + row.Id + '" class="slds-button slds-button_icon slds-button_icon-x-small delete-permission-set" style="float:right;"><span class="slds-button__icon slds-button__icon_hint slds-button__icon_small ma-icon ma-icon-close"></span></button></td></tr>';

                                });
                                $('#permissionSetTable tbody').html(htmlTable);
                            }else{

                            }
                        });
                    }
                    else if (searchTerm.length == 0) {
                        searchTimeout = null;
                        populateRecentSettingsGroups();
                    }
                    else {
                        //must have 2 characters
                        $('#permissionSetTable tbody').html('');
                        clearTimeout(searchTimeout);
                    }
                },500);

            });

            //Open up updatePermissionSetModal for user to edit MASettingsGroup record
            $(document).on('click', '.editSettingsGroup', function(){
                $('#updatePermissionSetModal').addClass("slds-fade-in-open");
                $('#settingsPageModalBackdrop').addClass("slds-modal-backdrop--open");
                $('#updatePermissionSetModal').removeData();
                var $setting = $(this);
                var settingId = $setting.attr('data-edit-settingsId');
                $('#updatePermissionSetModal').data('settingsId',settingId);
                //Pass in the setting ID of the record user clicked on
                var processData =
                {
                    ajaxResource : 'MAAdminAJAXResources',
                    action : 'getEditSettingsRecord',
                    settingsId : settingId
                }

                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        if(event.status) {
                            if(response.success) {
                                updatePopulateButtonSet(response);
                                $('#updatePermissionSetModal').find('#updatePermissionSetName').val(htmlDecode(response.data.Name));
                                $('#updatePermissionSetModal').find('#updatePermissionSetDescription').val(response.data.sma__Description__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-max-query').val(response.data.sma__MaxQuerySize__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-max-export').val(response.data.sma__MaxExportSize__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-button-set').val(response.data.sma__ButtonSet__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-folder-admin').prop("checked" , response.data.sma__FolderAdmin__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-user-folders').prop("checked" , response.data.sma__ShowUserFolders__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-allow-exports').prop("checked" , response.data.sma__AllowExports__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-editable-tooltips').prop("checked" , response.data.sma__EditableTooltips__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-show-weather').prop("checked" , response.data.sma__ShowWeather__c);
                                $('#updatePermissionSetModal').find('#updatePermissionSet-hide-personal-folder').prop("checked" , response.data.sma__HidePersonalFolder__c);
                            }
                            else {
                                var errMsg = response.message || 'Unknown Error';
                                MAToastMessages.showError({message: 'Unable to load settings record',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                            }
                        }
                        else
                        {
                            var errMsg = event.message || 'Unknown Error';
                            MAToastMessages.showError({message: 'Unable to load settings record',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                        }
                    }
                );

            });

            //event listener to wait for user to click on 'update'
            $('#updatePermissionSetModal').on('click', '.js-update-settings-group', function(){
                editingSettingsGroup();
            });

            //Dynamically render assignment table based on profile or user checkbox
            $(document).on('click', '#assigmentTableProfilesCheckbox, #assigmentTableUsersCheckbox', function(){
                $('.js-settingRow').remove();
                var searchTerm = $('#newPermissionsFilter-assign-settings').val();
                //do we have enough characters?
                if(searchTimeout !== null){
                    clearTimeout(searchTimeout);
                }

                searchTimeout = setTimeout(function() {
                    if(searchTerm.length > 1) {
                        retrieveUsersProfiles(searchTerm).then(function(res) {
                                if(res.success) {
                                    createAssignmentTable(res);
                                }
                                else{
                                    //Unable to search for user or profile
                                }
                            });
                    }else if(searchTerm.length == 0){
                        searchTimeout = null;
                        $('.js-settingRow').remove();
                    }else if(searchTerm.length == 1){
                        searchTimeout = null;
                        $('.js-settingRow').remove();
                    }else {
                        //must have two characters
                        $('#assignmentPermissionTable tbody').append('');
                        clearTimeout(searchTimeout);
                    }
                },500);
            });

            //create a search for settings group assignment
            //create a search
            $(document).on('keyup', '#newPermissionsFilter-assign-settings', function(e){
                $('#assignmentPermissionTable .js-settingRow').remove();
                var $input = $(this);
                var searchTerm = $input.val();

                //do we have enough characters?
                if(searchTimeout !== null){
                    clearTimeout(searchTimeout);
                }

                searchTimeout = setTimeout(function() {
                    if(searchTerm.length > 1) {
                        retrieveUsersProfiles(searchTerm).then(function(res) {
                                if(res.success) {
                                    $('#assignmentPermissionTable .slds-modal__footer .slds-button')
                                    $('#assignmentPermissionTable').removeClass('slds-fade-in-open');
                                    $('#settingsPageModalBackdrop').removeClass('slds-modal-backdrop--open');
                                    createAssignmentTable(res);
                                    // MAToastMessages.showSuccess({message:'Successfully Assigned'});
                                }
                                else{
                                    MAToastMessages.showError({message:'ERROR: Unable to search for settings',subMessage:errMsg,timeOut:0, closeButton:true});
                                }

                            });
                    }else if(searchTerm.length == 0){
                        searchTimeout = null;
                        $('#assignmentPermissionTable .js-settingRow').remove();
                    }else if(searchTerm.length == 1){
                        searchTimeout = null;
                        $('#assignmentPermissionTable .js-settingRow').remove();
                    }else {
                        //must have two characters
                        $('#assignmentPermissionTable tbody').append('');
                        clearTimeout(searchTimeout);
                    }
                },500);
            });

            $('#tab-assignment').on('click','.slds-dropdown-trigger_click',function() {
                var $column = $(this);
                var $row = $column.closest('tr');

                var processData = {
                    ajaxResource : 'MAAdminAJAXResources',
                    action : 'get_settings_list'
                };

                //populate list of settings group name in a list of options
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        if(event.status) {
                            if(response.success) {
                                var settingListDropdown = '<div class="slds-dropdown slds-dropdown_left slds-dropdown_small settings-group-ul"><ul class="slds-dropdown__list slds-dropdown_length-5" role="menu">';

                                var data = response.data || [];
                                $.each(data ,function(i,row) {
                                    settingListDropdown += '<li class="slds-dropdown__item settingsGroupItem-select" data-perm-id="'+htmlEncode(row.Id)+'" role="presentation"><a role="menuitem" tabindex="-1"><span class="slds-truncate"><span class="slds-icon slds-icon_selected slds-icon_x-small slds-icon-text-default slds-m-right_x-small ma-icon ma-icon-check"></span><span data-permission-id="'+htmlEncode(row.Id)+'" class="settings-group-select">';
                                    settingListDropdown += htmlEncode(row.Name);
                                    settingListDropdown += '</span></span></a></li>';
                                });

                                settingListDropdown += '</ul></div>';

                                $('.settings-group-ul').remove();
                                $column.append(settingListDropdown);

                                $column.toggleClass('slds-is-open');
                            }
                            else {
                                var errMsg = res.message || 'Unknown Error';
                                MAToastMessages.showError({message: 'Unable to load settings list',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                            }
                        }
                        else
                        {
                            var errMsg = event.message || 'Unknown Error';
                            MAToastMessages.showError({message: 'Unable to load settings list',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                        }
                    },{buffer:false,escape:false, timeout: 120000 }
                );



            });

            $('#assignmentPermissionTable').on('click', '.settingsGroupItem-select', function(){
                var $select = $(this);
                var $row =  $select.closest('tr');
                var settingsName = $select.find('.settings-group-select').text();
                var settingsNameId = $select.attr('data-perm-id');

                var assignmentName = $row.find('.assignment-permission-name').attr('data-row-assignment');
                var assignmentType = $row.find('.assignment-permission-type').attr('data-row-type');
                var assignmentId = $row.find('.assignment-permission-name').attr('data-row-assignment-id');

               //remove any still open classes
               $('.slds-dropdown-trigger_click').removeClass('slds-is-open');

                var processInfo =
                {
                    ajaxResource : 'MAAdminAJAXResources',
                    action : 'assign_settings_group',
                    permissionName : settingsName,
                    permissionId : settingsNameId,
                    assignmentName : assignmentName,
                    assignmentType : assignmentType,
                    assignmentId : assignmentId
                }

                //update the settings group record to the user or profile id of assignment
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processInfo,
                function(res, e){
                    if(e.status){
                        if(res.success){
                            $row.find('.assignment-settings-group').remove();
                            $row.find('.slds-dropdown-trigger_click').append('<span class="slds-grid slds-grid_align-spread assignment-settings-group"><span class="assignment-settings-name">'+ htmlEncode(res.data.Name)+'</span><button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" tabindex="-1"><span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-edit"></span></button></span>');
                            MAToastMessages.showSuccess({message:'Successfully Assigned'});
                        }else{
                            MAToastMessages.showError({message:'Settings Group Assignment Error',subMessage:errMsg,timeOut:0, closeButton:true});
                        }
                    }else{
                        MAToastMessages.showError({message:'Settings Group Assignment Error',subMessage:errMsg,timeOut:0, closeButton:true});
                    }
                });
                $('.settings-group-ul').remove();
            });

            //combobox settings
            $('#adminsettings').on('focus', '.ui-autocomplete-input', function () { var $me = $(this); setTimeout(function () {$me.select();}, 100); });

            //get settings
            showTabLoading($('#TopTabs-General'), 'Loading...');
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_settings'
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(json, event){
                    if(event.status) {
                        //remove namespace
                        removeNamespace('{!namespace}', (json.data || {}));

                        //try to populate settings.  if we can't, we're just assuming that means the setting does not yet exist
                        try { $('#adminsettings input.apikey').val(json.data.APIKey.Value__c); } catch (err) { }
                        try { $('#adminsettings input.liveapikey').val(json.data.LiveAPIKey.Value__c); } catch (err) { }
                        try { $('#adminsettings input.feature-folderpermissions').attr('checked', json.data.FolderPermissionsEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-showprofilewithuser').attr('checked', json.data.ShowProfileWithUserEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-visibleareamobile').attr('checked', json.data.VisibleAreaMobileEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-territorymanagement').attr('checked', json.data.TerritoryManagementEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-socialintegration').attr('checked', json.data.SocialIntegrationEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-routingrolesecurity').attr('checked', json.data.RoutingRoleSecurity.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-routeplanner').attr('checked', json.data.RoutePlannerEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-autocheckout').attr('checked', json.data.AutoCheckOutEnabled.Value__c == 'true' ? 'checked' : false) } catch (err) { }
                        try { $('#adminsettings input.feature-debuglogs').attr('checked', json.data.DebugLogsEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                        try { $('#adminsettings input.feature-checkInDesktop').attr('checked', json.data.CheckInAllDevicesEnabled.Value__c == 'true' ? 'checked' : false) } catch (err) { }

                        showTabSuccess($('#TopTabs-General'), 'Settings Loaded', 1);
                    }
                    else
                    {
                        showTabError($('#TopTabs-General'), 'Unknown Error: Unable to load settings', false);
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );

            $('#TopTabs-CustomActions').on('click','.help-btn',function() {
                $button = $(this);
                $button.hide();
                $button.closest('td').find('.help-text').show();
            });

            //handle saving settings
            $('#adminsettings .buttons .savebtn').click(function ()
            {
                var $tab = showTabLoading($(this).closest('.ui-tabs-panel'), 'Saving...');

                //put all settings in a request obj
                var requestData = {
                    settings: JSON.stringify({
                        APIKey                      : $('#adminsettings input.apikey').val(),
                        LiveAPIKey                  : $('#adminsettings input.liveapikey').val(),
                        FolderPermissionsEnabled    : $('#adminsettings input.feature-folderpermissions').is(':checked') ? 'true' : 'false',
                        ShowProfileWithUserEnabled  : $('#adminsettings input.feature-showprofilewithuser').is(':checked') ? 'true' : 'false',
                        VisibleAreaMobileEnabled    : $('#adminsettings input.feature-visibleareamobile').is(':checked') ? 'true' : 'false',
                        TerritoryManagementEnabled  : $('#adminsettings input.feature-territorymanagement').is(':checked') ? 'true' : 'false',
                        SocialIntegrationEnabled    : $('#adminsettings input.feature-socialintegration').is(':checked') ? 'true' : 'false',
                        RoutingRoleSecurity         : $('#adminsettings input.feature-routingrolesecurity').is(':checked') ? 'true' : 'false',
                        RoutePlannerEnabled         : $('#adminsettings input.feature-routeplanner').is(':checked') ? 'true' : 'false',
                        AutoCheckOutEnabled         : $('#adminsettings input.feature-autocheckout').is(':checked') ? 'true' : 'false',
                        DebugLogsEnabled            : $('#adminsettings input.feature-debuglogs').is(':checked') ? 'true' : 'false',
                        CheckInAllDevicesEnabled    : $('#adminsettings input.feature-checkInDesktop').prop('checked') ? 'true' : 'false'
                    })
                };

                //send request to save settings
                requestData.ajaxResource = 'MAAdminAJAXResources';
                requestData.action='save_settings';
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    requestData,
                    function(json, event){
                        if(event.status) {
                             showTabSuccess($tab, 'Settings Saved');
                        }
                        else
                        {
                            showTabError($tab, 'Save Error: Please try again');
                        }
                    },{buffer:false,escape:false, timeout: 120000 }
                );
            });

            //handle saving checkbox permissions
            $('#permissions-grid').on('change', '.autosave[type=checkbox]', function () {
                var $checkbox = $(this);
                var isChecked = $checkbox.prop('checked');
                //build request data to update the permission
                var requestData = {
                    userId      : $checkbox.closest('.permissions-row').data('record').Id,
                    field       : addNamespace('{!namespace}', $checkbox.attr('data-field')),
                    type        : 'boolean',
                    value       : $checkbox.is(':checked')
                };

                //update the type if this is a setting
                if ($checkbox.is('.setting')) {
                    requestData.setting = requestData.field;
                    requestData.field = addNamespace('{!namespace}', 'MapAnythingSettings__c');
                    requestData.type = 'setting';
                }

                //replace the checkbox with a loader and send the request to update the permission
                var $loader = $('.templates .loader').clone();
                $checkbox.replaceWith($loader);
                requestData.ajaxResource = 'MAAdminAJAXResources';
                requestData.action='save_permission';
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    requestData,
                    function(json, event){
                        if(event.status) {
                            if(json.success) {
                                //update this data in our raw data (this is needed to prevent data loss during searching)
                                if (requestData.type == 'setting') {
                                    switch (requestData.setting)
                                    {
                                        case 'ShowPersonalFolders':
                                            $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.ShowPersonalFolders = requestData.value;
                                        break;
                                        case 'EditableTooltips':
                                            $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.EditableTooltips = requestData.value;
                                        break;
                                        case 'ShowWeather':
                                            $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.ShowWeather = requestData.value;
                                        break;
                                        case 'OldFolders':
                                            $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.OldFolders = requestData.value;
                                        break;
                                        case 'HidePersonalFolder':
                                            $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.HidePersonalFolder = requestData.value;
                                        break;
                                        case 'ButtonSetId':
                                            $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.ButtonSetSettings = { Id: requestData.value };
                                        break;
                                        case 'DefaultCountry':
                                            $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.DefaultCountry = requestData.value;
                                        break;
                                    }
                                }
                                else {
                                    $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][requestData.field] = requestData.value;
                                }

                                //replace the loader with the original checkbox
                                $loader.replaceWith($checkbox);
                            }
                            else {
                                var errMsg = json.error || 'Unknown Error';
                                MAToastMessages.showError({message:'Save Error',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                                $checkbox.prop('checked',!isChecked);
                                $loader.replaceWith($checkbox);

                            }
                        }
                        else
                        {
                            //replace the loader with the original checkbox
                            $checkbox.prop('checked',!isChecked);
                            $loader.replaceWith($checkbox);
                            var errMsg = json.error || 'Unknown Error';
                            MAToastMessages.showError({message:'Save Error',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                        }
                    },{buffer:false,escape:false, timeout: 120000 }
                );
            });

            //handle saving picklist permissions
            $('#permissions-grid').on('change', 'select.autosave', function () {
                var $picklist = $(this);

                //build request data to update the permission
                var requestData = {
                    userId      : $picklist.closest('.permissions-row').data('record').Id,
                    field       : addNamespace('{!namespace}', $picklist.attr('data-field')),
                    type        : 'picklist',
                    value       : $picklist.val().indexOf('-') == 0 ? '' : $picklist.val()
                };


                //modify request data if this is a picklist that should modify a setting instead of a field
                if ($picklist.is('.setting')) {
                    requestData.field = addNamespace('{!namespace}', 'MapAnythingSettings__c');
                    requestData.type = 'setting';
                    requestData.setting = $picklist.attr('data-field');
                }

                //replace the checkbox with a loader and send the request to update the permission
                var $loader = $('.templates .loader').clone();
                $picklist.replaceWith($loader);

                requestData.ajaxResource = 'MAAdminAJAXResources';
                requestData.action='save_permission';
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    requestData,
                    function(json, event){
                        if(event.status) {
                            if(json.success) {
                                //update this data in our raw data (this is needed to prevent data loss during searching)
                                $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][requestData.field] = requestData.value;
                            }
                            else {
                                var errMsg = json.error || 'Unknown Error';
                                MAToastMessages.showError({message:'Save Error',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                            }
                            //replace the loader with the original checkbox
                            $loader.replaceWith($picklist);
                        }
                        else
                        {
                            var errMsg = json.error || 'Unknown Error';
                            MAToastMessages.showError({message:'Save Error',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                            //replace the loader with the original checkbox
                            $loader.replaceWith($picklist);
                        }
                    },{buffer:false,escape:false, timeout: 120000 }
                );
            });

            //handle saving text/number permissions
            $('#permissions-grid').on('keyup', 'td .autosave[type=text]', function () {
                var $textbox = $(this);

                //cancel any existing timeout
                try { clearTimeout($textbox.data('saveTimeout')); } catch (err) { }

                //set a timeout so we can save this value when the user stops typing
                $(this).data(
                    'saveTimeout',
                    setTimeout(function () {

                        //build request data to update the permission
                        var requestData = {
                            userId      : $textbox.closest('.permissions-row').data('record').Id,
                            field       : addNamespace('{!namespace}', $textbox.attr('data-field')),
                            type        : 'number',
                            value       : parseFloat($textbox.val())
                        };

                        //replace the textbox with a loader and send the request to update the permission
                        var $loader = $('.templates .loader').clone();
                        $textbox.replaceWith($loader);

                        requestData.ajaxResource = 'MAAdminAJAXResources';
                        requestData.action='save_permission';
                        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                            requestData,
                            function(json, event){
                                if(event.status) {
                                    if(json.success) {
                                        //update this data in our raw data (this is needed to prevent data loss during searching)
                                        $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][requestData.field] = requestData.value;
                                    }
                                    else {
                                        var errMsg = json.error || 'Unknown Error';
                                        MAToastMessages.showError({message:'Save Error',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                                    }

                                    //replace the loader with the original textbox
                                    $loader.replaceWith($textbox);
                                }
                                else
                                {
                                    //replace the loader with the original textbox
                                    var errMsg = json.error || 'Unknown Error';
                                    MAToastMessages.showError({message:'Save Error',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                                    $loader.replaceWith($textbox);
                                }
                            },{buffer:false,escape:false, timeout: 120000 }
                        );

                    }, 800)
                );
            });

            //handle mass saving checkbox permissions
            $('#permissions-grid').on('click', 'th span.massaction', updatePermissionsMass);

            //handle mass saving select list permissions
            $('#permissions-grid').on('change', 'th select.massaction', updatePermissionsMass);

            //handle mass saving text/number permissions
            $('#permissions-grid').on('keyup', 'th input', function () {

                var $textbox = $(this);

                //clear any existing timeouts
                try { clearTimeout($textbox.data('saveTimeout')); } catch (err) { }

                //set a timeout to save this data when the user stops typing
                $textbox.data(
                    'saveTimeout',
                    setTimeout(function () {

                        //set a loadmask over the permissions grid
                        $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
                        $('#permissions-grid-status .status span').text('Preparing...');

                        //start preparing data for this request
                        var requestData = {
                            field       : addNamespace('sma', $textbox.closest('th').attr('data-field')),
                            type        : $textbox.closest('th').attr('data-type')
                        };

                        //get the new value based on the type and what was clicked
                        switch (requestData.type)
                        {
                            case 'number':
                                requestData.value = parseFloat($textbox.val());
                                break;
                        }

                        var q = async.queue(function (options, callback) {
                            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                options,
                                function(json, event){
                                    if(event.status) {
                                        //update this data in our raw data (this is needed to prevent data loss during searching)
                                        $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
                                            record[requestData.field] = requestData.value;
                                        });
                                    }
                                    else { }

                                    //decrement the batches we have out
                                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
                                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
                                    callback();
                                },{buffer:false,escape:false, timeout: 120000 }
                            );
            			});

            			q.concurrency = 5;

            			//loop over the visibleOnly queries and add to que
            			var userIds = [];
                        $('#permissions-grid').data('batchCount', 0);
                        $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
                            userIds.push(userId);
                        });

                        var batchableArray = MA.Util.createBatchable(userIds,100);

                        //send out this batch if it's ready
                        for(var i = 0; i < batchableArray.length; i++) {
                            var userArray = batchableArray[i];
                            var optionsOut = {
                                userIds : JSON.stringify(userArray),
                                ajaxResource : 'MAAdminAJAXResources',
                                action : 'save_permissions_mass'
                            };

                            optionsOut = $.extend(optionsOut,requestData);

                            q.push(optionsOut,function(res){});

                            //increment the batches that we have out and restart the id list
                            $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
                        }

                        $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');

            			q.drain = function(){
                            //update this data in our raw data (this is needed to prevent data loss during searching)
                            $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
                                record[requestData.field] = requestData.value;
                            });

                            //update the current page of data and remove the loadmask
                            $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
                            $('#permissions-page').change();
            			}

                    }, 800)
                );
            });

            //handle searching for users (profile searching is handled in the autocomplete settings)
            $('#permissionsfilter-name').keyup(search);
            $('#permissionsfilter-profile').change(search);
            $('#permissionsfilter-includeinactive').change(load);
            $('#permissionsfilter-includeportal').change(load);
            $('#permissionsfilter-includechatter').change(load);
            $('#permissionsfilter-onlyMAUsers').change(load);

            //handle changing page number
            $('#permissions-page').change(function () {

                //set a loadmask over the permissions grid
                $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
                $('#permissions-grid-status .status span').text('Loading...');

                //remove existing rows
                $permissionsGrid = $('#permissions-grid');
                $permissionsGrid.find('.permissions-row').remove();

                //calculate start and end points for this page
                var recordStart = ($(this).val() - 1) * pageSize + 1;
                var recordEnd = recordStart + pageSize - 1;

                //loop over our matching records and add those that belong on this page
                var index = 1;
                $.each($permissionsGrid.data('matchingRecords'), function (userId, record) {

                    //add a row for this record if we're past the starting point for this page
                    if (recordStart <= index)
                    {
                        //add row
                        var $row = populatePermissionsRow($('.templates .permissions-row').clone().data('record', record));
                        $permissionsGrid.append($row);
                    }

                    //increment our index and stop looping if we're past the endpoint for this page
                    index++;
                    if (recordEnd < index) { return false; }
                });

                //update page info
                $('#permissions-pageinfo').text('Displaying users ' + Math.max(recordStart, 0) + ' - ' + Math.min(recordEnd, $permissionsGrid.data('matchingRecordsCount')) + ' of ' + $permissionsGrid.data('matchingRecordsCount'));

                //remove the loadmask over the permissions grid
                $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
            });

            /*****************************
            *   Button Sets OnReady
            *****************************/

            //get existing button sets
            ButtonSet_GetExisting();

            //wait for the action framework to be ready and then init the available buttons
            MAActionFramework.on('ready', function ()
            {
                //clear existing available buttons
                $('.layout-availablebuttons').empty();

                //get available buttons and sets
                var $currentButtonColumn = $("<div class='buttoncolumn' />").appendTo($('.layout-availablebuttons'));
                $.each(MAActionFramework.standardActions, function (buttonName, button) {
                    if (!button.Modes || !button.Modes.length || button.Modes.length == 0) {
                        return;
                    }
                    else if ($currentButtonColumn.children().length >= 4) {
                        $currentButtonColumn = $("<div class='buttoncolumn' />").appendTo($('.layout-availablebuttons'));
                    }

                    var frameworkAction = MAActionFramework.getAction(button.Type, buttonName) || {};
                    var $button = $("<div class='actionbutton' />").html(frameworkAction.Label).attr({'data-type': button.Type, 'data-action': buttonName});
                    $.each((button.Layouts || []), function (index, layout) {
                        $button.addClass(layout);
                    });
                    $currentButtonColumn.append($button);
                });
                $.each(MAActionFramework.customActions, function (buttonName, button) {
                    if (!button.Modes || !button.Modes.length || button.Modes.length == 0) {
                        return;
                    }
                    else if ($currentButtonColumn.children().length >= 4) {
                        $currentButtonColumn = $("<div class='buttoncolumn' />").appendTo($('.layout-availablebuttons'));
                    }

                    var frameworkAction = MAActionFramework.getAction(button.Type, buttonName) || {};
                    var $button = $("<div class='actionbutton' />").html(frameworkAction.Label).attr({'data-type': button.Type, 'data-action': buttonName});
                    $.each((button.Layouts || []), function (index, layout) {
                        $button.addClass(layout);
                    });
                    $currentButtonColumn.append($button);
                });

                //handle dragging action buttons
                $('.layout-availablebuttons .actionbutton').draggable({
                    opacity: 0.7,
                    helper: 'clone',
                    start: function (event, ui) {
                        var $button = $(this);
                        var isIframe = false;

                        //check if this is an Iframe button, currently not supported on mass action
                        try {
                            if($button.attr('data-type') == 'Custom Action') {
                                //check if iframe
                                if(MAActionFramework.customActions[$button.attr('data-action')].Action == 'Iframe') {
                                    isIframe = true;
                                }
                            }
                        }
                        catch (e) {
                            //should never get here, just a precaution
                        }
                        //highlight where button can be dropped
                        if($button.hasClass('Tooltip')) {
                            $('.layout-tooltip-wrapper').addClass('canDrop');
                        }
                        if($button.hasClass('Mass') && isIframe == false) {
                            $('.layout-massaction-wrapper').addClass('canDrop');
                        }
                        if($button.hasClass('POI')) {
                            $('.layout-poi-wrapper').addClass('canDrop');
                        }
                        if($button.hasClass('MyPosition')) {
                            $('.layout-myposition-wrapper').addClass('canDrop');
                        }

                        //show if already in tab
                        //loop over buttons and highlight
                        $('.actionbutton').each(function(){
                            if($(this).attr('data-action') == $button.attr('data-action')) {
                                $(this).css('background', '#D3A7A7');
                            }
                        });
                    },
                    stop: function (event,ui) {
                        //remove canDrop class
                        $('.layout-wrapper').removeClass('canDrop');

                        $('.actionbutton').each(function(){
                            $(this).css('background', '#FAFAFA');
                        });
                    }
                });

                //handle dropping buttons back in the available buttons section
                $('.layout-availablebuttons').droppable({
                    accept: '.buttonset-button, .buttonset-section-header',
                    tolerance: 'fit',
                    hoverClass: 'hovering',
                    drop: function (event, ui) {
                        /*
                        var buttonDataType = ui.draggable.find('.actionbutton').attr('data-type');
                        var buttonText = ui.draggable.find('.actionbutton').text();
                        $('.layout-availablebuttons .actionbutton').each(function () {
                            if ($(this).attr('data-type') == buttonDataType && $(this).text() == buttonText) {
                                $(this).draggable('enable');
                            }
                        });
                        */

                        if (ui.draggable.is('.buttonset-button')) {
                            ui.draggable.remove();
                        }
                        else if (ui.draggable.is('.buttonset-section-header')) {
                            ui.draggable.closest('.buttonset-section').remove();
                        }
                    }
                });

                //add handlers to the tooltip layout
                ButtonSet_AddHandlers();
            });

            //show get/post options
            $('#TopTabs-CustomActions').on('change','.routine-action',function () {
                var value = $(this).val();
                if(value == 'NewWindow') {
                    $('#TopTabs-CustomActions .post-info').show();
                    if($('#TopTabs-CustomActions .includeRecords').is(':checked')) {
                        $('#TopTabs-CustomActions .param-info').show();
                    }
                }
                else {
                    $('#TopTabs-CustomActions .post-info').hide();
                    $('#TopTabs-CustomActions .param-info').hide();
                }
            });

            //handle selecting a button set
            $('.buttonsets-selectedbuttonset').change(function () {

                //show loading
                showLoading($('#TopTabs-ButtonSets'), 'Loading...');

                //clear previous layouts
                //$('.layout-availablebuttons .actionbutton').draggable('enable');
                $('.layout .buttonset-section').remove();

                if ($(this).val() == 'New')
                {
                    //creating a new button set.  set defaults
                    $('#TopTabs-ButtonSets .basicinfo-name').val('New Button Set');
                    $('.buttonset-saveasbtn, .buttonset-deletebtn').hide();
                    $('.layout-tooltip').html(MAActionFramework.markerLayouts.tooltip.defaultHTML);
                    $('.layout-myposition').html(MAActionFramework.markerLayouts.myPosition.defaultHTML);
                    $('.layout-poi').html(MAActionFramework.markerLayouts.poi.defaultHTML);
                    $('.layout-massaction').html('<div class="section-dropzone ui-droppable"></div><div class="buttonset-section"><div class="buttonset-section-header ui-draggable"><div class="buttonset-section-name editable">Mass Action</div></div><div class="buttonset-section-columns"><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Add to Campaign">Add to Campaign</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Change Owner">Change Owner</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Mass ui-draggable" data-type="Standard Action" data-action="Update Field">Update Field</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Clear Coordinates">Clear Coordinates</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Remove Marker">Remove Marker</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass MyPosition POI ui-draggable" data-type="Standard Action" data-action="Add to Trip">Add to Route</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div></div><div class="section-dropzone ui-droppable"></div></div><div class="buttonset-section"><div class="buttonset-section-header ui-draggable"><div class="buttonset-section-name editable">Activities</div></div><div class="buttonset-section-columns"><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Log a Call">Log a Call</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Send Email">Send Email</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="New Task">New Task</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="New Event">New Event</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div></div><div class="section-dropzone ui-droppable"></div></div><div class="buttonset-section"><div class="buttonset-section-header ui-draggable"><div class="buttonset-section-name editable">Chatter</div></div><div class="buttonset-section-columns"><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Mass ui-draggable" data-type="Standard Action" data-action="Follow">Follow</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Mass ui-draggable" data-type="Standard Action" data-action="Unfollow">Unfollow</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div></div><div class="section-dropzone ui-droppable"></div></div>');
                    ButtonSet_AddHandlers();
                    hideMessage($('#TopTabs-ButtonSets'));
                }
                else
                {
                    //load the selected button set
                    var processData = {
                        ajaxResource : 'MAAdminAJAXResources',
                        action : 'get_buttonset',
                        id: $(this).val()
                    };

                    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                        processData,
                        function(response, event){
                            if(event.status) {
                                //clean the result and populate basic settings
                                removeNamespace('{!namespace}', response.result);
                                $('#TopTabs-ButtonSets .basicinfo-name').val(response.result.Name);

                                //parse the marker layouts and populate
                                $.each(MAActionFramework.markerLayouts, function (index, layout) {

                                    //legacy support
                                    var layoutContents;
                                    try {
                                        layoutContents = JSON.parse(response.result[layout.fieldName]);
                                    }
                                    catch (err) { layoutContents = []; }

                                    //if the contents are blank then populate with the defaults and we're done
                                    if (layoutContents.length == 0) {
                                        $(layout.selector).html(layout.defaultHTML);
                                    }

                                    //loop over each section
                                    $.each(layoutContents, function (sectionIndex, section) {

                                        //add this section
                                        var $section = $('.templates .buttonset-section').clone().appendTo($(layout.selector));
                                        $section.find('.buttonset-section-name').text(section.Label);

                                        //loop over each column in this section
                                        $.each(section.Columns, function (columnIndex, column) {

                                            //loop over each button in this column
                                            var $column = $section.find('.buttoncolumn').eq(columnIndex);
                                            $.each(column, function (buttonIndex, button) {

                                                //add this button
                                                var frameworkAction = MAActionFramework.getAction(button.Type, button.Label) || {};
                                                var $button = $('.templates .buttonset-button').clone().prepend(
                                                    $('<div class="actionbutton" />').attr({'data-type': button.Type, 'data-action': button.Label}).html(frameworkAction.Label)
                                                ).appendTo($column);

                                            });

                                        });

                                    });
                                });

                                //parse the mass action layout and populate
                                try {
                                    var massActionLayout = JSON.parse(response.result.MassActionLayout__c);
                                    $.each(massActionLayout, function (sectionIndex, section) {

                                        //add this section
                                        var $section = $('.templates .buttonset-section').clone().appendTo($('.layout-massaction'));
                                        $section.find('.buttonset-section-name').text(section.Label);
                                        $section.find('.buttonset-section-columns').html('<div class="button-dropzone"><div class="button-dropzone-handle"></div></div>');

                                        //loop over each button in this section
                                        $.each(section.Buttons, function (index, button) {

                                            //add this button
                                            var frameworkAction = MAActionFramework.getAction(button.Type, button.Label) || {};
                                            var $button = $('.templates .buttonset-button').clone().prepend(
                                                $('<div class="actionbutton" />').attr({'data-type': button.Type, 'data-action': button.Label}).html(frameworkAction.Label)
                                            ).append('<div class="arrow-right"></div>').appendTo($section.find('.buttonset-section-columns'));

                                        });

                                    });
                                }
                                catch (err) { }

                                //add handlers
                                ButtonSet_AddHandlers();

                                $('.buttonset-saveasbtn, .buttonset-deletebtn').show();
                                hideMessage($('#TopTabs-ButtonSets'));
                            }
                            else {
                                showError($('#TopTabs-ButtonSets'), 'Unable to load');
                                MALog('Error loading button set: ' + response.details);
                            }
                        },{buffer:false,escape:false, timeout: 120000 }
                    );
                }
            });

            /***************************
            *   Field Sets OnReady
            **************************/
            getFieldSets().then(function(res) {
                if(res.success) {
                    //remove previous options
                    $('#checkInFieldSet.dispositionOptions > option').remove();
                    var $fieldSetOpt = $('#checkInFieldSet.dispositionOptions').html($('<option value="Select">--Please Choose--</option>'));
                    //loop over return and check for correct types for each field
                    $.each((res.data.data || []), function (index, opt) {
                        $fieldSetOpt.append($('<option />').attr('value', opt.value).text(opt.name));
                    });

                    //init comboboxes
                    $fieldSetOpt.combobox();

                    getfieldSetInfo = true;
                }
            });

            /********************************
            *   Activity Fields OnReady
            ********************************/
            getActivityFields();

            //handle creating fields
            $('.ActivityFieldButtons .createActivityFieldsBtn ').click(function ()
            {
                //var baseObject = $(this).is('.buttons-create .createfieldsbtn') ? $('#BottomTabs-1 .availableobject').val() : $('.editbaseobjectdetails.readonlybaseobject b').text();

                //show loading
                launchPopup($('#dialog-createactivityfields'), {
                    minWidth: '600px',
                    buttons: {
                        'Create': function () {

                            var fieldRequests = [];

                            //show loading
                            var $dialog = showLoading($(this).closest('.ui-dialog'), 'Creating...');

                            //create fields function
                            CreateActivityFields({
                                fieldRequests: fieldRequests,
                                complete: function (response) {
                                    if (response.success) {
                                        //reload fields and drop down boxes
                                        loadActivityFields ();
                                        getActivityFields ();

                                        //hide loading
                                        hideMessage($dialog);
                                    }
                                }
                            });
                        },
                        'Close': function () {
                            hidePopup($('#dialog-createactivityfields'));
                        }
                    }
                });

                //update fields
                loadActivityFields();
            });

            //Activity field Suggest button
            $('.ActivityFieldButtons .suggestActivityFieldBtn').click(function () {

                //Handle Boolean Fields
                $('.newActivityFielddetails[data-field="boolean"] > option').each(function() {
                    var FieldNameLowered = this.value.toLowerCase();
                    if (FieldNameLowered.indexOf('locationverified__c') !== -1 && ($('#createdLocationVerified').val() == 'Select' || $('#createdLocationVerified').val() == ''))
                    {
                        $('#createdLocationVerified').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                });

                //Hande DateTime Fields
                $('.newActivityFielddetails[data-field="dateTime"] > option').each(function() {
                    var FieldNameLowered = this.value.toLowerCase();
                    if (FieldNameLowered.indexOf('checkoutdate__c') !== -1 && ($('#checkOutDate').val() == 'Select' || $('#checkOutDate').val() == ''))
                    {
                        $('#checkOutDate').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                });

                //Handle Number Fields
                $('.newActivityFielddetails[data-field="number"] > option').each(function() {
                    var FieldNameLowered = this.value.toLowerCase();
                    if (FieldNameLowered.indexOf('checkoutaccuracy__c') !== -1 && ($('#checkOutAccuracy').val() == 'Select' || $('#checkOutAccuracy').val() == ''))
                    {
                        $('#checkOutAccuracy').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                    else if (FieldNameLowered.indexOf('checkoutdistancefromrecordmi__c') !== -1 && ($('#checkOutDistanceFromRecord').val() == 'Select' || $('#checkOutDistanceFromRecord').val() == ''))
                    {
                        $('#checkOutDistanceFromRecord').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                    else if (FieldNameLowered.indexOf('createdlocationaccuracy__c') !== -1 && ($('#createdLocationAccuracy').val() == 'Select' || $('#createdLocationAccuracy').val() == ''))
                    {
                        $('#createdLocationAccuracy').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                    else if (FieldNameLowered.indexOf('checkoutlatitude__c') !== -1 && ($('#checkOutLatitude').val() == 'Select' || $('#checkOutLatitude').val() == ''))
                    {
                        $('#checkOutLatitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                    else if (FieldNameLowered.indexOf('checkoutlongitude__c') !== -1 && ($('#checkOutLongitude').val() == 'Select' || $('#checkOutLongitude').val() == ''))
                    {
                        $('#checkOutLongitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                    else if (FieldNameLowered.indexOf('createdlatitude__c') !== -1 && ($('#createdLatitude').val() == 'Select' || $('#createdLatitude').val() == ''))
                    {
                        $('#createdLatitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                    else if (FieldNameLowered.indexOf('createdlongitude__c') !== -1 && ($('#createdLongitude').val() == 'Select' || $('#createdLongitude').val() == ''))
                    {
                        $('#createdLongitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                    else if (FieldNameLowered.indexOf('distancefromrecordmi__c') !== -1 && ($('#distanceFromRecord').val() == 'Select' || $('#distanceFromRecord').val() == ''))
                    {
                        $('#distanceFromRecord').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                    }
                });
            });

            //Activity Fields Save Button
            $('.ActivityFieldButtons .saveActivityFieldBtn').click(function () {

                var $saving = showLoading($('#TopTabs-ActivitySettings .loadmask-wrapper'), 'Updating Fields...');

                //build settings
                var requestData = {
                    serializedFields: JSON.stringify({
                        'Activity-DefaultDuration'              : $('#defaultDuration').val(),
                        'Activity-CheckOutAccuracy'             : $('#checkOutAccuracy').val(),
                        'Activity-CheckOutDate'                 : $('#checkOutDate').val(),
                        'Activity-CheckOutDistanceFromRecord'   : $('#checkOutDistanceFromRecord').val(),
                        'Activity-CreatedLocationAccuracy'      : $('#createdLocationAccuracy').val(),
                        'Activity-CheckOutLatitude'             : $('#checkOutLatitude').val(),
                        'Activity-CheckOutLongitude'            : $('#checkOutLongitude').val(),
                        'Activity-CreatedLatitude'              : $('#createdLatitude').val(),
                        'Activity-CreatedLongitude'             : $('#createdLongitude').val(),
                        'Activity-CreatedLocationVerified'      : $('#createdLocationVerified').val(),
                        'Activity-DistanceFromRecord'           : $('#distanceFromRecord').val(),
                        'Activity-FieldSet'                     : $('#checkInFieldSet').val()
                    })
                };

                //load the selected button set
                requestData.ajaxResource = 'MAAdminAJAXResources';
                requestData.action='saveActivityFields';
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    requestData,
                    function(json, event){
                        if(event.status) {
                            hideMessage($saving);
                        }
                    },{buffer:false,escape:false, timeout: 120000 }
                );
            });

            /********************************
            *   Custom Actions OnReady
            ********************************/

            CustomAction_GetExisting();

            //handle selecting an action
            $('#TopTabs-CustomActions .customactions-selectedaction').change(function () {

                //show loading
                showLoading($('#TopTabs-CustomActions'), 'Loading...');

                if ($(this).val() == 'New')
                {
                    //creating a new action.  load defaults
                    $('#TopTabs-CustomActions .basicinfo-name').val('');
                    $('#TopTabs-CustomActions .mode').attr('checked', true);
                    $('#TopTabs-CustomActions .requirement').attr('checked', false);
                    $('#TopTabs-CustomActions .routine-action').val('Iframe');
                    $('#TopTabs-CustomActions .routine-value').val('');
                    $('#TopTabs-CustomActions .post-info').hide();
                    $('#TopTabs-CustomActions .parameterName').val('');
                    $('#TopTabs-CustomActions .param-info').hide();
                    $('#TopTabs-CustomActions .includeRecords').removeAttr('checked');

                    $('.customaction-saveasbtn, .customaction-deletebtn').hide();
                    hideMessage($('#TopTabs-CustomActions'));
                }
                else
                {
                    //load the selected action
                    var processData = {
                        ajaxResource : 'MAAdminAJAXResources',
                        action : 'get_customaction',
                        id: $(this).val()
                    };

                    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                        processData,
                        function(response, event){
                            if(event.status) {
                                removeNamespace('{!namespace}', response.result);

                                //basic info
                                $('#TopTabs-CustomActions .basicinfo-name').val(response.result.Name);

                                //modes
                                $('#TopTabs-CustomActions .mode').attr('checked', false);
                                $.each((response.result.Modes__c ? response.result.Modes__c.split(';') : []), function (index, mode) {
                                    $('#TopTabs-CustomActions .mode[data-value="'+mode+'"]').attr('checked', true);
                                });

                                //requirements
                                $('#TopTabs-CustomActions .requirement').attr('checked', false);
                                $.each((response.result.Requirements__c ? response.result.Requirements__c.split(';') : []), function (index, requirement) {
                                    $('#TopTabs-CustomActions .requirement[data-value="'+requirement+'"]').attr('checked', true);
                                });

                                //routine
                                $('#TopTabs-CustomActions .routine-action').val(response.result.Action__c);
                                $('#TopTabs-CustomActions .routine-value').val(response.result.ActionValue__c);

                                if(response.result.Action__c == 'NewWindow') {
                                    $('#TopTabs-CustomActions .post-info').show();
                                    if(response.result.Options__c) {
                                        try {
                                            var options = JSON.parse(response.result.Options__c);
                                            $('#TopTabs-CustomActions #type-selection .type-action').val(options.method);
                                            if(options.addRecords && options.addRecords == true) {
                                                $('#TopTabs-CustomActions .includeRecords').attr('checked','checked');
                                                $('#TopTabs-CustomActions .parameterName').val(options.paramName);
                                                $('#TopTabs-CustomActions .param-info').show();
                                            }
                                            else {
                                                $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                                $('#TopTabs-CustomActions .parameterName').val('');
                                                $('#TopTabs-CustomActions .param-info').hide();
                                            }
                                        }
                                        catch (e){
                                            $('#TopTabs-CustomActions #type-selection .type-action').val('GET');
                                            $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                            $('#TopTabs-CustomActions .parameterName').val('');
                                            $('#TopTabs-CustomActions .param-info').hide();
                                        }
                                        //$('#TopTabs-CustomActions #type-selection .type-action').val(response.result.Method__c)
                                    }
                                    else {
                                        $('#TopTabs-CustomActions #type-selection .type-action').val('GET');
                                        $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                        $('#TopTabs-CustomActions .parameterName').val('');
                                        $('#TopTabs-CustomActions .param-info').hide();
                                    }
                                }
                                else {
                                    $('#TopTabs-CustomActions .post-info').hide();
                                    $('#TopTabs-CustomActions #type-selection .type-action').val('GET');
                                    $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                }

                                //hide loading
                                $('.customaction-saveasbtn, .customaction-deletebtn').show();
                                hideMessage($('#TopTabs-CustomActions'));
                            }
                            else {
                                showError($('#TopTabs-CustomActions'), 'Unable to load');
                                MALog('Error loading custom action: ' + response.details);
                            }
                        },{buffer:false,escape:false, timeout: 120000 }
                    );
                }

            });

        });

        //Populate current button set on file, and also populate the list of available button set in Salesforce
        function updatePopulateButtonSet(response){
            var buttonSetName;
            var buttonSetId = response.data.sma__ButtonSet__c;
            var processRequest =
            {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_buttonset_name',
                buttonSetId : buttonSetId
            }
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processRequest,
                function(res, event){
                    if(event.status) {
                        if(res.success && (buttonSetId != null)) {
                            buttonSetName = res.result.Name;
                        }
                        else {
                            buttonSetName = '--Select--';
                        }
                        var processData =
                        {
                            ajaxResource : 'MAAdminAJAXResources',
                            action : 'get_buttonsets'
                        }

                        Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                            processData,
                            function(resp, event){
                                if(event.status) {
                                    if(resp.success) {
                                    var htmlButtonSet = '<select class ="slds-select select2-input" id="updatePermissionSet-button-set">';
                                    $('#updatePermissionSetModal').find('#updatePermissionSet-button-set').remove();
                                    if(buttonSetName != '--Select--'){
                                        htmlButtonSet += '<option selected="selected" value="'+ buttonSetId+'">'+ buttonSetName+'</option>';
                                        htmlButtonSet += '<option value="--">--Select--</option>';
                                    }else{
                                        htmlButtonSet += '<option selected="selected" value="--">'+ buttonSetName+'</option>';
                                    }

                                    $.each(resp.results, function(i, row) {
                                        htmlButtonSet += '<option value="'+row.Id+'">'+row.Name+'</option>';
                                    });

                                    htmlButtonSet += '</select>';
                                    $('#updatePermissionSetModal').find('.slds-select_container').append(htmlButtonSet);

                                    // MAToastMessages.showSuccess({message:'Update Successful'});
                                    }
                                    else {
                                        var errMsg = response.message || 'Unknown Error';
                                        MAToastMessages.showError({message: 'Unable to update settings group',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                                    }
                                }
                                else
                                {
                                    var errMsg = event.message || 'Unknown Error';
                                    MAToastMessages.showError({message: 'Unable to update settings group',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                                }
                            }
                        );
                    }
                    else
                    {
                        var errMsg = event.message || 'Unknown Error';
                        MAToastMessages.showError({message: 'Unable to update settings group',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                    }
                }
            );
        }

        //get response value from updatePermissionSetModal after user click update
        function editingSettingsGroup(){
            var checkMaxQuery = parseInt($('#updatePermissionSet-max-query').removeClass('error').val());
            var checkMaxExport = parseInt($('#updatePermissionSet-max-export').removeClass('error').val());

            var settingsId = $('#updatePermissionSetModal').data('settingsId');

            if(settingsId == undefined) {
                MAToastMessages.showError({message:'Save Error',subMessage:'Unable to save setting, please close the modal and try again..',timeOut:0,closeButton:true});
                return;
            }

            if(isNaN(checkMaxQuery) || checkMaxQuery > 50000)
            {
                //Need to show error message, validation for input.
                 $('#updatePermissionSet-max-query').addClass('error');
                 MAToastMessages.showWarning({message:'Validation Error',subMessage:'A max of 50,000 markers can be plotted.',timeOut:0,closeButton:true});
                 return;
            }
            if (isNaN(checkMaxExport) || checkMaxExport > 5000)
            {
                $('#updatePermissionSet-max-export').addClass('error');
                MAToastMessages.showWarning({message:'Validation Error',subMessage:'A max of 10,000 records can be exported.',timeOut:0,closeButton:true});
                return;
            }

            //updated MASettingsGroup field values
            var processDataUpdate =
            {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'update_settings_group',
                updateSettingsId    : settingsId,
                Description         : $('#updatePermissionSetDescription').val(),
                MaxQuerySize        : $('#updatePermissionSet-max-query').val(),
                MaxExportSize       : $('#updatePermissionSet-max-export').val(),
                ButtonSet           : $('#updatePermissionSet-button-set').val() == '--' ? '' : $('#updatePermissionSet-button-set').val(),
                FolderAdmin         : $('#updatePermissionSet-folder-admin').is(':checked') ? 'true' : 'false',
                ShowUserFolders     : $('#updatePermissionSet-user-folders').is(':checked') ? 'true' : 'false',
                AllowExports        : $('#updatePermissionSet-allow-exports').is(':checked') ? 'true' : 'false',
                EditableTooltips    : $('#updatePermissionSet-editable-tooltips').is(':checked') ? 'true' : 'false',
                ShowWeather         : $('#updatePermissionSet-show-weather').is(':checked') ? 'true' : 'false',
                HidePersonalFolder  : $('#updatePermissionSet-hide-personal-folder').is(':checked') ? 'true' : 'false'
            };

            //send the data to Salesforce and make an update on the record
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processDataUpdate,
                function(response, event){
                    if(event.status) {
                        if(response.success) {
                            $('#updatePermissionSetModal .slds-modal__footer .slds-button')
                            $('#updatePermissionSetModal').removeClass('slds-fade-in-open');
                            $('#settingsPageModalBackdrop').removeClass('slds-modal-backdrop--open');

                            if($('#newPermissionsFilter-settings-group').val() == '') {
                                populateRecentSettingsGroups();
                            }
                            MAToastMessages.showSuccess({message:'Success!'});
                        }
                        else {
                            var errMsg = response.message || 'Unknown Error';
                            MAToastMessages.showError({message: 'Unable To Update Settings Group',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                        }
                    }
                    else
                    {
                        var errMsg = event.message || 'Unknown Error';
                        MAToastMessages.showError({message: 'Unable To Update Settings Group',subMessage:errMsg,timeOut:0,extendedTimeOut:0,closeButton:true});
                    }
                }
            );
        }

        function createAssignmentTable(response) {
            var data = response.data || [];
            var htmlTable = '';
            var profileRender = ($('#assigmentTableProfilesCheckbox').is(':checked')) ? 1 : 0;
            var userRender = ($('#assigmentTableUsersCheckbox').is(':checked')) ? 1 : 0;
            $.each(data,function(i,row) {
                if((row.Type == 'User') && (userRender == true)){
                    if(row.Settings != null){
                      htmlTable += '<tr class="slds-hint-parent js-settingRow"><td class="assignment-permission-name" data-row-assignment-id="'+i+'" data-row-assignment="'+htmlEncode(row.Assignment)+'" role="gridcell">'+ htmlEncode(row.Assignment) +'</td><td class="assignment-permission-type" data-row-type="'+htmlEncode(row.Type)+'" role="gridcell">'+ htmlEncode(row.Type) +'</td><td class="slds-cell-edit" role="gridcell"><div class="flex-row settings-group-inline-content">'
                      + '<div class="flex-grow-1"><div class="slds-dropdown-trigger slds-dropdown-trigger_click" style="width: 100%;"><span class="slds-grid slds-grid_align-spread assignment-settings-group"><span class="assignment-settings-name">'+ htmlEncode(row.Settings)
                      + '</span><button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small " tabindex="-1"><span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-edit"></span></button></span>'
                      +'</div></div><div><button data-assignment-settingsName ="'+htmlEncode(row.Settings)+'" data-assignment-type="'+htmlEncode(row.Type)+'" data-assignment-id="'+ i +'" class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small js-remove-this-settings-group-assignment" tabindex="-1">'
                      +'<span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-remove"></span></button></div></div></td><td>'+ htmlEncode(row.UserProfileName) +'</td></tr>';

                    }else {
                      htmlTable += '<tr class="slds-hint-parent js-settingRow"><td class="assignment-permission-name" data-row-assignment-id="'+i+'" data-row-assignment="'+htmlEncode(row.Assignment)+'" role="gridcell">'+ htmlEncode(row.Assignment) +'</td><td class="assignment-permission-type" data-row-type="'+htmlEncode(row.Type)+'" role="gridcell">'+ htmlEncode(row.Type) +'</td><td class="slds-cell-edit" role="gridcell"><div class="flex-row settings-group-inline-content">'
                      + '<div class="flex-grow-1"><div class="slds-dropdown-trigger slds-dropdown-trigger_click" style="width: 100%;"><span class="slds-grid slds-grid_align-spread assignment-settings-group"><span class="assignment-settings-name"><a>Assign</a>'
                      + '</span><button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" tabindex="-1"><span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-edit"></span></button></span>'
                      +'</div></div><div><button data-assignment-settingsName ="'+htmlEncode(row.Settings)+'" data-assignment-type="'+htmlEncode(row.Type)+'" data-assignment-id="'+ i +'" class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small js-remove-this-settings-group-assignment" tabindex="-1">'
                      +'<span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-remove"></span></button></div></div></td><td>'+ htmlEncode(row.UserProfileName) +'</td></tr>';
                    }
                }
                if((row.Type == 'Profile') && (profileRender==true)){
                    if(row.Settings != null){
                      htmlTable += '<tr class="slds-hint-parent js-settingRow"><td class="assignment-permission-name" data-row-assignment-id="'+i+'" data-row-assignment="'+htmlEncode(row.Assignment)+'" role="gridcell">'+ htmlEncode(row.Assignment) +'</td><td class="assignment-permission-type" data-row-type="'+htmlEncode(row.Type)+'" role="gridcell">'+ htmlEncode(row.Type) +'</td><td class="slds-cell-edit" role="gridcell"><div class="flex-row settings-group-inline-content">'
                      + '<div class="flex-grow-1"><div class="slds-dropdown-trigger slds-dropdown-trigger_click" style="width: 100%;"><span class="slds-grid slds-grid_align-spread assignment-settings-group"><span class="assignment-settings-name">'+ htmlEncode(row.Settings)
                      + '</span><button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" tabindex="-1"><span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-edit"></span></button></span>'
                      +'</div></div><div><button data-assignment-settingsName ="'+htmlEncode(row.Settings)+'" data-assignment-type="'+htmlEncode(row.Type)+'" data-assignment-id="'+ i +'" class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small js-remove-this-settings-group-assignment" tabindex="-1">'
                      +'<span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-remove"></span></button></div></div></td><td><span class="slds-text-disabled">N/A</span></td></tr>';
                    }else {
                      htmlTable += '<tr class="slds-hint-parent js-settingRow"><td class="assignment-permission-name" data-row-assignment-id="'+i+'" data-row-assignment="'+htmlEncode(row.Assignment)+'" role="gridcell">'+ htmlEncode(row.Assignment) +'</td><td class="assignment-permission-type" data-row-type="'+htmlEncode(row.Type)+'" role="gridcell">'+ htmlEncode(row.Type) +'</td><td class="slds-cell-edit" role="gridcell"><div class="flex-row settings-group-inline-content">'
                      + '<div class="flex-grow-1"><div class="slds-dropdown-trigger slds-dropdown-trigger_click" style="width: 100%;"><span class="slds-grid slds-grid_align-spread assignment-settings-group"><span class="assignment-settings-name"><a>Assign</a>'
                      + '</span><button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" tabindex="-1"><span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-edit"></span></button></span>'
                      +'</div></div><div><button data-assignment-settingsName ="'+htmlEncode(row.Settings)+'" data-assignment-type="'+htmlEncode(row.Type)+'" data-assignment-id="'+ i +'" class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small js-remove-this-settings-group-assignment" tabindex="-1">'
                      +'<span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-remove"></span></button></div></div></td><td><span class="slds-text-disabled">N/A</span></td></tr>';
                    }
                }
            });

            $('#assignmentPermissionTable tbody').html(htmlTable);

        }

        function createSettingsGroup()
        {
            var checkName = $('#newPermissionSetName').removeClass('error').val();
            var checkMaxQuery = parseInt($('#newPermissionSet-max-query').removeClass('error').val());
            var checkMaxExport = parseInt($('#newPermissionSet-max-export').removeClass('error').val());

            if(checkName.trim() == '') {
                $('#newPermissionSetName').addClass('error');
                MAToastMessages.showWarning({message:'Validation Error',subMessage:'A name is required.',timeOut:0,closeButton:true});
                return;
            }


            if(isNaN(checkMaxQuery) || checkMaxQuery > 50000)
            {
                //Need to show error message, validation for input.
                $('#newPermissionSet-max-query').addClass('error');
                MAToastMessages.showWarning({message:'Validation Error',subMessage:'A max of 50,000 markers can be plotted.',timeOut:0,closeButton:true});
                return;
            }
            if (isNaN(checkMaxExport) || checkMaxExport > 5000) {
                $('#newPermissionSet-max-export').addClass('error');
                MAToastMessages.showWarning({message:'Validation Error',subMessage:'A max of 10,000 records can be exported.',timeOut:0,closeButton:true});
                return;
            }
            var $save = MAToastMessages.showLoading({message:'Saving...', timeOut:0,extendedTimeOut:0});
            $footerButtons = $('#newPermissionSetModal .slds-modal__footer .slds-button').attr('disabled','disabled');
            // var $newPermission = $('.newPermissionSetModal');
            var requestData = {
                action : 'create_settings_group',
                ajaxResource : 'MAAdminAJAXResources',
                settingsGroup: JSON.stringify({
                    Name                            : $('#newPermissionSetName').val(),
                    sma__Description__c             : $('#newPermissionSetDescription').val(),
                    sma__MaxQuerySize__c            : $('#newPermissionSet-max-query').val(),
                    sma__MaxExportSize__c           : $('#newPermissionSet-max-export').val(),
                    sma__ButtonSet__c               : $('#newPermissionSet-button-set').val() == '--' ? '' : $('#newPermissionSet-button-set').val(),
                    sma__FolderAdmin__c             : $('#newPermissionSet-folder-admin').is(':checked') ? 'true' : 'false',
                    sma__ShowUserFolders__c         : $('#newPermissionSet-user-folders').is(':checked') ? 'true' : 'false',
                    sma__AllowExports__c            : $('#newPermissionSet-allow-exports').is(':checked') ? 'true' : 'false',
                    sma__EditableTooltips__c        : $('#newPermissionSet-editable-tooltips').is(':checked') ? 'true' : 'false',
                    sma__ShowWeather__c             : $('#newPermissionSet-show-weather').is(':checked') ? 'true' : 'false',
                    sma__HidePersonalFolder__c      : $('#newPermissionSet-hide-personal-folder').is(':checked') ? 'true' : 'false'
                })
            };

            //send request to save settings group
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                requestData,
                function(res, event){
                    MAToastMessages.hideMessage($save);
                    $footerButtons.removeAttr('disabled');
                    if(event.status) {
                        if(res.success) {
                            $('#newPermissionSetModal .slds-modal__footer .slds-button')
                            $('#newPermissionSetModal').removeClass('slds-fade-in-open');
                            $('#settingsPageModalBackdrop').removeClass('slds-modal-backdrop--open');
                            MAToastMessages.showSuccess({message:'Save Successful'});

                            //if the search box is clear, update with latest
                            if($('#newPermissionsFilter-settings-group').val() == '') {
                                populateRecentSettingsGroups();
                            }
                        }
                        else {
                            var errMsg = res.error || 'Unknown Error';
                            MAToastMessages.showError({message:'Save Error',subMessage:errMsg,timeOut:0, closeButton:true});
                        }
                    }
                    else
                    {
                       MAToastMessages.showError({message:'Save Error',subMessage:event.message,timeOut:0, closeButton:true});
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );

        }

        function updatePermissionsMass()
        {
            //start preparing data for this request
            var $column = $(this);
            var requestData = {
                field       : addNamespace('sma', $column.closest('th').attr('data-field')),
                type        : $column.closest('th').attr('data-type')
            };

            //handle non-update use cases
            if ($column.is('select') && $column.val() == '')
            {
                //this is a picklist with no value selected.  do nothing
                return;
            }

            //set a loadmask over the permissions grid
            $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
            $('#permissions-grid-status .status span').text('Preparing...');

            //get the new value based on the type and what was clicked
            switch (requestData.type)
            {
                case 'boolean':
                    requestData.value = $column.text() == 'All';
                    break;
                case 'picklist':
                    requestData.value = $column.val();
                    $column.val('');
                    break;
                case 'setting':

                    //make sure this is a regular setting and not a dialog
                    if (!$column.is('.setting')) {
                        $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
                        return;
                    }

                    //handle different field types
                    if ($column.is('select')) {
                        requestData.field = $column.attr('data-field');
                        requestData.value = $column.val();
                        $column.val('');
                    }
                    else {
                        requestData.value = $column.text() == 'All';
                    }
                    requestData.setting = requestData.field;
                    requestData.field = addNamespace('{!namespace}', 'MapAnythingSettings__c');

                    break;
                default:
                    //invalid type.  just do nothing
                    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
                    return;
            }

            var success = 0;
            var errors = 0;
            var errorMessages = [];
            var q = async.queue(function (options, callback) {
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    options,
                    function(json, event){
                        if(event.status) {
                            if(json && json.success) {
                                success = success + options.totalUsers;
                            }
                            else {
                                if(json.errorMessages) {
                                    errorMessages = errorMessages.concat(errMsgs);
                                    var totalFails = +json.numberFailed;
                                    errors = errors + totalFails;
                                }
                                else {
                                    var errMsgs = json.error || json.message || 'Unknown Error, Please Check Permissions';
                                    errorMessages.push(errMsgs);
                                    errors = errors + options.totalUsers;
                                }
                            }
                        }
                        else {
                            var errMsg = event.message || 'Unknown Error, Please Check Permissions';
                            errorMessages.push(errMsg);
                            errors = errors + options.totalUsers;
                        }

                        //decrement the batches we have out
                        $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
                        $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
                        callback();
                    },{buffer:false,escape:false, timeout: 120000 }
                );
			});

			q.concurrency = 5;

			//loop over the visibleOnly queries and add to que
			var userIds = [];
            $('#permissions-grid').data('batchCount', 0);
            $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
                userIds.push(userId);
            });

            var batchableArray = MA.Util.createBatchable(userIds,100);

            //send out this batch if it's ready
            for(var i = 0; i < batchableArray.length; i++) {
                var userArray = batchableArray[i];
                var optionsOut = {
                    userIds : JSON.stringify(userArray),
                    ajaxResource : 'MAAdminAJAXResources',
                    action : 'save_permissions_mass',
                    totalUsers : userArray.length
                };

                optionsOut = $.extend(optionsOut,requestData);

                q.push(optionsOut,function(res){});

                //increment the batches that we have out and restart the id list
                $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
            }

            $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');

			q.drain = function(){
			    if(errors > 0) {
                    MAToastMessages.showError({message:'Update Complete',subMessage:success + ' records updated successfully, ' + errors + ' records failed.',timeOut:0,closeButton:true});

                    var popup = MA.Popup.showMAConfirm({
                        template: '<div>It looks like some batches failed! Would you like to see more information related to these errors?</div>',
                        width: 400
                    })

                    popup.then(function(res) {
                        if(res) {
                            //loop over our mesages and consolodate errors
                            var result = [];
                            $.each(errorMessages || [], function (i, err) {
                                if ($.inArray(err, result) == -1) result.push(err);
                            });

                            var errorHTML = '<ul style="max-height:300px;over:auto;">';
                            $.each(result, function(i,unique) {
                                errorHTML += '<li>'+htmlEncode(unique)+'</li>';
                            });
                            errorHTML += '</ul>';

                            MA.Popup.showMAAlert({
                                template: errorHTML,
                                width : 500
                            })
                        }
                    });
                }
                else {
                    MAToastMessages.showSuccess({message:'Update Complete',subMessage:success + ' records updated successfully'});
                }

                //update this data in our raw data (this is needed to prevent data loss during searching)
                $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {

                    if (requestData.type == 'setting') {
                        switch (requestData.setting)
                        {
                            case 'ShowPersonalFolders':
                                record.Settings.ShowPersonalFolders = requestData.value;
                            break;
                            case 'EditableTooltips':
                                record.Settings.EditableTooltips = requestData.value;
                            break;
                            case 'ShowWeather':
                                record.Settings.ShowWeather = requestData.value;
                            break;
                            case 'OldFolders':
                                record.Settings.OldFolders = true;
                            break;
                            case 'HidePersonalFolder':
                                record.Settings.HidePersonalFolder = requestData.value;
                            break;
                            case 'ButtonSetId':
                                record.Settings.ButtonSetSettings = { Id: requestData.value };
                            break;
                            case 'DefaultCountry':
                                record.Settings.DefaultCountry = requestData.value;
                            break;
                        }
                    }
                    else {
                        record[requestData.field] = requestData.value;
                    }
                });

                //update the current page of data and remove the loadmask
                $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
                $('#permissions-page').change();
			}

        }

        //get users from org
        function load() {

            //show loading
            showTabLoading($('#TopTabs-Permissions'), 'Loading...');

            //get users
            $('#permissions-grid').data('records', {});

            //let's go get our user id's
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_user_permissions_batch_phase1',
                includeInactive : $('#permissionsfilter-includeinactive').is(':checked'),
                includePortal : $('#permissionsfilter-includeportal').is(':checked'),
                includeChatter: $('#permissionsfilter-includechatter').is(':checked'),
                onlyMAUsers : $('#permissionsfilter-onlyMAUsers').is(':checked')
            };
            var $permissionsGrid = $('#permissions-grid');
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequestReadOnly,
                processData,
                function (res, event){
                    if(event.status) {
                        if(res != undefined && res.success) {
                            var recordIds = res.users || [];

                            if(recordIds.length === 0) {
                                $permissionsGrid.data('doneLoading', true);
                                return;
                            }

                            var batchableUsers = MA.Util.createBatchable(recordIds,1000);

                            //create the que
                            var userQueue = async.queue(function (options, callback) {

                                var userArray = options.userBatch;
                                if(userArray != undefined) {
                                    var processData = {
                                        ajaxResource : 'MAAdminAJAXResources',
                                        action : 'get_user_permissions_batch_phase2',
                                        userIds : JSON.stringify(options.userBatch)
                                    };

                                    Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequestReadOnly,
                                        processData,
                                        function (userRes, event){
                                            if(event.status) {
                                                if(userRes.success) {
                                                    //loop through the returned users and add each as a row
                                                    $.each(userRes.users, function (index, user) {

                                                        //remove namespace
                                                        removeNamespace('{!namespace}', user);

                                                        //parse user settings
                                                        try { user.Settings = JSON.parse(user.MapAnythingSettings__c || '{}'); }
                                                        catch (err) { user.Settings = {}; }

                                                        //add this user to the list in memory
                                                        $permissionsGrid.data('records')[user.Id] = user;

                                                    });
                                                    callback({success:true});
                                                }
                                                else {
                                                    callback({success:false});
                                                }
                                            }
                                            else {
                                                callback({success:false});
                                            }
                                        },{buffer:false,escape:false,timeout:120000}
                                    );
                                }
                                else {
                                    callback({success:false});
                                }
                            });

                            //loop over our batchableUsers and add to que
                            for(var i = 0; i < batchableUsers.length; i++) {
                                var userBatch = batchableUsers[i];
                                var userOptions = {
                                    userBatch : userBatch
                                }
                                userQueue.push(userOptions,function(){});
                            }

                            userQueue.drain = function () {
                                $permissionsGrid.data('doneLoading', true);
                            };
                        }
                        else {
                            MAToastMessages.showError({message:'Settings Error',subMessage:'Unable to grab users',timeOut:0, closeButton:true});
                            $permissionsGrid.data('doneLoading', true);
                        }
                    }
                    else if (event.type === 'exception') {
                        $permissionsGrid.data('doneLoading', true);
                        MAToastMessages.showError({message:'Settings Error',subMessage:event.message,timeOut:0, closeButton:true});
                        MA.log('Unable to get users from SF',event.message + '::' + event.where);
                    } else {
                        $permissionsGrid.data('doneLoading', true);
                        MAToastMessages.showError({message:'Settings Error',subMessage:event.message,timeOut:0, closeButton:true});
                        MA.log('Unable to get users from SF',event.message);
                    }

                },{buffer:false,timeout:120000}
            );

            //get user profiles for the permissions grid
            $('#permissionsfilter-profile').data('autocompleteItems', []);
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_user_profiles_batch',
                offset:0
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequestReadOnly,
                processData,
                function userProfilesResponse(json, event){
                    if(event.status) {
                        if(json.success) {
                            //loop through the returned profiles and add each to the profile filter
                            var profileAutocompleteItems = $('#permissionsfilter-profile').data('autocompleteItems');
                            $.each(json.profiles, function (index, profile) {
                                profileAutocompleteItems.push({
                                    label   : profile.Name,
                                    value   : profile.Name
                                });
                            });

                            //if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
                            if (json.profiles.length >= 1000) {
                                var newOffset = json.offset + json.profiles.length;
                                var processData = {
                                    ajaxResource : 'MAAdminAJAXResources',
                                    action : 'get_user_profiles_batch',
                                    offset:newOffset
                                };

                                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                    processData,
                                    function(res, event){
                                        userProfilesResponse(res, event);
                                    }
                                );
                            }
                            else {
                                $('#permissionsfilter-profile').data('doneLoading', true);
                            }
                        }
                        else {
                            $('#permissionsfilter-profile').data('doneLoading', true);
                        }
                    }
                    else
                    {
                        $('#permissionsfilter-profile').data('doneLoading', true);
                    }
                },{buffer:false,escape:false}
            );


            $('#permissionsfilter-profile').data(
                'loadingInterval',
                setInterval(function () {

                    if ($('#permissions-grid').data('doneLoading') && $('#permissionsfilter-profile').data('doneLoading'))
                    {
                        //clear this interval because we're done
                        clearInterval($('#permissionsfilter-profile').data('loadingInterval'));

                        //enable the profile filter
                        $('#permissionsfilter-profile').removeAttr('disabled').val('');

                        //set up the autocomplete options for profile filtering
                        $('#permissionsfilter-profile').autocomplete({
                            select: search,
                            search: function () {
                                $('#permissionsfilter-profile').addClass('searching');
                            },
                            source: function(request, response) {
                                var results = $.ui.autocomplete.filter($('#permissionsfilter-profile').data('autocompleteItems'), request.term);

                                $('#permissionsfilter-profile').removeClass('searching');
                                response(results.slice(0, 10));
                            }
                        });

                        //hide the loading message
                        hideTabMessage($('#TopTabs-Permissions'), 'Loading...');

                        //run a default search to populate the grid
                        search();
                    }

                }, 1000)
            );

        }

        //load the list of users and profiles based on the filter criteria
        function load_old()
        {
            //show loading
            showTabLoading($('#TopTabs-Permissions'), 'Loading...');

            //get users
            $('#permissions-grid').data('records', {});

            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_user_permissions_batch',
                offset:0,
                includeInactive : $('#permissionsfilter-includeinactive').is(':checked'),
                includePortal : $('#permissionsfilter-includeportal').is(':checked'),
                includeChatter: $('#permissionsfilter-includechatter').is(':checked')
            };
            var $permissionsGrid = $('#permissions-grid');
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequestReadOnly,
                processData,
                function userPermissionsResponse(json, event){
                    if(event.status) {
                        //grab the permissions grid for easy access


                        //loop through the returned users and add each as a row
                        $.each(json.users, function (index, user) {

                            //remove namespace
                            removeNamespace('{!namespace}', user);

                            //parse user settings
                            try { user.Settings = JSON.parse(user.MapAnythingSettings__c || '{}'); }
                            catch (err) { user.Settings = {}; }

                            //add this user to the list in memory
                            $permissionsGrid.data('records')[user.Id] = user;

                        });

                        //if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
                        if (json.users.length >= 1000) {
                            var newOffset = json.offset + json.users.length;
                            var processData = {
                                ajaxResource : 'MAAdminAJAXResources',
                                action : 'get_user_permissions_batch',
                                offset: newOffset,
                                includeInactive : $('#permissionsfilter-includeinactive').is(':checked'),
                                includePortal : $('#permissionsfilter-includeportal').is(':checked'),
                                includeChatter:$('#permissionsfilter-includechatter').is(':checked')
                            };

                            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                processData,
                                function(res, event){
                                    userPermissionsResponse(res, event);
                                },{buffer:false,escape:false}
                            );
                        }
                        else {
                            $permissionsGrid.data('doneLoading', true);
                        }
                    }
                    else
                    {
                        $permissionsGrid.data('doneLoading', true);
                    }
                },{buffer:false,escape:false}
            );

            //get user profiles for the permissions grid
            $('#permissionsfilter-profile').data('autocompleteItems', []);
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_user_profiles_batch',
                offset:0
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequestReadOnly,
                processData,
                function userProfilesResponse(json, event){
                    if(event.status) {
                        //loop through the returned profiles and add each to the profile filter
                        var profileAutocompleteItems = $('#permissionsfilter-profile').data('autocompleteItems');
                        $.each(json.profiles, function (index, profile) {
                            profileAutocompleteItems.push({
                                label   : profile.Name,
                                value   : profile.Name
                            });
                        });

                        //if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
                        if (json.profiles.length >= 1000) {
                            var newOffset = json.offset + json.profiles.length;
                            var processData = {
                                ajaxResource : 'MAAdminAJAXResources',
                                action : 'get_user_profiles_batch',
                                offset:newOffset
                            };

                            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                processData,
                                function(res, event){
                                    userProfilesResponse(res, event);
                                }
                            );
                        }
                        else {
                            $('#permissionsfilter-profile').data('doneLoading', true);
                        }
                    }
                    else
                    {
                        $('#permissionsfilter-profile').data('doneLoading', true);
                    }
                },{buffer:false,escape:false}
            );

            //set up a poller to determine when the user permissions have fully loaded
            $('#permissionsfilter-profile').data(
                'loadingInterval',
                setInterval(function () {

                    if ($('#permissions-grid').data('doneLoading') && $('#permissionsfilter-profile').data('doneLoading'))
                    {
                        //clear this interval because we're done
                        clearInterval($('#permissionsfilter-profile').data('loadingInterval'));

                        //enable the profile filter
                        $('#permissionsfilter-profile').removeAttr('disabled').val('');

                        //set up the autocomplete options for profile filtering
                        $('#permissionsfilter-profile').autocomplete({
                            select: search,
                            search: function () {
                                $('#permissionsfilter-profile').addClass('searching');
                            },
                            source: function(request, response) {
                                var results = $.ui.autocomplete.filter($('#permissionsfilter-profile').data('autocompleteItems'), request.term);

                                $('#permissionsfilter-profile').removeClass('searching');
                                response(results.slice(0, 10));
                            }
                        });

                        //hide the loading message
                        hideTabMessage($('#TopTabs-Permissions'), 'Loading...');

                        //run a default search to populate the grid
                        search();
                    }

                }, 1000)
            );
        }

        //retrieve settings group with names that match user input
        function retrieveSettings(searchTerm) {
            var dfd = $.Deferred();

            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'getSettingsGroup',
                term : searchTerm
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(lookupOptionsResponse, event){
                    if(event.status) {
                        dfd.resolve(lookupOptionsResponse);
                    }
                    else {
                        dfd.resolve({success:false,error:event.message});
                    }
                }, {escape: false, buffer: false}
            );

            return dfd.promise();
        }

        function retrieveUsersProfiles(searchTerm) {
            var dfd = $.Deferred();

            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'getSettingsAssignment',
                term : searchTerm
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(lookupOptionsResponse, event){
                    if(event.status) {
                        dfd.resolve(lookupOptionsResponse);
                    }
                    else {
                        dfd.resolve({success:false,error:event.message});
                    }
                }, {escape: false, buffer: false}
            );

            return dfd.promise();
        }

        function populateButtonSets () {

        }

        //filter the list of users based on the entered search criteria
        function search()
        {
            //clear any existing search timeouts
            try { clearTimeout($('#permissions-filters').data('searchTimeout')); } catch (err) { }

            //set a loadmask over the permissions grid
            $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
            $('#permissions-grid-status .status span').text('Searching...');
			var filterCriteriaName = $('#filterCriteriaName').val() || 'contains';
			var filterCriteriaProfile = $('#filterCriteriaProfile').val() || 'contains';
            //set a search timeout to perform the search when the user is done setting filters
            $('#permissions-filters').data(
                'searchTimeout',
                setTimeout(function () {

                    //remove existing data for matching records
                    var $permissionsGrid = $('#permissions-grid');
                    $permissionsGrid.data('matchingRecords', {});

                    //perform the search
                    var matchCount = 0;
                    var matchingRecords = $permissionsGrid.data('matchingRecords');
                    $.each($permissionsGrid.data('records'), function (userId, record) {
						if(filterCriteriaName == 'contains' && filterCriteriaProfile == 'contains') {
	                        if (($('#permissionsfilter-name').val() == '' || record.Name.toLowerCase().indexOf($('#permissionsfilter-name').val().toLowerCase()) != -1) && ($('#permissionsfilter-profile').val() == '' || record.Profile.Name.toLowerCase().indexOf($('#permissionsfilter-profile').val().toLowerCase()) != -1))
	                        {
	                            //add a record in memory for this match
	                            matchingRecords[userId] = record;
	                            matchCount++;
	                        }
						}
						else if(filterCriteriaName == 'equals' && filterCriteriaProfile == 'equals') {
							if (($('#permissionsfilter-name').val() == '' || record.Name.toLowerCase() == $('#permissionsfilter-name').val().toLowerCase()) && ($('#permissionsfilter-profile').val() == '' || record.Profile.Name.toLowerCase() == $('#permissionsfilter-profile').val().toLowerCase()))
	                        {
	                            //add a record in memory for this match
	                            matchingRecords[userId] = record;
	                            matchCount++;
	                        }
						}
						else if(filterCriteriaName == 'contains' && filterCriteriaProfile == 'equals') {
							if (($('#permissionsfilter-name').val() == '' || record.Name.toLowerCase().indexOf($('#permissionsfilter-name').val().toLowerCase()) != -1) && ($('#permissionsfilter-profile').val() == '' || record.Profile.Name.toLowerCase() == $('#permissionsfilter-profile').val().toLowerCase()))
	                        {
	                            //add a record in memory for this match
	                            matchingRecords[userId] = record;
	                            matchCount++;
	                        }
						}
						else if(filterCriteriaName == 'equals' && filterCriteriaProfile == 'contains') {
							if (($('#permissionsfilter-name').val() == '' || record.Name.toLowerCase() == $('#permissionsfilter-name').val().toLowerCase()) && ($('#permissionsfilter-profile').val() == '' || record.Profile.Name.toLowerCase().indexOf($('#permissionsfilter-profile').val().toLowerCase()) != -1))
	                        {
	                            //add a record in memory for this match
	                            matchingRecords[userId] = record;
	                            matchCount++;
	                        }
						}
                    });

                    //hold on to the match count for user later
                    $permissionsGrid.data('matchingRecordsCount', matchCount);

                    //show page options
                    $('#permissions-page option').remove();
                    for (var i = 1; i <= Math.ceil(matchCount / pageSize); i++)
                    {
                        $('#permissions-page').append("<option value='"+i+"'>"+i+"</option>");
                    }

                    //remove the loadmask
                    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');

                    //load the first page of data
                    $('#permissions-page').change();

                }, 800)
            );
        }

        //populate a permissions row based on the data inside it.  return the row
        function populatePermissionsRow($row)
        {
            //populate basic record data
            var record = removeNamespace('{!namespace}', $row.data('record'));
            $row.find('.name').html('').append($("<a target='_blank'></a>").attr('href', '/'+record.Id).text(record.Name));
            $row.find('.profile').html('').append($("<a target='_blank'></a>").attr('href', '/'+record.Profile.Id).text(record.Profile.Name));
            $row.find('.corporateadmin input').attr('checked', record.EditMapAnythingOrgWirdeQueries__c ? 'checked' : false);
            $row.find('.allowexports input').attr('checked', record.AllowMapAnythingExports__c ? 'checked' : false);
            $row.find('.version select').val(record.MAVersion__c || 'Current');
            $row.find('.maxquerysize input').val(record.MAMaxQuerySize__c);
            $row.find('.maxexportsize input').val(record.MAMaxExportSize__c);

            //populate basic settings
            $row.find('.showpersonalfolders input').attr('checked', record.Settings.ShowPersonalFolders ? 'checked' : false);
            $row.find('.editabletooltips input').attr('checked', record.Settings.EditableTooltips ? 'checked' : false);
            $row.find('.showweather input').attr('checked', record.Settings.ShowWeather ? 'checked' : false);
            //if no folder, default to true
            var useNewFolders = getProperty(record, 'Settings.OldFolders');
            if(useNewFolders == undefined || useNewFolders == null) {
                useNewFolders = true;
            }
            // $row.find('.oldfolders input').prop('checked',useNewFolders);
            $row.find('.hidepersonalfolder input').attr('checked', record.Settings.HidePersonalFolder ? 'checked' : false);

            //populate button set settings
            var $buttonSetSelect = $row.find('select[data-field="ButtonSetId"]').html($('#permissions-grid th select[data-field="ButtonSetId"]').html());
            if (record.Settings.ButtonSetSettings) {
                $buttonSetSelect.val(record.Settings.ButtonSetSettings.Id);
            }

            //populate default country settings
            /*
            var $defaultCountrySelect = $row.find('select[data-field="DefaultCountry"]').html($('#permissions-grid th select[data-field="DefaultCountry"]').html());
            if (record.Settings.DefaultCountry) {
                $defaultCountrySelect.val(record.Settings.DefaultCountry);
            }
            */

            //return the row
            return $row;
        }

        /*******************************
        *   Dispostion Field Sets
        *******************************/
        var getfieldSetInfo = false;
        function getFieldSets () {
            //placeholder for the return
            var dfd = jQuery.Deferred();

            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_fieldSets',
                sObjectName:'Task'
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(res, event){
                    if(event.status) {
                        //return the data
                        dfd.resolve({success:true,data:res});
                    }
                    else {
                        dfd.resolve({success:false,data:res});
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );

            //returns the promise and waits for the resolved callback
            return dfd.promise();
        }

        /********************************
        *   Activity Fields Handlers
        *********************************/
        function getActivityFields (type)
        {

            var $loadfields = showLoading($('#TopTabs-ActivitySettings .loadmask-wrapper'), 'Loading...');
            var requestData = {};
            if (type) {
                requestData.type = type;
            }

            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'getActivityFields'
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if(event.status) {
                        //remove previous options
                        $('#TopTabs-ActivitySettings .newActivityFielddetails > option').remove();

                        var $ActivityFields = $('#TopTabs-ActivitySettings .newActivityFielddetails').html($('<option value="Select">--Please Choose--</option>'));
                        var $numberFields = $('#TopTabs-ActivitySettings .newActivityFielddetails[data-field="number"]');
                        var $booleanFields = $('#TopTabs-ActivitySettings .newActivityFielddetails[data-field="boolean"]');
                        var $dateTimeFields = $('#TopTabs-ActivitySettings .newActivityFielddetails[data-field="dateTime"]');

                        //loop over return and check for correct types for each field
                        $.each((response.ActivityFields[0].Number || []), function (index, numberField) {
                            $numberFields.append($('<option />').attr('value', numberField.value).text(numberField.name));
                        });

                        $.each((response.ActivityFields[0].Boolean || []), function (index, booleanField) {
                            $booleanFields.append($('<option />').attr('value', booleanField.value).text(booleanField.name));
                        });

                        $.each((response.ActivityFields[0].DateTime || []), function (index, dateTimeField) {
                            $dateTimeFields.append($('<option />').attr('value', dateTimeField.value).text(dateTimeField.name));
                        });

                        //populate static options
                        $('#defaultDuration').html('<option value="30">0 hr, 30 min</option><option value="60">1 hr, 0 min</option><option value="90">1 hr, 30 min</option><option value="120">2 hr, 0 min</option><option value="150">2 hr, 30 min</option><option value="180">3 hr, 0 min</option>');

                        //init comboboxes
                        $ActivityFields.combobox();

                        //update field selections
                        var intVar = setInterval(function () {
                            if(getfieldSetInfo) {
                                clearInterval(intVar);
                                updateActivityFields($loadfields, type);
                            }
                        },500);
                    }
                    else {
                        MALog('Error getting fields: ' + response.details);
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }

        function updateActivityFields ($loadfields, type)
        {
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'getActivityFieldSettings'
            };
            if (type) {
                processData.type = type;
            }

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if(event.status) {
                        var fieldSettings = response.createableFields[0];

                        //loop over field settings and set combobox values
                        $.each(fieldSettings, function (key, field) {
                            $('#'+key+'').val(field).next().find('.ui-autocomplete-input').val($('#'+key+' option:selected').text());
                        });

                        hideMessage($loadfields);
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }

        function loadActivityFields ()
        {
            //show loading
            var $loading = showLoading($('#dialog-createactivityfields .loadmask-wrapper'), 'Loading...');

            //Grab fields
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'loadActivityFields',
                baseObject: 'task'
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    //populate the createable fields table
                    $('#dialog-createactivityfields .createablefield-row').remove();
                    $.each(response.createableFields, function (index, createableField) {

                        //basic fields
                        var $createableFieldRow = $('.templates .createablefield-row').clone().attr('data-name', createableField.name).data('createableField', createableField);
                        $createableFieldRow.find('.createablefield-label').text(createableField.label);

                        //does this field exist?
                        if (createableField.exists)
                        {
                            $createableFieldRow.find('.createablefield-exists').html("<img src='{!URLFOR($Resource.MapAnything, 'images/check-22.png')}' />");

                            //if this is the skip geocoding field, make sure the checkbox for it is visible
                            if (createableField.name == 'MASkipGeocoding__c') {
                                $('#editskipfailedgeocodes').show().next().hide();
                            }
                        }
                        else
                        {
                            $createableFieldRow.find('.createablefield-exists').html("<input type='checkbox' class='createablefield-create' checked='checked' />")
                        }

                        //render the row
                        $('#dialog-createfields-table').append($createableFieldRow);
                    });

                    //hide loading
                    hideMessage($loading);
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }

        function CreateActivityFields(options)
        {
            //send requests to create the needed fields
            var partnerURL = '{!$Api.Partner_Server_URL_280}';
            var sessionId = '{!$Api.Session_ID}';
            var fieldRequests = options.fieldRequests;

            $('#dialog-createactivityfields .createablefield-row .createablefield-create').each(function () {
                //grab stored field info
                var fieldData = $(this).closest('.createablefield-row').data('createableField');

                //create a field request so we can track it and determine completion
                var fieldRequest = {
                    done: false,
                    error: false
                };
                fieldRequests.push(fieldRequest);

                //create field
                if ($(this).is(':checked')) {

                    //send request
                    $.getJSON(
                        "https://product-api-prod.cloudbilt.com/createfield.php?callback=?",
                        {
                            sessionid: sessionId,
                            serverurl: partnerURL,
                            type: fieldData.type,
                            object: 'Activity',
                            name: fieldData.name,
                            label: fieldData.label,
                            precision: fieldData.precision,
                            scale: fieldData.scale
                        },
                        function (response) {
                            if (response.success) {
                                fieldRequest.id = response.data.result.id;
                            }
                            else {
                                fieldRequest.done = fieldRequest.error = true;
                            }
                        }
                    );
                }
                else {
                    fieldRequest.done = true;
                }
            });

            //start an interval to check for completion of field creation
            var fieldCreationInterval = setInterval(function () {

                //loop over each field request checking for completion
                var done = true;
                var error = false;
                $.each(fieldRequests, function (index, fieldRequest) {
                    if (!fieldRequest.done) {

                        //not done
                        done = false;

                        //send a request to check status if we have an id
                        if (fieldRequest.id) {
                            $.getJSON(
                                "https://product-api-prod.cloudbilt.com/status.php?callback=?",
                                {
                                    sessionid: sessionId,
                                    serverurl: partnerURL,
                                    id: fieldRequest.id
                                },
                                function(response) {
                                    if (response.success) {
                                        if (response.data.result.done) {
                                            if (response.data.result.state == 'Error') {
                                                if (response.data.result.statusCode == 'DUPLICATE_DEVELOPER_NAME') {

                                                    //the field already exists so we'll just use it
                                                    fieldRequest.done = true;

                                                }
                                                else {
                                                    fieldRequest.done = fieldRequest.error = true;  //unknown error
                                                }
                                            }
                                            else {
                                                fieldRequest.done = true;   //success
                                            }
                                        }
                                    }
                                    else {
                                        fieldRequest.done = fieldRequest.error = true;  //unknown error
                                    }
                                }
                            );
                        }
                    }
                    else if (fieldRequest.error) {
                        error = true;
                    }
                });

                //done?
                if (done) {
                    clearInterval(fieldCreationInterval);
                    options.complete({ success: !error });
                }


            }, 2000);
        }

        /********************************
        *   Button Set Handlers
        *********************************/
        function ButtonSet_GetExisting ()
        {
            getButtonSetsFromSF().then(function(response) {
                var $buttonSetSelects = $('#permissions-grid select[data-field="ButtonSetId"]');
                var $newButtonSetSelects = $('#newPermissionSet-button-set');

                var $buttonSets = $('.buttonsets-selectedbuttonset').html($('<option value="New">--Create New--</option>'));
                $.each((response.results || []), function (index, buttonSet) {
                    $buttonSets.append($('<option />').attr('value', buttonSet.Id).text(buttonSet.Name));
                    $newButtonSetSelects.append($('<option />').attr('value', buttonSet.Id).text(buttonSet.Name));
                    $buttonSetSelects.append($('<option />').attr('value', buttonSet.Id).text(buttonSet.Name));
                });
                $buttonSets.combobox().change();

                //refresh the permissions grid if it already has rows so the buttons set options will be populated
                if ($('#permissions-grid .permissions-row').length > 0){
                    search();
                }
            });
        }

        function populateRecentSettingsGroups() {
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'getLatestSettingsGroups'
            };

	        //get latest settings groups to display some data
            var $permissionsGrid = $('#permissions-grid');
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function (res, event){
                    if(event.status) {
                        if(res.success) {
                            var data = res.data;
                            var htmlTable = '';
                            $.each(data,function(i,row) {
                                htmlTable += '<tr class="slds-hint-parent js-settingRow"><td role="gridcell"><a><span data-edit-settingsId="'+htmlEncode(row.Id)+'" class="editSettingsGroup">'+htmlEncode(row.Name)+'</span></a></td><td role="gridcell">'+htmlEncode(row.sma__Description__c || '')+'</td><td role="gridcell"><button data-recid="' + row.Id + '" class="slds-button slds-button_icon slds-button_icon-x-small delete-permission-set" style="float:right;"><span class="slds-button__icon slds-button__icon_hint slds-button__icon_small ma-icon ma-icon-close"></span></button></td></tr>';
                                // htmlTable += '<tr class="slds-hint-parent js-settingRow"><td role="gridcell"><a href="/'+htmlEncode(row.Id)+'">'+htmlEncode(row.Name)+'<span onclick="editSettingsGroup()"></span></a></td><td role="gridcell">'+htmlEncode(row.sma__Description__c || '')+'</td><td role="gridcell"><button data-recid="' + row.Id + '" class="slds-button slds-button_icon slds-button_icon-x-small delete-permission-set" style="float:right;"><span class="slds-button__icon slds-button__icon_hint slds-button__icon_small ma-icon ma-icon-close"></span></button></td></tr>';
                            });
                            $('#permissionSetTable tbody').html(htmlTable);
                        }
                    }
                },{buffer:false,escape:false}
	        );
        }

        function getButtonSetsFromSF () {
            var dfd = $.Deferred();

            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_buttonsets',
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if(event.status) {
                        dfd.resolve(response);
                    }
                    else {
                        dfd.resolve({success:false,results:[],err:event.message});
                    }

                },{buffer:false,escape:false, timeout: 120000 }
            );

            return dfd.promise();
        }

        function ButtonSet_InsertSection (event, ui)
        {
            //if we're dragging an existing section, just move it.  otherwise, create a new section
            if (ui.draggable.is('.buttonset-section-header'))
            {
                //make sure we aren't dragging this section onto itself
                if ($.contains(ui.draggable.closest('.buttonset-section').get(0), this)) { $(this).removeClass('hovering'); return; }

                //move it
                $(this).after(ui.draggable.closest('.buttonset-section'));
            }
            else
            {
                //create new section
                var $newSection = $('.templates .buttonset-section').clone();

                //modify the section for use in the mass menu if needed
                if ($(this).closest('.layout').is('.layout-massaction')) {
                    $newSection.find('.buttonset-section-columns').html('<div class="button-dropzone"><div class="button-dropzone-handle"></div></div>');
                }

                //add the section
                $(this).after($newSection);

                //name edit handling
                $newSection.on('click', '.buttonset-section-name.editable', function () {
                    var $nameEl = $(this);
                    $nameEl.removeClass('editable').addClass('editing').html($('<input type="text" />').val($(this).text())).find('input').focus().select().blur(function () {
                        $nameEl.removeClass('editing').addClass('editable').text($nameEl.find('input').val());
                    });
                });

                //make the section draggable
                $newSection.find('.buttonset-section-header').draggable({
                    opacity: 0.7,
                    helper: 'clone'
                });

                //section drop zone handling
                $newSection.find('.section-dropzone').droppable({
                    accept: function (el) {
                        if (el.is('.actionbutton[data-type="Section"]')) {
                            return true;
                        }
                        else if (el.is('.buttonset-section-header')) {
                            return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
                        }
                    },
                    tolerance: 'touch',
                    hoverClass: 'hovering',
                    drop: ButtonSet_InsertSectionAfterSection
                });

                //button drop zone handling
                $newSection.find('.button-dropzone-handle').droppable({
                    accept: function (el) {
                        if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
                            return true;
                        }
                        else {
                            var layout = $(this).closest('.layout').attr('data-layout');
                            return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
                        }
                    },
                    tolerance: 'touch',
                    hoverClass: 'hovering',
                    drop: ButtonSet_InsertButton,
                    over: ButtonSet_OverButton,
                    out: ButtonSet_OutButton
                });
            }
        }
        function ButtonSet_InsertSectionAfterSection (event, ui)
        {
            //if we're dragging an existing section, just move it.  otherwise, create a new section
            if (ui.draggable.is('.buttonset-section-header'))
            {
                //make sure we aren't dragging this section onto itself
                if ($.contains(ui.draggable.closest('.buttonset-section').get(0), this)) { $(this).removeClass('hovering'); return; }

                //move it
                $(this).closest('.buttonset-section').after(ui.draggable.closest('.buttonset-section'));
            }
            else
            {
                //create new section
                var $newSection = $('.templates .buttonset-section').clone();

                //modify the section for use in the mass menu if needed
                if ($(this).closest('.layout').is('.layout-massaction')) {
                    $newSection.find('.buttonset-section-columns').html('<div class="button-dropzone"><div class="button-dropzone-handle"></div></div>');
                }

                //add the section
                $(this).closest('.buttonset-section').after($newSection);

                //name edit handling
                $newSection.on('click', '.buttonset-section-name.editable', function () {
                    var $nameEl = $(this);
                    $nameEl.removeClass('editable').addClass('editing').html($('<input type="text" />').val($(this).text())).find('input').focus().select().blur(function () {
                        $nameEl.removeClass('editing').addClass('editable').text($nameEl.find('input').val());
                    });
                });

                //make the section draggable
                $newSection.find('.buttonset-section-header').draggable({
                    opacity: 0.7,
                    helper: 'clone'
                });

                //section drop zone handling
                $newSection.find('.section-dropzone').droppable({
                    accept: function (el) {
                        if (el.is('.actionbutton[data-type="Section"]')) {
                            return true;
                        }
                        else if (el.is('.buttonset-section-header')) {
                            return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
                        }
                    },
                    tolerance: 'touch',
                    hoverClass: 'hovering',
                    drop: ButtonSet_InsertSectionAfterSection
                });

                //button drop zone handling
                $newSection.find('.button-dropzone-handle').droppable({
                    accept: function (el) {
                        if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
                            return true;
                        }
                        else {
                            var layout = $(this).closest('.layout').attr('data-layout');
                            return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
                        }
                    },
                    tolerance: 'touch',
                    hoverClass: 'hovering',
                    drop: ButtonSet_InsertButton,
                    over: ButtonSet_OverButton,
                    out: ButtonSet_OutButton
                });
            }
        }
        function ButtonSet_InsertButton (event, ui)
        {
            var $newButton;
            if (ui.draggable.is('.buttonset-button'))
            {
                //make sure we aren't dragging this button onto itself
                if ($.contains(ui.draggable.get(0), this)) { $(this).closest('.button-dropzone').removeClass('hovering'); return; }
                $newButton = ui.draggable;
            }
            else
            {
                $newButton = $('.templates .buttonset-button').clone().prepend(ui.draggable.clone());
                /*
                if (ui.draggable.is('[data-type="Standard Action"], [data-type="Custom Action"]')) {
                    ui.draggable.draggable('disable');
                }
                */

                //update this button for use in the mass layout if needed
                if ($(this).closest('.layout').is('.layout-massaction')) {
                    $newButton.append('<div class="arrow-right"></div>');
                }
            }

            $(this).closest('.button-dropzone').removeClass('hovering').after($newButton).next().find('.button-dropzone-handle').droppable({
                accept: function (el) {
                    if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
                        return true;
                    }
                    else {
                        var layout = $(this).closest('.layout').attr('data-layout');
                        return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
                    }
                },
                tolerance: 'touch',
                hoverClass: 'hovering',
                drop: ButtonSet_InsertButtonAfterButton,
                over: ButtonSet_OverButton,
                out: ButtonSet_OutButton
            });
            $newButton.draggable({
                opacity: 0.7,
                helper: 'clone'
            });
        }
        function ButtonSet_InsertButtonAfterButton (event, ui)
        {
            var $newButton;
            if (ui.draggable.is('.buttonset-button'))
            {
                //make sure we aren't dragging this button onto itself
                if ($.contains(ui.draggable.get(0), this)) { $(this).closest('.button-dropzone').removeClass('hovering'); return; }
                $newButton = ui.draggable;
            }
            else
            {
                $newButton = $('.templates .buttonset-button').clone().prepend(ui.draggable.clone());
                /*
                if (ui.draggable.is('[data-type="Standard Action"], [data-type="Custom Action"]')) {
                    ui.draggable.draggable('disable');
                }
                */

                //update this button for use in the mass layout if needed
                if ($(this).closest('.layout').is('.layout-massaction')) {
                    $newButton.append('<div class="arrow-right"></div>');
                }
            }

            $(this).closest('.button-dropzone').removeClass('hovering').closest('.buttonset-button').after($newButton).next().find('.button-dropzone-handle').droppable({
                accept: function (el) {
                    if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
                        return true;
                    }
                    else {
                        var layout = $(this).closest('.layout').attr('data-layout');
                        return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
                    }
                },
                tolerance: 'touch',
                hoverClass: 'hovering',
                drop: ButtonSet_InsertButtonAfterButton,
                over: ButtonSet_OverButton,
                out: ButtonSet_OutButton
            });
            $newButton.draggable({
                opacity: 0.7,
                helper: 'clone'
            });
        }
        function ButtonSet_OverButton (event, ui)
        {
            $(this).closest('.button-dropzone').addClass('hovering');
        }
        function ButtonSet_OutButton (event, ui)
        {
            $(this).closest('.button-dropzone').removeClass('hovering');
        }
        function ButtonSet_AddHandlers()
        {
            //handle dragging buttons
            $('.layout .buttonset-button').draggable({
                opacity: 0.7,
                helper: 'clone'
            });

            //handle dragging sections
            $('.layout .buttonset-section-header').draggable({
                opacity: 0.7,
                helper: 'clone'
            });

            //handle editing section names
            $('.layout .buttonset-section-name.editable').click(function () {
                var $nameEl = $(this);
                $nameEl.removeClass('editable').addClass('editing').html($('<input type="text" />').val($(this).text())).find('input').focus().select().blur(function () {
                    $nameEl.removeClass('editing').addClass('editable').text($nameEl.find('input').val());
                });
            });

            //handle dropping sections
            $('.layout > .section-dropzone').droppable({
                accept: function (el) {
                    if (el.is('.actionbutton[data-type="Section"]')) {
                        return true;
                    }
                    else if (el.is('.buttonset-section-header')) {
                        return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
                    }
                },
                tolerance: 'touch',
                hoverClass: 'hovering',
                drop: ButtonSet_InsertSection
            });
            $('.layout .buttonset-section .section-dropzone').droppable({
                accept: function (el) {
                    if (el.is('.actionbutton[data-type="Section"]')) {
                        return true;
                    }
                    else if (el.is('.buttonset-section-header')) {
                        return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
                    }
                },
                tolerance: 'touch',
                hoverClass: 'hovering',
                drop: ButtonSet_InsertSectionAfterSection
            });

            //handle dropping buttons
            $('.layout-marker .buttoncolumn > .button-dropzone .button-dropzone-handle, .layout-massaction .buttonset-section-columns > .button-dropzone .button-dropzone-handle').droppable({
                accept: function (el) {
                    if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
                        return true;
                    }
                    else {
                        var layout = $(this).closest('.layout').attr('data-layout');
                        return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
                    }
                },
                tolerance: 'touch',
                hoverClass: 'hovering',
                drop: ButtonSet_InsertButton,
                over: ButtonSet_OverButton,
                out: ButtonSet_OutButton
            });
            $('.layout-marker .buttoncolumn .buttonset-button .button-dropzone-handle, .layout-massaction .buttonset-button .button-dropzone-handle').droppable({
                accept: function (el) {
                    if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
                        return true;
                    }
                    else {
                        var layout = $(this).closest('.layout').attr('data-layout');
                        return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
                    }
                },
                tolerance: 'touch',
                hoverClass: 'hovering',
                drop: ButtonSet_InsertButtonAfterButton,
                over: ButtonSet_OverButton,
                out: ButtonSet_OutButton
            });
        }
        function ButtonSet_BuildLayout ($layout)
        {
            //loop over each section in the layout
            var layout = [];
            $layout.find('.buttonset-section').each(function () {

                //this will be different depending on the type of layout
                if ($layout.is('.layout-massaction'))
                {
                    //start building this section
                    var section = { Label: $(this).find('.buttonset-section-name').text(), Buttons: [] };
                    layout.push(section);

                    //loop over each button
                    $(this).find('.buttonset-section-columns .buttonset-button').each(function () {

                        section.Buttons.push({
                            Label: $(this).find('.actionbutton').attr('data-action'),
                            Type: $(this).find('.actionbutton').attr('data-type')
                        });

                    });
                }
                else
                {
                    //start building this section
                    var section = { Label: $(this).find('.buttonset-section-name').text(), Columns: [] };
                    layout.push(section);

                    //loop over each button column
                    $(this).find('.buttonset-section-columns .buttoncolumn').each(function () {

                        //start building this column
                        var column = [];
                        section.Columns.push(column);

                        //loop over each button
                        $(this).find('.buttonset-button').each(function () {

                            //add this button to the column
                            column.push({
                                Label: $(this).find('.actionbutton').attr('data-action'),
                                Type: $(this).find('.actionbutton').attr('data-type')
                            });

                        });

                    });
                }

            });

            return layout;
        }
        function ButtonSet_Save (options)
        {
            //show loading
            showLoading($('#TopTabs-ButtonSets'), 'Saving...');

            //default options
            options = options || {};

            //start building this button set
            var buttonSet = {
                Name                      : $('#TopTabs-ButtonSets .basicinfo-name').val(),
                TooltipLayout__c          : JSON.stringify(ButtonSet_BuildLayout($('.layout-tooltip'))),
                MyPositionLayout__c       : JSON.stringify(ButtonSet_BuildLayout($('.layout-myposition'))),
                POILayout__c              : JSON.stringify(ButtonSet_BuildLayout($('.layout-poi'))),
                MassActionLayout__c       : JSON.stringify(ButtonSet_BuildLayout($('.layout-massaction')))
            };

            //add the id if this is an existing set
            if (!options.isSaveAs && $('.buttonsets-selectedbuttonset').val() != 'New') {
                buttonSet.Id = $('.buttonsets-selectedbuttonset').val();
            }

            //send request to save this button set
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'save_buttonset',
                serializedButtonSet: JSON.stringify(addNamespace('{!namespace}', buttonSet))
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if (response.success)
                    {
                        showSuccess($('#TopTabs-ButtonSets'), 'Saved');

                        if (!options.isSaveAs && $('.buttonsets-selectedbuttonset').val() != 'New')
                        {
                            //update the list of button sets with this new information
                            $('.buttonsets-selectedbuttonset option:selected').text(response.result.Name);
                            $('.buttonsets-selectedbuttonset').next().find('input').val(response.result.Name);
                            $('#permissions-grid select[data-field="ButtonSetId"] option[value="'+response.result.Id+'"]').text(response.result.Name);
                        }
                        else
                        {
                            //this is a new button set.  add it to the list of existing sets and select it
                            $('.buttonsets-selectedbuttonset').append($('<option />').attr('value', response.result.Id).text(response.result.Name)).val(response.result.Id).next().find('input').val(response.result.Name);
                            $('#permissions-grid select[data-field="ButtonSetId"]').append($('<option />').attr('value', response.result.Id).text(response.result.Name));
                            $('.buttonset-saveasbtn, .buttonset-deletebtn').show();
                        }
                    }
                    else
                    {
                        var errMsg = respose.details || 'Unable to save';
                        showError($('#TopTabs-ButtonSets'), errMsg);
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }
        function ButtonSet_Delete()
        {
            //show loading
            showLoading($('#TopTabs-ButtonSets'), 'Deleting...');

            //send request to save this button set
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'delete_buttonset',
                id: $('.buttonsets-selectedbuttonset').val()
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if (response.success)
                    {
                        //show success
                        showSuccess($('#TopTabs-ButtonSets'), 'Deleted');

                        //remove this button set from the permissions grid
                        $('#permissions-grid select[data-field="ButtonSetId"] option[value="'+$('.buttonsets-selectedbuttonset').val()+'"]').remove();

                        $('.buttonsets-selectedbuttonset option:selected').remove();
                        $('.buttonsets-selectedbuttonset').val('New').change().next().find('input').val('--Create New--');
                    }
                    else
                    {
                        showError($('#TopTabs-ButtonSets'), 'Unable to delete');
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }

        /****************************
        *   Custom Action Handlers
        ****************************/

        function CustomAction_GetExisting()
        {
            $('#TopTabs-CustomActions .customactions-selectedaction').html('<option value="New">--Create New--</option>');

            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'get_customactions'
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    $.each(response.results, function (index, action) {
                        $('#TopTabs-CustomActions .customactions-selectedaction').append($('<option />').attr('value', action.Id).text(action.Name));
                    });
                    $('#TopTabs-CustomActions .customactions-selectedaction').combobox();
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }
        function CustomAction_Save(options)
        {
            if($('#TopTabs-CustomActions .includeRecords').is(':checked') && $('#TopTabs-CustomActions .parameterName').val() == '') {
                alert('Please enter a parameter name if you wish to include records for this button.');
                return;
            }

            //show loading
            showLoading($('#TopTabs-CustomActions'), 'Saving...');

            //default options
            options = options || {};

            var jsonOptions = JSON.stringify({
                method : $('#TopTabs-CustomActions .type-action').val(),
                addRecords : $('#TopTabs-CustomActions .includeRecords').is(':checked'),
                paramName : $('#TopTabs-CustomActions .includeRecords').is(':checked') ? $('#TopTabs-CustomActions .parameterName').val() : ''
            });

            //build request
            var customAction = {
                Name: $('#TopTabs-CustomActions .basicinfo-name').val(),
                Type__c: 'Custom Action',
                Modes__c: $('#TopTabs-CustomActions input.mode[type="checkbox"]:checked').map(function () { return $(this).attr('data-value'); }).get().join(';'),
                Layouts__c: 'Tooltip;MyPosition;POI',
                Requirements__c: $('#TopTabs-CustomActions input.requirement[type="checkbox"]:checked').map(function () { return $(this).attr('data-value'); }).get().join(';'),
                Action__c: $('#TopTabs-CustomActions .routine-action').val(),
                ActionValue__c: $('#TopTabs-CustomActions .routine-value').val(),
                Options__c : jsonOptions
            };

            //add the id if this is an existing action
            if (!options.isSaveAs && $('#TopTabs-CustomActions .customactions-selectedaction').val() != 'New') {
                customAction.Id = $('#TopTabs-CustomActions .customactions-selectedaction').val();
            }

            //send request to save
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'save_customaction',
                serializedCustomAction: JSON.stringify(addNamespace('{!namespace}', customAction))
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if (response.success) {
                        showSuccess($('#TopTabs-CustomActions'), 'Saved');
                        MAActionFramework.refresh();

                        if (!options.isSaveAs && $('#TopTabs-CustomActions .customactions-selectedaction').val() != 'New')
                        {
                            //update the list of custom actions with this new information
                            $('#TopTabs-CustomActions .customactions-selectedaction option:selected').text(response.result.Name);
                            $('#TopTabs-CustomActions .customactions-selectedaction').next().find('input').val(response.result.Name);
                        }
                        else
                        {
                            //this is a new custom action.  add it to the list of existing actions and select it
                            $('#TopTabs-CustomActions .customactions-selectedaction').append($('<option />').attr('value', response.result.Id).text(response.result.Name)).val(response.result.Id).next().find('input').val(response.result.Name);
                            $('.customaction-saveasbtn, .customaction-deletebtn').show();
                        }
                    }
                    else {
                        var errMsg = respose.details || 'Unable to save';
                        showError($('#TopTabs-CustomActions'), errMsg);
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }
        function CustomAction_Delete()
        {
            //show loading
            showLoading($('#TopTabs-CustomActions'), 'Deleting...');

            //send request to save this custom action
            var processData = {
                ajaxResource : 'MAAdminAJAXResources',
                action : 'delete_customaction',
                serializedCustomAction: JSON.stringify(addNamespace('{!namespace}', customAction))
            };

            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if (response.success)
                    {
                        showSuccess($('#TopTabs-CustomActions'), 'Deleted');
                        MAActionFramework.refresh();

                        $('#TopTabs-CustomActions .customactions-selectedaction option:selected').remove();
                        $('#TopTabs-CustomActions .customactions-selectedaction').val('New').change().next().find('input').val('--Create New--');
                    }
                    else
                    {
                        showError($('#TopTabs-CustomActions'), 'Unable to delete');
                    }
                },{buffer:false,escape:false, timeout: 120000 }
            );
        }

        /************************************
        *   Settings Handlers
        ************************************/
        function DebugLogs_Clear()
        {
            if (confirm('Are you sure you want to clear debug logs?')) {
                $('#ClearDebugLogs').hide().next().show();
                var processData = {
                    ajaxResource : 'MAAdminAJAXResources',
                    action : 'clear_debuglogs'
                };

                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        $('#ClearDebugLogs').show().next().hide();
                    },{buffer:false,escape:false, timeout: 120000 }
                );
            }
        }

        function resetPermissionSet() {
            $('#newPermissionSetName').val('');
            $('#newPermissionSetDescription').val('');
            $('#newPermissionSet-max-query').val('50000');
            $('#newPermissionSet-max-export').val('5000');
            $('#newPermissionSet-button-set').val($('#newPermissionSet-button-set option:first')).change();
            $('#newPermissionSetModal input[type="checkbox"]').prop('checked',false);
            $('#newPermissionSet-show-weather').prop('checked', true);
        }

        //notification helpers
        function showNotification(template, title, message)
        {
            $('#notifications').notify('create', template, { title: title, text: message } );
        }
        function success(title, message) {
            showNotification('notifications-success', title, message);
        }
        function error(title, message) {
            showNotification('notifications-error', title, message);
        }

        //tab message helpers
        function showTabLoading($tab, msg, expirationTimeout)
        {
            $tab.find('.loadmask, .loadmask-status').remove();
            $tab.append("<div class='loadmask'></div><div class='loadmask-status'><div class='status'><img src='{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}' /><span>"+msg+"</span></div></div>")
            return $tab;
        }
        function showTabSuccess($tab, msg, expirationTimeout)
        {
            $tab.find('.loadmask, .loadmask-status').remove();
            $tab.append("<div class='loadmask'></div><div class='loadmask-status'><div class='status' style='border: 1px solid green;'><img src='{!URLFOR($Resource.MapAnything, 'images/check-22.png')}' /><span>"+msg+"</span></div></div>")
            if (expirationTimeout != false)
            {
                setTimeout(function () {
                    $tab.find('.loadmask, .loadmask-status').remove();
                }, (expirationTimeout || 1500));
            }
            return $tab;
        }
        function showTabError($tab, msg, expirationTimeout)
        {
            $tab.find('.loadmask, .loadmask-status').remove();
            $tab.append("<div class='loadmask'></div><div class='loadmask-status'><div class='status' style='border: 1px solid red;'><img src='{!URLFOR($Resource.MapAnything, 'images/x-22.png')}' /><span>"+msg+"</span></div></div>")
            if (expirationTimeout != false)
            {
                setTimeout(function () {
                    $tab.find('.loadmask, .loadmask-status').remove();
                }, (expirationTimeout || 1500));
            }
            return $tab;
        }
        function hideTabMessage($tab)
        {
            $tab.find('.loadmask, .loadmask-status').remove();
            return $tab;
        }
    </script>

    <div class="flex-column full-height">
        <!-- Header -->
        <div class="slds-scope">
            <div class="slds-page-header">
              <div class="slds-grid">
                <div class="slds-col slds-has-flexi-truncate">
                  <div class="slds-media slds-no-space slds-grow">
                    <div class="slds-media__figure ma-slds-media__figure">
                      <span class="slds-icon ma-icon ma-icon-mapanything"></span>
                    </div>
                    <div class="slds-media__body">
                      <p class="slds-text-title--caps slds-line-height--reset">MapAnything</p>
                      <h1 class="slds-page-header__title slds-m-right--small slds-align-middle slds-truncate" title="this should match the Record Title">Configuration</h1>
                    </div>
                  </div>
                </div>
            </div>
            </div>
        </div>
        <div class="flex-row flex-grow-1">
            <div class="flex-shrink-0">
                <!--navigation-->
                <c:MAAdminHeader />
            </div>
            <div class="flex-grow-1">
                <!-- Main Content -->
                <div id="adminsettings" style="padding:16px 16px 16px 10px;">

                    <!-- Tab Panel -->
                    <div class="TopTabs">

                        <!-- Tab Handles -->
                        <ul>
                            <li><a href="#TopTabs-General">{!$Label.MASettings_General}</a></li>
                            <li><a href="#TopTabs-Permissions">{!$Label.MA_Permissions}</a></li>
                            <li><a href="#TopTabs-ButtonSets">{!$Label.MA_Button_Sets}</a></li>
                            <li><a href="#TopTabs-CustomActions">{!$Label.MA_Custom_Actions}</a></li>
                            <li><a href="#TopTabs-ActivitySettings">{!$Label.MA_Activity_Settings}</a></li>
                        </ul>

                        <!-- General Tab -->
                        <div id="TopTabs-General">

                            <!-- Licensing -->
                            <div class='gray box'>
                                <div class='section-header'>Licensing</div>
                                <table class='form'>
                                    <tr>
                                        <td>API Key</td>
                                        <td><input type='text' class='apikey' style='width: 300px;'></input></td>
                                    </tr>
                                    <tr>
                                        <td>Live API Key</td>
                                        <td><input type='text' class='liveapikey' style='width: 300px;'></input></td>
                                    </tr>
                                </table>
                            </div>

                            <!-- Enabled Features -->
                            <div class='gray box'>
                                <div class='section-header'>{!$Label.MA_Enabled_Features}</div>
                                <table class='form'>
                                    <tr>
                                        <td><input type='checkbox' class='feature-folderpermissions'></input></td>
                                        <td>{!$Label.MA_Folder_Permissions}</td>
                                    </tr>
                                    <tr>
                                        <td><input type='checkbox' class='feature-showprofilewithuser'></input></td>
                                        <td>Display Profile Name with User Lookup (On Tooltips)</td>
                                    </tr>
                                    <tr>
                                        <td><input type='checkbox' class='feature-visibleareamobile'></input></td>
                                        <td>Visible Area Enabled on Mobile by Default</td>
                                    </tr>
                                    <tr style='display: none;'>
                                        <td><input type='checkbox' class='feature-territorymanagement'></input></td>
                                        <td>{!$Label.MA_Territory_Management}</td>
                                    </tr>
                                    <!----
                                    <tr>
                                        <td><input type='checkbox' class='feature-socialintegration' /></td>
                                        <td>{!$Label.MA_Social_Integration}</td>
                                    </tr>
                                    --->
                                    <tr style='display: none;'>
                                        <td><input type='checkbox' class='feature-routingrolesecurity'></input></td>
                                        <td>{!$Label.MA_Routing_Role_Security}</td>
                                    </tr>
                                    <tr>
                                        <td><input type='checkbox' class='feature-autocheckout'></input></td>
                                        <td>Auto Check Out</td>
                                    </tr>
                                    <tr>
                                        <td><input type='checkbox' class='feature-debuglogs'></input></td>
                                        <td>{!$Label.MA_Debug_Logs} <span id='ClearDebugLogs' style='cursor: pointer; font-size: 8px; color: #2265BB;' onclick='DebugLogs_Clear();'>{!$Label.MA_Clear}</span><img src="{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}" style='height: 10px; display: none;' /></td>
                                    </tr>
                                </table>
                            </div>


                            <!-- Buttons -->
                            <div class='buttons'>
                                <input type='button' class='savebtn MAbutton button-blue' value='Save'></input>
                                <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
                            </div>
                          </div>

                         <!-- Permissions Tab -->

                       <div id="TopTabs-Permissions">
                           <!-- Permissions Grid Options -->
                           <apex:outputPanel layout="none" rendered="true">
                               <table style='width: 100%;'>
                                   <tr>
                                       <td>
                                           <!-- Permissions Grid Filters -->
                                           <table id="permissions-filters">
                                               <tr>
                                                   <td>{!$Label.MA_Name}</td>
												   <td><select onchange="search();" id="filterCriteriaName"><option value="contains">Contains</option><option value="equals">Equals</option></select></td>
                                                   <td><input type='text' id='permissionsfilter-name'></input></td>

                                                   <td style="font-weight: bold;vertical-align: middle;">{!$Label.MA_Profile}</td>
												   <td><select onchange="search();" id="filterCriteriaProfile"><option value="contains">Contains</option><option value="equals">Equals</option></select></td>
                                                   <td><input type='text' id='permissionsfilter-profile' class='autocomplete'></input></td>

                                                   <td><input type='checkbox' id='permissionsfilter-onlyMAUsers' checked="checked"/> Only Show MapAnything<sup>TM</sup> Licensed Users</td>
                                                   <td></td>

                                                   <td><input type='checkbox' id='permissionsfilter-includeinactive'></input> {!$Label.MA_Include_Inactive_Users}</td>
                                                   <td></td>

                                                   <td><input type='checkbox' id='permissionsfilter-includeportal'></input> {!$Label.MA_Include_Portal_Users}</td>
                                                   <td></td>

                                                   <td><input type='checkbox' id='permissionsfilter-includechatter'></input> {!$Label.MA_Include_Chatter_Users}</td>
                                                   <td></td>
                                               </tr>
                                           </table>
                                       </td>
                                       <td>
                                           <!-- Permissions Grid Paging -->
                                           <table style='float: right;'>
                                               <tr>
                                                   <td id='permissions-pageinfo'></td>
                                               </tr>
                                               <tr>
                                                   <td style='text-align: right; verticle-align: middle;'>{!$Label.MA_Go_to_page} <select id='permissions-page'></select></td>
                                               </tr>
                                           </table>
                                       </td>
                                   </tr>

                               </table>

                            	<!--Permissions Grid -->
                            	<div id="permissions-grid-wrapper">
                            		<div id="permissions-grid-loadmask"></div>
                            		<div id="permissions-grid-status">
                            			<div class='status'>
                            				<img src="{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}" />
                            				<span></span>
                            			</div>
                            		</div>
                            		<table id="permissions-grid">
                            			<tr>
                            				<th style='display: none;'><span class='link'>All</span>|<span class='link'>None</span></th>
                            				<th>{!$Label.MA_Name}</th>
                            				<th>{!$Label.MA_Profile}</th>
                            				<th data-field='EditMapAnythingOrgWirdeQueries__c' data-type='boolean'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Folder_Admin}</td>
                            							<td><span class='link massaction'>All</span> | <span class='link massaction'>None</span></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<th data-field='ShowPersonalFolders' data-type='setting'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Show_Personal_Folders}</td>
                            							<td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<th data-field='AllowMapAnythingExports__c' data-type='boolean'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Allow_Exports}</td>
                            							<td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<th data-field='EditableTooltips' data-type='setting'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Editable_Tooltips}</td>
                            							<td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<th data-field='ShowWeather' data-type='setting'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Show_Weather}</td>
                            							<td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<!--<th data-field='OldFolders' data-type='setting'><table><tr><td>{!$Label.MA_Use_New_Folders}</td><td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td></tr></table></th>-->
                            				<th data-field='HidePersonalFolder' data-type='setting'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Hide_Personal_Folder}</td>
                            							<td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<th data-field='MAVersion__c' data-type='picklist'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Version}</td>
                            							<td>
                            								<select class='massaction'>
                            									<option value=''>--Select--</option>
                            									<option value='Previous'>Previous</option>
                            									<option value='Current'>Current</option>
                            									<option value='Beta'>Beta</option>
                            									<option value='IE'>Internet Explorer</option>
                            								</select>
                            							</td>
                            						</tr>
                            					</table>
                            				</th>
                            				<th data-field='MAMaxQuerySize__c' data-type='number'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Max_Query_Size}</td>
                            							<td><input type='text' style='width:35px;font-size:10px;'></input></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<th data-field='MAMaxExportSize__c' data-type='number'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Max_Export_Size}</td>
                            							<td><input type='text' style='width:35px;font-size:10px;'></input></td>
                            						</tr>
                            					</table>
                            				</th>
                            				<!--<th data-field='MapAnythingSettings__c' data-type='setting'><table><tr><td>{!$Label.MA_Map_Lock}</td><td><span class='link massaction editsettings' data-field='MapLockSettings'>Edit</span></td></tr></table></th>-->
                            				<th data-field='MapAnythingSettings__c' data-type='setting'>
                            					<table>
                            						<tr>
                            							<td>{!$Label.MA_Button_Set}</td>
                            							<td>
                            								<select class='massaction setting' data-field='ButtonSetId'>
                            									<option value='--'>--Select--</option>
                            								</select>
                            							</td>
                            						</tr>
                            					</table>
                            				</th>
                            				<!--- <th data-field='MapAnythingSettings__c' data-type='setting'><table><tr><td>Default Country</td><td><select class='massaction setting' data-field='DefaultCountry'><option value='--'>--Select--</option></select></td></tr></table></th> --->
                            			</tr>
                            		</table>
                            	</div>

                            	<script>
                            	$(function() {
                                    //get users for permissions grid
                                    load();
                            	});

                            	</script>
                        	</apex:outputPanel>

                        	<apex:outputPanel layout="none" rendered="false">
                            	<!-- Eric Permission Set Tab -->
                            	<div class="slds-scope">
                            		<!--<apex:outputPanel layout="block" rendered="{!IF(settingsGroupEnabled=='true', true, false)}">-->
                            		<div class="slds-tabs_default">
                            			<ul class="slds-tabs_default__nav" role="tablist">
                            				<li class="slds-tabs_default__item slds-is-active" title="Item One" role="presentation">
                            					<a class="slds-tabs_default__link" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-permission-sets" id="tab-default-1__item">Settings Groups</a>
                            				</li>
                            				<li class="slds-tabs_default__item" title="Item Two" role="presentation">
                            					<a class="slds-tabs_default__link" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-assignment" id="tab-default-2__item">Assignment</a>
                            				</li>
                            			</ul>
                            			<div id="tab-permission-sets" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-permission-sets__item">
                            				<div class="slds-p-around--small">
                            					<div class="slds-grid">
                            						<button id="addNewPermissionSet" class="slds-button slds-button_brand slds-m-right_small">
                            						<span class="slds-button__icon slds-button__icon_left ma-icon ma-icon-add"></span>Add New
                            						</button>
                            						<div class="slds-form-element">
                            							<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--left-right">
                            								<span class="slds-icon slds-input__icon slds-input__icon_left slds-icon-text-default ma-icon ma-icon-search"></span>
                            								<!--<input type="text" id="newPermissionsFilter-settings-group" class="slds-input js-clearable-input" placeholder="Search settings groups..." />-->
                            								<input type="text" id="newPermissionsFilter-settings-group" class="autcomplete slds-input js-clearable-input" placeholder="Search settings groups..." />
                            								<input id="newPermissionsFilter-settings-name" type="hidden" />
                            								<button onclick="populateRecentSettingsGroups();" class="slds-input__icon slds-input__icon--right slds-button slds-button--icon js-clear-this-input-value" style="display:none;">
                            								<span class="slds-button__icon ma-icon ma-icon-clear"></span>
                            								</button>
                            							</div>
                            						</div>
                            					</div>
                            					<table id="permissionSetTable" class="slds-table slds-table_bordered slds-table_cell-buffer slds-m-top_small slds-table--rounded" role="grid">
                            						<thead>
                            							<tr>
                            								<th class="slds-text-title_caps" scope="col">
                            									<span class="slds-truncate" title="Name">Name</span>
                            								</th>
                            								<th class="slds-text-title_caps" scope="col">
                            									<span class="slds-truncate" title="Description">Description</span>
                            								</th>
                            								<th scope="col">
                            								</th>
                            							</tr>
                            						</thead>
                            						<tbody>

                            						</tbody>
                            					</table>
                            				</div>
                            			</div>
                            			<div id="tab-assignment" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-assignment__item">
                            				<div class="slds-p-around--small">
                            					<div class="flex-row align-items-center">
                            						<div class="slds-p-right--small">
                            							<div class="slds-form-element slds-m-right_small">
                            								<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--left-right">
                            									<span class="slds-icon slds-input__icon slds-input__icon_left slds-icon-text-default ma-icon ma-icon-search"></span>
                            									<input type="text" id="newPermissionsFilter-assign-settings" class="slds-input js-clearable-input" placeholder="Search profiles and users..." style="min-width:230px;" />
                            									<input id="newPermissionsFilter-assign-settingsName" type="hidden" />
                            									<button class="slds-input__icon slds-input__icon--right slds-button slds-button--icon js-clear-this-input-value" style="display:none;">
                            									<span class="slds-button__icon ma-icon ma-icon-clear"></span>
                            									</button>
                            								</div>
                            							</div>
                            						</div>
                            						<div class="slds-p-right--small">
                            							<div class="slds-form-element">
                            								<div class="slds-form-element__control">
                            									<span class="slds-checkbox">
                            									<input type="checkbox" name="options" id="assigmentTableProfilesCheckbox" checked='checked' />
                            									<label class="slds-checkbox__label" for="assigmentTableProfilesCheckbox">
                            									<span class="slds-checkbox_faux"></span>
                            									<span class="slds-form-element__label">Profiles</span>
                            									</label>
                            									</span>
                            								</div>
                            							</div>
                            						</div>
                            						<div class="slds-p-right--small">
                            							<div class="slds-form-element">
                            								<div class="slds-form-element__control">
                            									<span class="slds-checkbox">
                            									<input type="checkbox" name="options" id="assigmentTableUsersCheckbox" checked='checked' />
                            									<label class="slds-checkbox__label" for="assigmentTableUsersCheckbox">
                            									<span class="slds-checkbox_faux"></span>
                            									<span class="slds-form-element__label">Users</span>
                            									</label>
                            									</span>
                            								</div>
                            							</div>
                            						</div>
                            					</div>
                            					<div>
                            						<table id="assignmentPermissionTable" class="slds-table slds-table_bordered slds-table_cell-buffer slds-m-top_small slds-table--rounded" role="grid">
                            							<thead>
                            								<tr class="slds-line-height_reset">
                            									<th class="slds-text-title_caps" scope="col">Assignment</th>
                            									<th class="slds-text-title_caps" scope="col">Type</th>
                            									<th class="slds-text-title_caps" scope="col">MapAnything Settings Group</th>
                            									<th class="slds-text-title_caps" scope="col">Salesforce Profile</th>
                            								</tr>
                            							</thead>
                            							<tbody>

                            							</tbody>
                            						</table>
                            					</div>
                            				</div>
                            			</div>
                            		</div>
                            		<!--</apex:outputPanel>-->
                            		<!-- Delete Permission Set Modal-->
                            		<div class="slds-modal slds-modal--xx-small" id="deletePermissionSetModal" role="dialog" tabindex="-1">
                            			<div class="slds-modal__container">
                            				<div class="slds-modal__header slds-modal__header--empty">
                            					<button class="slds-button slds-modal__close slds-button--icon-inverse js-close-this-slds-modal" title="Close">
                            					<span class="slds-button__icon slds-button__icon--large ma-icon ma-icon-close"></span>
                            					<span class="slds-assistive-text">Close</span>
                            					</button>
                            				</div>
                            				<div class="slds-modal__content slds-p-around--x-large">
                            					<h2 class="slds-text-heading--medium">Delete this Settings Group?</h2>
                            				</div>
                            				<div class="slds-modal__footer">
                            					<button class="slds-button slds-button--neutral js-close-this-slds-modal">Cancel</button>
                            					<button class="slds-button slds-button--brand js-close-this-slds-modal" id="delete-settings-group">Delete</button>
                            				</div>
                            			</div>
                            		</div>
                            		<div class="slds-modal slds-modal--xx-small" id="deleteAssignmentSetModal" role="dialog" tabindex="-1">
                            			<div class="slds-modal__container">
                            				<div class="slds-modal__header slds-modal__header--empty">
                            					<button class="slds-button slds-modal__close slds-button--icon-inverse js-close-this-slds-modal" title="Close">
                            					<span class="slds-button__icon slds-button__icon--large ma-icon ma-icon-close"></span>
                            					<span class="slds-assistive-text">Close</span>
                            					</button>
                            				</div>
                            				<div class="slds-modal__content slds-p-around--x-large">
                            					<h2 class="slds-text-heading--medium">Delete this Settings Group from Assignment?</h2>
                            				</div>
                            				<div class="slds-modal__footer">
                            					<button class="slds-button slds-button--neutral js-close-this-slds-modal">Cancel</button>
                            					<button class="slds-button slds-button--brand js-close-this-slds-modal" id="delete-assignment-group">Delete</button>
                            				</div>
                            			</div>
                            		</div>
                            		<!-- Add New Permission Set Modal-->
                            		<div class="slds-modal slds-modal--xxl" id="newPermissionSetModal">
                            			<div class="slds-modal__container">
                            				<div class="slds-modal__header">
                            					<button class="slds-button slds-modal__close slds-button--icon-inverse modal-close-tight-top js-close-this-slds-modal" title="Close">
                            					<span class="slds-button__icon slds-button__icon--large ma-icon ma-icon-close" aria-hidden="true"></span>
                            					<span class="slds-assistive-text">Close</span>
                            					</button>
                            					<h2 class="slds-text-heading--medium">Settings Group Builder</h2>
                            				</div>
                            				<!-- Modal Content -->
                            				<div class="slds-modal__content flex-column full-height">
                            					<div class="flex-grow-1 flex-row slds-is-relative" style="height:100%;">
                            						<div class="flex-grow-1 slds-is-relative width-33percent slds-border_right">
                            							<div class="slds-p-around--large">
                            								<div class="slds-text-heading_small slds-m-bottom_medium">Details</div>
                            								<div class="slds-form slds-form--stacked">
                            									<div class="slds-form-element">
                            										<label class="slds-form-element__label" id="permissionSetName" for="newPermissionSetName">
                            										<abbr class="slds-required" title="required">*</abbr> Settings Group Name</label>
                            										<div class="slds-form-element__control">
                            											<input type="text" required="" id="newPermissionSetName" class="slds-input" placeholder="ex. Enterprise Sales Reps"/>
                            											<!--<apex:inputField value="{!maSettingsGroup.Name}" id="newPermissionSetName" class="slds-input" />-->
                            										</div>
                            									</div>
                            									<div class="slds-form-element">
                            										<label class="slds-form-element__label" for="input-id-02">
                            										<abbr class="slds-required" title="required">*</abbr> Description</label>
                            										<div class="slds-form-element__control">
                            											<textarea id="newPermissionSetDescription" class="slds-textarea" placeholder="ex. For remote sales reps"></textarea>
                            											<!--<apex:inputField value="{!maSettingsGroup.Description__c}" id="newPermissionSetName" class="slds-input" />-->
                            										</div>
                            									</div>
                            								</div>
                            							</div>
                            						</div>
                            						<div class="flex-grow-1 width-66percent">
                            							<div class="flex-column">
                            								<div class="slds-p-horizontal_large slds-p-top_large">
                            									<div class="slds-text-heading_small">Settings</div>
                            								</div>
                            								<div class="flex-row flex-grow-1">
                            									<div class="flex-grow-1 width-50percent">
                            										<div class="slds-p-horizontal_large slds-p-top_medium slds-p-bottom_large">
                            											<div class="flex-grow-1">
                            												<div class="flex-row">
                            													<div style="width:100%;">
                            														<div class="slds-form slds-form_stacked">
                            															<div class="slds-form-element">
                            																<label class="slds-form-element__label" for="newPermissionSet-max-query">Max Query Size</label>
                            																<div class="slds-form-element__control">
                            																	<input type="text" id="newPermissionSet-max-query" class="slds-input" placeholder="Max query size" value="50000" max="50000"/>
                            																	<!--<apex:inputField value="{!maSettingsGroup.MaxQuerySize__c}" class="slds-input"></apex:inputField>-->
                            																</div>
                            															</div>
                            															<div class="slds-form-element">
                            																<label class="slds-form-element__label" for="newPermissionSet-max-export">Max Export Size</label>
                            																<div class="slds-form-element__control">
                            																	<input type="text" id="newPermissionSet-max-export" class="slds-input" placeholder="Max export size" value="5000" max="5000"/>
                            																</div>
                            															</div>
                            															<div class="slds-form-element select2-form-element">
                            																<label class="slds-form-element__label" for="">Button Set</label>

                            																<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
                            																	<div class="slds-select_container">
                            																		<select class="slds-select select2-input" id="newPermissionSet-button-set">
                            																			<option value="--" selected="selected">-- Select --</option>
                            																		</select>
                            																	</div>
                            																</div>
                            															</div>
                            														</div>
                            													</div>
                            												</div>
                            											</div>
                            										</div>
                            									</div>
                            									<div class="flex-grow-1 width-50percent">
                            										<div class="slds-p-horizontal_large slds-p-top_medium slds-p-bottom_large">
                            											<div class="slds-form slds-form_stacked">
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="newPermissionSet-folder-admin" />
                            														<label class="slds-checkbox__label" for="newPermissionSet-folder-admin">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Folder Admin</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="newPermissionSet-user-folders" />
                            														<label class="slds-checkbox__label" for="newPermissionSet-user-folders">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Show User Folders</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="newPermissionSet-allow-exports" />
                            														<label class="slds-checkbox__label" for="newPermissionSet-allow-exports">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Allow Exports</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="newPermissionSet-editable-tooltips" />
                            														<label class="slds-checkbox__label" for="newPermissionSet-editable-tooltips">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Editable Tooltips</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="newPermissionSet-show-weather" checked="checked" />
                            														<label class="slds-checkbox__label" for="newPermissionSet-show-weather">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Show Weather</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="newPermissionSet-hide-personal-folder" />
                            														<label class="slds-checkbox__label" for="newPermissionSet-hide-personal-folder">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Hide Personal Folder</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            											</div>
                            										</div>
                            									</div>
                            								</div>
                            							</div>
                            						</div>
                            					</div>
                            				</div>
                            				<div class="slds-modal__footer">
                            					<button class="slds-button slds-button--neutral js-close-this-slds-modal">Cancel</button>
                            					<button class="slds-button slds-button--brand" onclick="createSettingsGroup();">Save</button>
                            					<!--<apex:commandButton action="save" reRender="" value="save"/>-->
                            				</div>
                            			</div>
                            		</div>
                            		<div class="slds-modal slds-modal--xxl" id="updatePermissionSetModal">
                            			<div class="slds-modal__container">
                            				<div class="slds-modal__header">
                            					<button class="slds-button slds-modal__close slds-button--icon-inverse modal-close-tight-top js-close-this-slds-modal" title="Close">
                            					<span class="slds-button__icon slds-button__icon--large ma-icon ma-icon-close" aria-hidden="true"></span>
                            					<span class="slds-assistive-text">Close</span>
                            					</button>
                            					<h2 class="slds-text-heading--medium">Settings Group Builder</h2>
                            				</div>
                            				<!-- Modal Content -->
                            				<div class="slds-modal__content flex-column full-height">
                            					<div class="flex-grow-1 flex-row slds-is-relative" style="height:100%;">
                            						<div class="flex-grow-1 slds-is-relative width-33percent slds-border_right">
                            							<div class="slds-p-around--large">
                            								<div class="slds-text-heading_small slds-m-bottom_medium">Details</div>
                            								<div class="slds-form slds-form--stacked">
                            									<div class="slds-form-element">
                            										<label class="slds-form-element__label" id="updatePermissionSetName" for="updatePermissionSetName">
                            										<abbr class="slds-required" title="required">*</abbr> Settings Group Name</label>
                            										<div class="slds-form-element__control">
                            											<input type="text" required="" id="updatePermissionSetName" class="slds-input" placeholder="ex. Enterprise Sales Reps" disabled="disabled" />
                            											<!--<apex:inputField value="{!maSettingsGroup.Name}" id="newPermissionSetName" class="slds-input" />-->
                            										</div>
                            									</div>
                            									<div class="slds-form-element">
                            										<label class="slds-form-element__label" for="input-id-02">
                            										<abbr class="slds-required" title="required">*</abbr> Description</label>
                            										<div class="slds-form-element__control">
                            											<textarea id="updatePermissionSetDescription" class="slds-textarea" placeholder="ex. For remote sales reps"></textarea>
                            											<!--<apex:inputField value="{!maSettingsGroup.Description__c}" id="newPermissionSetName" class="slds-input" />-->
                            										</div>
                            									</div>
                            								</div>
                            							</div>
                            						</div>
                            						<div class="flex-grow-1 width-66percent">
                            							<div class="flex-column">
                            								<div class="slds-p-horizontal_large slds-p-top_large">
                            									<div class="slds-text-heading_small">Settings</div>
                            								</div>
                            								<div class="flex-row flex-grow-1">
                            									<div class="flex-grow-1 width-50percent">
                            										<div class="slds-p-horizontal_large slds-p-top_medium slds-p-bottom_large">
                            											<div class="flex-grow-1">
                            												<div class="flex-row">
                            													<div style="width:100%;">
                            														<div class="slds-form slds-form_stacked">
                            															<div class="slds-form-element">
                            																<label class="slds-form-element__label" for="updatePermissionSet-max-query">Max Query Size</label>
                            																<div class="slds-form-element__control">
                            																	<input type="text" id="updatePermissionSet-max-query" class="slds-input" placeholder="Max query size" value="50000" max="50000"/>
                            																	<!--<apex:inputField value="{!maSettingsGroup.MaxQuerySize__c}" class="slds-input"></apex:inputField>-->
                            																</div>
                            															</div>
                            															<div class="slds-form-element">
                            																<label class="slds-form-element__label" for="updatePermissionSet-max-export">Max Export Size</label>
                            																<div class="slds-form-element__control">
                            																	<input type="text" id="updatePermissionSet-max-export" class="slds-input" placeholder="Max export size" value="5000" max="5000"/>
                            																</div>
                            															</div>
                            															<div class="slds-form-element select2-form-element">
                            																<label class="slds-form-element__label" for="">Button Set</label>

                            																<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
                            																	<div class="slds-select_container">
                            																		<select class="slds-select select2-input" id="updatePermissionSet-button-set">
                            																			<option value="--" selected="selected">-- Select --</option>
                            																		</select>
                            																	</div>
                            																</div>
                            															</div>
                            														</div>
                            													</div>
                            												</div>
                            											</div>
                            										</div>
                            									</div>
                            									<div class="flex-grow-1 width-50percent">
                            										<div class="slds-p-horizontal_large slds-p-top_medium slds-p-bottom_large">
                            											<div class="slds-form slds-form_stacked">
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="updatePermissionSet-folder-admin" />
                            														<label class="slds-checkbox__label" for="updatePermissionSet-folder-admin">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Folder Admin</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="updatePermissionSet-user-folders" />
                            														<label class="slds-checkbox__label" for="updatePermissionSet-user-folders">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Show User Folders</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="updatePermissionSet-allow-exports" />
                            														<label class="slds-checkbox__label" for="updatePermissionSet-allow-exports">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Allow Exports</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="updatePermissionSet-editable-tooltips" />
                            														<label class="slds-checkbox__label" for="updatePermissionSet-editable-tooltips">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Editable Tooltips</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="updatePermissionSet-show-weather" checked="checked" />
                            														<label class="slds-checkbox__label" for="updatePermissionSet-show-weather">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Show Weather</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            												<div class="slds-form-element">
                            													<div class="slds-form-element__control">
                            														<span class="slds-checkbox">
                            														<input type="checkbox" name="options" id="updatePermissionSet-hide-personal-folder" />
                            														<label class="slds-checkbox__label" for="updatePermissionSet-hide-personal-folder">
                            														<span class="slds-checkbox_faux"></span>
                            														<span class="slds-form-element__label">Hide Personal Folder</span>
                            														</label>
                            														</span>
                            													</div>
                            												</div>
                            											</div>
                            										</div>
                            									</div>
                            								</div>
                            							</div>
                            						</div>
                            					</div>
                            				</div>
                            				<div class="slds-modal__footer">
                            					<button class="slds-button slds-button--neutral js-close-this-slds-modal">Cancel</button>
                            					<button class="slds-button slds-button--brand js-update-settings-group">Update</button>
                            				</div>
                            			</div>
                            		</div>

                            		<div id="settingsPageModalBackdrop" class="slds-modal-backdrop"></div>
                            	</div>

                            	<script>
                            	    $(function() {
                            	        //get button set info
                            	        populateButtonSets();

                            	        populateRecentSettingsGroups();
                            	    })
                            	</script>

                            </apex:outputPanel>

                        </div>

                       <!-- Button Sets Tab -->
                       <div id="TopTabs-ButtonSets">

                           <!-- Existing Button Sets -->
                           <div>
                               <b>{!$Label.MA_Button_Set}</b>
                               <select class='buttonsets-selectedbuttonset'></select>
                           </div>

                           <!-- Basic Info -->
                           <div class='section basicinfo'>
                               <div class='section-header'>{!$Label.MATutorial_Basic_Info}</div>

                               <table class='form'>
                                   <tr>
                                       <td>{!$Label.MA_Name}</td>
                                       <td><input type='text' class='basicinfo-name'></input></td>
                                   </tr>
                               </table>
                           </div>

                           <!-- Layout -->
                           <div class='section layout'>
                               <div class='section-header'>{!$Label.MA_Layout}</div>

                               <!-- Spacer -->
                               <div style='height: 10px;'>&nbsp;</div>

                               <!-- Available Buttons -->
                               <h2 style='font-size: 12px;'>{!$Label.MA_Available_Buttons}</h2>
                               <div class='layout-availablebuttons'></div>

                               <!-- Spacer -->
                               <div style='height: 10px;'>&nbsp;</div>

                               <!-- Layouts -->
                               <table>
                                   <tr>
                                       <td>

                                           <!-- Tooltip Layout -->
                                           <h2 style='font-size: 12px;'>{!$Label.MA_Tooltip_Layout}</h2>
                                           <div class='layout-tooltip-wrapper layout-wrapper'>
                                               <div class='layout-tooltip layout layout-marker' data-layout='Tooltip'>
                                                   <div class='section-dropzone'></div>
                                               </div>
                                           </div>

                                           <!-- My Position Layout -->
                                           <h2 style='font-size: 12px; display: block; margin-top: 5px;'>My Position Layout</h2>
                                           <div class='layout-myposition-wrapper layout-wrapper'>
                                               <div class='layout-myposition layout layout-marker' data-layout='MyPosition'>
                                                   <div class='section-dropzone'></div>
                                               </div>
                                           </div>

                                           <!-- POI Layout -->
                                           <h2 style='font-size: 12px; display: block; margin-top: 5px;'>POI Layout</h2>
                                           <div class='layout-poi-wrapper layout-wrapper'>
                                               <div class='layout-poi layout layout-marker' data-layout='POI'>
                                                   <div class='section-dropzone'></div>
                                               </div>
                                           </div>

                                       </td>
                                       <td>
                                           <!-- Mass Action Layout -->
                                           <h2 style='font-size: 12px;'>{!$Label.MA_Mass_Action_Layout}</h2>
                                           <div class='layout-massaction-wrapper layout-wrapper'>
                                               <div class='layout-massaction layout' data-layout='Mass'>
                                                   <div class='section-dropzone'></div>
                                               </div>
                                           </div>
                                       </td>
                                   </tr>
                               </table>

                           </div>

                           <!-- Buttons -->
                           <div class='buttons'>
                               <input type='button' class='buttonset-savebtn MAbutton button-blue' value='Save' onclick="ButtonSet_Save();"></input>
                               <input type='button' class='buttonset-saveasbtn MAbutton button-blue' value='Save As' style='display: none;' onclick="ButtonSet_Save({isSaveAs: true});"></input>
                               <input type='button' class='buttonset-deletebtn MAbutton button-red' value='Delete' style='display: none;' onclick="ButtonSet_Delete();"></input>
                               <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
                           </div>

                       </div>

                       <!-- Custom Actions Tab -->
                       <div id="TopTabs-CustomActions">

                           <!-- Existing Actions -->
                           <div>
                               <b>{!$Label.MA_Custom_Actions}</b>
                               <select class='customactions-selectedaction'></select>
                           </div>

                           <!-- Basic Info -->
                           <div class='section basicinfo'>
                               <div class='section-header'>{!$Label.MATutorial_Basic_Info}</div>

                               <table class='form'>
                                   <tr>
                                       <td>{!$Label.MA_Name}</td>
                                       <td><input type='text' class='basicinfo-name'></input></td>
                                   </tr>
                               </table>
                           </div>

                           <!-- Modes -->
                           <div class='section modes'>
                               <div class='section-header'>{!$Label.MA_Modes}</div>

                               <table>
                                   <tr><td><input type='checkbox' class='mode' data-value='Desktop' checked='checked'></input> {!$Label.MA_Desktop}</td></tr>
                                   <tr><td><input type='checkbox' class='mode' data-value='Mobile' checked='checked'></input> {!$Label.MA_Mobile}</td></tr>
                               </table>
                           </div>

                           <!-- Requirements -->
                           <div class='section requirements'>
                               <div class='section-header'>{!$Label.MA_Requirements}</div>

                               <table>
                                   <tr><td><input type='checkbox' class='requirement' data-value='Activity Support'></input> {!$Label.MA_Activity_Support}</td></tr>
                                   <tr><td><input type='checkbox' class='requirement' data-value='Verified Location Support'></input> {!$Label.MA_Verified_Location_Support}</td></tr>
                                   <tr><td><input type='checkbox' class='requirement' data-value='Contact Or Lead'></input> {!$Label.MA_Contact_or_Lead}</td></tr>
                               </table>
                           </div>

                           <!-- Routine -->
                           <div class='section routine'>
                               <div class='section-header'>{!$Label.MA_Routine}</div>

                               <table>
                                   <tr>
                                       <td style="width:115px;">Action</td>
                                       <td>
                                           <select class='routine-action'>
                                               <option style="display:none;" value='Iframe'>{!$Label.MA_Load_iframe}</option>
                                               <option value='NewWindow'>{!$Label.MA_Load_new_window}</option>
                                               <!-- <option value='Javascript'>Run javascript</option> -->
                                           </select>
                                       </td>
                                   </tr>
                                   <tr style="display:none;" class="post-info" id="type-selection">
                                       <td>Request Type</td>
                                       <td>
                                           <select style="width: 100%;" class='type-action'>
                                               <option value='GET'>GET</option>
                                               <option value='POST'>POST</option>
                                           </select>
                                       </td>
                                   </tr>
                                   <tr style="display:none;" class="post-info">
                                       <td>Add Records?</td>
                                       <td><input style="float:right;" type='checkbox' class="includeRecords" data-value='include-Records'></input></td>
                                       <td><span class="icon help-btn ion-information-circled"></span><div class="help-text">Adds a parameter you choose for the selected records, i.e., When right click events are triggered. </div></td>
                                   </tr>
                                   <tr style="display:none;" class="param-info">
                                       <td>Parameter Name</td>
                                       <td><input type='text' class="parameterName" data-value='include-Records'></input></td>
                                       <td><span class="icon help-btn ion-information-circled"></span><div class="help-text">This name will be used to specify how the records will be labeled in the HTTP request.</div></td>
                                   </tr>
                                   <tr>
                                       <td></td>
                                       <td><textarea class='routine-value'></textarea></td>
                                   </tr>
                               </table>
                           </div>

                           <!-- Buttons -->
                           <div class='buttons'>
                               <input type='button' class='MAbutton button-blue' value='Save' onclick="CustomAction_Save();"></input>
                               <input type='button' class='customaction-saveasbtn MAbutton button-blue' value='Save As' style='display: none;' onclick="CustomAction_Save({isSaveAs: true});"></input>
                               <input type='button' class='customaction-deletebtn MAbutton button-red' value='Delete' style='display: none;' onclick="CustomAction_Delete();"></input>
                               <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
                           </div>

                       </div>

                       <!-- Activity Settings Tab -->
                       <div id="TopTabs-ActivitySettings">
                           <div class='loadmask-wrapper'>


                               <div class="gray box section activityfielddetails">
                                   <div class="section-header">Check In Fields</div>
                                   <div class="section-body box">
                                       <table style="width:100%; margin-top:10px;" cellpadding="5" cellspacing="0">
                                           <tr class='activity-row'>
                                               <td style="width:17%">
                                                   <b>{!$Label.MA_Created_Latitude}</b>
                                               </td>
                                               <td style="width:40%">
                                                   <select id="createdLatitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                               <td style="width:17%">
                                                   <b>{!$Label.MA_Created_Location_Accuracy}</b>
                                               </td>
                                               <td style="width:40%">
                                                   <select id="createdLocationAccuracy" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                           </tr>
                                           <tr class='activity-row'>
                                               <td>
                                                   <b>{!$Label.MA_Created_Longitude}</b>
                                               </td>
                                               <td>
                                                   <select id="createdLongitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                               <td>
                                                   <b>{!$Label.MA_Created_Location_Verified}</b>
                                               </td>
                                               <td>
                                                   <select id="createdLocationVerified" class='newActivityFielddetails combobox' data-field='boolean' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                           </tr>


                                           <tr class='activity-row'>

                                               <td>
                                                   <b>{!$Label.MA_Distance_from_Record}</b>
                                               </td>
                                               <td>
                                                   <select id="distanceFromRecord" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                               <td>
                                                   <b>Default Duration</b>
                                               </td>
                                               <td>
                                                   <select id="defaultDuration" class='newActivityFielddetails combobox' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                           </tr>
                                       </table>
                                   </div>
                               </div>



                               <div class="gray box section activityfielddetails">
                                   <div class="section-header">Check Out Fields</div>
                                   <div class="section-body box">
                                       <table style="width:100%;margin-top:10px;" cellpadding="5" cellspacing="0">

                                           <tr class='activity-row'>
                                               <td style="width:17%">
                                                   <b>{!$Label.MA_Check_Out_Latitude}</b>
                                               </td>
                                               <td style="width:40%">
                                                   <select id="checkOutLatitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                               <td class='activity-name' style="width:17%">
                                                   <b>{!$Label.MA_Check_Out_Accuracy}</b>
                                               </td>
                                               <td style="width:40%">
                                                   <select id="checkOutAccuracy" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                           </tr>

                                           <tr class='activity-row'>
                                               <td>
                                                   <b>{!$Label.MA_Check_Out_Longitude}</b>
                                               </td>
                                               <td>
                                                   <select id="checkOutLongitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                               <td>
                                                   <b>{!$Label.MA_Distance_from_Record}</b>
                                               </td>
                                               <td>
                                                   <select id="checkOutDistanceFromRecord" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                           </tr>

                                           <tr class='activity-row'>
                                               <td style="width:17%">
                                                   <b>{!$Label.MA_Check_Out_Date}</b>
                                               </td>
                                               <td style="width:40%">
                                                   <select id="checkOutDate" class='newActivityFielddetails combobox' data-field='dateTime' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                               <td></td>
                                               <td></td>
                                           </tr>


                                       </table>
                                   </div>
                               </div>


                               <div class="gray box section">
                                   <div class="section-header">Custom Disposition</div>
                                   <div class="section-body box">
                                       <table style="width:100%; margin-top:10px;" cellpadding="5" cellspacing="0">
                                           <tr class='activity-row'>
                                               <td class='activity-name' style="width:17%">
                                                   <b>Field Set</b> <span style="font-size: 11px;">(beta)</span>
                                               </td>
                                               <td style="width:40%">
                                                   <select id="checkInFieldSet" class='dispositionOptions combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>
                                               </td>
                                               <td style="width:17%"></td>
                                               <td style="width:40%"></td>
                                           </tr>
                                       </table>
                                   </div>
                               </div>
                           </div>

                           <!-- Buttons -->
                           <div class='ActivityFieldButtons'>
                               <input type='button' class='saveActivityFieldBtn MAbutton button-blue' value='Save'></input>
                               <input type='button' class='suggestActivityFieldBtn MAbutton button-blue' value='Suggest'></input>
                               <input type='button' class='createActivityFieldsBtn MAbutton button-blue' value='Create Fields...' style='width: 125px;'></input>
                               <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
                           </div>
                       </div>



                        </div>
                    </div>
            </div>
        </div>
    </div>

    <!-- Notifications Container -->
    <div id='notifications'>

        <!-- Success -->
        <div id="notifications-success" class='success'>
            <a class="ui-notify-close ui-notify-cross">x</a>
            <h1>#{title}</h1>
            <p>#{text}</p>
        </div>

        <!-- Error -->
        <div id="notifications-error" class='error'>
            <a class="ui-notify-close ui-notify-cross">x</a>
            <h1>#{title}</h1>
            <p>#{text}</p>
        </div>

    </div>

    <!-- Templates -->
    <div class='templates' style='display: none;'>

        <!-- Permissions Grid Templates -->
        <table>
            <tr class='permissions-row'>
                <td class='checkbox' style='display: none;'><input type='checkbox'></input></td>
                <td class='name'></td>
                <td class='profile'></td>
                <td class='corporateadmin'><input type='checkbox' class='autosave' data-field='EditMapAnythingOrgWirdeQueries__c'></input></td>
                <td class='showpersonalfolders'><input type='checkbox' class='autosave setting' data-field='ShowPersonalFolders'></input></td>
                <td class='allowexports'><input type='checkbox' class='autosave' data-field='AllowMapAnythingExports__c'></input></td>
                <td class='editabletooltips'><input type='checkbox' class='autosave setting' data-field='EditableTooltips'></input></td>
                <td class='showweather'><input type='checkbox' class='autosave setting' data-field='ShowWeather'></input></td>
                <td class='hidepersonalfolder'><input type='checkbox' class='autosave setting' data-field='HidePersonalFolder'></input></td>
                <td class='version'><select class='autosave' data-field='MAVersion__c'><option value='Previous'>Previous</option><option value='Current'>Current</option><option value='Beta'>Beta</option><option value='IE'>Internet Explorer</option></select></td>
                <td class='maxquerysize'><input type='text' class='autosave' data-field='MAMaxQuerySize__c'></input></td>
                <td class='maxexportsize'><input type='text' class='autosave' data-field='MAMaxExportSize__c'></input></td>
                <td class='buttonset'><select class='autosave setting' data-field='ButtonSetId'></select></td>
                <!--- <td class='defaultcountry'><select class='autosave setting' data-field='DefaultCountry'></select></td> -->
            </tr>
        </table>

        <!-- Button Set Templates -->
        <div class='buttonset-section'>

            <!-- Header -->
            <div class='buttonset-section-header'>
                <div class='buttonset-section-name editable'>{!$Label.MA_New_Section}</div>
            </div>

            <!-- Buttons -->
            <div class='buttonset-section-columns'>
                <div class='buttoncolumn'>
                    <div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
                </div>
                <div class='buttoncolumn'>
                    <div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
                </div>
                <div class='buttoncolumn'>
                    <div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
                </div>
            </div>

            <!-- Dropzone -->
            <div class='section-dropzone'></div>

        </div>
        <div class='buttonset-button'>
            <div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
        </div>

        <!-- Loader Template -->
        <img class='loader' src="{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}" />

        <!-- Row Templates -->
        <table>
            <tr class='createablefield-row' style='text-align: center;'>
                <td class='createablefield-label'></td>
                <td class='createablefield-exists'></td>
            </tr>
        </table>
    </div>

    <!-- Create Activity Fields Popup -->
    <div id='dialog-createactivityfields' style='display:none;'>

        <!-- Header -->
        <h2>{!$Label.MA_Create_Fields}</h2>

        <!-- Spacer -->
        <div style='height: 10px;'>&nbsp;</div>

        <!-- Field Table -->
        <div id='dialog-createfields-table-wrapper' class='loadmask-wrapper'>
            <table id='dialog-createfields-table' class='grid-blue'>
                <tr>
                    <th>{!$Label.MA_Field}</th>
                    <th style='text-align: center;'><span class='link selectall' onclick="$(this).closest('table').find('input').attr('checked', true);">All</span> | <span class='link selectnone' onclick="$(this).closest('table').find('input').attr('checked', false);">None</span></th>
                </tr>
            </table>
        </div>
    </div>

    <!-- Dialogs -->
    <!--<div class='dialogs' style='display: none;'>-->

        <!-- Map Lock Dialog -->
    <!--    <div id='dialog-maplock'>-->
    <!--        <div class='loadmask-wrapper'>-->

                <!-- Header -->
    <!--            <h2>{!$Label.MA_Set_Map_Lock}</h2>-->

                <!-- Instructions -->
    <!--            <p class='dialog-instructions' style='width: 400px;'>{!$Label.MA_Map_Lock_Info}</p>-->

                <!-- Map -->
    <!--            <div class='dialog-maplock-map' style='width: 400px; height: 400px; margin: 15px 0; position: relative;'>-->
    <!--                <div class='dialog-maplock-map-dragzoomlayer' style='position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1; cursor: crosshair; display: none;'></div>-->
    <!--            </div>-->

                <!-- Buttons -->
    <!--            <div>-->
    <!--                <input type='button' class='btn-blue dialog-maplock-save' value='Save Map Lock' />-->
    <!--                <input type='button' class='btn-blue dialog-maplock-remove' value='Remove Map Lock' />-->
    <!--                <input type='button' class='btn-blue btn-white closebtn' value='Close' />-->
    <!--                <span class='msgs'></span>-->
    <!--            </div>-->

    <!--        </div>-->
    <!--    </div>-->

    <!--</div> -->


                       <script type='text/javascript'>

                            // Horizontal Tabs
                            function toggleSLDSTabs(e) {
                              var tabControl = $(e).attr('aria-controls');
                              var tabAriaControls = $('#' + tabControl);

                              $(e).closest('.slds-tabs_default__item').siblings('.slds-tabs_default__item').removeClass('slds-is-active');
                              $(e).closest('.slds-tabs_default__item').addClass('slds-is-active');
                              $(tabAriaControls).siblings('.slds-tabs_default__content').removeClass('slds-show').addClass('slds-hide');
                              $(tabAriaControls).removeClass('slds-hide').addClass('slds-show');
                            }

                            // toggle tabs
                            $(".slds-tabs_default__link").click(function() {
                                toggleSLDSTabs(this);
                             });

                            // Open Add New permission set modal
                            $("#addNewPermissionSet").click(function() {
                                $('#newPermissionSetModal').addClass("slds-fade-in-open");
                                $('#settingsPageModalBackdrop').addClass("slds-modal-backdrop--open");
                            });

                            // close currently open slds modal
                            $(".js-close-this-slds-modal").click(function() {
                                closeThisSLDSModal(this);
                            });

                            function closeThisSLDSModal(theModal) {
                                 $(theModal).closest('.slds-modal').removeClass('slds-fade-in-open');
                                 $('#settingsPageModalBackdrop').removeClass('slds-modal-backdrop--open');
                            }
                            function closeThisSLDSModalById(modalId) {
                                 $('#'+modalId+'').removeClass('slds-fade-in-open');
                                 $('#settingsPageModalBackdrop').removeClass('slds-modal-backdrop--open');
                            }


                            // Open Delete permission set modal
                            $('#permissionSetTable').on('click','.delete-permission-set',function() {
                                var $button = $(this);
                                var $modal = $('#deletePermissionSetModal').removeData();
                                $modal.addClass("slds-fade-in-open");
                                $modal.data({
                                    settingsId : $button.attr('data-recid'),
                                    row : $button.closest('tr')
                                });
                                // deleteSettingsGroup(datarecId);
                                $('#settingsPageModalBackdrop').addClass("slds-modal-backdrop--open");
                            });

                            $('#delete-settings-group').on('click', function(){
                                var $button = $(this);
                                var $modal = $('#deletePermissionSetModal');
                                var rowData = $modal.data();
                                var $row = rowData.row;
                                var processData =
                                {
                                    ajaxResource : 'MAAdminAJAXResources',
                                    action : 'detele_settings_group',
                                    settingsRecordId : rowData.settingsId
                                }
                                var $loading = MAToastMessages.showLoading({message:MASystem.Labels.MA_Loading+'...',timeOut:0,extendedTimeOut:0});
                                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                processData,
                                function(response, event){
                                    MAToastMessages.hideMessage($loading);
                                    closeThisSLDSModalById('deletePermissionSetModal');
                                    if(event.status) {
                                        if(response.success){
                                            //Delete row
                                            MAToastMessages.showSuccess({message:'Successfully deleted settings'});
                                            $row.remove();
                                        }else{
                                            MAToastMessages.showError({message:'Unable to delete,',subMessage:response.error || 'Unknown Error',timeOut:0,extendedTimeOut:0,closeButton:true});
                                        }
                                    }
                                    else {
                                        MAToastMessages.showError({message:'Unable to delete,',subMessage:event.message,timeOut:0,extendedTimeOut:0,closeButton:true});
                                    }
                                });
                            });


                            //remove settings group row from settings table
                            $('#tab-assignment').on('click', '.js-remove-this-settings-group-assignment', function(){
                                var $button = $(this);
                                var $modal = $('#deleteAssignmentSetModal').removeData();
                                $modal.addClass("slds-fade-in-open");
                                $modal.data({
                                    'row' : $button.closest('.js-settingRow'),
                                    'assignmentsID' : $button.attr('data-assignment-id'),
                                    'assignmentsType' : $button.attr('data-assignment-type'),
                                    'assignmentSettingsName' : $button.attr('data-assignment-settingsName')
                                });
                                $('#settingsPageModalBackdrop').addClass("slds-modal-backdrop--open");
                            });

                            //Delete the user or profile id from the MASettingsGroup sma__User__c or sma__Profile__c field
                            $('#delete-assignment-group').on('click', function(){
                                var $button = $(this);
                                var $modal = $('#deleteAssignmentSetModal');
                                var rowData = $modal.data();
                                var $row = rowData.row;
                                var processData =
                                {
                                    ajaxResource : 'MAAdminAJAXResources',
                                    action : 'delete_assignment_settings_group',
                                    assignmentId : rowData.assignmentsID || '',
                                    assignmentType : rowData.assignmentsType || '',
                                    assignmentSettingName : rowData.assignmentSettingsName || ''
                                }
                                var $loading = MAToastMessages.showLoading({message:MASystem.Labels.MA_Loading+'...',timeOut:0,extendedTimeOut:0});
                                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                    processData,
                                    function(response, event){
                                        MAToastMessages.hideMessage($loading);
                                        closeThisSLDSModalById('deleteAssignmentSetModal');
                                        if(event.status) {
                                            if(response.success){
                                                $row.find('.assignment-settings-group').remove();
                                                $row.find('.slds-dropdown-trigger_click').append('<span class="slds-grid slds-grid_align-spread assignment-settings-group"><span class="assignment-settings-name"><a>Assign</a></span><button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" tabindex="-1"><span aria-hidden="true" class="slds-button__icon slds-button__icon_hint slds-button__icon_edit ma-icon ma-icon-edit"></span></button></span>');
                                                MAToastMessages.showSuccess({message:'Successfully deleted assignment settings'});
                                            }else{
                                                MAToastMessages.showError({message:'Unable to delete assignment,',subMessage:response.error || 'Unknown Error',timeOut:0,extendedTimeOut:0,closeButton:true});
                                            }
                                        }
                                        else {
                                            MAToastMessages.showError({message:'Unable to delete assignment,',subMessage:event.message,timeOut:0,extendedTimeOut:0,closeButton:true});
                                        }
                                    }
                                );
                            });

                            //clear this search input
                            function clearThisInputValue(e) {
                                var $button = $(e);
                                var $input = $button.siblings('input.js-clearable-input');
                            	$input.val('').focus();
                            	$button.hide();
                                searchTimeout = null;

                                //what imput is this?
                                if($input.is('#newPermissionsFilter-assign-settings')) {
                                    $('#assignmentPermissionTable .js-settingRow').remove();
                                }
                                else if ($input.is('#newPermissionsFilter-assign-settings')) {
                                    $('#permissionSetTable .js-settingRow').remove();
                                }

                            }

                            $(".js-clear-this-input-value").mouseup(function() {
                        		clearThisInputValue(this);
                        	});

                        	//show/hide search clear icon
                        	$("input.js-clearable-input").keyup(function() {
                        	  if($(this).val().length) {
                        	    $(this).siblings('.js-clear-this-input-value').show();
                        		}
                        	  else {
                        	    $(this).siblings('.js-clear-this-input-value').hide();
                        		}
                        	});


                       </script>
</apex:page>