<apex:page controller="sma.MAComponentCon" sidebar="false" showHeader="false" extensions="sma.MARemoteFunctions">
   
    <script>
        var MARemoting = {
            phase_4 : '{!$RemoteAction.MARemoteFunctions.GetRecords}',
            placeSearch : '{!$RemoteAction.MARemoteFunctions.googleAPISearch}',
            geocodeRecord : '{!$RemoteAction.MARemoteFunctions.geoCodeRecord}',
            live_phase_4 : '{!$RemoteAction.MARemoteFunctions.GetDevicesCurrentLocation}',
            live_history: '{!$RemoteAction.MARemoteFunctions.GetLiveDeviceHistory}',
            processAJAXRequest : '{!$RemoteAction.MARemoteFunctions.processAJAXRequest}'
        }
    </script>
    <!-- showHeader="false" sidebar="false" --> 
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" target-densitydpi="device-dpi"></meta>
    <!-- Helper Functions (required for most scripts) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'JSHelperFunctions.js')}"></script>
    
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/MapAnything.css')}"/>

    <!-- jQuery -->
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'js/jquery-1.7.1.min.js')}"/>
    
    <!-- jQuery UI -->
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jquery/jquery-ui.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'jquery/jquery-ui.css')}"/>
    
    <!-- async -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'async/async.min.js')}"></script>

    <!-- Moment (date parsing) -->
    <script src="{!URLFOR($Resource.MapAnything, 'js/moment.js')}" type="text/javascript"></script>


    <!-- toastr -->
    <script type="text/javascript" src="{!URLFOR($Resource.MapAnything, 'toastr/toastr.min.js')}"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MapAnything, 'toastr/toastr.min.css')}"></link>
    
    <!-- CryptoJS (https://code.google.com/p/crypto-js/) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/cryptojs/core-min.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/cryptojs/enc-utf16-min.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/cryptojs/enc-base64-min.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'MAMarkerBuilder.js')}"></script>
    
    <!-- Google Maps -->
    <script type='text/javascript' src='https://maps.googleapis.com/maps/api/js?client=gme-cloudbiltinc&libraries=places,visualization,drawing,geometry'></script>

    <!-- Google Maps - RichMarker (https://googlemaps.github.io/js-rich-marker/examples/richmarker.html) -->
    <script type='text/javascript' src='https://googlemaps.github.io/js-rich-marker/src/richmarker.js'></script>

    <script type='text/javascript'>
        try {
            sforce = sforce;
            sforce['internal'] = '';
            sforce['connection'] = '';
        }
        catch (err) {
            sforce = {};
            sforce['internal'] = '';
            sforce['connection'] = '';
        }
        var LicenseType;
    </script>
    
    <!-- Helper Functions (required for most scripts) -->
    <c:MA />

    <!-- Google Maps - Spiderfy (https://github.com/jawj/OverlappingMarkerSpiderfier) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'js/google/overlappingmarkerspiderfier/oms.min.js')}"></script>

    <c:MANearByIcons />
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'JSActionFramework.js')}"></script>
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnythingJS, 'JSMapAnything.js')}"></script>
    <c:JSMapAnythingPlotting />

    <!-- Quick fixes.  We should stop using the same components in desktop and Nearby -->
    <script type='text/javascript'>
        function ShowMyPosition() {}
        function GoToHomePosition() {}
        MA.Map.spiderfier = { addMarker: function () {}, removeMarker: function () {}, addListener: function () {} };
    </script>

    
    
    <!-- CSS -->
    <style type='text/css'>
        html,body {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow:hidden;
        }
        .layers-tabs {
            border-bottom: 1px solid #3E649E;
            box-shadow: 0px 1px 5px #6D6D6D;
        }
        .tab-select.selected {
            border-color: #0c60ee;
            background: #2072c2;
        }
        #pagecontainer {
            background: #f2f2f2;
            position: relative;
            height: 100vh;
        }
        .bottom-bar {
            background: #3083d3;
            height: 45px;
        }
        .left-bottom-button-wrapper {
            position: absolute;
        }
        .right-bottom-button-wrapper {
            position: absolute;
            right: 5px;
        }
        .bottom-bar .bottom-bar-button {
            display: inline-block;
            padding: 5px 5px 2px 5px;
            height: 38px;
            width: 40px;
            vertical-align: top;
        }
        .bottom-bar .bottom-bar-button.selected {
            background: #2072c2;
        }
        .layers-tabs > table {
            margin: 0 auto;
            text-align: center;
            width:100%;
            background: #3083d3;
        }
        .layers-tabs .tab-select {
            font-size: 20px;
            border-right: 1px solid #2072c2;
            width: 33%;
            color: white;
            vertical-align: middle;
            height: 40px;
        }
        .layers-tabs .tab-select:last-child {
            border: none;
        }
        .isLink {
            text-decoration: underline;
            color : #2D6BA0;
        }
        .all-layers-table {
            height: calc(100vh - 75px);
        }
        .all-layers-table .watermark {
            display: none;
            padding: 25px 15px;
            color: #757575; font-weight: bold; font-style: italic;
        }
        .list-table {
            position: relative;
            height: 100%;
        }
        .list-watermark {
            text-align: center;
            font-size: 22px;
            text-shadow: 1px 1px 4px #000000;
            padding: 15px;
            color: #F7F7F7;
            font-weight: bold;
        }
        .watermark-wrapper, .results-loading, .no-results {
            position: absolute;
            width: 100%;
            top: 20%;
        }
        .query-status {
            font-size: 16px;
            margin-top: 10px;
            text-shadow: 1px 1px 4px #000000;
            color: #ffffff;
            font-weight: bold;
            height: 40px;
            min-height: 20px;
            text-align: center;
        }
        .poi-status {
            font-size: 12px;
            margin-top: 3px;
            text-shadow: 1px 1px 4px #000000;
            color: #ffffff;
            font-weight: bold;
            position:absolute;
            width: 100%;
            text-align: center;
            top: 30px;
        }
        .refresh-button {
            z-index: 1;
            position: fixed;
            bottom:45px;
            height: 55px;
            width: 100%;
            background: rgba(199, 199, 199, 0.7);
            box-shadow: 0px 0px 10px rgb(148, 148, 148);
        }
        .refresh-map-view.refreshing {
            background: -webkit-linear-gradient(#DDDDDD,#FCFCFC);
            background: linear-gradient(#DDDDDD,#FCFCFC);
        }
        .refresh-map-view {
            width: 90%;
            left: 5%;
            position: relative;
            margin-top: 7px;
            font-size: 16px;
            line-height: 36px;
            padding: 0px;
        }
        .saved-queries-row, .list-view-row, .query-row, .folder-root-row {
            border-bottom: 1px solid rgb(172, 172, 172);
            background: #f2f2f2;
            font-weight: 700;
            color: rgb(34, 34, 34);
            text-shadow: 0px 1px 0px rgb(255, 255, 255);
            padding: 0.7em 15px;
            cursor: pointer;
            font-size: 18px;
            position: relative;
            min-height: 38px;
        }
        .saved-queries-row .query-baseObject, .saved-queries-row .query-total {
            font-size: 12px;
        }
        #settingsdiv .distance-select, #settingsdiv .category-select {
            font-size: 16px;
            height: 40px;
            position: relative;
            left: 5%;
            width: 90%;
        }
        #settingsdiv .poi-settings {
            border-bottom: 1px solid silver;
            padding-bottom: 15px;
        }
        #settingsdiv .poi-settings .poi-header {
            font-size: 16px;
            padding: 20px 20px 10px 10px;
            padding-left: 20px;
            font-weight: bold;
        }
        #settingsdiv .poi-settings .poi-checkbox {
            right: 7%;
            top: 25px;
            width: 20px;
            height: 20px;
            background: -webkit-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -moz-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -o-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -ms-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            border: 1px solid rgba(185, 184, 184, 1);
            position: absolute;
        }
        #settingsdiv .poi-header.checked .poi-checkbox {
            background: #A6ADBB url('{!URLFOR($Resource.MapAnything, 'images/ui-icons/ui-ckeck-mark.png')}') no-repeat -13px 4px;
            background-size: 30px;
            background-color: #4998DA;
        }
#settingsdiv input {
  font-size: 16px;
  height: 32px;
  position: relative;
  width: 100%;
  border-radius: 3px;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  border: 1px solid silver;
}
        #settingsdiv .distance-text {
            font-size: 12px;
            padding: 10px 20px 0px 20px;
            font-weight: bold;
            top: 10px;
            left: 4%;
            color: #696969
        }
        .visible-area-settings {
            position: relative;
            border-bottom: 1px solid silver;
        }
        .visible-area-settings .visible-text {
            font-size: 16px;
            padding: 20px;
            font-weight: bold;
        }
        .sort-list-wrapper {
            position: absolute;
            bottom: 0px;
            width: 100%;
            background: white;
            z-index: 1000;
        }
        .sort-list-wrapper .sort-list-view {
            position: absolute;
            right: 15px;
            height: 28px;
            top: 7px;
        }
        .sort-list-header {
            width: 100%;
            background: -webkit-linear-gradient(#2a93d5,#107abb);
            background: linear-gradient(#2a93d5,#107abb);
            position: relative;
            color: white;
            font-weight: bold;
            font-size: 20px;
            background: none;
            padding: 8px;
        }
        .bottom-bar-wrapper {
            position: fixed;
            bottom: 5px;
            height: 40px;
            width: 100% !important;
            box-shadow: 0px 0px 5px #6D6D6D;
            z-index: 500;
        }
        .sort-list-table .sort-type {
            border-bottom: 1px solid rgb(172, 172, 172);
            background: #f2f2f2;
            font-weight: 700;
            color: rgb(34, 34, 34);
            text-shadow: 0px 1px 0px rgb(255, 255, 255);
            padding: 0.7em 15px;
            cursor: pointer;
            font-size: 18px;
            text-align: center;
        }
        /* check boxes */
        .saved-queries-row .query-checkbox {
            right: 20px;
            top: 18px;
            width: 25px;
            height: 25px;
            background: -webkit-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -moz-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -o-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -ms-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            border: 1px solid rgba(185, 184, 184, 1);
            position:absolute;
        }
        .saved-queries-row.checked .query-checkbox {
            background: #A6ADBB url('{!URLFOR($Resource.MapAnything, 'images/ui-icons/ui-ckeck-mark.png')}') no-repeat -16px 5px;
            background-size: 37px;
            background-color: #2072c2;
        }
        .visible-area-settings .visiblearea-checkbox {
            right: 6%;
            top: 18px;
            width: 20px;
            height: 20px;
            background: -webkit-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -moz-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -o-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            background: -ms-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
            border: 1px solid rgba(185, 184, 184, 1);
            position: absolute;
        }
        .visible-area-settings.checked .visiblearea-checkbox {
            background: #A6ADBB url('{!URLFOR($Resource.MapAnything, 'images/ui-icons/ui-ckeck-mark.png')}') no-repeat -13px 4px;
            background-size: 30px;
            background-color: #4998DA;
        }
        
        /* ToolTips */
        .tooltip-row.Color div.icon {
            background: transparent url("{!URLFOR($Resource.MapAnything, 'images/SymbolPicker_Mini.png')}") no-repeat;
            width: 20px;
            height: 20px;
            float: right;
        }
        
        /* marker-info-wrapper */
        .bottom-bar-wrapper .marker-info-wrapper {
            position: absolute;
            width: 100%;
            bottom: 40px;
            z-index: 4;
        }
        .bottom-bar-wrapper .marker-info-wrapper .marker-info-header, .bottom-bar-wrapper .marker-info-wrapper .myposition-info{
            position: relative;
            padding: 10px 10px 10px 10px;
            background: #ffffff;
            min-height: 40px;
            border-bottom: 1px solid silver;
        }
        .bottom-bar-wrapper .marker-info-wrapper .record-name {
            color: #2D6BA0;
            font-size: 14px;
            font-weight: bold;
            max-width: 55%;
            margin-left: 5px;
        }
        .bottom-bar-wrapper .marker-info-wrapper .record-address {
            font-size: 12px;
            color: #666667;
            margin-top: 5px;
            max-width: 55%;
            margin-left: 5px;
        }
        .bottom-bar-wrapper .marker-info-wrapper .record-distance {
            position: absolute;
            top: 20%;
            right: 80px;
            font-size: 12px;
        }
        .bottom-bar-wrapper .marker-info-wrapper .record-spacer {
            border-right: 1px solid silver;
            height: 70%;
            position: absolute;
            right: 70px;
            bottom: 15%;
        }
        .bottom-bar-wrapper .marker-info-wrapper .record-more-info {
            position: absolute;
            right: 20px;
            height: 40px;
            width: 40px;
        }
        .bottom-bar-wrapper .marker-info-wrapper .tooltips{
            height: 100px;
            background: #f2f2f2;
            display: none;
        }
        .marker-info-wrapper .tooltips .tooltip-row {
            padding: 15px;
            border-bottom: 1px solid silver;
        }
        .marker-info-wrapper .tooltips .tooltip-row .label {
            font-size: 12px;
            font-weight: bold;
        }
        .marker-info-wrapper .tooltips .tooltip-row .value {
            font-size: 12px;
            color: #666667;
        }
        
        /* marker-table-wrapper */
        .bottom-bar-wrapper .marker-table-wrapper {
            height: 60px;
            background: #2072c2;
            position: absolute;
            width: 100%;
            bottom: 0;
        }
        .bottom-bar-wrapper .marker-table {
            float:right;
            margin-right: 10px;
        }
        .marker-button {
            display: inline-block;
            background: white;
            height: 50px;
            width: 50px;
            border-radius: 5px;
            margin: 5px;
            vertical-align: top;
        }
        .marker-button .MAIcon {
            font-size: 34px;
            color: #3083d3;
            margin-left: 14px;
            width: 35px;
            height: 44px;
            margin-top: 6px;
        }
        .marker-table .check-in.updating
        {
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/loader.gif')}") no-repeat;
            background-color: white;
            border:none;
            background-size: 35px;
            background-position: 8px 8px;
        }
        #CustomDispositionPopup {
            position: fixed;
            top: 0px;
            left: 0px;
            height: 100vh;
            width: 100%;
            z-index: 10000;
            background: #FAFAFA;
        }
        #CustomDispositionPopup .dis_wrapper {
            height: calc(100% - 80px);
        }
        #customDis-fieldset {
            height: calc(100% - 100px);
            overflow: auto;
        }
        /* ListView Row */
        .list-view-row .row-icon {
            height: 19px;
            width: 19px;
            position: absolute;
            top: 15px;
            left: 8px;
        }
        .list-view-row .row-icon.static {
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/static-legend.png')}") no-repeat;
        }
        .list-view-row .row-icon.dynamic {
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/dymanic-legend.png')}") no-repeat;
        }
        .list-view-row .record-info-wrapper {
            margin: 0 50px 0 25px;
        }
        .list-view-row .record-name {
            font-size: 14px;
            line-height: 16px;
            color: #2D6BA0;
            font-weight: bold;
            text-shadow: none;
        }
        .list-view-row .record-address-wrapper {
            font-size: 12px;
            line-height: 14px;
            text-shadow: none;
            margin-top: 5px;
        }
        .list-view-row .record-address-wrapper a {
            color: #0066bf;
        }
        .list-view-row .record-distance-wrapper {
            color: #666667;
        }
        
        /************
        * Check In
        ************/
        .list-view-row .checkin-icon {
            width: 35px;
            height: 35px;
            position: absolute;
            right: 15px;
            background-size: 35px !important;
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/new-check-in.png')}") no-repeat;
        }
        .list-view-row .checkin-icon.checked-in {
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/checked-in.png')}") no-repeat;
        }
        .list-view-row .checkin-icon.checked-out {
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/checked-out.png')}") no-repeat;
        }
        .list-view-row .checkin-icon.updating {
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/loader.gif')}") no-repeat;
            border:none;
        }
        .list-view-row .checkin-icon.error {
            background: url("{!URLFOR($Resource.MapAnything, 'images/nearby/red-x.png')}") no-repeat;
        }
        .list-view-row .chatter-icon {
            width: 30px;
            height: 30px;
            background-size: 23px !important;
            background: url("/resource/1392843850000/MapAnything/images/nearby/chatter.png") no-repeat;
            position: absolute;
            right: 13px;
            top: 70px;
            display: none;
        }
        .checkin-info, .list-view-row .tooltips .tooltip-row {
            font-size: 12px;
            line-height: 14px;
            text-shadow: none;
            color: #000000;
            margin-top: 5px;
        }
        .checkin-info .last-checkin, .checkin-info .checkin-id {
            color: #666667;
        }
        
        /******************
        * My Location Pulse
        *******************/
        @-moz-keyframes pulsate {
            from {
                -moz-transform: scale(0.25);
                opacity: 1.0;
            }
            95% {
                -moz-transform: scale(1.3);
                opacity: 0;
            }
            to {
                -moz-transform: scale(0.3);
                opacity: 0;
            }
        }
        
        @-webkit-keyframes pulsate {
            from {
                -webkit-transform: scale(0.25);
                opacity: 1.0;
            }
            95% {
                -webkit-transform: scale(1.3);
                opacity: 0;
            }
            to {
                -webkit-transform: scale(0.3);
                opacity: 0;
            }
        }
        
        @keyframes pulsate {
            from {
                transform: scale(0.25);
                opacity: 1.0;
            }
            95% {
                transform: scale(1.3);
                opacity: 0;
            }
            to {
                transform: scale(0.3);
                opacity: 0;
            }
        }
        
        @-moz-keyframes mypositionPulse {
            0%      { -moz-transform: scale(1.0); opacity: 1.0; }
            50%%    { -moz-transform: scale(1.3); opacity: 1.0; }
            100%    { -moz-transform: scale(1.0); opacity: 1.0; }
        }
        @-webkit-keyframes mypositionPulse {
            0%      { -webkit-transform: scale(1.0); opacity: 1.0; }
            50%%    { -webkit-transform: scale(1.3); opacity: 1.0; }
            100%    { -webkit-transform: scale(1.0); opacity: 1.0; }
        }
        @keyframes mypositionPulse {
            0%      { transform: scale(1.0); opacity: 1.0; }
            50%%    { transform: scale(1.3); opacity: 1.0; }
            100%    { transform: scale(1.0); opacity: 1.0; }
        }
        
        .myposition-button .pulse {
            -webkit-animation: mypositionPulse 1.5s ease-in-out infinite;
        }
        #MALoading {
            background-color: rgb(20, 104, 182);
        }
        #MALoading .loading-img {
            margin-top: 25%;
        }
        #page-navigation {
            height: calc(100vh - 44px);
        }
        .page-view {
            height: 100%;
        }
        .page-view.map {
            position: relative;
        }
        .page-view.map .myLocation {
            z-index: 10000 !important;
        }
        
        .page-view.map .pulse img {
            display:none;
        }
        .map-button-wrapper {
            position: absolute;
            height: 40px;
            width: 40px;
            z-index: 1;
            bottom: 0px !important;
            right: 15px;
            top: 20px;
        }
        .map-button-wrapper .myposition-button {
            background: white;
            height: 40px;
            width: 40px;
            box-shadow: 0 1px 3px #7C7C7C;
            -webkit-border-radius: 4px;
            border-radius: 4px; 
        }
        .map-button-wrapper .refresh-button {
            background: white;
            height: 40px;
            width: 40px;
            box-shadow: 0 1px 3px #7C7C7C;
            -webkit-border-radius: 4px;
            border-radius: 4px;
            margin-bottom: 15px;
            display:none;
        }
        .saved-queries-row.dynamicfilter * {
            opacity: 0.6;
        }
        .saved-queries-row.dynamicfilter .query-icon{
            background: url('{!URLFOR($Resource.MapAnything, 'images/ui-icons/dynamic-dynamic.png')}') no-repeat;
        }
        .saved-queries-row .query-icon.dynamic {
            background: url('{!URLFOR($Resource.MapAnything, 'images/nearby/dymanic-legend.png')}') no-repeat;
        }
        .saved-queries-row .query-icon.static {
            background: url('{!URLFOR($Resource.MapAnything, 'images/nearby/static-legend.png')}') no-repeat;
        }
        @-webkit-keyframes rotation {
            from {-webkit-transform: rotate(0deg);}
            to   {-webkit-transform: rotate(359deg);}
        }
        body .btn {
  display: inline-block;
  padding: 6px 12px;
  margin-bottom: 0;
  font-size: 14px;
  font-weight: 400;
  line-height: 1.42857143;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  background-image: none;
  border: 1px solid transparent;
  border-radius: 4px;
}
       body .btn-primary {
  color: #fff;
  background-color: #337ab7;
  border-color: #2e6da4;
}

#settingsdiv .poi-search-box {
  font-size: 16px;
  height: 34px;
  position: relative;
  width: 100%;
  border-radius: 3px;
  padding: 0 80px 0 12px;
  margin: 0;
  box-sizing: border-box;
  border: 1px solid silver;
}

.poi-search-wrap {
  margin-top: 15px;
  box-sizing: border-box;
  padding: 0 19px;
  position: relative;
}

body .poi-search-wrap #poi-search-button {
  margin: 0;
  position: absolute;
  top: 0;
  border-radius: 0 4px 4px 0;
  right: 19px;
}


/* Salesforce overwrites */
.fSetOverWrite .fieldSetTable {
    width: 100%;
}
.fSetOverWrite .fieldSetTable tr{
    border-bottom: 1px solid #E2E2E2;
    display: block;
}
.fSetOverWrite .fieldSetTable tr:first-child {
    border-top: 1px solid #e2e2e2;
}
.fSetOverWrite .fieldSetTable tr:last-child {
    border-bottom: none;
}
.fSetOverWrite .fieldSetTable td {
    position: relative;
    border-bottom: none;
}
.fSetOverWrite .fieldSetTable .dateInput {
    white-space: normal;
}
.fSetOverWrite .fieldSetTable .fieldLabel {
    padding: 15px 5px 16px 16px;
    width:20%;
    max-width:20%;
    display:inline-block;
    vertical-align: top;
}
.fSetOverWrite .fieldSetTable .fieldInput {
    width: 65%;
    display:inline-block;
}
.fSetOverWrite .fieldSetTable td[data-type="picklist"] {
    padding: 10px;
}
.fSetOverWrite .fieldSetTable td[data-type="combobox"] > a {
    display:none;
}
.fSetOverWrite .fieldSetTable td[data-type="picklist"] select{
    float: right;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    padding: 5px 48px 5px 0px;
    width: 100%;
    border: 1px solid #DFDFDF;
    background: #FAFAFA;
    color: #333;
    text-indent: 0.01px;
    text-overflow: '';
    white-space: nowrap;
    font-size: 14px;
    cursor: pointer;
    direction: rtl;
    height: 40px;
}
.fSetOverWrite .fieldSetTable td[data-type="picklist"]:after {
    position: absolute;
    top: 50%;
    right: 16px;
    margin-top: -3px;
    width: 0;
    height: 0;
    border-top: 5px solid;
    border-right: 5px solid rgba(0, 0, 0, 0);
    border-left: 5px solid rgba(0, 0, 0, 0);
    color: #999;
    content: "";
    pointer-events: none;
}
.fSetOverWrite .fieldSetTable td[data-type="boolean"] span,
.fSetOverWrite .fieldSetTable td[data-type="boolean"] input,
.fSetOverWrite .fieldSetTable td[data-type="datetime"] span,
.fSetOverWrite .fieldSetTable td[data-type="string"] span {
    float: right;
}
.fSetOverWrite .fieldSetTable td[data-type="boolean"] {
    padding-right: 20px;
}
.fSetOverWrite .fieldSetTable td[data-type="multipicklist"] select {
    height: 60px;
    max-height: 60px;
    width: 100px;
    max-width: 100px;
}
.fSetOverWrite .fieldSetTable .dateLabel, .fSetOverWrite .fieldSetTable .fieldLabel.type-datetime {
    vertical-align: top;
}
.fSetOverWrite .fieldSetTable span.dateFormat {
    float:right;
}
.fSetOverWrite .fieldSetTable td input[type="text"],
.fSetOverWrite .fieldSetTable td textarea {
    text-align: right;
    width: 100%;
    -webkit-box-flex: 1;
    -webkit-flex: 1 220px;
    -moz-box-flex: 1;
    -moz-flex: 1 220px;
    -ms-flex: 1 220px;
    flex: 1 220px;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    margin: 0;
    padding-right: 24px;
    background-color: transparent;
    border: 1px solid rgb(223, 223, 223);
    border-radius: 3px;
    min-height: 40px;
}
.fsWrapper .fSetOverWrite .button {
    border-color: #b2b2b2 !important;
    background-color: #f8f8f8 !important;
    color: #444 !important;
    position: relative !important;
    display: inline-block !important;
    margin: 0 !important;
    padding: 0 12px;
    min-width: 52px;
    min-height: 47px;
    border-width: 1px !important;
    border-style: solid !important;
    border-radius: 2px !important;
    vertical-align: top !important;
    text-align: center !important;
    text-overflow: ellipsis !important;
    font-size: 16px;
    line-height: 42px;
    cursor: pointer;
}
.fsWrapper .button.button-stable {
    background-color: #f8f8f8 !important;
    color: #444 !important;
    background-image: none !important;
    border: 1px solid #b2b2b2 !important;
}
.fsWrapper .button.button-positive, .popup-buttons .button.button-positive {
    background-color: #387ef5 !important;
    color: #fff !important;
    background-image: none !important;
    border: 1px solid #0c63ee !important;
}
.fsWrapper .type-multipicklist, .fSetOverWrite .fieldSetTable td[data-type="multipicklist"]{
    display: block;
    border-bottom: none;
}
.fSetOverWrite .fieldSetTable td[data-type="multipicklist"] tr {
    border-bottom: none;
}
.fsWrapper .fSetOverWrite span.dateInput {
    width: 100%;
}
.dis-header-wrap {
    background-color: #387ef5;
    border-bottom: 1px solid #0c63ee;
    color: #fff;
    height: 50px;
    text-align: center;
    margin-bottom: 15px;
}
.dis-header-wrap .dis-head {
    font-size: 17px;
    font-weight: 500;
    line-height: 50px;
}
.customDis-buttons .saveDisposition {
    margin-right: 5%; 
    height: 40px; 
    width: 40%;
    background: #387EF5; 
    margin-left: 5%; 
    color:white;
}
#customDis-loadmask {
    position: absolute; top: 0; left: 0;
    width: 100%; height: 100%;
    z-index: 99999999;
    background: rgba(0, 0, 0, 0.04) url('{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}') center no-repeat;
}
#maActionsPopup .item {
    border-color: #ddd;
    background-color: #fff;
    color: #444;
    position: relative;
    z-index: 2;
    display: block;
    padding: 16px;
    margin: -1px;
    border-width: 1px;
    border-style: solid;
    font-size: 16px;
}
#maActionsPopup .maPopup {
    background-color: #fff;
    width: 100%;
    height: 100%;
    max-height: 100%;
}
#maActionsPopup .maPopup-body {
    padding: 0;
    height: 100%;
}
#maActionsPopup .item-header {
    padding-top: 8px;
    padding-bottom: 8px;
    background-color: #f5f5f5;
    color: #222;
    font-weight: 500;
}
#maActionsPopup .maPopup-head {
    background-color: #387ef5;
    color: white;
    font-size: 14px;
}

    </style>
    
    <!-- IOS Salesfoce fix  https://success.salesforce.com/issues_view?id=a1p300000008Y6nAAE -->
    <script> 
    /*(function(){
        try{
            var a=navigator.userAgent;
            if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('OS/8')!=-1||a.indexOf('OS 8')!=-1)&&(a.indexOf('Safari')==-1)){ 
                var s=document.createElement('style'); 
                s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}"; 
                document.getElementsByTagName('head')[0].appendChild(s);
            }
            if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('OS/9')!=-1||a.indexOf('OS 9')!=-1)&&(a.indexOf('Safari')==-1)){ 
                var s=document.createElement('style'); 
                s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}"; 
                document.getElementsByTagName('head')[0].appendChild(s);
            }
        }catch(e){}})(); */
        
    </script>
    
    <!-- Page Container -->
    <div id='pagecontainer'>
        <div id="page-navigation">
            
            <!-- Layers View -->
            <div data-display='layer-view' style='display:none;' class='page-view layers' id='layersdiv'>
                <div class='layers-tabs'>
                    <table cellspacing="0">
                        <tr>
                            <td data-table='recent' class='tab-recent tab-select'>{!$Label.MA_Recent}</td>
                            <td data-table='all' class='tab-all tab-select selected'>{!$Label.MA_All}</td>
                            <td data-table='selected' class='tab-selected tab-select'>{!$Label.MA_Selected}</td>
                        </tr>
                    </table>
                </div>
                <div style='overflow-y: auto;' data-table='all' class='query-table all-layers-table'>
                    <div class='folder-root-row personal-query-row' id='PersonalRoot'>
                        <div style='height: 20px; width: 20px; position: absolute; top: 22px; left: 5px;' class='row-icon folder-icon'>
                            <img style='height: 20px;' src="{!URLFOR($Resource.MapAnything, 'images/nearby/folder-blue.png')}" />
                        </div>
                        <div style='width: 90%; position: relative; top: 10px; left: 25px;'>{!$User.FirstName} {!$User.LastName}</div>
                    </div>
                    <div class='folder-root-row corp-query-row' id='CorpRoot'>
                        <div style='height: 20px; width: 20px; position: absolute; top: 22px; left: 5px;' class='row-icon folder-icon'>
                            <img style='height: 20px;' src="{!URLFOR($Resource.MapAnything, 'images/nearby/folder-blue.png')}" />
                        </div>
                        <div style='width: 90%; position: relative; top: 10px; left: 25px;'>{!$Label.MA_Corporate}</div>
                    </div>
                    <div class='watermark'>
                        This folder has no contents.  Click the back button to return to the previous folder.
                    </div>
                </div>
                <div style='overflow-y: auto; display:none;' data-table='recent' class='query-table recent-layers-table'></div>
                <div style='overflow-y: auto;' data-table='selected' id='PlottedQueriesContainer' class='query-table selected-layers-table'></div>
            </div>
            
            <!-- List View -->
            <div data-display='list-view' class='page-view list' style='display:none;' id='listdiv'>
                <div style='overflow-y: auto;' class='list-table'>
                    <div class='watermark-wrapper'>
                        <div class='list-watermark'>{!$Label.MA_Records_will_appear_here}...</div>
                    </div>
                    <div style='display:none;' class='results-loading'><div class='list-watermark'>{!$Label.MA_Loading}...</div></div>
                    <div style='display:none;' class='no-results'><div class='list-watermark'>{!$Label.MA_adjust_map}...</div></div>
                </div>
            </div>
            
            <!-- Settings View -->
            <div data-display='settings-view' class='page-view settings' style='display:none;' id='settingsdiv'>
                <div class='poi-settings'>
                    <div class='poi-header settings-row'>
                        <div class='poi-text'>{!$Label.MA_Points_of_Interest}</div>
                        <div class='poi-checkbox'></div>
                    </div>
                    <div>
                        <div class='distance-text'>{!$Label.MA_Category}</div>
                        <select class='category-select'>
                            <option value='none'>-None-</option>
                            <option value='gas_station'>Gas</option>
                            <option value='lodging'>Hotels</option>
                            <option value='restaurant'>Restaurants</option>
                            <option value='grocery_or_supermarket'>Supermarkets</option>
                            <option value='store'>Shopping</option>
                            <option value='bank'>Banks</option>
                        </select>
                        <!--<div class='distance-text search-text'>{!$Label.MA_Search}</div>-->
                        <div class="poi-search-wrap"><input maxlength='80' class='poi-search-box' type='text' placeholder="type search terms here..."></input><button id="poi-search-button" class="btn btn-primary" onclick="doPOISearch();">Search</button></div>
                        
                    </div>
                </div>
                <div class='visible-area-settings settings-row checked'>
                    <div class='visible-text'>{!$Label.MA_Plot_Visible_Area}</div>
                    <div class='visiblearea-checkbox'></div>
                </div>
                <div class='distance-settings'>
                    <div class='distance-text'>{!$Label.MA_Distance_Display_Units}</div>
                    <select class='distance-select'>
                        <option value='mi'>{!$Label.MARoutes_Miles}</option>
                        <option value='km'>{!$Label.MARoutes_Kilometers}</option>
                    </select>
                </div>
            </div>
            
            <div data-display='map-view' class='page-view map'>
                <div id='mapdiv'></div>
                <div class='map-button-wrapper'>
                    <div class='myposition-button'>
                        <div style="font-size: 30px;color: #3083d3;margin: 4px 3px 6px 7px;" class="MAIcon ion-android-locate"></div>
                    </div>
                </div>
                <div style='display:none;' class='refresh-button'>
                    <div style='display:none;' class='query-status'></div>
                    <div style='display:none;' class='poi-status'></div>
                    <div style='display:none;' class='refresh-text refresh-map-view MAbutton button-silver'>Redo Search In This Area</div>
                </div>
            </div>
        </div> 
        
        <!-- Bottom Bar -->
        <div class='bottom-bar-wrapper'>
            <div class='bottom-bar'>
                <div class='left-bottom-button-wrapper'>
                    <div data-display='layer-view' class='bottom-bar-button layer-view'>
                        <div style="font-size: 34px;color: white;margin-left: 7px;" class="MAIcon ion-social-buffer"></div>
                    </div>
                    <div data-display='map-view' class='bottom-bar-button map-view selected'>
                        <div style="font-size: 34px;color: white;margin-left: 7px;" class="MAIcon ion-android-map"></div>
                    </div>
                    <div data-display='list-view' class='bottom-bar-button list-view'>
                        <div style="font-size: 34px;color: white;margin-left: 7px;" class="MAIcon ion-android-list"></div>
                    </div>
                    <div data-display='settings-view' class='bottom-bar-button settings-view'>
                        <div style="font-size: 34px;color: white;margin-left: 6px;" class="MAIcon ion-android-settings"></div>
                    </div>
                    <div style='display:none;' class='sort-list-header'>{!$Label.MA_Sort_Records}</div>
                </div>
                <div class='right-bottom-button-wrapper'>
                    <div style='display:none;' class='bottom-bar-button sort-list-view'>
                        <div style="font-size: 34px;color: white;margin-left: 7px;" class="MAIcon glyphicon-sort-by-attributes-alt"></div>
                    </div>
                    <div style='display:none;' class='bottom-bar-button back-queries-view'>
                        <div style="font-size: 34px;color: white;margin-left: 7px;" class="MAIcon ion-android-arrow-back"></div>
                    </div>
                </div>
            </div>
            
            <!-- Sort List WorkSpace -->
            <div style='display:none;' class='sort-list-table'>
                <div data-type='record-name' class='sort-type sort-name'>{!$Label.MA_Name}</div>
                <div data-type='record-address' class='sort-type sort-distance'>{!$Label.MA_Address}</div>
                <div data-type='record-distance' class='sort-type sort-date'>{!$Label.MA_Distance}</div>
            </div>
            
            <!-- Mark Info Table -->
            <div style='display:none;' class='marker-info-wrapper'>
            </div>
        </div>
    </div>
    
    <!-- Invisible Playground (used for measuring markers) -->
    <div id='invisible' style='opacity: 0; position: absolute; z-index: -9999999999; top: -999999px; left: -99999999px;'>
    </div>

    <!-- Custom Dis Popup -->
    <div id="CustomDispositionPopup" class="fSetOverWrite" data-enhance="false" style='display: none;'>
        <!-- Loadmask -->
        <div id='customDis-loadmask'></div>

        <div class="dis_wrapper">
            <div class="dis-header-wrap">
                <div class="dis-head">Disposition Information</div>
            </div>
            <label style="margin-left:10px;">Fill in the fields below</label>
            <ul id='customDis-fieldset-errors'></ul>
            <div id='customDis-fieldset'></div>
        </div>

        <div class='customDis-buttons' style="margin-top:20px;">
            <button style="margin-right: 5%; height: 40px; width: 40%; background: #387EF5; margin-left: 5%; color:white;" class="saveDisposition">Finish</button>
            <button style="height: 40px;width: 40%;background: #f8f8f8;margin-left: 5%;" class='customDis-cancel' onclick="cancelDisposition();">Cancel</button>
        </div>      
    </div>
    
    <!-- templates -->
    <div id='templates' style='display:none;'>
        
        <!-- Saved Folder Template -->
        <div class='folder-queries-row query-row template'>
            <div style='height: 20px; width: 20px; position: absolute; top: 22px; left: 5px;' class='row-icon folder-icon'>
                <img style='height: 20px;' src="{!URLFOR($Resource.MapAnything, 'images/nearby/folder-blue.png')}" />
            </div>
            <div style='position: relative; width: 70%; top: 10px; left: 25px;' class='query-name'></div>
        </div>
        
        <!-- Saved Queries Template -->
        <div class='saved-queries-row template'>
            <div style='height: 19px; width: 19px; position: absolute; top: 20px; left: 9px;' class='row-icon'>
                <div style='height: 20px;' class='query-icon'></div>
            </div>
            <div style='position: relative; left: 25px; width: 70%;' class='record-info-wrapper'>
                <div class='query-name'></div>
                <div class='query-baseObject'></div>
                <div class='query-total'></div>
            </div>
            <div class='query-checkbox'></div>
            <div style='display:none !important'><table class='legend'></table></div>
        </div>
        
        <!-- List View Template -->
        <div class='list-view-row template'>
            <!-- Icons -->
            <div class='checkin-icon'></div>
            <div class='chatter-icon'></div>
            <div class='row-icon'></div>
            
            <div class='record-info-wrapper'>
                <div class='record-name' onclick='goToRecord(this);'></div>
                <div class='record-address-wrapper'>
                    <a class='record-address'></a>
                    <div class='record-distance-wrapper'>
                        <span class='record-distance'></span>
                    </div>
                </div>
                <div class='checkin-info'>
                    <div class='checkin-header'>{!$Label.MA_Last_Check_In}:</div>
                    <div class='checkin-id'></div>
                    <div class='last-checkin'>{!$Label.MA_Never}</div>
                </div>
            </div>
            
            <!-- Tooltips -->
            <div class="tooltips">
                <table>
                    
                </table>
            </div>
        </div>
        
        <!-- Marker Info Template -->
        <div class='marker-info template'>
            <div class='marker-info-header'>
                <div class='record-name' onclick='goToRecord(this);'></div>
                <div class='record-address'></div>
                <div class='record-distance'></div>
                <div class='record-spacer'></div>
                <div class='record-more-info'>
                    <div style="padding-left: 7px;font-size: 36px;color: #3083d3;" class="MAIcon ion-android-arrow-dropup-circle"></div>
                </div>
            </div>
            <div class='myposition-info' style='display:none;'>
                <table>
                    <tr>
                        <td class='lat-header'>{!$Label.MA_Latitude}:</td>
                        <td class='position-lat'></td>
                    </tr>
                    <tr>
                        <td class='lng-header'>{!$Label.MA_Longitude}:</td>
                        <td class='position-lng'></td>
                    </tr>
                    <tr>
                        <td class='address-header'>{!$Label.MA_Address}:</td>
                        <td class='position-address'>{!$Label.MA_Loading}...</td>
                    </tr>
                </table>
                <div class='record-spacer'></div>
                <div class='record-more-info'>
                    <div style="padding-left: 7px;font-size: 36px;color: #3083d3;" class="MAIcon ion-android-arrow-dropup-circle"></div>
                </div>
            </div>
            <div class='tooltips'>
                <div class='tooltip-wrapper' style='overflow-y: scroll;'>
                    <div class='checkin-row tooltip-row'>
                            <div class='label'>{!$Label.MA_Last_Check_In}</div>
                            <div class='checkin-id value'></div>
                            <div class='checkin-date value'></div>
                    </div>
                </div>
                <!-- Marker Click Buttons -->
                <div class='marker-table-wrapper'>
                    <div class='marker-table'></div>
                </div>
            </div>
        </div>
        
        <!-- Address Not Found Window -->
        <div id="AddressNotFoundPopup" class="popup_block">
            <h2>Addresses Not Found</h2>
            <div id="MissingAddressesContent" ></div>
            <br />
            <br />
            <a class="button1-blue" href="javascript:ClosePopupWindow();">Close</a>
            <a class="button1-lightgray" onclick="ExportMissingAddresses();">Export Selected</a>
            <a class="button1-lightgray" onclick="ExportMissingAddresses(true);">Export All</a>
        </div>
        
        <!-- Missing Addresses Template -->
        <div class='missingaddresses template'>
            <div id="::SavedQueryId::_MissingAddresses_Header" class='missingaddresses-wrapper' data-id='::SavedQueryId::'>
            
                <!-- Saved Query Header -->
                <div class='missingaddresses-header'>
                
                    <!-- Name -->
                    ::SavedQueryName::
                    <span class="count">(0)</span>
                    
                    <!-- Toggle -->
                    <a class='toggle' onclick="ToggleMissingAddressContent(this);">{!$Label.MA_Hide}</a>
                    
                </div>
                
                <!-- Addresses -->
                <div id="::SavedQueryId::_MissingAddresses_Content" class='missingaddresses-content' style="display: block;">
                    <table cellpadding="3" id="::SavedQueryId::_MissingAddresses_Table" class='missingaddresses-table' style="width:100%;">
                        <tr class='missingaddress' data-id='::RecordId::'>
                            <td><input type='checkbox' class='missingaddress-checkbox' /> <a target="_blank" href="/::RecordId::">::Tooltip1::</a></td>
                            <td>::MarkerAddress::</td>
                            <td style="text-align:right;">{!$Label.MA_Unable_Locate_Address}</td>
                        </tr>
                    </table>
                </div>
                
            </div>
        </div>
        
        <!-- SVG Marker -->
        <svg class='svg-marker' width="28" height="42" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
            <metadata>Created by potrace 1.11, written by Peter Selinger 2001-2013</metadata>
            <defs>
                <linearGradient id="svg_1___INDEX__" x2="0.545593" y2="0.28125" x1="0.529968" y1="0.753906">
                    <stop stop-color="__GRADIENT_ONE__" stop-opacity="0.996094" offset="0"/>
                    <stop stop-color="__GRADIENT_TWO__" stop-opacity="0.992188" offset="1"/>
                </linearGradient>
            </defs>
            <g>
                <path transform="rotate(180 13.5708 20.8542)" fill="url(#svg_1___INDEX__)" d="m6.300003,37.5c-4.300003,-3.399994 -5.900002,-8.5 -4.300003,-13.699997c1.700005,-5.800003 11.100006,-23.100006 12,-22.100006c1.400009,1.5 10.800003,20.800003 11.5,23.5c1,3.800003 -1.099991,9.300003 -4.599991,12.300003c-4.100006,3.400009 -10.200012,3.400009 -14.600006,0z" stroke="__CIRCLE_STROKE__"/>
                <circle stroke="__CIRCLE_STROKE__" r="4.5" cy="14" cx="13.5" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__"/>
            </g>
        </svg>
        
        <!-- SVG Circle Marker (Nearby) -->
        <svg class='svg-marker-small' width="25" height="25" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
            <defs>
                <linearGradient y2="1" x2="0" y1="0" x1="1" id="svg_1___INDEX__">
                    <stop offset="0" stop-color="__GRADIENT_ONE__"/>
                    <stop offset="1" stop-opacity="0.99219" stop-color="__GRADIENT_TWO__"/>
                </linearGradient>
            </defs>
            <g>
                <circle fill="url(#svg_1___INDEX__)" stroke="__CIRCLE_STROKE__" cx="12.5" cy="12.5" r="11.25"/>
                <circle r="4" cy="12.5" cx="12.5" stroke="__CIRCLE_STROKE__" fill="__CIRCLE_FILL__"/>
            </g>
        </svg>

        <!-- SVG Marker - Circle -->
        <svg class='svg-marker-circle' width="28" height="28" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
            <defs>
                <linearGradient id="svg_1___INDEX__" x2="0.545593" y2="0.28125" x1="0.529968" y1="0.753906">
                    <stop stop-color="__GRADIENT_ONE__" stop-opacity="0.996094" offset="0"/>
                    <stop stop-color="__GRADIENT_TWO__" stop-opacity="0.992188" offset="1"/>
                </linearGradient>
            </defs>
            <g>
                <circle r="13" cy="14" cx="14" fill="url(#svg_1___INDEX__)" stroke="__CIRCLE_FILL__" stroke-width="1"/>
                <circle r="4.5" cy="14" cx="14" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__" stroke="__CIRCLE_STROKE__"/>
            </g>
        </svg>
        
        <!-- SVG Marker - Triangle -->
        <svg class='svg-marker-triangle' width="28" height="28" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
            <defs>
                <linearGradient id="svg_1___INDEX__" x2="0.545593" y2="0.28125" x1="0.529968" y1="0.753906">
                    <stop stop-color="__GRADIENT_ONE__" stop-opacity="0.996094" offset="0"/>
                    <stop stop-color="__GRADIENT_TWO__" stop-opacity="0.992188" offset="1"/>
                </linearGradient>
            </defs>
            <g>
                <path d="M0 28 L14 0 L28 28 Z" fill="url(#svg_1___INDEX__)" stroke="__CIRCLE_FILL__" stroke-width="1"/>
                <circle r="4.5" cy="18" cx="14" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__" stroke="__CIRCLE_STROKE__"/>
            </g>
        </svg>
        
        <!-- SVG Marker - Square -->
        <svg class='svg-marker-square' width="28" height="28" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
            <defs>
                <linearGradient id="svg_1___INDEX__" x2="0.545593" y2="0.28125" x1="0.529968" y1="0.753906">
                    <stop stop-color="__GRADIENT_ONE__" stop-opacity="0.996094" offset="0"/>
                    <stop stop-color="__GRADIENT_TWO__" stop-opacity="0.992188" offset="1"/>
                </linearGradient>
            </defs>
            <g>
                <path d="M0 0 L28 0 L28 28 L0 28 Z" fill="url(#svg_1___INDEX__)" stroke="__CIRCLE_FILL__" stroke-width="1"/>
                <circle r="4.5" cy="14" cx="14" stroke-width="2" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" fill="__CIRCLE_FILL__" stroke="__CIRCLE_STROKE__"/>
            </g>
        </svg>
        
        <!-- SVG Marker - Waypoint -->
        <svg class='svg-marker-waypoint' width="28" height="42" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
            <metadata>Created by potrace 1.11, written by Peter Selinger 2001-2013</metadata>
            <defs>
                <linearGradient y1="0.753906" x1="0.529968" y2="0.28125" x2="0.545593" id="svg_8___INDEX__">
                    <stop offset="0" stop-opacity="0.996094" stop-color="__GRAD1__"/>
                    <stop offset="1" stop-opacity="0.992188" stop-color="__GRAD2__"/>
                </linearGradient>
            </defs>
            <g>
                <path stroke-width="2" stroke="__STROKE__" d="m6.300003,37.5c-4.300003,-3.399994 -5.900002,-8.5 -4.300003,-13.699997c1.700005,-5.800003 11.100006,-23.100006 12,-22.100006c1.400009,1.5 10.800003,20.800003 11.5,23.5c1,3.800003 -1.099991,9.300003 -4.599991,12.300003c-4.100006,3.400009 -10.200012,3.400009 -14.600006,0z" fill="url(#svg_8___INDEX__)" transform="rotate(180 13.5708 20.8542)"/>
                <text fill="__STROKE__" stroke="__FILL__" stroke-width="0.2" stroke-dasharray="null" stroke-linejoin="null" stroke-linecap="null" x="13" y="21" id="svg_1" font-size="18" font-family="Monospace" text-anchor="middle" xml:space="preserve" font-weight="normal">__TEXT__</text>
            </g>
        </svg>
        
        <div style='display:none' id='exportedTable'></div>
        
        <!-- Tooltip Template -->
        <div id='tooltip-content-template' style='display: none;'>
            
            <!-- Header -->
            <div class='tooltip-header'>
                <a class='name' data-id='::Id::'>::Name::</a>
                <a class='address'>::Address::</a>
                <div class='distance'>::Distance::</div>
                <div class='checkin-info'>
                    <div class='checkin-header'>{!$Label.MA_Last_Check_In}:</div>
                    <div class='checkin-id'>::CheckinId::</div>
                    <div class='last-checkin'>::Checkin::</div>
                </div>
            </div>
              
            <!-- Tooltips -->
            <div class="tooltips">
                <table>
                    
                </table>
            </div>
            
        </div>
    </div>

    <!-- Dynamic Component Overrides -->
    <apex:repeat value="{!overrideComponentStrings}" var="c">
        <apex:outputText escape="false" value="{!c}" />
    </apex:repeat>

    <!-- Javascript -->
    <script type='text/javascript'>
        var mapZoomIndex = 0;
        var myCachedPosition;
        var markerClick = false;
        var processQueryBatch = 0;
        var runningQuery = false;
        var pageSuffix= '';
        var UserId = '{!$User.Id}';
        var userSettings = {};
        var leafletPosition;
        
        //grab salesforce user locale object
        //var SFLocale = UserContext;
        var userLocale = escape('{!UserLocale}');
        var dateFormat = '{!dateFormat}';
        var timeFormat = '{!timeFormat}';
        var dateTimeFormat = '{!dateTimeFormat}';
        var myPostionMarker;
        var MAListView = {};
        
        var mapLoaded = false;
        $(function () {
            //get user prefs
            var processData = { 
                ajaxResource : 'MAUserAJAXResources',\
                action: 'get_user_prefs',
                id: UserId
            };
            
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(json, event){
                    if(json.success)
                    {
                        var record = json.record;
                        //extend our user settings object with these settings (will be used later)
                        try {
                            $.extend(userSettings, JSON.parse(record.sma__MapAnythingSettings__c));
                        }
                        catch (err) { }
    
                        //update button set settings
                        if (userSettings.ButtonSetSettings && userSettings.ButtonSetSettings.Id && userSettings.ButtonSetSettings.Id.length >= 15)
                        {
                            //we have a button set defined so send a request to get the details
                            var processData = { 
                                ajaxResource : 'MAAdminAJAXResources',\
                                action: 'get_buttonset',
                                id: userSettings.ButtonSetSettings.Id
                            };
                            
                            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                                processData,
                                function(response, event){
                                    if (response.success)
                                    {
                                        var buttonSet = response.result;
                                        userSettings.ButtonSetSettings.tooltipLayout = JSON.parse(buttonSet.sma__TooltipLayout__c);
                                        userSettings.ButtonSetSettings.myPositionLayout = JSON.parse(buttonSet.sma__MyPositionLayout__c || '[{"Label":"' + MASystem.Labels.MA_Actions + '",Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[]]}]');
                                        userSettings.ButtonSetSettings.poiLayout = JSON.parse(buttonSet.sma__POILayout__c || '[{"Label":"' + MASystem.Labels.MA_Actions + '",Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[],[]]}]');
                                    }
                                    else { 
                                    }
                                },{buffer:false,escape:false}
                            );
                        }
                        else {
                            
                            //no button set defined so use defaults
                            userSettings.ButtonSetSettings = {
                                tooltipLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[{"Label":"Remove Marker","Type":"Standard Action"},{"Label":"Check In","Type":"Standard Action"}]]},{"Label":"Admin","Columns":[[{"Label":"Set Verified Location","Type":"Standard Action"}],[{"Label":"Clear Coordinates","Type":"Standard Action"}],[{"Label":"Change Owner","Type":"Standard Action"}]]},{"Label":"Activities","Columns":[[{"Label":"Log a Call","Type":"Standard Action"}],[{"Label":"Send Email","Type":"Standard Action"}],[{"Label":"New Event","Type":"Standard Action"},{"Label":"Add to Campaign","Type":"Standard Action"}]]}]'),
                                myPositionLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[]]}]'),
                                poiLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[],[]]}]')
                            };
                            
                        }
                    }
                },{buffer:false,escape:false}
            );

            //unbind shortcuts
            $(document).unbind('keydown.zoom');
            $(document).unbind('keyup.search');
            $(document).unbind('keyup.home');
            $(document).unbind('keyup.position');
            $(document).unbind('keyup.traffic');
            
            
            //salesforce1 android cordova does not support vh yet, check later to see if enabled
            //also can't rotate on android so quick fix works
            var ua = navigator.userAgent.toLowerCase();
            var isAndroid = ua.indexOf("android") > -1;
            if(isAndroid) {
                var winheight = $('#pagecontainer').height();
                $('.page-view').height(winheight-40);
            }

            //resize the page div
            $("#mapdiv").css('height', $(window).height() - 40 + "px");
            $('.bPageHeader, #sidebarCell').hide();
           // $("#MALoading .loading-img").css('margin-top', $(window).height()*0.25+'px');
            if($(window).width() < '550')
            {
                $("#MALoading .loading-img").css('width', '100%');
            }
            
            //create map
            MA.map = new google.maps.Map(document.getElementById('mapdiv'), {
                center: { lat: 38.342, lng: -97.886},
                zoom: 5,
                panControl: false,
                zoomControl: false,
                mapTypeControl: false,
                streetViewControl: false
            });

            MA.Map.spiderfier = new OverlappingMarkerSpiderfier(MA.map, { keepSpiderfied: true });
            MA.Map.spiderfier.addListener('click', function (marker, e) {
              if (marker.spiderfied || MA.Map.spiderfier.markersNearMarker(marker, true).length == 0) {
                  marker_Click.call(marker, { markerType: 'Marker' });
              }
            });
            MA.Map.spiderfier.addListener('spiderfy', function (markersAffected, markersNotAffected) {
              $.each(markersAffected, function (i, marker) {
                  marker.spiderfied = true;
              });
            });
            MA.Map.spiderfier.addListener('unspiderfy', function (markersAffected, markersNotAffected) {
              $.each(markersAffected, function (i, marker) {
                  marker.spiderfied = false;
              });
            });

            //update check in info
            MA.CheckIn.getFields().then(function(res) {
                //overwrite with options
                MA.CheckIn.general = res.data;
            });

            //remove standard POI functionality
            MA.map.setOptions({
                styles: [
                    { featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'off' }] },
                    { featureType: 'transit', elementType: 'labels', stylers: [{ visibility: 'off' }] },
                    { featureType: 'landscape', elementType: 'labels', stylers: [{ visibility: 'off' }] }
                ]
            });
            
            //get settings
            var processData = { 
                ajaxResource : 'MANearbyAJAXResources',
                action: 'getUserSettings',
            };
            
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    removeNamespace('{!namespace}', response.data[0]);
                    userSettings.maxQuerySize = response.data[0].MAMaxQuerySize__c;
                    var settings = {};
                    try {
                        settings = JSON.parse(response.data[0].MapAnythingSettings__c);
                    }
                    catch (err) {}

                    var distance = 'mi';
                    try {
                       distance = settings.RouteDefaults.unit;
                    }
                    catch(err) {}
                    
                    var radius = response.data[0].DefaultProximityRadius__c;
                    var type = response.data[0].PreferredTypeOfMeasurement__c;

                    //set distance
                    $('#settingsdiv').data({ settings: settings, proxRadius: radius, type: type, distance: distance });
                    $('#settingsdiv').find('.distance-select').val(distance);
                    
                    //add success
                    $('#MALoading .user-settings').addClass('success');
                },{buffer:false,escape:false}
            );
            
            //handle changing settings
            $('#settingsdiv').on('change', '.distance-select', function() {
                
                var settings = $('#settingsdiv').data('settings');
                var unit = $(this).val();
                var radius = $('#settingsdiv').data('proxRadius') == null ? '50' : $('#settingsdiv').data('proxRadius');
                var type = $('#settingsdiv').data('type') == null ? 'MILES' : $('#settingsdiv').data('type');
                var UserId = '{!$User.Id}';
                var JSONSettings = {};
               //leafletMap.closePopup();
               
                //route settings
                JSONSettings.RouteDefaults = {
                    mode        : settings.RouteDefaults == null ? "Quickest" : settings.RouteDefaults.mode,
                    unit        : unit,
                    start       : settings.RouteDefaults == null ? "9:00 am" : settings.RouteDefaults.start,
                    end         : settings.RouteDefaults == null ? "5:00 pm" : settings.RouteDefaults.end,
                    duration    : settings.RouteDefaults == null ? "0 hr, 30 min" : settings.RouteDefaults.duration 
                };
                
                //save settings
                var processData = { 
                    ajaxResource : 'MAUserAJAXResources',
                    action: 'store_ma_settings',
                    id: UserId,
                    jsonstring : JSON.stringify(JSONSettings),
                    DefaultProximityRadius : radius,
                    PreferredTypeOfMeasurement : type
                };
                
                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        $('#settingsdiv').data('distance',unit);
                    },{buffer:false,escape:false}
                );
                
            });
            
            
            var processData = { 
                ajaxResource : 'MATreeAJAXResources',
                action: 'get_recent_tab',
                MANearby : 'true'
            };
            
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    $.each(response.data.recent, function(index, recentRecord) {
                        if(recentRecord.properties.type === "marker"){
                            var query = recentRecord.properties.record;
                            removeNamespace('{!namespace}', query);
                        
                            var $row = $('#templates .saved-queries-row.template').clone().removeClass('template').attr('data-id', query.Id);
                            $row.find('.query-name').text(query.Name);
                            $row.find('.query-baseObject').text(query.BaseObject__r.Name__c || '');
                            $row.appendTo('#layersdiv .recent-layers-table').data('savedQueryId', query.Id);
                            if (query.Query__c.indexOf(' IN :Dynamic') != -1) {
                                $row.addClass('dynamicfilter');
                            }
                            else if(query.PicklistField__c != null) {
                                $row.find('.query-icon').addClass('dynamic');
                            }
                            else {
                                var iconColor = query.IconColor__c == null ? '#f2f2f2' : query.IconColor__c;
                                $row.find('.query-icon').addClass('static')
                                $row.find('.row-icon').css('background', iconColor);
                            }
                        }
                    });
                    $('#MALoading .recent-queries').addClass('success');
                }
            );
            
            //handle selecting settings
            $('#settingsdiv').on('click', '.settings-row', function () {
                var $Row = $(this);
                
                //update refreshquery
                if(!$Row.hasClass('poi-header')) {
                    $('.settings-view').attr('data-update', 'true');
                }
                else {
                    $('.settings-view').attr('poi-update', 'true');
                }
                
                if($Row.hasClass('checked'))
                {
                    $Row.removeClass('checked');
                }
                else
                {
                    $Row.addClass('checked');
                }
            });
            
            //handle selecting folders and queries
            $('.query-table.all-layers-table').on('click', '.personal-query-row', function () {
                var folderId = $(this).attr('id');
                
                //remove previous rows and hide root folders and watermark
                $('.folder-root-row, #layersdiv .all-layers-table .watermark').hide();
                $('.all-layers-table .folder-queries-row, .all-layers-table .saved-queries-row').remove();
                
                getPersonalQueries (folderId);
                
            });
            
            //handle corporate queries
            $('.query-table.all-layers-table').on('click', '.corp-query-row', function () {
                var folderId = $(this).attr('id');
                
                //remove previous rows and hide root folders and watermark
                $('.folder-root-row, #layersdiv .all-layers-table .watermark').hide();
                $('.all-layers-table .folder-queries-row, .all-layers-table .saved-queries-row').remove();
                
                //get folders and queries
                getCorpQueries(folderId);
                
            });
            
            //handle selecting back
            $('.bottom-bar').on('click', '.back-queries-view', function () {
                var folderId = $(this).attr('id');
                var folderType = $(this).attr('data-type');
                
                //remove previous rows and hide root folders and watermark
                $('.folder-root-row, #layersdiv .all-layers-table .watermark').hide();
                $('.all-layers-table .folder-queries-row, .all-layers-table .saved-queries-row').remove();
                
                //check what type of folder
                if(folderType == 'corp')
                {
                    getCorpQueries (folderId);
                }
                else
                {
                    getPersonalQueries (folderId);
                }
            });
            
            //handle tab selection
            $('.layers-tabs').on('click', '.tab-select', function () {
                var $tab = $(this);
                
                //manage correct tab
                $('.layers-tabs .tab-select').removeClass('selected');
                $tab.addClass('selected');
                $('.query-table').hide();
                
                //grab correct queries based on selection
                if($tab.is('.tab-all'))
                {
                    //manage correct table
                    $('.all-layers-table').show()
                    
                    //manage back arrow
                    if($('.folder-root-row').css('display') == 'none')
                    {
                        $('.bottom-bar-button.back-queries-view').show();
                    }
                    else
                    {
                        $('.bottom-bar-button.back-queries-view').hide();
                    }
                    
                    //loop over selected and build table
                    $('.all-layers-table .saved-queries-row').each(function(index,row) {
                        var $row = $(row);
                        $row.show();
                    });
                }
                else if($tab.is('.tab-selected'))
                {
                    //manage correct table
                    $('.selected-layers-table').show();
                    
                    //hide back arrow
                    $('.bottom-bar-button.back-queries-view').hide();
                    
                    //loop over selected and build table
                    $('.all-layers-table .saved-queries-row').each(function(index,row) {
                        var $row = $(row);
                        if(!$row.hasClass('checked'))
                        {
                           
                            $row.hide();
                        }
                    });
                }
                else if($tab.is('.tab-recent'))
                {
                    //manage correct table
                    $('.recent-layers-table').show();
                    
                    //hide back arrow
                    $('.bottom-bar-button.back-queries-view').hide();
                }
            });
            
            //auto check poi settings if selection made or search text
            $('.poi-settings').on('change', '.category-select', function () {
                if($(this).val() == 'none' && $('.poi-settings .poi-search-box').val() == '') {
                    $('.poi-settings .poi-header').removeClass('checked');
                }
                else if($(this).val() != 'none') {
                    $('.poi-settings .poi-header').addClass('checked');
                }
                $('.settings-view').attr('poi-update', 'true');
            });
            $('.poi-settings').on('keyup', '.poi-search-box', function () {
                if($(this).val() == '' && $('.poi-settings .category-select').val() == 'none') {
                    $('.poi-settings .poi-header').removeClass('checked');
                }
                else if($(this).val() != ''){
                    $('.poi-settings .poi-header').addClass('checked');
                }
                $('.settings-view').attr('poi-update', 'true');
            });
            
            //bottom-bar navigation buttons
            $('.left-bottom-button-wrapper .bottom-bar-button').on('click', function() {
                mapZoomIndex++;
                var $button = $(this);
                var displayType = $button.attr('display-type');
                
                //check if queries have changed to update
                var refreshQuery = false;
                $('.PlottedRowUnit').each(function (index, row) {
                    if($(row).data('records') == undefined || $('.settings-view').attr('data-update') == 'true')
                    {
                        refreshQuery = true;
                    }
                    else
                    {
                        refreshQuery = false;
                    }
                });
                
                //hide current page
                $('.page-view').hide();
                
                //show hide proper buttons
                $('.bottom-bar-button').removeClass('selected');
                $button.addClass('selected');
                $('.right-bottom-button-wrapper .bottom-bar-button').hide();
                $('.marker-info-wrapper').hide();
                $('.map-button-wrapper').css('bottom', '10px').css('top', '');
                
                //remove setting info
                $('.settings-view').attr('data-update', 'false');
                
                //show proper selection
                if($button.is('.layer-view'))
                {
                    $('#layersdiv').show();
                    if($('.tab-all').is('.selected') && $('.folder-root-row').css('display') == 'none') {
                        $('.bottom-bar-button.back-queries-view').show();
                    }
                }
                else if($button.is('.list-view'))
                {
                    //if query selected
                    if($('.selected-layers-table .saved-queries-row').length > 0 && refreshQuery == true)
                    {
                        $('.list-table .results-loading').show();
                        //keep track of zoom index
                        var options = {};
                        options.mapZoomIndex = mapZoomIndex;
                        
                        
                        //store queries
                        var plottedQueries = [];
                        var queryBatch = 0;
                        $('.selected-layers-table .saved-queries-row').each(function () {
                            if($(this).hasClass('checked'))
                            {
                                queryBatch++;
                                //grab ID
                                var requestData = {
                                    id : $(this).attr('data-id'),
                                    plottedQuery : $(this)
                                }
                                plottedQueries.push(requestData);
                                queryBatch--;
                            }
                        });
                            
                        //set interval to grab all queries
                        var loadingInterval = setInterval(function () {
                            if (queryBatch == 0) {
                                options.plottedQuery = plottedQueries;
                                clearInterval(loadingInterval);
                                processQuery (options);
                            }
                        }, 500);
                    }
                    
                    $('#listdiv').show();
                    $('.right-bottom-button-wrapper .sort-list-view').show();
                }
                else if($button.is('.map-view'))
                {
                    //show map and resize tiles to fit
                    $('.page-view.map').show();
                    google.maps.event.trigger(MA.map, 'resize');
                    
                    //check if map loaded to properly load information
                    mapLoaded = true;
                    if (!mapLoaded) {
                        MA.map.setCenter(myCachedPosition);
                        MA.map.setZoom(18);
                        mapLoaded = true;
                    }

                    //check for poi settings
                    if($('.poi-settings .settings-row').hasClass('checked') && $('.bottom-bar-wrapper .settings-view').attr('poi-update') == 'true') {
                        searchPOI();
                    }
                    else if (!$('.poi-settings .settings-row').hasClass('checked')) {
                        //remove poi
                        $.each(MA.Map.Search.markers, function (i, marker) {
                            marker.setMap(null);
                        });
                    }
                    
                    //if previous marker clicked then show tooltip info
                    if($('.page-view.map').find('.svg-marker').length == 1 && clickedMarker != undefined) {
                        clickedMarker.icon.fire('click');
                    }
                    
                    //if query selected and refreshing
                    if($('.selected-layers-table .saved-queries-row').length > 0 && refreshQuery == true) {
                        
                        //show status and query info
                        $('.query-status').html('Grabbing Query');
                        
                        //keep track of zoom index
                        var options = {};
                        options.mapZoomIndex = mapZoomIndex;
                        
                        //remove previous markers
                        try{ 
                            leafletMap.removeLayer(leafletMap_MoveZoomGroup);
                            leafletMap.closePopup();
                        }
                        catch (err) {}
                        
                        //store queries
                        var plottedQueries = [];
                        var queryBatch = 0;
                        $('.selected-layers-table .saved-queries-row').each(function () {
                            if($(this).hasClass('checked'))
                            {
                                queryBatch++;
                                
                                //show status and query info
                                $('.refresh-button').show();
                                $('.query-status').html('Grabbing Query '+ queryBatch);
                                
                                //grab ID
                                var requestData = {
                                    id : $(this).attr('data-id'),
                                    plottedQuery : $(this)
                                }
                                plottedQueries.push(requestData);
                                queryBatch--;
                            }
                        });
                        
                        //set interval to grab all queries
                        var loadingInterval = setInterval(function () {
                            if (queryBatch == 0) {
                                options.plottedQuery = plottedQueries;
                                clearInterval(loadingInterval);
                                processQuery (options);
                            }
                        }, 500);
                    }//need to review this 
                    else if ($('.selected-layers-table .saved-queries-row').length > 0) {
                        //do nothing
                    }
                    else if($('.poi-settings .settings-row').hasClass('checked') && $('.bottom-bar-wrapper .settings-view').attr('poi-update') == 'true') {
                        $('.refresh-button').show();
                        $('.poi-status').show().text('Refreshing Points of Interest...');
                    }
                    else {
                        
                        //remove previous markers
                        try{ 
                            leafletMap.removeLayer(leafletMap_MoveZoomGroup);
                            leafletMap.closePopup();
                        }
                        catch (err) {}
                        $('.refresh-button').hide();
                        $('.query-status').html('Refreshing Query...');
                        $('.map-button-wrapper').css('bottom', '10px').css('top', '');
                    }
                }
                else if($button.is('.settings-view'))
                {
                    //show map
                    $('#settingsdiv').show();
                }
            });
            
            /*****************************
            *  Jquery Sort Function
            *****************************/
            
            jQuery.fn.sortElements = (function(){
 
                var sort = [].sort;
             
                return function(comparator, getSortable) {
             
                    getSortable = getSortable || function(){return this;};
             
                    var placements = this.map(function(){
             
                        var sortElement = getSortable.call(this),
                            parentNode = sortElement.parentNode,
             
                            // Since the element itself will change position, we have
                            // to have some way of storing its original position in
                            // the DOM. The easiest way is to have a 'flag' node:
                            nextSibling = parentNode.insertBefore(
                                document.createTextNode(''),
                                sortElement.nextSibling
                            );
             
                        return function() {
             
                            if (parentNode === this) {
                                throw new Error(
                                    "You can't sort elements if any one is a descendant of another."
                                );
                            }
             
                            // Insert before flag:
                            parentNode.insertBefore(this, nextSibling);
                            // Remove flag:
                            parentNode.removeChild(nextSibling);
             
                        };
             
                    });
             
                    return sort.call(this, comparator).each(function(i){
                        placements[i].call(getSortable.call(this));
                    });
             
                };
             
            })(); 
            
            //sort list view
            $('.bottom-bar-wrapper').on('click', '.sort-type', function () {
                
                //grab sort type class
                var sortType = '.'+$(this).attr('data-type');
                var conversionMap = {
                    mi  : { mi: 1, ft: 5280, km: 1.60934, m: 1609.34 },
                    ft  : { mi: 0.000189394, ft: 1, km: 0.0003048, m: 0.3048 },
                    km  : { mi: 0.621371, ft: 3280.84, km: 1, m: 1000 },
                    m   : { mi: 0.000621371, ft: 3.28084, km: 0.001, m: 1 }
                };
                
                //sort results
                if ($(this).data('sortDir') == 'DESC')
                {
                    $('.list-table .list-view-row').sortElements(function(a, b){
                        if(sortType == '.record-distance')
                        {
                            var aVal = 0, bVal = 0;
                            try {
                                var aParts = $(a).find(sortType).text().split('  '), bParts = $(b).find(sortType).text().split('  ');
                                aVal = parseFloat(aParts[0]) * conversionMap[aParts[1]]['m'];
                                bVal = parseFloat(bParts[0]) * conversionMap[bParts[1]]['m'];
                            }
                            catch (err) {}

                            return aVal < bVal ? 1 : -1;
                        }
                        else
                        {
                            return $(a).find(sortType).text().replace(/,/g, '') < $(b).find(sortType).text().replace(/,/g, '') ? 1 : -1;
                        }
                    });
                    $(this).data('sortDir', 'ASC');
                }
                else
                {
                    $('.list-table .list-view-row').sortElements(function(a, b){
                        if(sortType == '.record-distance')
                        {
                            var aVal = 0, bVal = 0;
                            try {
                                var aParts = $(a).find(sortType).text().split('  '), bParts = $(b).find(sortType).text().split('  ');
                                aVal = parseFloat(aParts[0]) * conversionMap[aParts[1]]['m'];
                                bVal = parseFloat(bParts[0]) * conversionMap[bParts[1]]['m'];
                            }
                            catch (err) {}
                            
                            return aVal > bVal ? 1 : -1;
                        }
                        else
                        {
                            return $(a).find(sortType).text().replace(/,/g, '') > $(b).find(sortType).text().replace(/,/g, '') ? 1 : -1;
                        }
                    });
                    $(this).data('sortDir', 'DESC');
                }
                $('.sort-list-view').click();
            });
            
            //manage checkbox selections
            $('#layersdiv').on('click', '.saved-queries-row', function () {
                
                var $Row = $(this);
                
                //do nothing if this is not a dynamic filter
                if ($Row.hasClass('dynamicfilter')) {
                    return;
                }
                
                if($Row.hasClass('checked'))
                {
                    
                    //loop over all rows remove check
                    $('#layersdiv .saved-queries-row').each(function (index,row) {
                        if($(row).attr('data-id') == $Row.attr('data-id'))
                        {
                            //remove check
                            $(row).removeClass('checked');
                            
                            //remove from selected table
                            if($(row).parent().is('.selected-layers-table'))
                            {
                                //remove Markers
                                removeQuery($(row));
                                
                                //remove row
                                $(row).remove();
                            }
                        }
                    });
                    //if nothing selected remove all info
                    if($('.selected-layers-table .saved-queries-row').length == 0)
                    {
                        //remove previous markers and list
                        try{
                            //close tooltips
                            leafletMap.closePopup();
                            //remove markers
                            leafletMap.removeLayer($('.bottom-bar-wrapper').data('allMarkers'));
                            $('.bottom-bar-wrapper').removeData('allMarkers');
                            //list
                            $('#listdiv .list-view-row').remove();
                        }
                        catch (e){}
                    }
                }
                else
                {
                    //add check box to all matching rows
                    $('#layersdiv .saved-queries-row').each(function (index,row) {
                        if($(row).attr('data-id') == $Row.attr('data-id'))
                        {
                            $(row).addClass('checked');
                        }
                    });
                    
                    $Row.clone().appendTo('.selected-layers-table').addClass('PlottedRowUnit').data($Row.data());
                }
            });
            
            //refresh map button
            $('.page-view.map').on('click', '.refresh-map-view', function () {
                if($('.selected-layers-table .saved-queries-row').length > 0 || $('.poi-settings .poi-header').hasClass('checked'))
                {
                    $('.selected-layers-table .saved-queries-row').removeClass('isPlotted');
                    $('.refresh-map-view').addClass('refreshing');
                    
                    //refresh poi if selected
                    if($('.poi-settings .poi-header').hasClass('checked')) {
                        searchPOI();
                    }
                    
                    //refresh query
                    if($('.selected-layers-table .saved-queries-row').length >= 1) {
                        mapZoomIndex++;
                        var options = {};
                        options.mapZoomIndex = mapZoomIndex;
                        
                        //remove previous markers
                        try{ 
                            //leafletMap.removeLayer(leafletMap_MoveZoomGroup);
                            //leafletMap.closePopup();
                        }
                        catch (err) {}
                        
                        //hide marker info
                        $('.marker-info-wrapper').hide();
                        
                        //store queries
                        var plottedQueries = [];
                        var queryBatch = 0;
                        $('.selected-layers-table .saved-queries-row').each(function () {
                            if($(this).hasClass('checked'))
                            {
                                queryBatch++;
                                //grab ID
                                var requestData = {
                                    id : $(this).attr('data-id'),
                                    plottedQuery : $(this)
                                }
                                plottedQueries.push(requestData);

                                unrenderQuery($('.PlottedRowUnit[data-id="'+$(this).attr('data-id')+'"]'), 'Markers', function () {
                                    queryBatch--;
                                })
                            }
                        });
                            
                        //set interval for loading screen to check if everything has loaded
                        var loadingInterval = setInterval(function () {
                            if (queryBatch == 0) {
                                options.plottedQuery = plottedQueries;
                                clearInterval(loadingInterval);
                                processQuery (options);
                            }
                        }, 500);
                    }
                }
                else
                {
                    //do nothing
                }
            });
            
            //find initial location
            myPosition(true);
            
            //find my position
            $('.page-view.map').on('click', '.myposition-button', function () {
                //grab position
                myPosition(true);
            });
            
            //show hide sort list
            $('.sort-list-view').on('click', function() {
                if($('.sort-list-table').css('display') == 'none')
                {
                    $('.bottom-bar-wrapper').animate({"bottom" : "144px"}, 150);
                    $('.sort-list-table').show();
                    $('.left-bottom-button-wrapper .bottom-bar-button').hide();
                    $('.left-bottom-button-wrapper .sort-list-header').show();
                }
                else
                {
                    $('.left-bottom-button-wrapper .bottom-bar-button').show();
                    $('.left-bottom-button-wrapper .sort-list-header').hide();
                    $('.bottom-bar-wrapper').animate({"bottom" : "0px"}, 150); 
                    $('.sort-list-table').hide();
                }
            });
            
            //re-calculate markers on map move
            var manageTooltip;
            google.maps.event.addListener(MA.map, 'bounds_changed', function() {

                //var to keep tooltip visible on map move
                manageTooltip = false;
                
                //if marker click don't hide tooltip if off screen
                if(markerClick == true)
                {
                    manageTooltip = true;
                }
                
                //hide button
                if(($('.selected-layers-table .saved-queries-row').length > 0 && markerClick == false) || $('.poi-settings .poi-header').hasClass('checked')) {
                    
                    if(!mapLoaded) {
                        $('.refresh-button').show();
                    }
                    else if ($('.visible-area-settings').hasClass('checked') || $('.poi-settings .poi-header').hasClass('checked')) {
                        $('.refresh-map-view').show().text('Redo Search In This Area');
                        $('.refresh-button').show();
                    }
                    else {
                        $('.refresh-map-view').show().text('Refresh Query');
                        $('.refresh-button').show();
                    }
                    
                    //position myposition button properly if refresh query visible
                    if ($('.marker-info-wrapper').css('display') != 'none') {
                        //$('.map-button-wrapper').css('bottom', $('.bottom-bar-wrapper .myposition-info').height()+40);
                    }
                    else if($('.refresh-button').css('display') != 'none') {
                        $('.map-button-wrapper').css('bottom', '65px').css('top', '');
                    }
                    else {
                        $('.map-button-wrapper').css('bottom', '10px').css('top', '');
                    }
                }
                else {
                    $('.refresh-button').hide();
                }
                
            });

            //handle closing marker information 
            google.maps.event.addListener(MA.map, 'click', function() {
                $('.marker-info-wrapper').hide();
                
                //position myposition button properly if refresh query visible
                if ($('.marker-info-wrapper').css('display') != 'none') {
                    $('.map-button-wrapper').css('bottom', '10px').css('top', '');
                }
                else if($('.refresh-button').css('display') != 'none') {
                    $('.map-button-wrapper').css('bottom', '65px').css('top', '');
                }
                else {
                    $('.map-button-wrapper').css('bottom', '10px').css('top', '');
                }
                
                //if old icon set to original circle
                if(clickedMarker) {
                    clickedMarker.icon.setIcon(clickedMarker.svg);
                }
            });
        });
        
        function getPersonalQueries (folderId)
        {
            var processData = { 
                ajaxResource : 'MANearbyAJAXResources',
                action: 'getPersonalQueries',
                Id: folderId
            };
            
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if(folderId == 'Root')
                    {
                        $('.folder-root-row').show();
                        $('#layersdiv .all-layers-table .watermark').hide();
                        $('.bottom-bar-button.back-queries-view').hide();
                    }
                    else
                    {
                        $.each(response.data.SubFolders, function(index, folder) {
                            var $row = $('#templates .folder-queries-row.template').clone().removeClass('template').attr('id', folder.Id).addClass('personal-query-row');
                            $row.find('.query-name').text(folder.Name);
                            $row.appendTo('#layersdiv .all-layers-table');
                            
                            //store id on back button
                            $('.bottom-bar-button.back-queries-view').attr('id', folder.Id);
                        });
                        $.each(response.data.SubSavedQueries, function(index, query) {
                            removeNamespace('{!namespace}', query);
                        
                            var $row = $('#templates .saved-queries-row.template').clone().removeClass('template').attr('data-id', query.Id).data({ id: query.Id, savedQueryId: query.Id }).data('visibleAreaOnly', false);
                            $row.find('.query-name').text(query.Name);
                            $row.find('.query-baseObject').text(query.BaseObject__r.Name__c);
                            if (query.Query__c.indexOf(' IN :Dynamic') != -1) {
                                $row.addClass('dynamicfilter');
                            }
                            else if(query.PicklistField__c != null) {
                                $row.find('.query-icon').addClass('dynamic');
                            }
                            else {
                                var iconColor = query.IconColor__c == null ? '#f2f2f2' : query.IconColor__c;
                                $row.find('.query-icon').addClass('static');
                                $row.find('.row-icon').css('background', iconColor);
                            }
                            $row.appendTo('#layersdiv .all-layers-table');
                            
                            //loop over selected tab and check appropriate rows
                            $('.selected-layers-table .saved-queries-row').each(function (index,savedrow) {
                                if($(savedrow).attr('data-id') == $row.attr('data-id'))
                                {
                                    $row.addClass('checked');
                                }
                            });
                        });
                        
                        //store id on back button and show
                        $('.bottom-bar-button.back-queries-view').attr('id', response.data.ParentId).attr('data-type', 'personal');
                        $('.bottom-bar-button.back-queries-view').show();
                        
                        //show watermark if needed
                        if ($('#layersdiv .all-layers-table').children(':visible').length == 0) {
                            $('#layersdiv .all-layers-table .watermark').show();
                        }
                        
                        //add success
                        $('#MALoading .saved-personal-queries').addClass('success');
                    }
                },{buffer:false,escape:false}
            );
        }
        function getCorpQueries (folderId)
        {
            var processData = { 
                ajaxResource : 'MANearbyAJAXResources',
                action: 'getCorpQueries',
                Id: folderId
            };
            
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if(folderId == 'Root')
                    {
                        $('.folder-root-row').show();
                        $('#layersdiv .all-layers-table .watermark').hide();
                        $('.bottom-bar-button.back-queries-view').hide();
                    }
                    else
                    {
                        $.each(response.data.SubFolders, function(index, folder) {
                            var $row = $('#templates .folder-queries-row.template').clone().removeClass('template').attr('id', folder.Id).addClass('corp-query-row');
                            $row.find('.query-name').text(folder.Name);
                            $row.appendTo('#layersdiv .all-layers-table');
                            
                            //store id on back button
                            $('.bottom-bar-button.back-queries-view').attr('id', folder.Id);
                        });
                        $.each(response.data.SubSavedQueries, function(index, query) {
                            removeNamespace('{!namespace}', query);
                        
                            var $row = $('#templates .saved-queries-row.template').clone().removeClass('template').attr('data-id', query.Id).data({ id: query.Id, savedQueryId: query.Id }).data('visibleAreaOnly', false);
                            $row.find('.query-name').text(query.Name);
                            $row.find('.query-baseObject').text(query.BaseObject__r.Name__c);
                            if(query.PicklistField__c != null)
                            {
                                $row.find('.query-icon').addClass('dynamic');
                            }
                            else
                            {
                                var iconColor = query.IconColor__c == null ? '#f2f2f2' : query.IconColor__c;
                                $row.find('.query-icon').addClass('static')
                                $row.find('.row-icon').css('background', iconColor);
                            }
                            $row.appendTo('#layersdiv .all-layers-table');
                            
                            //loop over selected tab and check appropriate rows
                            $('.selected-layers-table .saved-queries-row').each(function (index,savedrow) {
                                if($(savedrow).attr('data-id') == $row.attr('data-id'))
                                {
                                    $row.addClass('checked');
                                }
                            });
                        });
                        
                        //store id on back button and show
                        $('.bottom-bar-button.back-queries-view').attr('id', response.data.ParentId).attr('data-type', 'corp');
                        $('.bottom-bar-button.back-queries-view').show();
                        
                        //show watermark if needed
                        if ($('#layersdiv .all-layers-table').children(':visible').length == 0) {
                            $('#layersdiv .all-layers-table .watermark').show();
                        }
                        
                        //add success
                        $('#MALoading .saved-corp-queries').addClass('success');
                    }
                },{buffer:false,escape:false}
            );
        }
        function nativeGPSNavigation (lat,lng)
        {
            if( (navigator.platform.indexOf("iPhone") != -1) || (navigator.platform.indexOf("iPod") != -1) || (navigator.platform.indexOf("iPad") != -1))
            {
                return "maps://maps.google.com/maps?daddr=" +  encodeURIComponent(lat+','+lng);
            }
            else
            {
                return  'http://maps.google.com/maps?daddr=' + encodeURIComponent(lat+','+lng);
            }
            
            /*
            //figure out which iOS version this is
            var versions;
            var address;
            if (/iP(hone|od|ad)/.test(navigator.platform)) {
 
                // supports iOS 2.0 and later: http://bit.ly/TJjs1V
                var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
                versions = [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];
            }
            
            //open the proper link depending on version
            if (versions && versions[0] <= 5) {
                address = 'http://maps.google.com/maps?daddr=' + encodeURIComponent(lat+','+lng);   //native google maps
            }
            else if (versions) {
                address = 'comgooglemaps://?saddr=&daddr=' + encodeURIComponent(lat+','+lng);
                //address = 'http://maps.apple.com/?daddr=' + encodeURIComponent(lat+','+lng);    //native apple maps
            }
            else {
                address = 'http://maps.google.com/maps?daddr=' + encodeURIComponent(lat+','+lng);   //not iOS
            }
            return address;
            */
        }
        
        function removeQuery($plottedQuery, options)
        {
            //default options
            options = $.extend({
                complete: function () {}
            }, options || {});
        
            //unrender everything
            unrenderQuery($plottedQuery, 'Markers', function () {
                
                //actually remove layers from the map (this is for the movezoom functionality)
                $.each($plottedQuery.data('records') || {}, function (index, record) {
                    record.isRendered = false;
                    if (record.marker) {
                        //leafletMap_MoveZoomCluster.removeLayer(record.marker);
                        //leafletMap_MoveZoomGroup.removeLayer(record.marker);
                    }
                });
            });
        }
        
        function recalculateMarkers () {
            mapZoomIndex++;
            var options = {};
            options.mapZoomIndex = mapZoomIndex;
            
            //remove previous markers
            try{ 
                //leafletMap.removeLayer(leafletMap_MoveZoomGroup);
                //leafletMap.closePopup();
            }
            catch (err) {}
            
            //store queries
            var plottedQueries = [];
            var queryBatch = 0;
            $('.selected-layers-table .saved-queries-row').each(function () {
                if($(this).hasClass('checked'))
                {
                    queryBatch++;
                    //grab ID
                    var requestData = {
                        id : $(this).attr('data-id'),
                        plottedQuery : $(this)
                    }
                    plottedQueries.push(requestData);

                    unrenderQuery($('.PlottedRowUnit[data-id="'+$(this).attr('data-id')+'"]'), 'Markers', function () {
                        queryBatch--;
                    });
                }
            });
                
            //set interval for loading screen to check if everything has loaded
            var loadingInterval = setInterval(function () {
                if (queryBatch == 0) {
                    options.plottedQuery = plottedQueries;
                    clearInterval(loadingInterval);
                    processQuery (options);
                }
            }, 500);
        }
        
        //find my position
        var mypositionUpdating = false;
        var watchID;
        var moveTo = false;
        //var myCachedPosition = null;
        var myCachedPositionInfo = null; 
        
        function myPosition (pan) {
            moveTo = pan;
            if(mypositionUpdating == false)
            {
                if(watchID != null) {
                    navigator.geolocation.clearWatch(watchID);
                }
                var geo_options = {
                    enableHighAccuracy: true, 
                    maximumAge        : 30000, 
                    timeout           : 27000
                };

                //set to true until position is found
                mypositionUpdating = true;
                
                //add pulse to button click
                $('.myposition-button .current-location-svg').attr('class','current-location-svg pulse');
                
                //locate position
                watchID = navigator.geolocation.watchPosition(onLocationFound, onLocationError,geo_options);
            }
        }
        function onLocationError(e) {
            //remove pulse and updating
            $('.myposition-button .current-location-svg').attr('class','current-location-svg');
            
            //just set to ATL
            //myCachedPosition = {lat:33.748547,lng:-84.391502};
             if (myCachedPositionInfo == null)
            {
                myCachedPositionInfo = null;
            }
            
            mypositionUpdating = false;
            MA.log('location error',e);
        }
        function onLocationFound(e) {
            
            myCachedPositionInfo = e;
            
            var radius = e.coords.accuracy / 2;
            
            //store location
            myCachedPosition = new google.maps.LatLng(e.coords.latitude, e.coords.longitude);

            //remove previous position if found
            if(myPostionMarker) {
                myPostionMarker.setPosition(myCachedPosition);
                //remove pulse and updating
                $('.myposition-button .current-location-svg').attr('class','current-location-svg');
                mypositionUpdating = false;

                if(moveTo) {
                    moveTo = false;
                    //pan to position
                    MA.map.setCenter(myCachedPosition);
                }
            }
            else {
                var image = {
                    url: "{!URLFOR($Resource.MapAnything, 'images/myLocation3.png')}",
                    size: new google.maps.Size(30, 30),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(15, 15),
                    scaledSize: new google.maps.Size(20, 20)
                };
                myPostionMarker = new google.maps.Marker({
                    position: myCachedPosition,
                    map: MA.map,
                    icon: image
                });

                //handle click
                //$('.myposition-button').data('myposition').click(myposition_Click);
                google.maps.event.addListener(myPostionMarker, 'click', function () {
                    markerClick = true;
                    var myposition = myPostionMarker;
                    
                    //remove previous buttons and marker info
                    $('.marker-info-wrapper .marker-info').remove();
                    $('.marker-table-wrapper .marker-button').remove();
                    
                    //start building content from template
                    var $markerTable = $('#templates .marker-info.template').clone().removeClass('template');
                    $markerTable.find('.marker-info-header').hide();
                    $markerTable.find('.myposition-info').show();
                    
                    //send reverse geocode request
                    reverseGeocode({
                        latLng: myposition.getPosition(),
                        complete: function (response) {
                            if (response.success && response.results.length > 0) {
                                $markerTable.find('.position-address').text(response.results[0].formatted_address);
                            }
                            else {
                                $markerTable.find('.position-address').text('');
                            }
                        }
                    });
                    
                    //update marker info values
                    $markerTable.find('.position-lat').text(myposition.getPosition().lat());
                    $markerTable.find('.position-lng').text(myposition.getPosition().lng());
                    $markerTable.find('.tooltip-wrapper').remove();
                    $markerTable.find('.tooltips').css('height', "60px");

                    //add to info table and show record
                    $('.bottom-bar-wrapper .marker-info-wrapper').show();
                    $markerTable.appendTo($('.bottom-bar-wrapper .marker-info-wrapper')); 
                    var recordHeight = $('.bottom-bar-wrapper .myposition-info').height();
                    var buttonHeight = (recordHeight-40)/2;
                    $('.map-button-wrapper').css('bottom', recordHeight+40);
                    $markerTable.find('.record-more-info').css('top','23%');
                    
                    //show more info on click
                    $markerTable.on('click', '.record-more-info', function () {
                        var $wrap = $(this);
                        if($(this).hasClass('open')) {
                            
                            $wrap.removeClass('open');
                            $wrap.find('.MAIcon').removeClass('ion-android-arrow-dropdown-circle').addClass('ion-android-arrow-dropup-circle');
                            $('.marker-table-wrapper').hide();
                            $('.bottom-bar-wrapper .marker-info-wrapper .tooltips').hide();
                            $('.map-button-wrapper').css('bottom', recordHeight+40);
                            //center marker with tooltip info
                            MA.map.setCenter(myposition.getPosition());
                        }
                        else {
                            $wrap.addClass('open');
                            $wrap.find('.MAIcon').addClass('ion-android-arrow-dropdown-circle').removeClass('ion-android-arrow-dropup-circle');
                            $('.marker-table-wrapper').show();
                            $('.bottom-bar-wrapper .marker-info-wrapper .tooltips').show();
                            $('.map-button-wrapper').css('bottom', recordHeight+100);
                            
                            //center marker with tooltip info
                            MA.map.setCenter(myposition.getPosition());
                        }
                    });
                });
                
                //remove pulse and updating
                $('.myposition-button .current-location-svg').attr('class','current-location-svg');
                mypositionUpdating = false;

                //pan to position
                MA.map.setCenter(myCachedPosition);
            }
        }
        
        
        function PlotQuery(requestData, renderAs, visibleAreaOnly, options,queryCallback)
        {
            //console.log(requestData);
            queryCallback = queryCallback || function(){};
            //add refreshing class 
            $('.refresh-map-view').addClass('refreshing');
            
            //default options
            options = $.extend({
                showLayers: true,
            }, options || {});
        
            //Hide water-mark
            $('#PlottedQueriesWrapper .plotted-watermark').hide();
            
            //we could potentially be sent a saved query id or an object with query data as requestData.  if a saved query id was passed, transform it to an object for consistent use later
            var SavedQryID = '';
            if (typeof requestData == 'string') {
                SavedQryID = requestData;
                requestData = { id: SavedQryID, savedQueryId: SavedQryID };
            }
            else if (requestData.plottedQuery) 
            {
                //this is a refresh query so the id is passed in the request
                SavedQryID = requestData.id;
            }
            
            //renderAs can be a single mode as a string or an array of modes.  make it an array for easy processing
            if (!(renderAs instanceof Array)) {
                renderAs = [renderAs];
            }
        
            //create a new plotted query from the template
            var $plottedQuery;
            if (requestData.plottedQuery) {
                //use the plotted query that was passed
                $plottedQuery = requestData.plottedQuery;
                delete requestData.plottedQuery;
                //clear previous data
                $plottedQuery.removeData().data(requestData).addClass('loading').find('.legend-showhide, .legend, .legend-moreless').hide().filter('.legend').empty();
                $plottedQuery.find('.status').html('Refreshing query...');
                $('.query-status').html('Refreshing Query...');
            }
            else {
                $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data(requestData).appendTo($('#PlottedQueriesTable'));
                $plottedQuery.find('.status').html('Running query...');
                $('.query-status').html('Running Query...');
            }
            
            //add basic info
            $plottedQuery.data('componentIndex', ++MA.componentIndex);
            if (SavedQryID == '') {
                $plottedQuery.find('.basicinfo-name').text('Map It');
                $plottedQuery.find('.basicinfo-baseobjectname').text('Plotting');
            }
            else {
                $plottedQuery.find('.basicinfo-name').text($('#SQTree #'+SavedQryID+' a').clone().children().remove().end().text());        //the added complication is just used to get the top-level text element (the actual structure has an ins element that has extra text in it)
                $plottedQuery.find('.basicinfo-baseobjectname').text($('#SQTree #'+SavedQryID).attr('title'));
            }
            
            //show plotted queries
            if (options.showLayers) {
                SlideToPlottedQueries();
            }
            
            //populate default data
            $.extend($plottedQuery.data(), {
                recordsToGeocode: [],
                numGeocodeRequestsOut: 0,
                numSuccessfulGeocodes: 0,
                numFailedGeocodes: 0,
                visibleAreaOnly: visibleAreaOnly || false,
                proximityObjects: []
            });

            //analyze the query to get the total number of records
            analyzeQuery({
                plottedQuery: $plottedQuery.addClass('testing'),
                limit : options.limit,
                callback: function (success, records) {
                    //status
                    $plottedQuery.find('.status').html('Analyzing Query...');
                    $('.query-status').html('Analyzing Query...');
                    //UpdateAddToCampaignButton();
                    
                    //add the color/image to the plotted query if this is a static marker query
                    if ($plottedQuery.data('markerMetadata').ColorAssignmentType == 'Static')
                    {
                        var iconColor = $plottedQuery.data('markerMetadata').IconColor;
                        if (iconColor.indexOf('image:') == 0)
                        {
                            //image
                            if (imgLoaderDimensions[iconColor.split('image:')[1]]) {
                                $plottedQuery.find('.plottinginfo-wrapper .icon').html('<img src="'+MA.SitePrefix+'/servlet/servlet.FileDownload?file='+iconColor.split('image:')[1]+'" />');
                            }
                        }
                        else
                        {
                            //color
                            $plottedQuery.find('.plottinginfo-wrapper .icon').html('<div style="background-color: '+iconColor+';" />');
                        }
                    }
                    
                    //set a timeout to refresh the query if needed
                    var refreshInterval = $plottedQuery.data('refreshInterval');
                    if (refreshInterval) {
                        var refreshIntervalParts = refreshInterval.split(' ');
                        var refreshUnit = refreshIntervalParts[1];
                        var refreshTimeoutValue = parseInt(refreshIntervalParts[0]) * (refreshUnit == 'sec' ? 1000 : 60000);
                        setTimeout(function () { refreshQuery($plottedQuery, refreshTimeoutValue); }, refreshTimeoutValue);
                    }
                    
                    //loop through the returned record ids and send them out for processing in batches
                    var recordBatch = [];
                    $.each(records, function (index, record) {
                        if (recordBatch.length < 100)
                        {
                            recordBatch.push(index);
                        }
                        else
                        {
                            //this batch is full.  send it to be processed
                            processBatch($plottedQuery, recordBatch);
                            
                            //move on to the next batch
                            recordBatch = [];
                            recordBatch.push(index);
                        }
                    });
                    
                    //send the last batch if needed
                    if (recordBatch.length > 0){
                        processBatch($plottedQuery, recordBatch);
                    }
                    
                    //all of the batches have been sent for processing.  start a poller that will periodically check if processing is complete
                    $plottedQuery.data(
                        'processingInterval', 
                        setInterval(function () {
                            
                            //loop through all records.  we're done if everything has been processed
                            var processingComplete = true;
                            var numRecords = 0;
                            var numProcessed = 0;
                            $.each($plottedQuery.data('records') || {}, function (index, record) {
                                if (!record.isProcessed) {
                                    processingComplete = false;
                                }
                                else {
                                    numProcessed++;
                                }
                                numRecords++;
                            });
                            
                            //keep track of the total number of records for use later
                            $plottedQuery.data('numRecords', numRecords);
                            
                            //status
                            $plottedQuery.find('.status').html('Processing: ' + numProcessed + ' of ' + numRecords);
                            $('.query-status').html('Processing: ' + numProcessed + ' of ' + numRecords);
                            
                            //if we're done processing, we need to send geocode requests for those records that do not have lat/long information
                            if (processingComplete)
                            {
                                
                                clearInterval($plottedQuery.data('processingInterval'));
                                
                                //status
                                var needGeocodeCounter = $plottedQuery.data('recordsToGeocode').length;
                                $plottedQuery.data('numGeocodeRequestsNeeded', needGeocodeCounter).data('numGeocodeRequestsCompleted', 0).find('.status').html('Geocoding: 0 of ' + needGeocodeCounter);
                                $('.query-status').html('Geocoding: 0 of ' + needGeocodeCounter);
                                
                                //build a finish function to be called when geocoding is complete
                                function geocodingComplete(){
                                    clearInterval($plottedQuery.data('geocodingInterval'));
                                            
                                    //status
                                    $plottedQuery.find('.status').html('Collecting Bad Addresses: ');
                                    $('.query-status').html('Collecting Bad Addresses: ');
                                    
                                    //populate the bad address window with any bad address from this query
                                    updateMissingAddressContent($plottedQuery);
                                    
                                    //status
                                    $plottedQuery.find('.status').html('Creating Markers: ');
                                    $('.query-status').html('Creating Markers: ');
                                    
                                    //add total displayed records to selected tab
                                    var totalMarkers = $plottedQuery.data().numRecords + ' record(s) visible';
                                    $plottedQuery.find('.query-total').html(totalMarkers);
                                    
                                    //hide loading if no records
                                    if($plottedQuery.data().numRecords == 0)
                                    {
                                        //hide listview loading
                                        $('.list-table .results-loading').hide();
                                        
                                        //show no records
                                        $('.list-table .no-results').show();
                                    }
                                    
                                    //create markers in batches
                                    var markerCount = 0;
                                    var batchMarkerCount = 0;
                                    setTimeout(function doCreateMarkers () {
                                        
                                        var done = true;
                                        var now = moment();
                                        var toolTip1Obj = $plottedQuery.data('tooltips') || [];
                                        toolTip1Obj = toolTip1Obj[0];
                                        $.each($plottedQuery.data('records') || {}, function (index, record) {
                                        
                                            if (!record.marker && MA.Util.testLatLng(record.markerLatitude, record.markerLongitude)) {
                                        
                                                //convert distance
                                                var type = $('#settingsdiv').data('distance');
                                                var distance = leafletPosition != null ? google.maps.geometry.spherical.computeDistanceBetween(leafletPosition, record.latLng) : '';
                                                var formattedDistance = extractDistance($('#settingsdiv').data('distance'), distance);
                                                
                                                //create list view row
                                                var $row = $('#templates .list-view-row').clone().removeClass('template');
                                                $row.data('marker',record.marker);
                                                $row.find('.record-name').attr('data-id', record.record.Id);
                                                try {
                                                    var recordName = htmlDecode(extractTooltipValue(toolTip1Obj, record, true));
                                                    $row.find('.record-name').removeAttr('onclick').html(recordName);
                                                }
                                                catch(e) {
                                                    $row.find('.record-name').text(record.record.Id.indexOf('500') == 0 ? record.record.CaseNumber : record.record.Name);
                                                }
                                                
                                                $row.find('.record-address').html(record.formattedMarkerAddress);
                                                $row.find('.record-distance').text(formattedDistance);
                                                $row.on('click', '.record-address', function () {
                                                    try {
                                                        sforce.one.navigateToURL(nativeGPSNavigation (record.latitude, record.longitude))
                                                    }
                                                    catch (err) {
                                                        window.open(nativeGPSNavigation(record.latitude, record.longitude));
                                                    }
                                                });
                                                
                                                //add tooltips
                                                var $tooltips = $row.find('.tooltips > table');
                                                var tooltip1Value = 'Tooltip 1';
                                                $.each($plottedQuery.data().tooltips, function (index, tooltip) 
                                                {
                                                    if( (/color/i).test(tooltip.TooltipType) )
                                                    {
                                                        //create a new tooltip row
                                                        var $newTooltip = $("<tr class='tooltip-row'><td class='icon'></td><td class='label'><b>"+tooltip.FieldLabel+"</b></td><td class='value'>"+extractTooltipValue(tooltip, record, true)+"</td></tr>");
                                                        if ( !(/tooltip/i).test(tooltip.TooltipType) ) {
                                                            var newTooltipTitle = typeof tooltip.TooltipType == 'string' ? tooltip.TooltipType.split(':').reduce(function(acc, curr){return curr+' '+acc}) + ' field' : 'field';
                                                            $newTooltip.find('.icon').attr('title', newTooltipTitle);
                                                        }
                                                        
                                                        // assign classes
                                                        if(typeof tooltip.TooltipType == 'string')
                                                        {
                                                            tooltip.TooltipType.split(':').map(function(item){ $newTooltip.addClass(item); });
                                                        }
    
                                                        //append this new row to the tooltips table
                                                        $newTooltip.appendTo($tooltips).data('tooltip', tooltip);
                                                    }
                                                });
                                                    
                                                //handle chatter naviagetion
                                                $row.on('click', '.chatter-icon', function () {
                                                    sforce.one.navigateToSObject(record.recordId,'chatter');
                                                });
                                                
                                                //handle checkins if enabled
                                                if (MA.enabledFeatures.nearbyCheckin)
                                                {
                                                    //try to pull activity type from this query
                                                    var postTo = '';
                                                    try {
                                                        postTo = JSON.parse($plottedQuery.data('baseObjectSettings')).CheckInPostTo;    
                                                    }
                                                    catch (err) { postTo = 'Task'; }
                                                    
                                                    //coompare check-in information to display most recent in list-view
                                                    //grab all information and display most recent
                                                    var checkIn;
                                                    var userName;
                                                    var checkInId;
                                                    if (postTo.indexOf('Task') != -1) {
                                                        if (record.record.Tasks) {
                                                            var formatedDate = formatUserLocaleDate({moment: true});
                                                            var checkinMoment = moment(record.record.Tasks.records[0].LastModifiedDate);
                                                            var checkinDate = checkinMoment.format(formatedDate);
                                                            checkIn = checkinDate;
                                                            userName = record.record.Tasks.records[0].CreatedBy.Name;
                                                            checkInId = record.record.Tasks.records[0].Id;
                                                            
                                                            //open check in highlight red
                                                            if (!record.record.Tasks.records[0].IsClosed) {
                                                                $row.find('.checkin-icon').attr('checkInId', checkInId).addClass('checked-in');
                                                            }
                                                            //record has been checked in today
                                                            else if (record.record.Tasks.records[0].IsClosed && checkinMoment.isSame(now, 'day')) {
                                                                $row.find('.checkin-icon').addClass('checked-out');
                                                            }
                                                            //just show last checking, older than 24hr
                                                            else {
                                                                checkIn = checkIn;
                                                                userName = userName;
                                                                checkInId = '';
                                                            }
                                                        }
                                                        else
                                                        {
                                                            checkIn = "{!$Label.MA_Never}";
                                                            userName = '';
                                                            checkInId = '';
                                                        }
                                                    }
                                                    else if (postTo.indexOf('Event') != -1) {
                                                        if (record.record.Events) {
                                                            var formatedDate = formatUserLocaleDate({moment: true});
                                                            var checkinMoment = moment(record.record.Events.records[0].LastModifiedDate);
                                                            var checkinDate = checkinMoment.format(formatedDate);
                                                            checkIn = checkinDate;
                                                            userName = record.record.Events.records[0].CreatedBy.Name;
                                                            checkInId = record.record.Events.records[0].Id;
                                                            
                                                            //open check in highlight red
                                                            if (record.record.Events.records[0].Subject.indexOf('Check In @') == 0) {
                                                                $row.find('.checkin-icon').attr('checkInId', checkInId).addClass('checked-in');
                                                            }
                                                            //record has been checked in today
                                                            else if (record.record.Events.records[0].Subject.indexOf('Check In @') != 0 && checkinMoment.isSame(now, 'day')) {
                                                                $row.find('.checkin-icon').addClass('checked-out');
                                                            }
                                                            //just show last checking, older than 24hr
                                                            else {
                                                                checkIn = checkIn;
                                                                userName = userName;
                                                                checkInId = '';
                                                            }
                                                        }
                                                    }
                                                    $row.find('.checkin-id').text(userName);
                                                    $row.find('.last-checkin').text(checkIn);
                                                    
                                                    //handle check-in check-out
                                                    $row.on('click', '.checkin-icon', function () {
                                                        checkInId = $(this).attr('checkinid');
                                                        var marker = record.marker;
                                                        var $icon = $(this);
                                                        $icon.addClass('updating');
                                                        if($(this).hasClass('checked-in'))
                                                        {
                                                            if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select' && checkInId != '' && checkInId.indexOf('00U') < 0) {
                                                                //show custom disposition

                                                                $icon.data('CheckInId',checkInId);
                                                                var options = {
                                                                    button : $icon,
                                                                    record : marker.record,
                                                                    marker : marker
                                                                }
                                                                ShowCheckOutDisposition(options);
                                                            }
                                                            else {
                                                                CheckOut(marker,checkInId,function(response) {
                                                                    if (response.success) {
                                                                        //change icon
                                                                        $icon.removeClass('updating').removeClass('checked-in').removeClass('error').addClass('checked-out').attr('data-id', response.Id);
                                                                        
                                                                        //update text
                                                                        //$markerTable.find('.checkin-date').text(response.date);
                                                                        //$markerTable.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                                                        $icon.find('cirlce,path').attr('fill','#00c200');
                                                                        var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                                                        $row.find('.checkin-icon').removeClass('checked-in').removeClass('error').addClass('checked-out').attr('data-id', response.Id);
                                                                        $row.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                                                        $row.find('.last-checkin').text(response.date);
                                                                        
                                                                        //update activity record
                                                                        if (response.Id && response.Id.indexOf('00T') == 0) {
                                                                            record.record.Tasks.records[0].IsClosed = true;
                                                                            record.record.Tasks.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                                                            record.record.Tasks.records[0].LastModifiedDate = response.date;
                                                                        }
                                                                        else if (response.Id) {
                                                                            record.record.Events.records[0].Subject = 'Check Out @';
                                                                            record.record.Events.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                                                            record.record.Events.records[0].LastModifiedDate = response.date;
                                                                        }
                                                                        try{
                                                                            $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                                                        }
                                                                        catch (e) {
                                                                            
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //error
                                                                        $icon.removeClass('updating').addClass('error');
                                                                        try{
                                                                            $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                                                        }
                                                                        catch (e) {
                                                                            
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select' && MA.CheckIn.general['AutoCheckOutEnabled'] == 'true') {
                                                                var options = {
                                                                    button : $icon,
                                                                    record : marker.record,
                                                                    marker : marker
                                                                }
                                                                ShowCheckInDisposition(options);
                                                            }
                                                            else {
                                                                CheckIn(marker,function (response) {
                                                                    if (response.success) {
                                                                    
                                                                        //change icon
                                                                        var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                                                        if (MA.enabledFeatures.autoCheckOut) {
                                                                                try {
                                                                                    $row.find('.checkin-icon').addClass('checked-out').removeClass('error').removeClass('checked-in').removeAttr('checkInId');
                                                                                    $icon.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                                                                    $icon.find('cirlce,path').attr('fill','#00c200');
                                                                                    $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                                                                }
                                                                                catch (e) {
                                                                                    $row.find('.checkin-icon').addClass('checked-out').removeClass('error').removeClass('checked-in').removeAttr('checkInId');
                                                                                    $icon.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                                                                }
                                                                            }
                                                                            else {
                                                                                try {
                                                                                    $row.find('.checkin-icon').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('checkInId', response.checkInId);
                                                                                    $icon.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                                                                    $icon.find('cirlce,path').attr('fill','#ff0000');
                                                                                    $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                                                                }
                                                                                catch (e) {
                                                                                    $row.find('.checkin-icon').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('checkInId', response.checkInId);
                                                                                    $icon.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                                                                }
                                                                            }
                                                                        
                                                                        //update text
                                                                        //$markerTable.find('.checkin-date').text(response.date);
                                                                        //$markerTable.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                                                        $row.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                                                        $row.find('.last-checkin').text(response.date);
                                                                        
                                                                        //update activity record
                                                                        if (response.checkInId.indexOf('00T') == 0) {
                                                                            record.record.Tasks = record.record.Tasks || { records: [{ CreatedBy: {} }] };
                                                                            record.record.Tasks.records[0].IsClosed = false;
                                                                            record.record.Tasks.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                                                            record.record.Tasks.records[0].LastModifiedDate = response.date;
                                                                            record.record.Tasks.records[0].Id = response.checkInId;
                                                                        }
                                                                        else {
                                                                            record.record.Events = record.record.Events || { records: [{ CreatedBy: {} }] };
                                                                            record.record.Events.records[0].Subject = 'Check In @';
                                                                            record.record.Events.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                                                            record.record.Events.records[0].LastModifiedDate = response.date;
                                                                            record.record.Events.records[0].Id = response.checkInId;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //error
                                                                        var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                                                        $row.find('.checkin-icon').removeClass('updating').addClass('error');
                                                                    }
                                                                });
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    //hide all checkin functionality
                                                    $row.find('.checkin-icon, .checkin-info').remove();
                                                }
                                                
                                                //hide listview loading
                                                $('.list-table .results-loading').hide();
                                                
                                                //add to table
                                                $row.appendTo('.list-table');
                                            
                                            
                                                record.marker = CreateMarkerFromRecord(record);
                                                //record.clusterMarker = CreateMarkerFromRecord(record, {isForCluster:true});
                                                markerCount++;
                                                batchMarkerCount++;
                                            }
                                            
                                            if (markerCount >= (userSettings.maxQuerySize || MA.defaults.maxQuerySize)) {
                                                return false;
                                            }
                                            else if (batchMarkerCount >= 100) {
                                                done = false;
                                                batchMarkerCount = 0;
                                                $plottedQuery.find('.status').html('Creating Markers: ' + markerCount);
                                                $('.query-status').html('Creating Markers: ' + markerCount);
                                                setTimeout(doCreateMarkers, 10);
                                                return false;
                                            }
                                            
                                        });
                                        
                                        //if we're done creating markers then move on to rendering
                                        if (done) {
                                            queryCallback();
                                            //populate marker labels
                                            $plottedQuery.addClass('isPlotted');
                                            $plottedQuery.data('numMarkers', markerCount);
                                            $plottedQuery.find('.legend-row').each(function () {
                                                $(this).find('.visiblemarkers').text('0');
                                                $(this).find('.of').text('of');
                                                $(this).find('.totalmarkers').text($(this).data('numMarkers'));
                                                
                                                //mark and show this legend row based on whether or not it has markers (used for the show more/less functionality)
                                                if ($(this).data('numMarkers') > 0){
                                                    $(this).show();
                                                }
                                                else {
                                                    $(this).addClass('empty');
                                                }
                                            });
                                            
                                            //update legend show/hide features based on the data
                                            if ($plottedQuery.find('.legend-row').length > 0) {
                                                $plottedQuery.find('.legend-showhide').show();
                                            }
                                            if ($plottedQuery.find('.legend-row.empty').length > 0) {
                                                $plottedQuery.find('.legend-moreless').show();
                                            }
                                            
                                            //render the query in each mode that was requested
                                            setTimeout(function doRender() {
                                                var mode = renderAs.shift();
                                                
                                                //status
                                                $plottedQuery.find('.status').html('Rendering ' + mode);
                                                $('.query-status').html('Rendering ' + mode);
                                                //render
                                                renderQuery($plottedQuery, mode, function () {
                                                    
                                                    //done?
                                                    if (renderAs.length > 0) {
                                                        //no, continue rendering
                                                        setTimeout(doRender);
                                                    }
                                                    else {
                                                        //yes, move on
                                                        $plottedQuery.removeClass('loading');
                                                        
                                                        //if this is a Record query, we need to zoom to the record and potentially place a prox circle
                                                        if ($plottedQuery.data('id').indexOf('Record-') == 0)
                                                        {
                                                            var mapItRecord;
                                                            
                                                            //update the name of this plotted query to include a link to the first record (should only be one record)
                                                            $.each($plottedQuery.data('records') || {}, function (index, record) {
                                                                $plottedQuery.find('.basicinfo-name').html('Map It - <a href="/'+$plottedQuery.data('RecordId')+'" target="_blank">'+extractTooltipValue($plottedQuery.data('tooltips')[0], record)+'</a>');
                                                                $plottedQuery.find('.basicinfo-baseobjectname').text($plottedQuery.data('baseObjectLabel'));
                                                                mapItRecord = record;
                                                                return false;
                                                            });
                                                        
                                                            if ($('.mapit-proximity-on').is(':checked'))
                                                            {
                                                                //this is a map it query and we need to put a prox circle on the marker
                                                                try {
                                                                    addProximityLayer({ 
                                                                        proximityType: 'Circle', 
                                                                        latitude: mapItRecord.markerLatitude, 
                                                                        longitude: mapItRecord.markerLongitude, 
                                                                        record: mapItRecord,
                                                                        success: function () {
                                                                            ZoomToFit();
                                                                            ChangeVisibilityWhenCircleIsAdded();
                                                                        } 
                                                                    });
                                                                }
                                                                catch (err) {
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //no need for a prox circle, just zoom to fit
                                                                ZoomToFit();
                                                                if (map.zoomLevel > 15) map.set("zoomLevel", 15); //zoom out if too close   
                                                            }
                                                        }
                                                        
                                                        //update the saved query name and the base object label
                                                        $plottedQuery.find('.basicinfo-name').html($plottedQuery.data('savedQueryName'));
                                                        $plottedQuery.find('.basicinfo-baseobjectname').html($plottedQuery.data('baseObjectLabel'));
                                                        
                                                        //reload any popups that this may have affected
                                                        refreshPopups();
                                                    }
                                                });
                                            
                                            });
                                        
                                        }
                                        
                                    }, 20);
                                }
                                
                                //keep sending requests until we're up to 10 or there's nothing left to geocode
                                var initialRequestCounter = 0;
                                var recordsToGeocode = $plottedQuery.data('recordsToGeocode');
                                if (recordsToGeocode.length == 0)
                                {
                                    geocodingComplete();
                                    processQueryBatch--;
                                }
                                else
                                {
                                    while (recordsToGeocode.length > 0 && initialRequestCounter < 10)
                                    {
                                        initialRequestCounter++;
                                        var recordsToSend = recordsToGeocode.splice(0, 50);
                                        $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + recordsToSend.length);
                                        geocodeMultipleRecords(recordsToSend, $plottedQuery.data('baseObjectId'), function handleGeocode (numSuccess, numFail) {
                                            $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') - numSuccess - numFail);
                                            $plottedQuery.find('.status').html('Geocoding: ' + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut') - recordsToGeocode.length) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
                                            $('.query-status').html('Geocoding: ' + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut') - recordsToGeocode.length) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
                                            $plottedQuery.data('numSuccessfulGeocodes', $plottedQuery.data('numSuccessfulGeocodes') + numSuccess);
                                            $plottedQuery.data('numFailedGeocodes', $plottedQuery.data('numFailedGeocodes') + numFail);
                                            
                                            //send out a new request if there are any.  move on to rendering if we're done
                                            if (recordsToGeocode.length > 0) {
                                                var nextRecordsToSend = recordsToGeocode.splice(0, 50);
                                                $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + nextRecordsToSend.length);
                                                geocodeMultipleRecords(nextRecordsToSend, $plottedQuery.data('baseObjectId'), handleGeocode);
                                            }
                                            else if ($plottedQuery.data('numGeocodeRequestsOut') == 0) {
                                                geocodingComplete();
                                                processQueryBatch--;
                                            }
                                        });//end geocode record
                                    }//end while
                                }
                            }
                        }, 500)
                    );
                }//analyze callback
            });//analyzeQuery
        }
        
        function processQuery (options)
        {
            //hide refresh button and show status
            $('.refresh-map-view').hide();
            $('.refresh-button').show();
            $('.map-button-wrapper').css('bottom', '65px').css('top', '');
            $('.query-status').show().html('Refreshing Query...');
            
            var recordZoomIndex = options.mapZoomIndex;
            var $plottedQuery;
            
            //remove previous list view
            $('#listdiv .list-view-row').remove();
            
            if(mapZoomIndex == options.mapZoomIndex  && runningQuery == false)
            {
                //if we don't have a position yet just don't do anything
                /*if(myCachedPosition != null) {
                    leafletPosition = myCachedPosition;
                }
                else {
                    return;
                }*/
                
                //if the map is loaded, use the bounds of the map, otherwise use a 300 meter radius from our current position
                var mapBounds;
                if (mapLoaded) { 
                    mapBounds = MA.map.getBounds();
                }
                else {
                    mapBounds = new google.maps.LatLngBounds(google.maps.geometry.spherical.computeOffset(leafletPosition, 300, 225), google.maps.geometry.spherical.computeOffset(leafletPosition, 300, 45));
                }
                
                //hide list watermark
                $('.list-table .watermark-wrapper').hide();
                
                //show listview loading
                $('.list-table .results-loading').show();
                
                //keep multiple queries from running until finished
                runningQuery = true;
                var limit = Math.round(100/options.plottedQuery.length);
                processQueryBatch = options.plottedQuery.length;
                
                //check settings for visible area only
                var visibleArea = $('.visible-area-settings.settings-row').hasClass('checked') ? true : false;
                
                
                //create an async batch
                var q = async.queue(function (plotOptions, callback) {
                    //console.log(plotOptions.query);
                    PlotQuery(plotOptions.query, ['Markers'], plotOptions.visibleArea, {limit:plotOptions.limit},function() {
                        callback();
                    });
                    
                });
                
                q.concurrency = 1;
                var pqs = options.plottedQuery || [];
                for(var i = 0; i < pqs.length; i++){
                    var query = pqs[i];
                    if (query.id) { query.savedQueryId = query.id; }
                    //query.plottedQuery = $('#PlottedQueriesContainer .saved-queries-row[data-id="'+query.savedQueryId+'"]');
                    //console.log($pq)
                    //requestData.plottedQuery
                    var qOptions = {
                        limit: limit,
                        query : query,
                        visibleArea : visibleArea
                    };
                    if(query.plottedQuery.hasClass('isPlotted')) {
                        //do nothing
                    }
                    else {
                        q.push(qOptions,function(res){});
                    }
                }
                
                q.drain = function() {
                    runningQuery = false;
                                        
                    //remove refreshing class 
                    $('.refresh-map-view').removeClass('refreshing');
                    
                    //hide button
                    $('.refresh-button').hide();
                    $('.query-status').hide();
                    $('.poi-status').hide();
                }
            }
        }
        
        var imgLoaderDimensions = {};
        var imgLoaderCounts = {};
        var imgLoaderIntervals = {};
        function imgLoaded () 
        {
            imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
            imgLoaderDimensions[this.imgId] = {
                width   : this.width,
                height  : this.height 
            };
        }
        function imgError ()
        {
            imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
        }
        
        function goToRecord (recordId) {
            var $record = $(recordId);
        
            try{
                //will only work in sforce one
                sforce.one.navigateToSObject($record.attr('data-id'));
            }
            catch (e){
                //if not sforce one
                window.location.href = '/'+$record.attr('data-id');
            }
        }
        
        function cluster_click ()
        {
            //do nothing
        }
        
        function cluster_context ()
        {
            //do nothing, catch for right click on mobile
        }
        
        function marker_Context()
        {
            //do nothing, catch for right click on mobile
        }
        
        function myposition_Click(e)
        {
            
        }
        
        function htmlDecode(str)
        {
            return String(str)
                .replace(/&amp;/g, '&')
                .replace(/&quot;/g, '"')
                .replace(/&#39;/g, '\'')
                .replace(/&lt;/g, '<')
                .replace(/&gt;/g, '>');
        }
                
        var clickedMarker;
        function marker_Click(e,options)
        {
            
            //remove previous buttons and marker info
            $('.marker-info-wrapper .marker-info').remove();
            $('.marker-table-wrapper .marker-button').remove();
            
            markerClick = true;
            options = $.extend({
                markerType: 'marker'
            }, options || {});
            
            var pMarker = this;
            var marker = this;
            var record = this.record;
            
            //if old icon set to original circle
            if(clickedMarker) {
                clickedMarker.icon.setIcon(clickedMarker.svg);
            }
            
            //store old marker
            clickedMarker = {
                icon:   this,
                svg:    this.getIcon()
            };
            
            //set the new marker stored on the record
            marker.setIcon(marker.clickedIcon);
            
            //center marker
            MA.map.setCenter(marker.getPosition());
            
            //grab query info from recent tab
            var queryMetadata = $(".selected-layers-table .saved-queries-row[data-id='"+marker.SavedQryId+"']").data();
            
            //start building content from template
            var $markerTable = $('#templates .marker-info.template').clone().removeClass('template');
            
            //add tooltips
            var $tooltips = $markerTable.find('.tooltips .tooltip-wrapper');
            var tooltip1Value = 'Tooltip 1';
            $.each(queryMetadata.tooltips, function (index, tooltip) 
            {
                //create a new tooltip row
                var $newTooltip = $("<div class='tooltip-row'><div class='icon'></div><div class='label'>"+tooltip.FieldLabel+":</div><div class='value'>"+htmlDecode(extractTooltipValue(tooltip, record, true))+"</div></div>");
                if ( (/tooltip/i).test(tooltip.TooltipType) ) 
                {
                    var newTooltipTitle = typeof tooltip.TooltipType == 'string' ? tooltip.TooltipType.split(':').reduce(function(acc, curr){return curr+' '+acc}) + ' field' : '';
                    $newTooltip.find('.icon').attr('title', newTooltipTitle);
    
                    // assign classes
                    if(typeof tooltip.TooltipType == 'string')
                    {
                        tooltip.TooltipType.split(':').map(function(item){ $newTooltip.addClass(item); });
                    }
                    
                    $newTooltip.insertAfter($tooltips.find('.checkin-row.tooltip-row')).data('tooltip', tooltip);
                }
                else {
                    // $newTooltip.addClass(tooltip.TooltipType);
                    // assign classes
                    if(typeof tooltip.TooltipType == 'string')
                    {
                        tooltip.TooltipType.split(':').map(function(item){ $newTooltip.addClass(item); });
                    }
    
                    $newTooltip.appendTo($tooltips).data('tooltip', tooltip);
                }
            });
            
            //handle checkins if enabled
            var $checkIn;
            if (MA.enabledFeatures.nearbyCheckin)
            {
                //try to pull activity type from this query
                var postTo = '';
                try {
                    postTo = JSON.parse(record.plottedQuery.data('baseObjectSettings')).CheckInPostTo;  
                }
                catch (err) { postTo = 'Task'; }
                
                //add checkin information in tooltips
                var checkIn;
                var userName;
                var checkInId;
                var checkinStatus;
                if (postTo.indexOf('Task') != -1 && record.record.Tasks)
                {
                    var formatedDate = formatUserLocaleDate({moment: true});
                    var checkinMoment = moment(record.record.Tasks.records[0].LastModifiedDate);
                    var checkinDate = checkinMoment.format(formatedDate);
                    checkIn = checkinDate;
                    userName = record.record.Tasks.records[0].CreatedBy.Name;
                    checkInId = record.record.Tasks.records[0].Id;
                    
                    if (!record.record.Tasks.records[0].IsClosed) {
                        checkinStatus = 'checked-in';
                    }
                    else if (record.record.Tasks.records[0].IsClosed && checkinMoment.isSame(moment(), 'day')) {
                        checkinStatus = 'checked-out';
                    }
                    else {
                        checkIn = checkIn;
                        userName = userName;
                        checkInId = '';
                    }
                }
                else if (postTo.indexOf('Event') != -1 && record.record.Events)
                {
                    var formatedDate = formatUserLocaleDate({moment: true});
                    var checkinMoment = moment(record.record.Events.records[0].LastModifiedDate);
                    var checkinDate = checkinMoment.format(formatedDate);
                    checkIn = checkinDate;
                    userName = record.record.Events.records[0].CreatedBy.Name;
                    checkInId = record.record.Events.records[0].Id;
                    
                    if (record.record.Events.records[0].Subject.indexOf('Check In @') == 0) {
                        checkinStatus = 'checked-in';
                    }
                    else if (checkinMoment.isSame(moment(), 'day')) {
                        checkinStatus = 'checked-out';
                    }
                    else {
                        checkIn = checkIn;
                        userName = userName;
                        checkInId = '';
                    }
                }
                else
                {
                    checkIn = "{!$Label.MA_Never}";
                    userName = '';
                    checkInId = '';
                }
                $markerTable.find('.tooltips .checkin-row .checkin-id').text(userName);
                $markerTable.find('.tooltips .checkin-row .checkin-date').text(checkIn);

                //handle checkin click
                $checkIn = $('.icon-templates .check-in').clone().data('marker',pMarker).attr('data-id', checkInId);
                if(checkinStatus == 'checked-in')
                {
                    $checkIn.addClass('checked-in');
                    $checkIn.find('cirlce,path').attr('fill','#ff0000');
                }
                else if (checkinStatus == 'checked-out')
                {
                    $checkIn.addClass('checked-out');
                    $checkIn.find('cirlce,path').attr('fill','#00c200');
                }
                
                $checkIn.on('click', function () {
                    //get the new checkInId
                    checkInId = $(this).attr('data-id');

                    var marker = $(this).data('marker');
                    var $icon = $(this);
                    $icon.data('CheckInId',checkInId);
                    $icon.find('svg')[0].setAttribute('viewBox', '4 4 6000 6000')
                    $icon.addClass('updating');

                    //get the new checkInId
                    checkInId = $(this).attr('data-id');

                    if($(this).hasClass('checked-in'))
                    {
                        if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select' && checkInId != '' && checkInId.indexOf('00U') < 0) {
                            //show custom disposition
                            var options = {
                                button : $icon,
                                record : marker.record,
                                marker : marker
                            }
                            ShowCheckOutDisposition(options);
                            $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                        }
                        else {
                            CheckOut(marker,checkInId,function(response) {
                                if (response.success) {
                                    //change icon
                                    $icon.removeClass('updating').removeClass('checked-in').removeClass('error').addClass('checked-out').attr('data-id', response.Id);
                                    
                                    //update text
                                    $markerTable.find('.checkin-date').text(response.date);
                                    $markerTable.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $icon.find('cirlce,path').attr('fill','#00c200');
                                    var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                    $row.find('.checkin-icon').removeClass('checked-in').removeClass('error').addClass('checked-out').attr('data-id', response.Id);
                                    $row.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $row.find('.last-checkin').text(response.date);
                                    
                                    //update activity record
                                    if (response.Id && response.Id.indexOf('00T') == 0) {
                                        record.record.Tasks.records[0].IsClosed = true;
                                        record.record.Tasks.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Tasks.records[0].LastModifiedDate = response.date;
                                    }
                                    else if (response.Id) {
                                        record.record.Events.records[0].Subject = 'Check Out @';
                                        record.record.Events.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Events.records[0].LastModifiedDate = response.date;
                                    }
                                    $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                }
                                else
                                {
                                    //error
                                    $icon.removeClass('updating').addClass('error');
                                    $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                }
                            });
                        }
                    }
                    else
                    {
                        if(MA.CheckIn && MA.CheckIn.general && MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select' && MA.CheckIn.general['AutoCheckOutEnabled'] == 'true') {
                            var options = {
                                button : $icon,
                                record : marker.record,
                                marker : marker
                            }
                            ShowCheckInDisposition(options);
                        }
                        else {
                            CheckIn(marker,function (response) {
                                if (response.success) {
                                
                                    //change icon
                                    var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                    if (MA.enabledFeatures.autoCheckOut) {
                                        try {
                                            $row.find('.checkin-icon').addClass('checked-out').removeClass('error').removeClass('checked-in').removeAttr('checkInId');
                                            $icon.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                            $icon.find('cirlce,path').attr('fill','#00c200');
                                            $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                        }
                                        catch (e) {
                                            $row.find('.checkin-icon').addClass('checked-out').removeClass('error').removeClass('checked-in').removeAttr('checkInId');
                                            $icon.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                        }
                                    }
                                    else {
                                        try {
                                            $row.find('.checkin-icon').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('checkInId', response.checkInId);
                                            $icon.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                            $icon.find('cirlce,path').attr('fill','#ff0000');
                                            $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                        }
                                        catch (e) {
                                            $row.find('.checkin-icon').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('checkInId', response.checkInId);
                                            $icon.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                        }
                                    }
                                    
                                    //update text
                                    $markerTable.find('.checkin-date').text(response.date);
                                    $markerTable.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $row.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $row.find('.last-checkin').text(response.date);
                                    
                                    //update activity record
                                    if (response.checkInId.indexOf('00T') == 0) {
                                        record.record.Tasks = record.record.Tasks || { records: [{ CreatedBy: {} }] };
                                        record.record.Tasks.records[0].IsClosed = false;
                                        record.record.Tasks.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Tasks.records[0].LastModifiedDate = response.date;
                                        record.record.Tasks.records[0].Id = response.checkInId;
                                    }
                                    else {
                                        record.record.Events = record.record.Events || { records: [{ CreatedBy: {} }] };
                                        record.record.Events.records[0].Subject = 'Check In @';
                                        record.record.Events.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Events.records[0].LastModifiedDate = response.date;
                                        record.record.Events.records[0].Id = response.checkInId;
                                    }
                                }
                                else
                                {
                                    //error
                                    $icon.removeClass('updating').addClass('error');
                                    $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                }
                            });
                        }
                    }
                });
            }
            else {
                $markerTable.find('.tooltips .checkin-row').remove();
            }
            
            //convert distance
            var type = $('#settingsdiv').data('distance');
            var distance = leafletPosition != null ? google.maps.geometry.spherical.computeDistanceBetween(leafletPosition, record.latLng) : '';
            var formattedDistance = extractDistance($('#settingsdiv').data('distance'),distance);
            
            //update marker info values
            $markerTable.find('.record-name').html(htmlDecode(extractTooltipValue(queryMetadata.tooltips[0], record, true))).attr('data-id', queryMetadata.tooltips[0].DisplayType == 'REFERENCE' ? record.record[queryMetadata.tooltips[0].ActualFieldName] : record.record.Id);
            $markerTable.find('.record-address').html(record.markerAddress);
            $markerTable.find('.record-distance').text(formattedDistance);
            
            //format for iphone smaller screen
            var iphone = false;
            var height = $(window).height()*.5;
            if( /iPhone/i.test(navigator.userAgent) ) {
                iphone = true;
                height = $(window).height()*.4;
            }
            $markerTable.find('.tooltips').css('height', height + "px");
            $markerTable.find('.tooltips .tooltip-wrapper').css('height', (height)-60 + "px");
            
            //add to info table and show record
            $('.bottom-bar-wrapper .marker-info-wrapper').show();
            $markerTable.appendTo($('.bottom-bar-wrapper .marker-info-wrapper')); 
            var recordHeight = $('.bottom-bar-wrapper .marker-info-wrapper').height();
            var buttonHeight = (recordHeight-40)/2;
            $('.map-button-wrapper').css('bottom', recordHeight+20);
            $markerTable.find('.record-more-info').css('top','23%');
            
            //show more info on click
            $markerTable.on('click', '.record-more-info', function () {
                markerClick = true;
                var $wrap = $(this);
                if($(this).hasClass('open')) {
                    $wrap.removeClass('open');
                    $wrap.find('.MAIcon').removeClass('ion-android-arrow-dropdown-circle').addClass('ion-android-arrow-dropup-circle');
                    $('.marker-table-wrapper').hide();
                    $('.bottom-bar-wrapper .marker-info-wrapper .tooltips').hide();
                    $('.map-button-wrapper').animate({bottom: recordHeight+20},500);
                    
                    //center marker with tooltip info
                    MA.map.setCenter(marker.getPosition());
                    markerClick = false;
                }
                else {
                    $wrap.addClass('open');
                    $wrap.find('.MAIcon').addClass('ion-android-arrow-dropdown-circle').removeClass('ion-android-arrow-dropup-circle');
                    $('.marker-table-wrapper').show();
                    $('.bottom-bar-wrapper .marker-info-wrapper .tooltips').show();
                    if(iphone) {
                        $('.map-button-wrapper').animate({bottom: '70%'},500);
                    }
                    else {
                        $('.map-button-wrapper').animate({bottom: '80%'},500);
                    }
                    
                    //center marker with tooltip info
                    MA.map.setCenter(marker.getPosition());
                    MA.map.panBy(0,150);
                    markerClick = false;
                }
            });
            
            //add navigation funciton
            var $navigation = $('.icon-templates .get-directions').clone();
            $navigation.on('click', '.navigation-link', function() {
                try {
                    sforce.one.navigateToURL(nativeGPSNavigation (record.latitude,record.longitude));
                }
                catch (err) {
                    window.open(nativeGPSNavigation(record.latitude, record.longitude));
                }
            });

            //add buttons
            if ($checkIn) {
                $('.marker-table-wrapper .marker-table').append($checkIn);
            }
            $('.marker-table-wrapper .marker-table').append($navigation);

            //add more actions
            var $moreActions = $('.icon-templates .more-actions').clone();
            $('.marker-table-wrapper .marker-table').append($moreActions);

            //build aciton buttons
            var actionArray = userSettings.ButtonSetSettings.actionButtons = MAActionFramework.buildLayoutFromContentsListView(userSettings.ButtonSetSettings.tooltipLayout,{
                queryMetadata: queryMetadata,
                record: record,
                markerType: 'marker',
                mode: 'NearBy'
            });
            

            $markerTable.on('click','.more-actions',function() {
                //loop over actions and create html
                actionArray = actionArray || [];
                var html = '';
                for(var i = 0; i < actionArray.length; i++) {
                    var row = actionArray[i];
                    if(row.header) {
                        html += '<div class="item item-header">'+row.label+'</div>';
                    }
                    else {
                        html += '<div class="item action-item" data-type="'+row.type+'" data-action="'+row.action+'">'+row.label+'</div>';
                    }
                }

                //open modal with action options
                var actionPopup = MA.Popup.showMAPopup({
                    title: 'More Actions',
                    template: html,
                    popupId : 'maActionsPopup',
                    width: '100%',
                    height: '100%',
                    buttons: [
                        { 
                        text: 'Cancel',
                        type: 'button-silver'
                        //no onTap or onclick just closes the popup
                        }
                    ]
                });
                //update height;
                $('#maActionsPopup .maPopup-body').css({'overflow-x': 'hidden','padding':'0'});

                //handle onclick events in popup
                $('#maActionsPopup').on('click','.action-item',function() {
                    var $button = $(this);

                    var frameworkAction = $button.attr('data-type') == 'Custom Action'
                        ? MAActionFramework.customActions[$button.attr('data-action')] || null
                        : MAActionFramework.standardActions[$button.attr('data-action')] || null;

                    if (frameworkAction) {
                        switch (frameworkAction.Action)
                        {
                            case 'Iframe':
                                //not supported
                                break;
                                
                            case 'NewWindow':
                                var actionURL = 
                                    frameworkAction.ActionValue +
                                    (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams=1' : '') + 
                                    '&Button=' + encodeURIComponent(frameworkAction.Label) + 
                                    '&RecordId=' + record.record.Id + 
                                    '&Latitude=' + myCachedPositionInfo.coords.latitude + 
                                    '&Longitude=' + myCachedPositionInfo.coords.longitude +
                                    '&Accuracy=' + myCachedPositionInfo.coords.accuracy +
                                    '&Distance=' + google.maps.geometry.spherical.computeDistanceBetween(record.marker.getPosition(), new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude));
                                if(frameworkAction.Options.method == 'GET') {
                                    if(frameworkAction.Options.addRecords) {
                                        actionURL += '&'+frameworkAction.Options.paramName+'=' + record.record.Id;
                                    }
                                    try {
                                        sforce.one.navigateToURL(actionURL);
                                    }
                                    catch (err) {
                                        window.open(actionURL);
                                    }
                                    break;
                                }
                            case 'Javascript':
                                frameworkAction.ActionValue.call(this, {
                                    button: $button,
                                    records: [record],
                                    mode: 'NearBy'
                                });
                            break;
                    
                            default:
                            break;
                        }
                    }

                    //close the popup
                    actionPopup.close()
                });
            });
            
            markerClick = false;
        }

        function ShowCheckInDisposition(options) {
            var $button = options.button;
            var record = options.record;
            var marker = options.marker;
            //verify the checkin location
            var requestData = {};
            if (myCachedPositionInfo != null)
            {
                var distance = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude), marker.getPosition());
                requestData = {
                    SavedQueryId: marker.SavedQryId,
                    id: UserId,
                    lid:marker.record.record.Id,
                    tooltip1: marker.title,
                    clat: myCachedPositionInfo.coords.latitude,
                    clong: myCachedPositionInfo.coords.longitude,
                    caccuracy: myCachedPositionInfo.coords.accuracy,
                    length: distance
                };
            }
            else {
                requestData = {
                    SavedQueryId: marker.SavedQryId,
                    id: UserId,
                    lid:marker.record.record.Id,
                    tooltip1: marker.title,
                    clat: null,
                    clong: null,
                    caccuracy: null,
                    length: null
                };
            }
            
            MA.CheckIn.verifyCheckin(requestData).then(function(res) {
                if(res.success) {
                    var $but = $('<button class="saveDisposition MAbutton button-silver">Finish</button>');
                    if(res.settings && res.settings.CheckInPostTo && res.settings.CheckInPostTo.indexOf('Task') >= 0) {
                        //show the disposition
                        $('#CustomDispositionPopup .customDis-buttons .saveDisposition').remove();
                        //var $but = $('<button class="saveDisposition MAbutton button-silver">Finish</button>');
                        $('#CustomDispositionPopup .customDis-buttons').prepend($but)
                        $('#customDis-loadmask').show();
                        $('#CustomDispositionPopup').show();

                        //show the disposition
                        var fieldSetName = MA.CheckIn.general['Activity-FieldSet']; 
                        $("#customDis-fieldset").html('Loading...').load(MA.resources.CustomDisposition, 'fieldset=' + fieldSetName + '&platform=' + (MA.IsMobile ? 'tablet' : 'desktop'), function () {
                            $('#customDis-loadmask').hide();

                            //fill
                            try { $('#customDis-fieldset .fieldInput[data-field="Subject"]').find('.get-input').val('CheckIn @ ' + marker.title); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="Status"]').find('.get-input').val('Completed'); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutAccuracy"]+'"]').find('.get-input').val(myCachedPositionInfo.coords.accuracy); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDate"]+'"]').find('.get-input').val(UserContext.today); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDistanceFromRecord"]+'"]').find('.get-input').val(distance*0.000621371); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLatitude"]+'"]').find('.get-input').val(myCachedPosition.lat()); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLongitude"]+'"]').find('.get-input').val(myCachedPosition.lng()); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLatitude"]+'"]').find('.get-input').val(myCachedPosition.lat()); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLongitude"]+'"]').find('.get-input').val(myCachedPosition.lng()); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLocationAccuracy"]+'"]').find('.get-input').val(myCachedPositionInfo.coords.accuracy); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-DistanceFromRecord"]+'"]').find('.get-input').val(distance*0.000621371); } catch (err) {}
                        });
                        
                        $but.on('click',function() {
                            //get the field data
                            var fields = {};
                            var FieldsFoundArray = [];
        
                            //show loading
                            $('#CustomDispositionPopup #customDis-loadmask').show();
        
                            //grab fields from the field set
                            $('#customDis-fieldset [class^="field::"]').each(function () 
                            {
                                var fieldName = $(this).attr('data-field');
                                var fieldType = $(this).attr('data-type');
                                
                                FieldsFoundArray.push(fieldName);
                
                                var value = '';
                                if(jQuery(this).find('.get-input').is('img') && fieldType != 'multipicklist') {
                                  value = undefined;
                                }
                                else if(fieldType == 'picklist') {
                                    //find the select value
                                    value = $(this).find('select').val();
                                }
                                else if (fieldType == 'reference') 
                                {
                                    if($(this).find('select').length == 0 && $(this).find('input').val() != '000000000000000') 
                                    {
                                        value = $(this).find('input').val();
                                    }
                                    else if($(this).find('select').length == 1 && $(this).find('span.lookupInput').length == 1) 
                                    {
                                        value = $(this).find('input').val();
                                    }
                                    else 
                                    {
                                        value = $(this).find('select').val();
                                    }
                                }
                                else if (fieldType == 'boolean') {
                                    if($(this).find('input').is(':checked')) {
                                        value = true;
                                    }
                                    else {
                                        value = false;
                                    }
                                }
                                else if (fieldType == 'multipicklist') {
                                    var selectOptions = $(this).find('.get-input optgroup[label="Chosen"]').closest('select').find('option');
                                    value = '';
                                    for(var so = 0; so < selectOptions.length; so++) {
                                        var $option = $(selectOptions[so]);
                                        value += $option.text() + ';';

                                    }
                                }
                                else 
                                {
                                    value = $(this).find('.get-input').val();
                                }
                
                                //if(value != '' && value != undefined)
                                if(value != undefined) 
                                {
                                    fields[fieldName] = value;
                                }
                            });
        
                            //convert fields to an array (this used to be the structure so for now it's easier to just convert back)
                            var fieldsArr = [];
                            $.each(fields, function (name, val) {
                                fieldsArr.push({ name: name, value: val });
                            });
                            fields = fieldsArr;
        
                            //store the request data for saving
                            var dispositionData = {fields : JSON.stringify(fields), fieldSet : MA.CheckIn.general['Activity-FieldSet']};
                            $('#CustomDispositionPopup .customDis-buttons').data('dispositionData',dispositionData);
        
                            CheckIn(marker,function (response) {
                                if (response.success) {
                                    var $markerTable = $('.bottom-bar-wrapper .marker-info');
                                    var record = response.record.record;
                                    //change icon
                                    var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                    if (MA.enabledFeatures.autoCheckOut) {
                                            try {
                                                $row.find('.checkin-icon').addClass('checked-out').removeClass('error').removeClass('checked-in').removeAttr('checkInId');
                                                $button.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                                $button.find('cirlce,path').attr('fill','#00c200');
                                                $button.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                            }
                                            catch (e) {
                                                $row.find('.checkin-icon').addClass('checked-out').removeClass('error').removeClass('checked-in').removeAttr('checkInId');
                                                $button.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                            }
                                        }
                                        else {
                                            try {
                                                $row.find('.checkin-icon').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('checkInId', response.checkInId);
                                                $button.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                                $button.find('cirlce,path').attr('fill','#ff0000');
                                                $button.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                            }
                                            catch (e) {
                                                $row.find('.checkin-icon').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('checkInId', response.checkInId);
                                                $button.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                            }
                                        }
                                    
                                    //update text
                                    $markerTable.find('.checkin-date').text(response.date);
                                    $markerTable.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $row.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $row.find('.last-checkin').text(response.date);
                                    
                                    //update activity record
                                    if (response.checkInId.indexOf('00T') == 0) {
                                        record.record.Tasks = record.record.Tasks || { records: [{ CreatedBy: {} }] };
                                        record.record.Tasks.records[0].IsClosed = false;
                                        record.record.Tasks.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Tasks.records[0].LastModifiedDate = response.date;
                                        record.record.Tasks.records[0].Id = response.checkInId;
                                    }
                                    else {
                                        record.record.Events = record.record.Events || { records: [{ CreatedBy: {} }] };
                                        record.record.Events.records[0].Subject = 'Check In @';
                                        record.record.Events.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Events.records[0].LastModifiedDate = response.date;
                                        record.record.Events.records[0].Id = response.checkInId;
                                    }
                                }
                                else
                                {
                                    //error
                                    $button.removeClass('updating').addClass('error');
                                    $button.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                }
        
                                cancelDisposition();
                            });
                        });
                    }
                    else {
                        //do normal check in
                        CheckIn(marker,function (response) {
                            if (response.success) {
                                var $markerTable = $('.bottom-bar-wrapper .marker-info');
                                //change icon
                                if (MA.enabledFeatures.autoCheckOut) {
                                    try {
                                        $button.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                        $button.find('cirlce,path').attr('fill','#00c200');
                                        $button.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                    }
                                    catch (e) {
                                        $button.removeClass('updating').addClass('checked-out').removeClass('error').removeAttr('data-id');
                                    }
                                }
                                else {
                                    try {
                                        $button.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                        $button.find('cirlce,path').attr('fill','#ff0000');
                                        $button.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                    }
                                    catch (e) {
                                        $button.removeClass('updating').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('data-id', response.checkInId);
                                    }
                                }
                                
                                //update text
                                $markerTable.find('.checkin-date').text(response.date);
                                var record = marker.record;
                                $markerTable.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                $row.find('.checkin-icon').removeClass('checked-out').removeClass('error').addClass('checked-in').attr('checkInId', response.checkInId);
                                $row.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                $row.find('.last-checkin').text(response.date);
                                
                                //update activity record
                                if (response.checkInId.indexOf('00T') == 0) {
                                    record.record.Tasks = record.record.Tasks || { records: [{ CreatedBy: {} }] };
                                    record.record.Tasks.records[0].IsClosed = false;
                                    record.record.Tasks.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                    record.record.Tasks.records[0].LastModifiedDate = response.date;
                                    record.record.Tasks.records[0].Id = response.checkInId;
                                }
                                else {
                                    record.record.Events = record.record.Events || { records: [{ CreatedBy: {} }] };
                                    record.record.Events.records[0].Subject = 'Check In @';
                                    record.record.Events.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                    record.record.Events.records[0].LastModifiedDate = response.date;
                                    record.record.Events.records[0].Id = response.checkInId;
                                }
                            }
                            else
                            {
                                //error
                                $button.removeClass('updating').addClass('error');
                                $button.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                            }

                            cancelDisposition();
                        });
                    }
                }
                else {
                    alert("Error Checking In. " +  res.data);
                    $button.removeClass('updating').addClass('error');
                    try {
                        $button.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                    }catch (e) {}
                    NotifyError("Error Checking In", res.data);
                }
            });
        }

        function ShowCheckOutDisposition (options) {
            var record = options.record;
            var marker = options.marker;
            var $button = options.button;
            var checkInId = $button.data('CheckInId');

            //query for task id info, fields may be in field set
            var queryString = 'Select Subject,';
            var fieldsArr = [];
            for(key in MA.CheckIn.general) {
                var field = MA.CheckIn.general[key];
                if(key != 'AutoCheckOutEnabled' && key != 'Activity-FieldSet' && field != 'Select') {
                    //queryString = queryString + ' ' + field+',';
                    if($.inArray(field , fieldsArr) === -1) fieldsArr.push(field );
                }
            }
            queryString += fieldsArr.join();
            queryString += " From Task Where Id = '"+checkInId+"'";
            
            var processData = { 
                ajaxResource : 'MATooltipAJAXResources',
                action: 'do_query',
                q: queryString
            };
            
            Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                processData,
                function(response, event){
                    if(response.records) {
                        var record = response.records[0];
                        //show the disposition
                        $('#CustomDispositionPopup .customDis-buttons .saveDisposition').remove();
                        var $but = $('<button class="saveDisposition MAbutton button-silver">Finish</button>');
                        $('#CustomDispositionPopup .customDis-buttons').prepend($but);
                        $('#customDis-loadmask').show();
                        $('#CustomDispositionPopup').show();
    
                        //show the disposition
                        var fieldSetName = MA.CheckIn.general['Activity-FieldSet']; 
                        $("#customDis-fieldset").html('Loading...').load(MA.resources.CustomDisposition, 'fieldset=' + fieldSetName + '&platform=' + (MA.IsMobile ? 'tablet' : 'desktop'), function () {
                            $('#customDis-loadmask').hide();
    
                            //fill
                            try { $('#customDis-fieldset .fieldInput[data-field="Subject"]').find('.get-input').val(record.Subject); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="Status"]').find('.get-input').val('Completed'); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutAccuracy"]+'"]').find('.get-input').val(myCachedPositionInfo.coords.accuracy); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDate"]+'"]').find('.get-input').val(UserContext.today); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutDistanceFromRecord"]+'"]').find('.get-input').val(distance*0.000621371); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLatitude"]+'"]').find('.get-input').val(myCachedPosition.lat()); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CheckOutLongitude"]+'"]').find('.get-input').val(myCachedPosition.lng()); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLatitude"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-CreatedLatitude"]]); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLongitude"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-CreatedLongitude"]]); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-CreatedLocationAccuracy"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-CreatedLocationAccuracy"]]); } catch (err) {}
                            try { $('#customDis-fieldset .fieldInput[data-field="'+MA.CheckIn.general["Activity-DistanceFromRecord"]+'"]').find('.get-input').val(record[MA.CheckIn.general["Activity-DistanceFromRecord"]]); } catch (err) {}
                        });
    
                        $but.on('click',function() {
                            //get the field data
                            var fields = {};
                            var FieldsFoundArray = [];
    
                            //show loading
                            $('#CustomDispositionPopup #customDis-loadmask').show();
    
                            //grab fields from the field set
                            $('#customDis-fieldset [class^="field::"]').each(function () 
                            {
                                var fieldName = $(this).attr('data-field');
                                var fieldType = $(this).attr('data-type');
                                
                                FieldsFoundArray.push(fieldName);
                
                                var value = '';
                                if(jQuery(this).find('.get-input').is('img') && fieldType != 'multipicklist') {
                                  value = undefined;
                                }
                                else if(fieldType == 'picklist') {
                                    //find the select value
                                    value = $(this).find('select').val();
                                }
                                else if (fieldType == 'reference') 
                                {
                                    if($(this).find('select').length == 0 && $(this).find('input').val() != '000000000000000') 
                                    {
                                        value = $(this).find('input').val();
                                    }
                                    else if($(this).find('select').length == 1 && $(this).find('span.lookupInput').length == 1) 
                                    {
                                        value = $(this).find('input').val();
                                    }
                                    else 
                                    {
                                        value = $(this).find('select').val();
                                    }
                                }
                                else if (fieldType == 'boolean') {
                                    if($(this).find('input').is(':checked')) {
                                        value = true;
                                    }
                                    else {
                                        value = false;
                                    }
                                }
                                else if (fieldType == 'multipicklist') {
                                    var selectOptions = $(this).find('.get-input optgroup[label="Chosen"]').closest('select').find('option');
                                    value = '';
                                    for(var so = 0; so < selectOptions.length; so++) {
                                        var $option = $(selectOptions[so]);
                                        value += $option.text() + ';';
    
                                    }
                                }
                                else 
                                {
                                    value = $(this).find('.get-input').val();
                                }
                
                                //if(value != '' && value != undefined)
                                if(value != undefined) 
                                {
                                    fields[fieldName] = value;
                                }
                            });
    
                            //convert fields to an array (this used to be the structure so for now it's easier to just convert back)
                            var fieldsArr = [];
                            $.each(fields, function (name, val) {
                                fieldsArr.push({ name: name, value: val });
                            });
                            fields = fieldsArr;
    
                            //store the request data for saving
                            var dispositionData = {fields : JSON.stringify(fields), fieldSet : MA.CheckIn.general['Activity-FieldSet']};
                            $('#CustomDispositionPopup .customDis-buttons').data('dispositionData',dispositionData);
    
                            CheckOut(marker,$button.data('CheckInId'),function(response) {
                                if (response.success) {
                                    var $markerTable = $('.bottom-bar-wrapper .marker-info');
                                    //change icon
                                    $button.removeClass('updating').removeClass('checked-in').removeClass('error').addClass('checked-out').attr('data-id', response.checkInId);
                                    
                                    //update text
                                    $markerTable.find('.checkin-date').text(response.date);
                                    $markerTable.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $button.find('cirlce,path').attr('fill','#00c200');
    
                                    var record = response.record.record
                                    var $row = $(".list-table .list-view-row .record-info-wrapper .record-name[data-id='"+record.record.Id+"']").closest('.list-view-row');
                                    $row.find('.checkin-icon').removeClass('checked-in').removeClass('error').addClass('checked-out').attr('data-id', response.checkInId);
                                    $row.find('.checkin-id').text('{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}');
                                    $row.find('.last-checkin').text(response.date);
    
                                    //update activity record
                                    if (response.checkInId && response.checkInId.indexOf('00T') == 0) {
                                        record.record.Tasks.records[0].IsClosed = true;
                                        record.record.Tasks.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Tasks.records[0].LastModifiedDate = response.date;
                                    }
                                    else if (response.checkInId) {
                                        record.record.Events.records[0].Subject = 'Check Out @';
                                        record.record.Events.records[0].CreatedBy.Name = '{!JSENCODE($User.FirstName)}'+ ' ' + '{!JSENCODE($User.LastName)}';
                                        record.record.Events.records[0].LastModifiedDate = response.date;
                                    }
                                    try{
                                        $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                    }
                                    catch (e) {
                                        
                                    }
                                }
                                else
                                {
                                    //error
                                    $button.removeClass('updating').addClass('error');
                                    try{
                                        $icon.find('svg')[0].setAttribute('viewBox', '4 4 60 60');
                                    }
                                    catch (e) {
                                        
                                    }
                                }
    
                                cancelDisposition ();
                            });
                        });
                    }
                },{buffer:false,escape:false}
            );
        }

        function cancelDisposition () {
            //clear the inputs
            $('#CustomDispositionPopup .get-input').val('');

            //remove data
            $('#CustomDispositionPopup .customDis-buttons').removeData('dispositionData');

            //close the popup
            $('#CustomDispositionPopup').hide();

            //remove loading
            $('.checkin-icon').removeClass('updating');

            try {
                $('.marker-table .check-in').removeClass('updating');
                $('.marker-table .check-in').find('svg')[0].setAttribute('viewBox', '4 4 60 60');
            }
            catch(e) {

            }
        }
        
        function StartUpJS() {}
        
        function InitializeTree() {}
        
        //format for user locale pass it a type or an actual date
        function formatUserLocaleDate (options)
        {
            //grab salesforce user locale object (capitalize dates for easy modification)
            var returnFormat;
            
            //format the locale for proper use
            if(options.moment == true)
            {
                //moment formating (DD/MM/YYYY HH:mm, MM-DD-YYYY h:mm a, etc...)
                returnFormat = dateTimeFormat.replace('yyyy','YYYY').replace(/d/g,'D');
            }
            else if (options.datepicker == true)
            {
                //date picker format (dd/mm/yy, mm-dd-yy, etc...)
                returnFormat = dateFormat.replace('yyyy','yy');
                //check for 'M' or 'MM'
                if(dateFormat.indexOf('MM') >= 0)
                {
                    returnFormat = returnFormat.replace('MM','mm');
                }
                else
                {
                    returnFormat = returnFormat.replace('M','mm');
                }
                
                //check for 'd' or 'dd'
                if(dateFormat.indexOf('dd') <= -1)
                {
                    returnFormat = returnFormat.replace('d','dd');
                }
            }
            else if (options.salesforce == true)
            {
                //already in sForce format
                returnFormat = dateTimeFormat;
            }
            else if (options.date)
            {
                //replace date format with actual date
                returnFormat = dateTimeFormat.replace('y.', 'y').replace('M.', '').replace('d.', '').replace(/M/g, '').replace(/\//g, '').replace(/-/g,'').replace(/d/g, '').replace('yyyy', options.date)
            }
            return returnFormat;
        }
        
        function extractDistance (type,distance)
        {
            var type = type == null ? 'mi' : type;
            var distance = distance;
            var formattedDistance;
            if(type == 'mi')
            {
                if(distance > 155)
                {
                    distance = Math.round(distance * 0.000621371 * 100) / 100;
                    type = ' mi';
                }
                else
                {
                    distance = Math.round(distance * 3.28084);
                    type = ' ft';
                }
                formatDistance= distance + ' ' + type;
            }
            else if (type == 'km')
            {
                if(distance > 100)
                {
                    distance = Math.round(distance * 0.001 * 100) / 100;
                    type = ' km';
                }
                else
                {
                    distance = Math.round(distance);
                    type= ' m';
                }
                formatDistance= distance + ' ' + type;
            }
            else
            {
                formatDistance= 'unknown';
            }
            
            return formatDistance;
        }
        
        function FormatsObjectValue(v, type, RefId)
        {
            if(v == null) v = "";
            if(v != "")
            {
                type = type.toLowerCase();
                if(type == "boolean")
                {
                    //this might be boolean or it might be a string
                    if (typeof v == 'string') {
                        v = v.toUpperCase();
                    }
                    else {
                        v = (!v) ? "FALSE" : "TRUE";
                    }
                }
                else if(type == "double")
                {
                    v = isNaN(v) || v === '' || v === null ? 0 : v;
                    
                    //var n = v < 0 ? true : false;
                    var a = parseFloat(v).toFixed(2).toString().split(".");
                    var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                                
                    if(parseFloat(a[1]) > 0)
                    {
                        v = (b + "." + a[1]); 
                    }
                    else
                    {
                        v = b; 
                    }           
                }
                else if(type == "currency")
                {
                    v = isNaN(v) || v === '' || v === null ? 0.00 : v;
                    
                    //var n = v < 0 ? true : false;
                    var a = parseFloat(v).toFixed(2).toString().split(".");
                    var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                    
                    v = ("$" + b + "." + a[1]);
                    
                    
                    /*
                    v = parseFloat(v).toFixed(2);
                    
                    for (var i = 0; i < Math.floor((v.length - (1 + i)) / 2.5); i++){
                        if(v.indexOf('.') == v.length - (4 * i + 3))
                        {
                            v = v.substring(0, v.length - (4 * i + 3) ) + v.substring(v.length - (4 * i + 3));
                        }
                        else
                        {
                            v = v.substring(0, v.length - (4 * i + 2) ) + "," + v.substring(v.length - (4 * i + 2));
                        }
                    }
                    v = "$" + v;
                    */
                }
                else if(type == "date")
                {
                    try {
                        var formatedDate = formatUserLocaleDate({datepicker: true}).replace('mm','MM').replace('dd','DD').replace('yy','YYYY');
                        v = moment(v).format(formatedDate);
                    }
                    catch (e)
                    {
                        v = moment(v).format('MM/DD/YYYY');
                    }
                }
                else if(type == "datetime")
                {
                    try {
                        //format date to display correct user locale
                        var formatedDate = formatUserLocaleDate({moment: true});
                        v = moment(v).format(formatedDate);
                    }
                    catch (e)
                    {
                        //should not get in here but just in case (no user locale set)
                        v = moment(v).format(dateTimeFormat);
                    }
                }
                else if (type == "percent")
                {
                    v = (v != "") ? v + "%" : "";
                }
                else if (type == "url")
                {
                    if (v.indexOf("http://") > -1 || v.indexOf("https://") > -1)
                    {
                        v = '<a href="' + v + '" target=_blank>' + v + "</a>";
                    }
                    else
                    {
                        v = '<a href="http://' + v + '" target=_blank>' + v + "</a>";
                    }
                }
                else if(type == "reference")
                {
                    v = '<a href="/' + RefId + '" target=_blank>' + v + "</a>";
                }
                else if (type == "textarea")
                {
                    v = v.replace(/\n/g, '<br />');
                }
                /*
                else
                {
                    v = type;
                }
                */
            }
            
            return v;
        }

        function CheckIn(pMarker, callback)
        {
            //check if we have a field set
            var fieldSet = false;
            if(MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select') {
                fieldSet = true;
            }
            //myCachedPositionInfo is populated from watchPosition
            if (myCachedPositionInfo != null)
            {
                //calculate the distance between the marker that was clicked and the current location and then check in
                var requestData = {
                    action      : 'check_in',
                    SavedQueryId: pMarker.SavedQryId || '',
                    id: UserId,
                    lid:pMarker.record.record.Id,
                    tooltip1: pMarker.title || pMarker.record.record.Id,
                    clat: myCachedPositionInfo.coords.latitude,
                    clong: myCachedPositionInfo.coords.longitude,
                    caccuracy: myCachedPositionInfo.coords.accuracy,
                    length: google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude), pMarker.getPosition())
                };

                //check if we have a field set
                if(fieldSet) {
                    dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
                    requestData = $.extend(requestData , dispositionData );
                }
                
                $.extend(requestData,{
                    ajaxResource : 'MATooltipAJAXResources'
                });

                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(json, event){
                        if(json.success)
                        {
                            NotifyError("Successfully checked in!", '');
                            var checkInId = json.taskId || json.eventId;
                            try { callback({success: true, checkInId : checkInId, record: pMarker}); } catch (err) { console.log('Unable to perform check in callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                        }
                        else
                        {
                            //check if error msgs
                            var errorMsg = 'Field Set Error:';
                            if(json.errMsgs) {
                                for(i=0; i < json.errMsgs.length;i++) {
                                    errorMsg += '</br>' + json.errMsgs[i];
                                }
                            }
                            else { errorMsg = json.error; }
                            NotifyError("Error Checking In", errorMsg);
                            try { 
                                callback({success: false, messages: "Error Checking In. " +  errorMsg}); 
                                
                            } catch (err) { 
                                alert("Error Checking In. " +  errorMsg);
                            }
                            alert("Error Checking In. " +  errorMsg);
                            $('#CustomDispositionPopup #customDis-loadmask').hide();
                        }
                    }
                ); 
            }
            else
            {
                var requestData = {
                    action      : 'check_in',
                    SavedQueryId: pMarker.SavedQryId || '',
                    id: UserId,
                    lid:pMarker.record.record.Id,
                    tooltip1: pMarker.title || pMarker.record.record.Id,
                    clat: '',
                    clong: '',
                    caccuracy: '',
                    length: ''
                };

                //check if we have a field set
                if(fieldSet) {
                    dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
                    requestData = $.extend(requestData , dispositionData );
                }

                $.extend(requestData,{
                    ajaxResource : 'MATooltipAJAXResources'
                });

                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(json, event){
                        if(json.success)
                        {
                            NotifyError("Successfully checked in!", '');
                            var checkInId = json.taskId || json.eventId;
                            try { callback({success: true, checkInId : checkInId, record: pMarker}); } catch (err) { console.log('Unable to perform check in callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                        }
                        else
                        {
                            //check if error msgs
                            var errorMsg = 'Field Set Error:';
                            if(json.errMsgs) {
                                for(i=0; i < json.errMsgs.length;i++) {
                                    errorMsg += '</br>' + json.errMsgs[i];
                                }
                            }
                            else { errorMsg = json.error; }
                            NotifyError("Error Checking In", errorMsg);
                            alert("Error Checking In. " +  errorMsg);
                            try { 
                                callback({success: false, messages: "Error Checking In. " +  errorMsg}); 
                                
                            } catch (err) { 
                                alert("Error Checking In. " +  errorMsg);
                            }
                            
                            $('#CustomDispositionPopup #customDis-loadmask').hide();
                        }
                    }
                );
            }
        }

        function NearByRemoveMarker (pMarker, options) {
            var record = pMarker.record;
            var $plottedQuery = record.plottedQuery;
            
            //delete record
            delete $plottedQuery.data('records')[record.record.Id];
            
            //remove any markers from the map
            record.marker.setMap(null);
            MA.Map.spiderfier.removeMarker(pMarker);

            $('.marker-info-wrapper').hide();
                
            //position myposition button properly if refresh query visible
            if ($('.marker-info-wrapper').css('display') != 'none') {
                //$('.map-button-wrapper').css('bottom', '10px').css('top', '');
            }
            else if($('.refresh-button').css('display') != 'none') {
                $('.map-button-wrapper').css('bottom', '65px').css('top', '');
            }
            else {
               // $('.map-button-wrapper').css('bottom', '10px').css('top', '');
            }
        }
        
        function CreateMarkerFromRecord(record, options)
        {
            options = $.extend({
                markerType: 'auto',
                isForCluster: false
            }, options);
        
            //get the value of the first tooltip (it will be used as the title for this marker)
            var tooltip1Value = 'Unknown';
            var tooltip1Metadata = record.plottedQuery.data('tooltips')[0];
            if (tooltip1Metadata)
            {
                tooltip1Value = extractTooltipValue(tooltip1Metadata, record);
            }
            
            //get the color/image for this marker
            var markerMetadata = record.plottedQuery.data('markerMetadata');
            var markerColor = '#000000';
            var otherColor = '#000000';
            if (options.markerType == 'Waypoint')
            {
                //this is just a placeholder so nothing else happens.  the options are used below to extend the created marker
            }
            else if (markerMetadata.ColorAssignmentType == 'Static')
            {
                markerColor = markerMetadata.IconColor;
            }
            else if (markerMetadata.ColorAssignmentType == 'Dynamic, Field')
            {
                var foundMatch = false;
                var picklistValue = extractValue(record.record, markerMetadata.PicklistField);
                var matchedindex;
                
                //fix for boolean field type being compared to strings
                if (typeof picklistValue == 'boolean') {
                    picklistValue = picklistValue ? 'True' : 'False';
                }
                
                //function to handle rounding for currency 
                function round(num, places) {
                    var multiplier = Math.pow(10, places);
                    return Math.round(num * multiplier) / multiplier;
                }
                
                //loop over the color assignment rules looking for a match
                $.each(markerMetadata.colorAssignmentrules, function (index, rule) {
                    
                    //keep track of the 'other color' value for use later
                    if(rule.comparevalue == '<Other>')
                    {
                        otherColor = rule.value;
                    }
                            
                    //check if this matches based on the operator
                    if(rule.operator == 'contains')
                    {
                        if(picklistValue.toLowerCase().indexOf(rule.comparevalue.toLowerCase())== -1)
                        {
                        }
                        else
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                    }
                    else if(rule.operator == 'starts')
                    {
                        if(picklistValue.toLowerCase().indexOf(rule.comparevalue.toLowerCase())== 0)
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                    }
                    else if(rule.operator == 'equals')
                    {
                        if(picklistValue.toLowerCase() == rule.comparevalue.toLowerCase())
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                    }
                    else if(rule.operator == 'includes')
                    {
                        var picklistArray = picklistValue.toLowerCase().split(';');
                        var selectionArray = rule.comparevalue.toLowerCase().split('~~');
                        if($(picklistArray).not(selectionArray).length == 0 && $(selectionArray).not(picklistArray).length == 0 && picklistValue.toLowerCase() != '')
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                    }
                    else if(rule.operator == 'excludes')
                    {
                        var picklistArray = picklistValue.toLowerCase().split(';');
                        var selectionArray = rule.comparevalue.toLowerCase().split('~~');
                        function containsNone(portion, total)
                        { 
                            for(var i = 0 , len = portion.length; i < len; i++)
                            {
                                if($.inArray(portion[i], total) >= 0) return false;
                            }
                            return true;
                        }
                        if(containsNone(selectionArray,picklistArray) == true && picklistValue.toLowerCase() != '')
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                    }
                    else if(rule.operator == 'currency')
                    {
                        fromval = rule.comparevalue.replace(/,/g, '');
                        toval = rule.toVal.replace(/,/g, '');
                        
                        //var to store converted picklist for user currency
                        var convertedValue = picklistValue;
                        
                        //check for currency support and convert to user settings
                        if($('.settings-wrapper').data('userCurrency')) {
                            //loop over currencies and find any different
                            $.each($('.settings-wrapper').data('currency'), function (index,currency) {
                                
                                //convert values to user currency settings
                                if(currency.IsoCode == record.record.CurrencyIsoCode && $('.settings-wrapper').data('userCurrency') != record.record.CurrencyIsoCode)
                                {
                                    //convert picklist value to user settings
                                    var userConverstionRate = $('.settings-wrapper').data('userConverstionRate');
                                    var conversionRate = currency.ConversionRate/userConverstionRate;
                                    convertedValue = picklistValue/conversionRate;
                                }
                                else if(currency.IsoCode == record.record.CurrencyIsoCode)
                                {
                                    convertedValue = picklistValue;
                                }
                            });
                        }
                        
                        //check decimal length of entered values
                        var decimalLength;
                        if((fromval % 1 != 0 || toval % 1 != 0) == true)//is it a decimal?
                        {
                            decimalLength = fromval.split('.').length == 2 ? fromval.split('.')[1].length : 2;
                        }
                        else
                        {
                            decimalLength = 0;
                        }
                        
                        //round picklistValue to ensure we catch all values if decimal is used
                        round(convertedValue, decimalLength);
                        
                        if(isNaN(parseInt(convertedValue)) == true)
                        {
                            markerColor = otherColor;
                        }
                        else if (convertedValue >= fromval && convertedValue <= toval)
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                        else if (convertedValue >= fromval && toval == '')
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                        else if (convertedValue <= toval && fromval == '')
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                    }
                    else if(rule.operator == 'date')
                    {
                        //check if either value is a date literal
                        var fromMatches = false;
                        var fromIsDateLiteral = false;
                        var toMatches = false;
                        var toIsDateLiteral = false;
                        for (var i in MADateLiterals)
                        {
                            //check if the label matches and the value is not blank (blank value denotes a dynamic date literal and cannot be matched directly)
                            if (MADateLiterals[i].label == rule.comparevalue && MADateLiterals[i].value != 'DYNAMIC')
                            {
                                fromIsDateLiteral = true;
                                
                                //compare
                                if (moment(picklistValue)) {
                                    if (moment(picklistValue).isBefore(MADateLiterals[i].getMoment(), MADateLiterals[i].momentUnit)) {
                                        return;
                                    }
                                    else {
                                        fromMatches = true;
                                    }
                                }
                            }
                            if (MADateLiterals[i].label == rule.enddate && MADateLiterals[i].value != 'DYNAMIC')
                            {
                                toIsDateLiteral = true;
                                
                                //compare
                                if (moment(picklistValue)) {
                                    if (moment(picklistValue).isAfter(MADateLiterals[i].getMoment(), MADateLiterals[i].momentUnit)) {
                                        return;
                                    }
                                    else {
                                        toMatches = true;
                                    }
                                }
                            }
                        }
                        
                        //check if the from value is a dynamic date literal
                        try {
                            var stringParts = rule.comparevalue.split(' ');
                            if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
                                if (!isNaN(parseInt(stringParts[1])) && stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
                                    fromIsDateLiteral = true;
                                    if (stringParts[0] == 'NEXT' && !moment(picklistValue).isBefore(moment().add(stringParts[2].toLowerCase(), 1), stringParts[2].slice(0, -1).toLowerCase())) {
                                        fromMatches = true;
                                    }
                                    else if (stringParts[0] == 'LAST' && !moment(picklistValue).isBefore(moment().add(stringParts[2].toLowerCase(), parseInt(stringParts[1])*-1), stringParts[2].slice(0, -1).toLowerCase())) {
                                        fromMatches = true;
                                    }
                                    else {
                                        return;
                                    }
                                }
                            }
                            else if (stringParts[2] == 'AGO' || stringParts[2] == 'FROM') {
                                var stringPartsValue = parseInt(stringParts[0]);
                                var stringPartsUnit = stringParts[1].toLowerCase();
                                if (!isNaN(stringPartsValue) && $.inArray(stringPartsUnit, ['days', 'years']) != -1) {
                                    fromIsDateLiteral = true;
                                    var stringPartsEnd = stringParts[2] + (stringParts[3] ? ' ' + stringParts[3] : '');
                                    if (stringPartsEnd == 'AGO') {
                                        if (!moment(picklistValue).isBefore(moment().add(stringPartsUnit, stringPartsValue*-1), stringPartsUnit.slice(0, -1))) {
                                            fromMatches = true;
                                        }
                                        else {
                                            return;
                                        }
                                    }
                                    else if (stringPartsEnd == 'FROM NOW') {
                                        if (!moment(picklistValue).isBefore(moment().add(stringPartsUnit, stringPartsValue), stringPartsUnit.slice(0, -1))) {
                                            fromMatches = true;
                                        }
                                        else {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        catch (err) { }
                        
                        //check if the to value is a dynamic date literal
                        try {
                            var stringParts = rule.enddate.split(' ');
                            if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
                                if (!isNaN(parseInt(stringParts[1])) && stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
                                    toIsDateLiteral = true;
                                    if (stringParts[0] == 'NEXT' && !moment(picklistValue).isAfter(moment().add(stringParts[2].toLowerCase(), parseInt(stringParts[1])), stringParts[2].slice(0, -1).toLowerCase())) {
                                        toMatches = true;
                                    }
                                    else if (stringParts[0] == 'LAST' && !moment(picklistValue).isAfter(moment(), stringParts[2].slice(0, -1).toLowerCase())) {
                                        toMatches = true;
                                    }
                                    else {
                                        return;
                                    }
                                }
                            }
                            else if (stringParts[2] == 'AGO' || stringParts[2] == 'FROM') {
                                var stringPartsValue = parseInt(stringParts[0]);
                                var stringPartsUnit = stringParts[1].toLowerCase();
                                if (!isNaN(stringPartsValue) && $.inArray(stringPartsUnit, ['days', 'years']) != -1) {
                                    toIsDateLiteral = true;
                                    var stringPartsEnd = stringParts[2] + (stringParts[3] ? ' ' + stringParts[3] : '');
                                    if (stringPartsEnd == 'AGO') {
                                        if (!moment(picklistValue).isAfter(moment().add(stringPartsUnit, stringPartsValue*-1), stringPartsUnit.slice(0, -1))) {
                                            toMatches = true;
                                        }
                                        else {
                                            return;
                                        }
                                    }
                                    else if (stringPartsEnd == 'FROM NOW') {
                                        if (!moment(picklistValue).isAfter(moment().add(stringPartsUnit, stringPartsValue), stringPartsUnit.slice(0, -1))) {
                                            toMatches = true;
                                        }
                                        else {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        catch (err) { }
                        
                        //handle non date literals
                        if (!fromIsDateLiteral && (picklistValue == '' || picklistValue.split('T')[0] >= rule.comparevalue)) {
                            fromMatches = true;
                        }
                        if (!toIsDateLiteral && (picklistValue == '' || picklistValue.split('T')[0] <= rule.enddate)) {
                            toMatches = true;
                        }
                    
                        //check if this is a match
                        if (toMatches && fromMatches) 
                        {
                            markerColor = rule.value;
                            foundMatch = true;
                            matchedindex = index;
                        }
                    }           
                });
                
                //was a match found?
                if(!foundMatch)
                {
                    markerColor = otherColor;
                    
                    //update the legend marker count for <Other>
                    var $legendRow = record.plottedQuery.find('.legend-row.other');
                    if (!options.isForCluster) {
                        $legendRow.data('numMarkers', $legendRow.data('numMarkers') + 1);
                    }
                    
                    //store the legend row with the record for easy access later
                    record.legendRow = $legendRow;
                }
                else
                {
                    //increment legend row for this rule
                    var $legendRow = record.plottedQuery.find('.legend-checkbox[data-rule="'+matchedindex+'"]').closest('.legend-row');
                    if (!options.isForCluster) {
                        $legendRow.data('numMarkers', $legendRow.data('numMarkers') + 1);
                    }
                
                    //store the legend row with the record for easy access later
                    record.legendRow = $legendRow;
                }
            }
            else if (markerMetadata.ColorAssignmentType == 'Dynamic-Label')
            {
                markerColor = '--Label--';
            }
            else if (markerMetadata.ColorAssignmentType == 'Dynamic-Order')
            {
                markerColor = '--Order--';
            }
            else
            {
                //this should never happen, but if we don't have a color for this value and we don't have a color for <Other>, then just make the marker black
                markerColor = '#000000';
            }
        
            //create marker options
            var MarkerCoordinate = new google.maps.LatLng(parseFloat(record.markerLatitude), parseFloat(record.markerLongitude));         
            var markerOptions = {
                title: tooltip1Value,
                visibility: true,
                brush: markerColor,
                Ignore: false, 
                SavedQryId: record.savedQueryId,
                Lat: record.markerLatitude,
                Long: record.markerLongitude,
                PicklistFieldValue: null,
                record: record,
                text: record.markerIconText
            };
            
            //create either an image marker or a standard marker depending on the markerColor value
            if (options && options.markerType == 'Waypoint')
            {
                //return a waypoint marker
                return L.marker(
                    MarkerCoordinate,
                    $.extend(markerOptions, { 
                        clickedIcon: L.divIcon({
                            className: 'waypoint-marker',
                            iconSize: L.point(28, 42), 
                            iconAnchor: L.point(14, 42),
                            html: $('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, record.record.Id)
                                .replace(/__TEXT__/g, options.index || '')
                                .replace(/__GRAD1__/g, '#ffffff')
                                .replace(/__GRAD2__/g, '#F7F7F7') 
                                .replace(/__STROKE__/g, '#4597d0') 
                                .replace(/__FILL__/g, '#4597d0') 
                        }),
                        icon: L.divIcon({
                            className: 'waypoint-marker',
                            iconSize: L.point(28, 42), 
                            iconAnchor: L.point(14, 42),
                            html: $('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, record.record.Id)
                                .replace(/__TEXT__/g, options.index || '')
                                .replace(/__GRAD1__/g, '#4597d0')
                                .replace(/__GRAD2__/g, '#1e78c9') 
                                .replace(/__STROKE__/g, '#1d649b') 
                                .replace(/__FILL__/g, '#ffffff') 
                        }), 
                        layerType: 'waypoint-marker',
                        zIndexOffset: 1000  //this is not working.  adding css for .waypoint-marker
                    })
                ).on('click', marker_Click).on('contextmenu', marker_Context);
            }
            else if (markerColor && markerColor.indexOf('image:') == 0)
            {
                //create marker
                var marker = new google.maps.Marker($.extend(markerOptions, {
                    position: MarkerCoordinate,
                    icon: {
                        url: MA.SitePrefix+'/servlet/servlet.FileDownload?file=' + markerColor.split('image:')[1]
                    },
                    clickedIcon: {
                        url: MA.SitePrefix+'/servlet/servlet.FileDownload?file=' + markerColor.split('image:')[1]
                    },
                    layerType: 'query-marker'
                }));

                //handle click
                google.maps.event.addListener(marker, 'click', marker_Click);
                
                return marker;
            }
            else if (markerColor && markerColor.indexOf('--Label--') == 0)
            {
                //get the proper label
                if(tooltip1Value == '') {
                    tooltip1Value = 'N/A';
                }
                else if(tooltip1Value.length > 40) {
                    tooltip1Value = tooltip1Value.substring(0, 40).concat('...');
                }

                //get the proper width
                var $textWidthEl = $('<svg><text style="font-size:14px;">'+tooltip1Value+'</text></svg>').appendTo('#invisible');
                var width = $textWidthEl.find('text')[0].getComputedTextLength() + 12;
                $textWidthEl.remove();
                    
                //start building the icon svg
                var iconSVG = 
                    '<svg width="__WIDTH__px" height="__HEIGHT__px" xmlns="http://www.w3.org/2000/svg">' +
                        '<rect x="__X__" y="__Y__" width="__RECT_WIDTH__px" height="__RECT_HEIGHT__px" style="fill:__BRUSH__;fill-opacity:0.6;stroke:__STROKE__;stroke-width:__STROKEWIDTH__;"/>' +
                        '<text x="__OFFSETX__" y="__OFFSETY__" fill="__TEXT_PEN__" style="font-size:__FONTSIZE__;">__TEXT__</text>' +
                    '</svg>'
                    
                //replace svg parts with updated info
                iconSVG = iconSVG.replace(/__TEXT__/g, $('<div/>').text(tooltip1Value).html().replace(/"/g, '&quot;'))
                    .replace(/__FONTSIZE__/g, 14)
                    .replace(/__BRUSH__/g, "#000000")
                    .replace(/__STROKE__/g, "#FFF")
                    .replace(/__STROKEWIDTH__/g, 1)
                    .replace(/__TEXT_PEN__/g, "#FFF")
                    .replace(/__WIDTH__/g, width + 1)
                    .replace(/__HEIGHT__/g, 21 + 1)
                    .replace(/__RECT_WIDTH__/g, width)
                    .replace(/__RECT_HEIGHT__/g, 21)
                    .replace(/__OFFSETX__/g, 6)
                    .replace(/__OFFSETY__/g, 15)
                    .replace(/__OPACITY__/g, .5)
                    .replace(/__X__/g, 1 / 2)
                    .replace(/__Y__/g, 1 / 2);
                    
                //measure the icon
                var $iconToMeasure = $(iconSVG).appendTo($('#invisible'));
                var iconWidth = $iconToMeasure.width();
                var iconHeight = $iconToMeasure.height();
                $iconToMeasure.remove();

                //create marker
                var marker = new google.maps.Marker($.extend(markerOptions, {
                    position: MarkerCoordinate,
                    icon: {
                        url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(iconSVG)),
                        anchor: new google.maps.Point(iconWidth/2, iconHeight)
                    },
                    clickedIcon: {
                        url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(iconSVG)),
                        anchor: new google.maps.Point(iconWidth/2, iconHeight)
                    },
                    layerType: 'query-marker'
                }));

                //handle click
                google.maps.event.addListener(marker, 'click', marker_Click);

                return marker;
            }
            else if (markerColor && markerColor.indexOf('--Order--') == 0)
            {
                //get the proper width
                var text = String(record.index + 1);
                var $textWidthEl = $('<svg><text style="font-size:14px;">'+text+'</text></svg>').appendTo('#invisible');
                var width = $textWidthEl.find('text')[0].getComputedTextLength() + 16;
                $textWidthEl.remove();

                //start building the icon svg
                var iconSVG = 
                    '<svg width="__WIDTH__" height="__HEIGHT__" xmlns="http://www.w3.org/2000/svg">' +
                        '<ellipse opacity="0.65" cx="__X__" cy="__Y__" rx="__RECT_WIDTH__" ry="__RECT_HEIGHT__" style="fill:__BRUSH__;stroke:__STROKE__;stroke-width:__STROKEWIDTH__;"/>' +
                        '<text x="__OFFSETX__" y="__OFFSETY__" fill="__TEXT_PEN__" style="font-size:14px;">__TEXT__</text>' +
                    '</svg>';
                    
                //replace svg parts with updated info
                iconSVG = iconSVG.replace(/__TEXT__/g, text)
                    .replace(/__BRUSH__/g, "#000070")
                    .replace(/__STROKE__/g, "#FFF")
                    .replace(/__STROKEWIDTH__/g, 1)
                    .replace(/__TEXT_PEN__/g, "#FFF")
                    .replace(/__WIDTH__/g, width)
                    .replace(/__HEIGHT__/g, 20)
                    .replace(/__RECT_WIDTH__/g, width/2)
                    .replace(/__RECT_HEIGHT__/g, 10)
                    .replace(/__OFFSETX__/g, 8)
                    .replace(/__OFFSETY__/g, 14.5)
                    .replace(/__X__/g, width/2)
                    .replace(/__Y__/g, 10);
                    
                //measure the icon
                var $iconToMeasure = $(iconSVG).appendTo($('#invisible'));
                var iconWidth = $iconToMeasure.width();
                var iconHeight = $iconToMeasure.height();
                $iconToMeasure.remove();

                //create the marker
                var marker = new google.maps.Marker($.extend(markerOptions, {
                    position: MarkerCoordinate,
                    icon: {
                        url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(iconSVG)),
                        anchor: new google.maps.Point(iconWidth/2, iconHeight/2)
                    },
                    clickedIcon: {
                        url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(iconSVG)),
                        anchor: new google.maps.Point(iconWidth/2, iconHeight/2)
                    },
                    layerType: 'query-marker'
                }));

                //handle right click (left click is handled by MA.Map.spiderfier)
                google.maps.event.addListener(marker, 'click', marker_Click);

                return marker;
            }

            //need to split the markerColor to account for shape support
            var markerColorParts = markerColor.split(':');
            var getMarkerShape = markerColorParts[1] || 'Marker';
            var markerShape = MAMarkerBuilder.shapes[getMarkerShape];
            
            var marker;

            var markerInfoForImageServer = markerColor.replace('#','');
            if (markerInfoForImageServer.indexOf(':') < 0) //this is for legacy support for when there was no marker "type" (example: marker,square, etc)
            {
                markerInfoForImageServer += ':Marker';
            }
            
            var iconSVG = MAMarkerBuilder.createSVG({type: 'Marker', color: markerColor});
            
            marker = new google.maps.Marker($.extend(markerOptions, {
                position: MarkerCoordinate,
                icon: {
                    url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(iconSVG)),
                    anchor: options.isForScatter ? new google.maps.Point(8,8) : markerShape.anchor
                },
                clickedIcon: {
                    url: "{!URLFOR($Resource.MapAnything, '/images/nearby/pin_checked.png')}",
                    anchor: MAMarkerBuilder.shapes.Marker.anchor
                },
                layerType: 'query-marker'
            }));

            
            return marker;
        }
        
        //static color marker
        function shadeColor(color, percent) {   
            var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) - amt, B = (num >> 8 & 0x00FF) - amt, G = (num & 0x0000FF) - amt;
            return "#" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
        }
        function unshadeColor(color, percent) {
            var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) + amt, B = (num >> 8 & 0x00FF) + amt, G = (num & 0x0000FF) + amt;
            return "#" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
        }
        function isDark(color) {
            var num = parseInt(color.slice(1),16);
            return (num >> 16) + (num >> 8 & 0x00FF) + (num & 0x0000FF) < 225;
        }
        
        function poi_Click (options) {
            
            markerClick = true;
            options = $.extend({
                markerType: 'poi'
            }, options || {});
            
            var pMarker = this;
            var marker = this;
            var record = this.maData.place;
            
            //remove previous buttons and marker info
            $('.marker-info-wrapper .marker-info').remove();
            $('.marker-table-wrapper .marker-button').remove();
            
            //center marker with tooltip info
            MA.map.setCenter(pMarker.getPosition());
            
            //start building content from template
            var $markerTable = $('#templates .marker-info.template').clone().removeClass('template');
            $markerTable.find('.tooltip-wrapper').hide();
            $markerTable.find('.tooltips').css('height',60);
            
            //format distance
            var distance = google.maps.geometry.spherical.computeDistanceBetween(myCachedPosition || MA.map.getCenter(), marker.getPosition());
            if($('#settingsdiv').data('distance') == 'mi') {
                distance = extractDistance($('#settingsdiv').data('distance'), distance);
            }
            else if ($('#settingsdiv').data('distance') == 'km') {
                distance = extractDistance($('#settingsdiv').data('distance'), distance);
            }
            
            //update marker info values
            $markerTable.find('.record-name').text(record.name).attr('onclick', '');

            $markerTable.find('.record-address').html(record.formatted_address);
            $markerTable.find('.record-distance').text(distance);
            
            //add to info table and show record
            $('.bottom-bar-wrapper .marker-info-wrapper').show();
            $markerTable.appendTo($('.bottom-bar-wrapper .marker-info-wrapper')); 
            var recordHeight = $('.bottom-bar-wrapper .marker-info').height();
            var buttonHeight = (recordHeight-40)/2;
            $('.map-button-wrapper').css('bottom', recordHeight+10);
            $markerTable.find('.record-more-info').css('top','23%');
            
            //show more info on click
            $markerTable.on('click', '.record-more-info', function () {
                var $wrap = $(this);
                if($(this).hasClass('open')) {
                    $wrap.removeClass('open');
                    $wrap.find('.MAIcon').removeClass('ion-android-arrow-dropdown-circle').addClass('ion-android-arrow-dropup-circle');
                    $('.marker-table-wrapper').hide();
                    $('.bottom-bar-wrapper .marker-info-wrapper .tooltips').hide();
                    $('.map-button-wrapper').css('bottom', recordHeight+10);
                    
                    //center marker with tooltip info
                    MA.map.setCenter(pMarker.getPosition());
                }
                else {
                    $wrap.addClass('open');
                    $wrap.find('.MAIcon').addClass('ion-android-arrow-dropdown-circle').removeClass('ion-android-arrow-dropup-circle');
                    $('.marker-table-wrapper').show();
                    $('.bottom-bar-wrapper .marker-info-wrapper .tooltips').show();
                    $('.map-button-wrapper').css('bottom', recordHeight+70);
                    
                    //center marker with tooltip info
                    MA.map.setCenter(pMarker.getPosition());
                }
            });
            
            //add navigation funciton
            var $navigation = $('.icon-templates .get-directions').clone();
            $navigation.on('click', '.navigation-link', function() {
                try {
                    sforce.one.navigateToURL(nativeGPSNavigation(marker.getPosition().lat(), marker.getPosition().lng()));
                }
                catch (err) {
                    window.open(nativeGPSNavigation(marker.getPosition().lat(), marker.getPosition().lng()));
                }
            });
            
            //add buttons
            $('.marker-table-wrapper .marker-table').append($navigation);
        }
        
        function searchPOI ()
        {
            $('.bottom-bar-wrapper .settings-view').attr('poi-update',false);

            //remove previous markers and table info
            $.each(MA.Map.Search.markers, function (i, marker) {
                marker.setMap(null);
            });
            MA.Map.Search.markers = [];
            
            //hide refresh button and show status
            $('.refresh-map-view').hide();
            $('.refresh-button').show();
            $('.map-button-wrapper').css('bottom', '65px').css('top', '');
            if($('.selected-layers-table .saved-queries-row').length >= 1 && runningQuery == true) {
                $('.query-status').show().html('Refreshing Query...');
            }
            else {
                $('.query-status').show().html('');
            }
            $('.poi-status').show().text('Refreshing Points of Interest...');
                        
            var searchText = $('.poi-settings .poi-search-box').val();
            var categoryId = $('.poi-settings .category-select').val() == 'none' ? null : $('.poi-settings .category-select').val();
            var placesService = new google.maps.places.PlacesService(MA.map);
            placesService.textSearch({ bounds: MA.map.getBounds(), query: searchText == '' ? 'All' : searchText, types: categoryId ? [categoryId] : ['gas_station','bank','restaurant','lodging','grocery_or_supermarket','store'] }, function (results, status) {
                if (status == google.maps.places.PlacesServiceStatus.OK) {
                    $.each(results, function (i, place) {
                        var poiMarker = new google.maps.Marker({
                            map: MA.map,
                            position: place.geometry.location,
                            icon: {
                                url: place.icon,
                                size: new google.maps.Size(71, 71),
                                origin: new google.maps.Point(0, 0),
                                anchor: new google.maps.Point(12, 25),
                                scaledSize: new google.maps.Size(25, 25)
                            },
                            maData: { place: place }
                        });
                        google.maps.event.addListener(poiMarker, 'click', poi_Click);

                        MA.Map.Search.markers.push(poiMarker);
                    });
                }
                else {
                    MA.log('sta',status);
                }

                //remove refreshing class 
                $('.refresh-map-view').removeClass('refreshing');
                
                //hide information if no query found
                if(runningQuery == false) {
                    //hide button
                    $('.poi-status').hide();
                    $('.refresh-button').hide();
                    $('.query-status').hide();
                    $('.map-button-wrapper').css('bottom', '10px').css('top', '');
                }
                else {
                    //process query will handle update info
                }
            });
        }
        
        function doPOISearch()
        {
            $('.map-view').click();
        }
        
        function formatTooltip(obj, toolTipObj)
        {
            //console.log('obj', obj);
            //console.log('toolTipObj', toolTipObj);
            
            /*if (toolTipObj.DisplayType == 'REFERENCE')
            {
                var rId = getProperty(obj, toolTipObj.RefFieldName);
                var rName = getProperty(obj, toolTipObj.ActualFieldName);
                
                if (rId == undefined || rName == undefined)
                {
                    return '';
                }
                else
                {
                    return '<a onclick="event.stopPropagation();" target="_blank" href="/' + rId + '">' + rName + '</a>';
                }
                
            }*/
            if(toolTipObj.needsLink) {
                //leaving the above reference for now
                var rId = getProperty(obj, toolTipObj.linkId) || obj.Id;
                var rName = getProperty(obj, toolTipObj.ActualFieldName);
                
                if (rId == undefined || rName == undefined)
                {
                    return '';
                }
                else {
                    if(sforce && sforce.one) {
                        //SF1
                        return '<a class="isLink" onclick="sforce.one.navigateToSObject(\''+ rId +'\')">' + rName + '</a>';
                    }
                    else {
                        return '<a class="isLink" onclick="event.stopPropagation();" target="_blank" href="/' + rId + '">' + rName + '</a>';
                    }
                }
            }
            else
            {
                var fieldValue = getProperty(obj, toolTipObj.ActualFieldName);
                //console.log
                if (fieldValue == undefined)
                {
                    if (toolTipObj.describe.soapType.toLowerCase().indexOf('boolean') > -1)
                    {
                        return 'False';
                    }
                    else
                    {
                        return '';
                    }
                }
                else
                {
                    if (toolTipObj.describe.soapType.toLowerCase().indexOf('string') > -1)
                    {
                        return fieldValue;
                    }
                    else if (toolTipObj.describe.soapType.toLowerCase().indexOf('boolean') > -1)
                    {
                        return fieldValue;
                    }
                    else if (toolTipObj.describe.soapType.toLowerCase().indexOf('datetime') > -1)
                    {
                        //need formating
                        if(typeof fieldValue == 'number') {
                            var normalizedDateTime = MA.Util.normalizeDateTime(fieldValue);
                            return moment(normalizedDateTime).format(MASystem.User.dateTimeFormat.replace(/d/g,'D').replace('yyyy','YYYY'));
                        }
                        else {
                            return moment(fieldValue,'YYYY-MM-DD').format(MASystem.User.dateTimeFormat.replace(/d/g,'D').replace('yyyy','YYYY'));
                        }
                        
                    }
                    else if (toolTipObj.describe.soapType.toLowerCase().indexOf('date') > -1)
                    {
                        //need formating
                        if(typeof fieldValue == 'number') {
                            var normalizedDateTime = MA.Util.normalizeDateTime(fieldValue);
                            return moment(normalizedDateTime).format(MASystem.User.dateFormat.replace(/d/g,'D').replace('yyyy','YYYY'));
                        }
                        else {
                            return moment(fieldValue,'YYYY-MM-DD').format(MASystem.User.dateFormat.replace(/d/g,'D').replace('yyyy','YYYY'));
                        }
                        
                    } 
                    else if(toolTipObj.DisplayType.toLowerCase().indexOf('currency') > -1){
                        
                        if(!MASystem.Organization.isMultiCurrencyOrganization || obj.CurrencyIsoCode == null)
                        {
                            var currencyType = userSettings.userCurrency != undefined ? userSettings.userCurrency : '$';
                            var c = 2, d = '.', t = ',';
                            var n = fieldValue, 
                                c = isNaN(c = Math.abs(c)) ? 2 : c, 
                                d = d == undefined ? "." : d, 
                                t = t == undefined ? "," : t, 
                                s = n < 0 ? "-" : "", 
                                i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                                j = (j = i.length) > 3 ? j % 3 : 0;
                            return currencyType + s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
                        } else if(obj.CurrencyIsoCode == null)
                        {
                            var currencyType = MASystem.User.DefaultCurrency != undefined ? MASystem.User.DefaultCurrency : 'USD';
                            var c = 2, d = '.', t = ',';
                            var n = fieldValue, 
                                c = isNaN(c = Math.abs(c)) ? 2 : c, 
                                d = d == undefined ? "." : d, 
                                t = t == undefined ? "," : t, 
                                s = n < 0 ? "-" : "", 
                                i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                                j = (j = i.length) > 3 ? j % 3 : 0;
                            return currencyType + ' ' + s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
                        } else
                        {
                            var returnValue = '';
                            
                            var currency = userSettings.currency || [];
                            currency.forEach(function(currencyIso){
                               
                                if(currencyIso.IsoCode == obj.CurrencyIsoCode){
                                    //var currencyType = userSettings.userCurrency != undefined ? userSettings.userCurrency : '$';
                                    var userCurrency ='';
                                    var c = 2, d = '.', t = ',';
                                    var n = fieldValue, 
                                        c = isNaN(c = Math.abs(c)) ? 2 : c, 
                                        d = d == undefined ? "." : d, 
                                        t = t == undefined ? "," : t, 
                                        s = n < 0 ? "-" : "", 
                                        i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                                        j = (j = i.length) > 3 ? j % 3 : 0;
                                    
                                     userCurrency = userSettings.userCurrency + ' ' + s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
                                     if(userSettings.userCurrency == obj.CurrencyIsoCode){
                                         returnValue = userCurrency;
                                     } else {
                                         var isoCurrency = '';
                                         var c1 = 2, d1 = '.', t1 = ',';
                                         var n1 = fieldValue * currencyIso.ConversionRate, 
                                             c1 = isNaN(c1 = Math.abs(c1)) ? 2 : c1, 
                                             d1 = d1 == undefined ? "." : d1, 
                                             t1 = t1 == undefined ? "," : t1, 
                                             s1 = n1 < 0 ? "-" : "", 
                                             i1 = parseInt(n1 = Math.abs(+n1 || 0).toFixed(c1)) + "", 
                                             j1 = (j1 = i1.length) > 3 ? j1 % 3 : 0;
                                        isoCurrency = currencyIso.IsoCode + ' ' + s1 + (j1 ? i1.substr(0, j1) + t1 : "") + i1.substr(j1).replace(/(\d{3})(?=\d)/g, "$1" + t1) + (c1 ? d1 + Math.abs(n1 - i1).toFixed(c1).slice(2) : "");
                                        returnValue = isoCurrency + ' (' + userCurrency + ')';
                                     }
                                }
                            });
                            return returnValue;                        
                        }
                    }
                    else if(toolTipObj.describe.type && toolTipObj.describe.type.toLowerCase().indexOf('percent') > -1){
                        //grab the lat lng from object and parse
                        var fieldParts = String(fieldValue).split('.');
                        var c;
                        if(fieldParts.length>1) {
                            c = fieldParts[1].length
                        }
                        var n = fieldValue, 
                            c = isNaN(c = Math.abs(c)) ? null : c, 
                            d = d == undefined ? "." : d, 
                            t = t == undefined ? "," : t, 
                            s = n < 0 ? "-" : "", 
                            i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                            j = (j = i.length) > 3 ? j % 3 : 0;
                        return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "") + '%';
                        
                    }
                    else if (toolTipObj.describe.soapType.toLowerCase().indexOf('double') > -1)
                    {
                        //make sure c is not longer than the actual length of the decimal
                        var fieldParts = String(fieldValue).split('.');
                        var c;
                        if(fieldParts.length>1) {
                            c = fieldParts[1].length
                        }
                        var n = fieldValue, 
                            c = isNaN(c = Math.abs(c)) ? 0 : c, 
                            d = d == undefined ? "." : d, 
                            t = t == undefined ? "," : t, 
                            s = n < 0 ? "-" : "", 
                            i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                            j = (j = i.length) > 3 ? j % 3 : 0;
                        return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
                        
                    }
                    else if (toolTipObj.describe.soapType.toLowerCase().indexOf('integer') > -1 || toolTipObj.describe.soapType.toLowerCase().indexOf('int') > -1)
                    {
                        var fieldParts = String(fieldValue).split('.');
                        var c;
                        if(fieldParts.length>1) {
                            c = fieldParts[1].length
                        }
                        var n = fieldValue, 
                            c = isNaN(c = Math.abs(c)) ? null : c, 
                            d = d == undefined ? "." : d, 
                            t = t == undefined ? "," : t, 
                            s = n < 0 ? "-" : "", 
                            i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                            j = (j = i.length) > 3 ? j % 3 : 0;
                        return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
                    }
                    else if(toolTipObj.describe.soapType.toLowerCase().indexOf('location') > -1){
                        //grab the lat lng from object and parse
                        var latString = '';
                        var lngString = '';
                        if(typeof fieldValue === 'object') {
                            latString = fieldValue.latitude || '';
                            lngString = fieldValue.longitude || '';
                        }
                        return 'Latitude: ' + latString + '<br>Longitude: ' + lngString; 
                        
                    }
                    else 
                    {
                        return fieldValue;
                    }
                    
                }
            }
            
            
        }
        
        function CheckOut(pMarker, checkInId, callback)
        {
            //check if we have a field set
            var fieldSet = false;
            if(MA.CheckIn.general['Activity-FieldSet'] && MA.CheckIn.general['Activity-FieldSet'] != 'Select') {
                fieldSet = true;
            }

            if (myCachedPositionInfo != null)
            {
                //calculate the distance between the marker that was clicked and the current location and then check in
                var requestData = {
                    action      : 'check_out',
                    checkInId   : checkInId,
                    clat        : myCachedPositionInfo.coords.latitude,
                    clong       : myCachedPositionInfo.coords.longitude,
                    caccuracy   : myCachedPositionInfo.coords.accuracy,
                    distance    : google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(myCachedPositionInfo.coords.latitude, myCachedPositionInfo.coords.longitude), pMarker.getPosition())
                };

                //check if we have a field set
                if(fieldSet) {
                    var dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
                    requestData = $.extend(requestData , dispositionData );
                }

                $.extend(requestData,{
                    ajaxResource : 'MATooltipAJAXResources'
                });

                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        if(response.success)
                        {
                            //NotifyError("Successfully checked out!", '');
    
                            try { callback({success: true, checkInId : response.checkInId, record: pMarker}); } catch (err) { console.log('Unable to perform check out callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                        }
                        else
                        {
                            //check if error msgs
                            var errorMsg = 'Field Set Error:';
                            if(response.errMsgs) {
                                for(i=0; i < response.errMsgs.length;i++) {
                                    errorMsg += '</br>' + response.errMsgs[i];
                                }
                            }
                            else { errorMsg = response.error; }
                            NotifyError("Error Checking In", errorMsg);
                            alert("Error Checking In. " +  errorMsg);
                            $('#CustomDispositionPopup #customDis-loadmask').hide();
                        }
                    }
                );
            }
            else
            {
                var requestData = {
                    action      : 'check_out',
                    checkInId   : checkInId,
                    clat        : '',
                    clong       : '',
                    caccuracy   : '',
                    distance    : ''
                };
                //check if we have a field set
                if(fieldSet) {
                    var dispositionData = $('#CustomDispositionPopup .customDis-buttons').data('dispositionData');
                    requestData = $.extend(requestData , dispositionData );
                }
                $.extend(requestData,{
                    ajaxResource : 'MATooltipAJAXResources'
                });

                Visualforce.remoting.Manager.invokeAction(MARemoting.processAJAXRequest,
                    processData,
                    function(response, event){
                        if(response.success)
                        {
                            NotifyError("Successfully checked out!", '');
                            try { callback({success: true, checkInId : response.checkInId, record: pMarker}); } catch (err) { console.log('Unable to perform check out callback: ' + err); $('#CustomDispositionPopup #customDis-loadmask').hide();}
                        }
                        else
                        {
                            //check if error msgs
                            var errorMsg = 'Field Set Error:';
                            if(response.errMsgs) {
                                for(i=0; i < response.errMsgs.length;i++) {
                                    errorMsg += '</br>' + response.errMsgs[i];
                                }
                            }
                            else { errorMsg = response.error; }
                            NotifyError("Error Checking In", errorMsg);
                            alert("Error Checking In. " +  errorMsg);
                            $('#CustomDispositionPopup #customDis-loadmask').hide();
                        }
                    }
                );
            }
        }

    </script>
    
</apex:page>