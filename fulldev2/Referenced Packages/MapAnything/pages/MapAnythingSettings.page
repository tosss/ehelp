<apex:page title="MapAnything Settings" controller="sma.MapAnythingBaseObjects" setup="true" >

	<!-- Leaflet -->
    <link rel="stylesheet" href="{!URLFOR($Resource.Leaflet, 'leaflet.css')}" />
    <script src="{!URLFOR($Resource.Leaflet, 'leaflet.js')}"></script>

    <script type='text/javascript'>
        if (typeof $ == 'undefined')
        {
            document.write("<script type='text/javascript' src='{!URLFOR($Resource.MapAnything, 'js/jquery-1.7.1.min.js')}'></script"+">");
            document.write("<script type='text/javascript' src='{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.min.js')}'></script"+">");
            document.write("<link rel='stylesheet' type='text/css' href='{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.css')}'></link"+">");
            document.write("<script type='text/javascript' src='{!URLFOR($Resource.AdminSettings, 'js/date.js')}'></script"+">");
        }
    </script>
    
    <!-- jQuery Combo Box (depends on jQuery UI) -->
    <script src="{!URLFOR($Resource.AdminSettings, 'js/combobox/jquery.combobox.js')}" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.AdminSettings, 'js/combobox/jquery.combobox.css')}" />
    
    <!-- jQuery Notify (growl messages) -->
    <script type='text/javascript' src="{!URLFOR($Resource.MapAnything, 'notify/jquery.notify.js')}"></script>
    <link rel='stylesheet' type='text/css' href="{!URLFOR($Resource.MapAnything, 'notify/ui.notify.css')}" />

    <!-- Glyphicons -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/MapAnything.css')}"/>

    <!-- CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/style.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'style.css')}"/>
    <c:CSSHelperBlue />
    <style>
        html, body {
            width: 100%;
            height: 100%;
        }
        
        /* Boxes */
        #adminsettings .box.gray {
            border: 1px solid #C7C7C7;
            padding:5px;
            margin:5px 0 10px 0;
            background:#efefef;
        }
        #adminsettings .section-header {
            color: #2265BB;
        }
        
        /* Forms */
        #adminsettings .form td {
        	vertical-align: middle;
        }
        
        /* Tabs */
        #adminsettings .TopTabs
        {
            background: none;
            border: none;
        }
        #adminsettings .TopTabs > ul
        {
            width: auto;
            padding: 0 8px;
            background: none;
            border: none;
            border-bottom: 1px solid #CCC;
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }
        #adminsettings .TopTabs > ul .ui-state-default
        {
            background: #3684c5;
            border: medium none;
            border-radius: 0 0 0 0;
            border: 1px solid #19508C;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
            margin: 0 0 0 0;
        }
        #adminsettings .TopTabs > ul li.ui-tabs-active
        {
            border: 1px solid #CCC;
            background: white;
            color: #222;
        }
        #adminsettings .TopTabs > ul li a
        {
            color: #ffffff;
            font-size: 10px;
            outline: none;
        }
        #adminsettings .TopTabs > ul li.ui-tabs-active a
        {
            color: #3684c5;
        }
        #adminsettings .TopTabs > .ui-tabs-panel
        {
            padding: 15px;
        }
        
        /* Loadmasks */
        .loadmask {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 99;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            background-color: #ffffff;
            opacity: 0.4;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 40);
            filter: alpha(opacity = 40);
        }
        .loadmask-status {
        	position: absolute;
        	width: 100%;
        	text-align: center;
        	z-index: 999999;
        	top: 50px;
        }
        .loadmask-status .status {
        	margin: 0 auto;
			background-color: white;
			display: inline-block;
			padding: 15px;
			font-size: 10px;
			-moz-border-radius: 12px;
			-webkit-border-radius: 12px;
			border-radius: 12px;
			-moz-box-shadow: 0px 0px 8px #000000;
			-webkit-box-shadow: 0px 0px 8px #000000;
			box-shadow: 0px 0px 8px #000000;
        }
        .loadmask-status .status * {
        	vertical-align: middle;
        }
        .loadmask-status .status img {
        	margin-right: 5px;
        }
        
        /* Comboboxes */
        #adminsettings .ui-combobox
        {
            padding-right: 0;
        }
        #adminsettings .ui-combobox input
        {
            background-color: white;
            background: white;
            padding-right: 30px;
            font-weight: bold;
            width: 300px;
        }
        #adminsettings .ui-combobox a
        {
            background: transparent;
            border: none;
            position: absolute;
            right: 0;
        }
        #adminsettings .ui-combobox a .ui-button-icon-primary
        {
            background: transparent url("{!URLFOR($Resource.QueryEditor, 'images/icons/combobox-arrow-16.png')}") no-repeat center;
        }
        
        /* Buttons */
        #adminsettings .buttons {
            padding: 0 10px;
        }
        #adminsettings .btn {
            width: 70px;
        }
        .btn-blue {
        	cursor: pointer;
        }
        .btn-blue.btn-white {
        	color: black;
        	border: 1px solid gray;
        	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f7f7f7', endColorstr = '#cfcfcf');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f7f7f7', endColorstr = '#cfcfcf')";
			background-image: -moz-linear-gradient(top, #f7f7f7, #cfcfcf);
			background-image: -ms-linear-gradient(top, #f7f7f7, #cfcfcf);
			background-image: -o-linear-gradient(top, #f7f7f7, #cfcfcf);
			background-image: -webkit-gradient(linear, center top, center bottom, from(#f7f7f7), to(#cfcfcf));
			background-image: -webkit-linear-gradient(top, #f7f7f7, #cfcfcf);
			background-image: linear-gradient(top, #f7f7f7, #cfcfcf);
        }
        .btn-blue.btn-white:hover {
        	color: black;
        	border: 1px solid gray;
        	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#e3e3e3', endColorstr = '#bcbcbc');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#e3e3e3', endColorstr = '#bcbcbc')";
			background-image: -moz-linear-gradient(top, #e3e3e3, #bcbcbc);
			background-image: -ms-linear-gradient(top, #e3e3e3, #bcbcbc);
			background-image: -o-linear-gradient(top, #e3e3e3, #bcbcbc);
			background-image: -webkit-gradient(linear, center top, center bottom, from(#e3e3e3), to(#bcbcbc));
			background-image: -webkit-linear-gradient(top, #e3e3e3, #bcbcbc);
			background-image: linear-gradient(top, #e3e3e3, #bcbcbc);
        }
        .buttonset-deletebtn:hover, .customaction-deletebtn:hover {
        	background: #FF5959 !important;
        }
        
        /* Permissions Filters */
        #permissions-filters td:nth-child(odd) {
        	font-weight: bold;
        	vertical-align: middle;
        }
        
        /* Permissions Grid */
        #permissions-grid {
        	width: 100%;
        	border-spacing: 0;
        	border-padding: 0;
        }
        #permissions-grid tr {
        	height: 35px;
        }
        .help-btn {
            color: #3684C5;
            font-size: 18px;
            cursor:pointer;
        }
        .help-text {
            color: #3684C5;
            font-size: 12px;
            display: none;
        }
        #permissions-grid th { 
        	padding: 5px;       	
        	font-size: 12px;
        	color: white;
        	background-color: #006DB4;
			background: #006DB4;
			background: url('images/blue-tab-bg.png');
			background-repeat: repeat-x;
			background-position: top;
			background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#197BBB), to(#0059A0));
			background: -webkit-linear-gradient(top, #197BBB, #0059A0);
			background: -moz-linear-gradient(center top , #197BBB 20%, #0059A0 100%) repeat scroll 0 0 transparent;
			background: -ms-linear-gradient(top, #197BBB, #0059A0);
			background: -o-linear-gradient(top, #197BBB, #0059A0);
			border: medium none;
			border: 1px solid #19508C;
			box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0')";
        }
        #permissions-grid th table {
        	width: 100%;
        	border-spacing: 0;
        }
		#permissions-grid th table td {
			background: transparent;
			filter: none;
			-ms-filter: none;
			border: none;
			color: white;
			padding: 0;
		}
		#permissions-grid th table td:first-child {
			padding-right: 5px;
		}
		#permissions-grid th table td:last-child {
			text-align: right;
		}
        #permissions-grid th .link {
        	font-size: 8px;
        	cursor: pointer;
        }
        #permissions-grid td {
        	vertical-align: middle;
        	padding: 5px;
        	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f0f0ed', endColorstr = '#c9c4c3');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#f0f0ed', endColorstr = '#c9c4c3')";
			background-image: -moz-linear-gradient(top, #f0f0ed, #c9c4c3);
			background-image: -ms-linear-gradient(top, #f0f0ed, #c9c4c3);
			background-image: -o-linear-gradient(top, #f0f0ed, #c9c4c3);
			background-image: -webkit-gradient(linear, center top, center bottom, from(#f0f0ed), to(#c9c4c3));
			background-image: -webkit-linear-gradient(top, #f0f0ed, #c9c4c3);
			background-image: linear-gradient(top, #f0f0ed, #c9c4c3);
			border: 1px solid #757575;
        }
        #permissions-grid tr:nth-child(even) td {
        	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#fafafa', endColorstr = '#f0f0f0');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#fafafa', endColorstr = '#f0f0f0')";
			background-image: -moz-linear-gradient(top, #fafafa, #f0f0f0);
			background-image: -ms-linear-gradient(top, #fafafa, #f0f0f0);
			background-image: -o-linear-gradient(top, #fafafa, #f0f0f0);
			background-image: -webkit-gradient(linear, center top, center bottom, from(#fafafa), to(#f0f0f0));
			background-image: -webkit-linear-gradient(top, #fafafa, #f0f0f0);
			background-image: linear-gradient(top, #fafafa, #f0f0f0);
        }
        #permissions-grid input.autosave[type=text] {
        	width: 35px;
        	font-size: 10px;
        }
        #permissions-grid a:link, #permissions-grid a:active, #permissions-grid a:visited {
        	text-decoration: none;
        	color: black;
        }
        #permissions-grid a:hover {
        	text-decoration: none;
        	color: #757575;
        }
        #permissions-grid-wrapper {
        	position: relative;
        	min-height: 150px;
        }
        #permissions-grid-wrapper.permissions-grid-loading #permissions-grid-loadmask {
        	display: none;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 99;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            background-color: #ffffff;
            opacity: 0.4;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 40);
            filter: alpha(opacity = 40);
        }
        #permissions-grid-wrapper.permissions-grid-loading #permissions-grid-loadmask {
        	display: block;
        }
        #permissions-grid-status {
        	display: none;
        	position: absolute;
        	width: 100%;
        	text-align: center;
        	z-index: 999999;
        	top: 100px;
        }
        #permissions-grid-wrapper.permissions-grid-loading #permissions-grid-status {
        	display: block;
        }
        #permissions-grid-status .status {
        	margin: 0 auto;
			background-color: white;
			display: inline-block;
			padding: 15px;
			font-size: 10px;
			-moz-border-radius: 12px;
			-webkit-border-radius: 12px;
			border-radius: 12px;
			-moz-box-shadow: 0px 0px 8px #000000;
			-webkit-box-shadow: 0px 0px 8px #000000;
			box-shadow: 0px 0px 8px #000000;
        }
        #permissions-grid-status * {
        	vertical-align: middle;
        }
        #permissions-grid-status img {
        	margin-right: 5px;
        }
        
        /* Notifications */
        #notifications {
        	position: fixed;
        	top: auto;
        	bottom: 10px;
        }
        
        /* Dialogs */
        .ui-dialog {
        	-moz-box-shadow: 0px 0px 20px #000000;
			-webkit-box-shadow: 0px 0px 20px #000000;
			box-shadow: 0px 0px 20px #000000;
        }
        .ui-dialog-titlebar {
        	display: none;
        }
        .ui-widget-overlay {
        	background: #000000;
        }
        .dialog-instructions {
        	font-size: 10px;
        	color: #808080;
        }
        
        /* Button Sets */
        #TopTabs-ButtonSets .section {
        	margin: 10px 0;
        }
        #TopTabs-ButtonSets .section-header {
        	font-weight: bold;
        	border-bottom: 2px solid silver;
        }
        .layout-availablebuttons {
        	overflow: hidden;
        	padding: 3px;
        	-moz-box-shadow: inset 0px 0px 4px #000000;
			-webkit-box-shadow: inset 0px 0px 4px #000000;
			box-shadow: inset 0px 0px 4px #000000;
        }
        .layout-availablebuttons.hovering {
        	-moz-box-shadow: inset 0px 0px 6px #000000;
			-webkit-box-shadow: inset 0px 0px 6px #000000;
			box-shadow: inset 0px 0px 6px #000000;
        }
        .buttonset-section-columns {
        	overflow: hidden;
        }
        .buttoncolumn {
        	float: left;
        	width: 116px;
        }
        .buttoncolumn .actionbutton {
        	width: 100px;
        	height: 10px;
        	line-height: 10px;
        	font-size: 8px;
        	font-weight: bold;
        	overflow: hidden;
        	padding: 3px 5px;
        	margin: 5px 3px;
        	cursor: move;
        	
			-moz-box-shadow: 0px 0px 1px #000000;
			-webkit-box-shadow: 0px 0px 1px #000000;
			box-shadow: 0px 0px 1px #000000;
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FCFCFC', endColorstr = '#FAFAFA');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FCFCFC', endColorstr = '#FAFAFA')";
			background-image: -moz-linear-gradient(top, #FCFCFC, #FAFAFA);
			background-image: -ms-linear-gradient(top, #FCFCFC, #FAFAFA);
			background-image: -o-linear-gradient(top, #FCFCFC, #FAFAFA);
			background-image: -webkit-gradient(linear, center top, center bottom, from(#FCFCFC), to(#FAFAFA));
			background-image: -webkit-linear-gradient(top, #FCFCFC, #FAFAFA);
			background-image: linear-gradient(top, #FCFCFC, #FAFAFA);
			-moz-background-clip: padding;
			-webkit-background-clip: padding-box;
			background-clip: padding-box;
        }
        .buttonset-section {
        	position: relative;
        }
        .buttonset-section-header {
        	border-bottom: 2px solid #C0C0C0;
			font-weight: bold;
			font-size: 10px;
        }
        .buttonset-section-header .buttonset-section-name {
        	min-height: 10px;
        }
        .buttonset-section-columns .buttoncolumn .actionbutton {
        	margin: 2px 3px;
        }
        .layout-wrapper {
        	border: 2px solid #000;
			width: 370px;
			min-height: 50px;
        }
        .layout-wrapper > .layout {
        	padding: 3px 8px;
        }
        .layout-wrapper > .layout .actionbutton[data-type="Blank"] {
        	height: 10px; 
        	line-height: 10px; 
        	font-weight: normal; 
        	font-style: italic; 
        	color: #C0C0C0; 
        	text-align: center;
        	-moz-box-shadow: none;
			-webkit-box-shadow: none;
			box-shadow: none;
			background: none;
        }
        .section-dropzone {
        	width: 100%;
        	height: 2px;
        }
        .button-dropzone {
        	width: 100%;
        	height: 2px;
        }
        .button-dropzone-handle {
        	width: 1px;
        	height: 1px;
        	margin: 0 auto;
        }
        .section-dropzone.hovering, .button-dropzone.hovering {
        	background: green;
        }
        .layout-massaction .buttonset-section-header {
			padding: 2px 7px;
			background: #E6E6E6;
			border: none;
			text-align: left;
        }
        .layout-massaction .button-dropzone-handle {
        	width: 100%;
        }
        .layout-massaction .buttonset-button {
        	position: relative;
        	padding: 6px 10px 6px 15px;
        	color: #555;
			font-family: "Helvetica Neue", Helvetica, arial, sans-serif;
			font-size: 10px;
			font-weight: normal;
        	cursor: move;
        }
        .layout-massaction .buttonset-button .arrow-right {
        	position: absolute;
        	top: 8px;
        	border-left-width: 4px;
			border-top-width: 4px;
			border-bottom-width: 4px;
        }
        .layout-massaction .buttonset-button .actionbutton {
        	margin-left: 10px;
        }
        .layout-massaction .buttonset-button .actionbutton[data-type="Blank"] {
        	font-style: italic;
			color: #C0C0C0;
        }
        .layout-massaction .buttonset-button .actionbutton[data-type="Blank"] ~ .arrow-right {
        	display: none;
        }
        
        /* Custom Actions */
        #TopTabs-CustomActions .section {
        	margin: 10px 0;
        }
        #TopTabs-CustomActions .section-header {
        	font-weight: bold;
        	border-bottom: 2px solid silver;
        }
        
        /* Map Lock */
        .dragzoomproxy
        {
            position: absolute;
            z-index: 1003;
            
            background-color: #666666;
            border: 3px solid #000000;
            opacity: 0.44;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 44);
            filter: alpha(opacity = 44);
        }
        
        /* Temporary fix for header links divider */
        span.divider {
        	float: none;
			display: inline;
			background: none;
			margin: 0;
        }
        .layout-wrapper.canDrop {
            background: #EAF2F5;
        }
   	</style>
   	
   	<!-- JS -->
   	<script type='text/javascript'>var securityToken = '{!securityToken}';</script>
   	<c:MA />
   	<c:JSHelperFunctions />
   	<c:JSActionFramework />
   	<script>
   		var pageSize = 30;
   		var leafletMap;
        $(function() {
        
        	//init edition-specific features
        	if ('{!roleSupport}' == 'true') {
        		$('.feature-routingrolesecurity').attr('checked', true).closest('tr').show();
        	}
        
        	//init tabs        
            $( "#adminsettings .TopTabs" ).tabs();
            
            //init notifications
		    $("#notifications").notify({ speed: 200, expires: false });
		    
		    //init dialogs
		    $('.dialogs > div').dialog({ autoOpen: false, modal:true, resizable: false, width: 'auto', height: 'auto' });
		    
            //handle add records checkbox
            $('#TopTabs-CustomActions').on('change','.includeRecords',function() {
                var $checkbox = $(this);
                if($checkbox.is(':checked')) {
                    $('#TopTabs-CustomActions .param-info').show();
                }
                else {
                    $('#TopTabs-CustomActions .param-info').hide();
                }
                
            });

		    //init country select
		    //$('#permissions-grid th select[data-field="DefaultCountry"]').html('<option value="--">--Select--</option>' + MA.Loqate.buildSupportedCountriesSelect().html());
            
            //combobox settings
            $('#adminsettings').on('focus', '.ui-autocomplete-input', function () { var $me = $(this); setTimeout(function () {$me.select();}, 100); });
            
			//get users for permissions grid
			load();
			
            //get settings
            showTabLoading($('#TopTabs-General'), 'Loading...');
            $.getJSON(MA.resources.Admin,"securityToken={!securityToken}&action=get_settings", function(json)
            { 
                if(json.success)
                {
                	//remove namespace
                	removeNamespace('{!namespace}', (json.data || {}));
                
                	//try to populate settings.  if we can't, we're just assuming that means the setting does not yet exist
                    try { $('#adminsettings input.apikey').val(json.data.APIKey.Value__c); } catch (err) { }
                    try { $('#adminsettings input.feature-folderpermissions').attr('checked', json.data.FolderPermissionsEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    try { $('#adminsettings input.feature-showprofilewithuser').attr('checked', json.data.ShowProfileWithUserEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    try { $('#adminsettings input.feature-visibleareamobile').attr('checked', json.data.VisibleAreaMobileEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    try { $('#adminsettings input.feature-territorymanagement').attr('checked', json.data.TerritoryManagementEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    try { $('#adminsettings input.feature-socialintegration').attr('checked', json.data.SocialIntegrationEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    try { $('#adminsettings input.feature-routingrolesecurity').attr('checked', json.data.RoutingRoleSecurity.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    try { $('#adminsettings input.feature-routeplanner').attr('checked', json.data.RoutePlannerEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    try { $('#adminsettings input.feature-autocheckout').attr('checked', json.data.AutoCheckOutEnabled.Value__c == 'true' ? 'checked' : false) } catch (err) { }
                    try { $('#adminsettings input.feature-debuglogs').attr('checked', json.data.DebugLogsEnabled.Value__c == 'true' ? 'checked' : false); } catch (err) { }
                    
                    showTabSuccess($('#TopTabs-General'), 'Settings Loaded', 1);
                }
                else
                {  
                    showTabError($('#TopTabs-General'), 'Unknown Error: Unable to load settings', false);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) {        
                showTabError($('#TopTabs-General'), 'Unknown Error: Unable to load settings', false);
            });
            
            //init minimap for map lock settings
            leafletMap = L.map($('.dialog-maplock-map')[0]).setView([37.5740108, -98.4801102], 4);
			L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
				maxZoom: 18,
				subdomains: 'abc'
			}).addTo(leafletMap);
			leafletMap.zoomControl.setPosition('topright');
			leafletMap.boxZoom.disable();
			
			//handle holding shift to allow selecting an area on the minimap
			var shiftDown = false;
			$(document).on('keydown', function (e) {
				if (!shiftDown && e.which == 16) {
					$('.dialog-maplock-map-dragzoomlayer').show();
					$('#dialog-maplock').data('lockSettings', {});
					try { leafletMap.removeLayer($('#dialog-maplock').data('maplockPolygon')); } catch (err) { }
					shiftDown = true;
				}
			});
			$(document).on('keyup', function (e) {
				if (e.which == 16) {
					$('.dialog-maplock-map-dragzoomlayer').hide();
					$('.dragzoomproxy').remove();
					shiftDown = false;
				}
			});
			
			//handle drag actions on the minimap dragzoom layer
			$('.dialog-maplock-map-dragzoomlayer').draggable({
				helper: function () {
					return $("<div />");
				},
				start: function (event, ui) {
					$("<div class='dragzoomproxy'></div>").appendTo(document.body).data('startPosition', { x: event.originalEvent.pageX, y: event.originalEvent.pageY });
				},
				drag: function (event, ui) {
				
					//do nothing if shift has already been released
					if ($('.dragzoomproxy').length == 0) {
						return;
					}
				
					//place the proxy in the correct location with the correct dimensions
		        	$('.dragzoomproxy').css({
		        		top: Math.min(event.originalEvent.pageY, $('.dragzoomproxy').data('startPosition').y),
			            left: Math.min(event.originalEvent.pageX, $('.dragzoomproxy').data('startPosition').x),
			            height: Math.abs(ui.position.top),
		             	width: Math.abs(ui.position.left)
		            });
				},
				stop: function (event, ui) {
				
					//do nothing if shift has already been released
					if ($('.dragzoomproxy').length == 0) {
						return;
					}
				
		            //get the proper offsets    
		           	var offset = $('.dialog-maplock-map-dragzoomlayer').offset();
		            var StartX = $('.dragzoomproxy').data('startPosition').x - offset.left;
		            var StartY = $('.dragzoomproxy').data('startPosition').y - offset.top;
		            var PageX = event.originalEvent.pageX - offset.left;
		            var PageY = event.originalEvent.pageY - offset.top;
		            
		            //remove the proxy
		        	$('.dragzoomproxy').remove();
		            
		            //figure out the topleft and bottomright corners of our box
		            var pointValues = [StartX + StartY, PageX + PageY, StartX + PageY, PageX + StartY];
		            var pointValueToGeoMap = {};
		            pointValueToGeoMap[StartX + StartY] = leafletMap.containerPointToLatLng(L.point(StartX, StartY));
		            pointValueToGeoMap[PageX + PageY] = leafletMap.containerPointToLatLng(L.point(PageX, PageY));
		            pointValueToGeoMap[StartX + PageY] = leafletMap.containerPointToLatLng(L.point(StartX, PageY));
		            pointValueToGeoMap[PageX + StartY] = leafletMap.containerPointToLatLng(L.point(PageX, StartY));
		            var TopLeft = pointValueToGeoMap[Math.min.apply(null, pointValues)];
		          	var BottomRight = pointValueToGeoMap[Math.max.apply(null, pointValues)];
		          	
		          	//create polygon
		          	try { leafletMap.removeLayer($('#dialog-maplock').data('maplockPolygon')); } catch (err) { }
		          	$('#dialog-maplock').data(
		          		'maplockPolygon',
		          		L.polygon(
		          			[
	                        	TopLeft,
	                        	L.latLng(TopLeft.lat, BottomRight.lng),
	                        	BottomRight,
	                        	L.latLng(BottomRight.lat, TopLeft.lng),
	                        	TopLeft
                        	],
		          			{
		          				color: '#000000',
		          				weight: 2,
		          				fillColor: '#22CC22',
		          				fillOpacity: 0.6
		          			}
		          		).addTo(leafletMap)
		          	);
                    
                    //keep track of these settings
                    $('#dialog-maplock').data('lockSettings', {
                    	topLeft: {
                    		latitude: TopLeft.lat,
                    		longitude: TopLeft.lng
                    	},
                    	bottomRight: {
                    		latitude: BottomRight.lat,
                    		longitude: BottomRight.lng
                    	}
                    });
				}
			});
			
			//handle saving map lock settings
			$('.dialog-maplock-save, .dialog-maplock-remove').click(function () {
				
				//show loading msg
            	var $loadMask = showTabLoading($('#dialog-maplock .loadmask-wrapper'), 'Updating...');
				
				//build the lock settings to be saved
				var lockSettings = {};
				if ($(this).is('.dialog-maplock-save')) 
				{
					$.extend(lockSettings, ($('#dialog-maplock').data('lockSettings') || {}));
				}
			
            	//start preparing data for this request
            	var requestData = {
            		action		: 'save_permission',
					field		: addNamespace('{!namespace}', 'MapAnythingSettings__c'),            		
            		type		: 'setting',
            		setting		: 'MapLockSettings',
            		value		: JSON.stringify(lockSettings)
            	};
            	
            	//if this is a mass action, we need to add the user ids
            	var userIds = [];
            	if ($('#dialog-maplock').data('massAction'))
            	{
            		//change the action for this call to be a mass action
            		requestData.action = 'save_permissions_mass';
            		
            		//send batch requests to update these records
            		$('#permissions-grid').data('batchCount', 0);
	            	$.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
	            		userIds.push(userId);
	            		
	            		//send out this batch if it's ready
	            		if (userIds.length > 200)
	            		{
	            			requestData.userIds = JSON.stringify(userIds);
	            			$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permissions_mass", requestData, function(json)
			                { 
			                    if(json.success)
			                    {
			                    }
			                    else { }
			                    
			                    //decrement the batches we have out
			                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
			                    showTabLoading($loadMask, 'Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
			                })
			                .error(function(jqXHR, textStatus, errorThrown) {        
			                    //decrement the batches we have out
			                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
			                    showTabLoading($loadMask, 'Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
			                });
			                
			                //increment the batches that we have out and restart the id list
			                $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
			                userIds = [];
	            		}
	            	});
	            	requestData.userIds = JSON.stringify(userIds);
	            	
	            	//send the last batch if needed
	            	if (userIds.length > 0)
	           		{
	           			requestData.userIds = JSON.stringify(userIds);
	           			$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permissions_mass", requestData, function(json)
		                { 
		                    if(json.success)
		                    {
		                    }
		                    else { }
		                    
		                    //decrement the batches we have out
		                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
		                    showTabLoading($loadMask, 'Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
		                })
		                .error(function(jqXHR, textStatus, errorThrown) {        
		                    //decrement the batches we have out
		                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
		                    showTabLoading($loadMask, 'Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
		                });
		                
		                //increment the batches that we have out and restart the id list
		                $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
		                userIds = [];
	           		}
	            	
	            	//done sending batches, update status message
	            	showTabLoading($loadMask, 'Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
	            	
	            	//set an interval to track when all the batches have returned
	            	$('#permissions-grid').data(
	            		'batchInterval',
	            		setInterval(function () {
		            	
		            		if ($('#permissions-grid').data('batchCount') == 0) 
		            		{
				                //update all rows
	                         	$.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
				            		record.Settings.MapLockSettings = JSON.parse(requestData.value);
				            	});
				            	
				            	//refresh this page to update the visible data
				            	$('#permissions-page').change();
				            	
				            	//clear this interval because we're done
				            	clearInterval($('#permissions-grid').data('batchInterval'));
				            	
				            	//we're done, close the dialog
		                        hideTabMessage($loadMask);
		                        $('#dialog-maplock').data('lockSettings', {});
		                        try { leafletMap.removeLayer($('#dialog-maplock').data('maplockPolygon')); } catch (err) { }
		                        $('#dialog-maplock').dialog('close');
		                    	
				            }
		                
	                	}, 1000)
	                );
            	}
            	else
            	{
            		//this is not a mass action so pass the userId
            		requestData.userId = $('#dialog-maplock').data('relatedTo').closest('.permissions-row').data('record').Id;
            
	            	//send the request
	            	$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}", requestData, function(json)
	                { 
	                    if(json.success)
	                    {
                        	//update this row
                         	$('#dialog-maplock').data('relatedTo').closest('.permissions-row').data('record').Settings.MapLockSettings = JSON.parse(requestData.value);
                         	populatePermissionsRow($('#dialog-maplock').data('relatedTo').closest('.permissions-row'));
	                         
	                        //we're done, close the dialog
	                        hideTabMessage($loadMask);
	                        $('#dialog-maplock').data('lockSettings', {});
		                    try { leafletMap.removeLayer($('#dialog-maplock').data('maplockPolygon')); } catch (err) { }
	                        $('#dialog-maplock').dialog('close');
	                    }
	                    else
	                    {
	                    	showTabError($loadMask, 'Unable to save');
	                    }
	                })
	                .error(function(jqXHR, textStatus, errorThrown) {        
	                    //show error
	                    showTabError($loadMask, 'Unable to save');
	                });
	            }
								
			});
			
            $('#TopTabs-CustomActions').on('click','.help-btn',function() {
                $button = $(this);
                $button.hide();
                $button.closest('td').find('.help-text').show();
            });

			//handle closing action button dialog
            $('#dialog-maplock .closebtn').click(function () {
            	$('#dialog-maplock').dialog('close');
            });
		
            //handle saving settings
            $('#adminsettings .buttons .savebtn').click(function () 
            {
                var $tab = showTabLoading($(this).closest('.ui-tabs-panel'), 'Saving...');
                
                //put all settings in a request obj
                var requestData = {
                	settings: JSON.stringify({
	                	APIKey						: $('#adminsettings input.apikey').val(),
	                	FolderPermissionsEnabled	: $('#adminsettings input.feature-folderpermissions').is(':checked') ? 'true' : 'false',
	                	ShowProfileWithUserEnabled	: $('#adminsettings input.feature-showprofilewithuser').is(':checked') ? 'true' : 'false',
	                	VisibleAreaMobileEnabled	: $('#adminsettings input.feature-visibleareamobile').is(':checked') ? 'true' : 'false',
	                	TerritoryManagementEnabled	: $('#adminsettings input.feature-territorymanagement').is(':checked') ? 'true' : 'false',
	                	SocialIntegrationEnabled	: $('#adminsettings input.feature-socialintegration').is(':checked') ? 'true' : 'false',
	                	RoutingRoleSecurity			: $('#adminsettings input.feature-routingrolesecurity').is(':checked') ? 'true' : 'false',
	                	RoutePlannerEnabled			: $('#adminsettings input.feature-routeplanner').is(':checked') ? 'true' : 'false',
	                	AutoCheckOutEnabled			: $('#adminsettings input.feature-autocheckout').is(':checked') ? 'true' : 'false',
	                	DebugLogsEnabled			: $('#adminsettings input.feature-debuglogs').is(':checked') ? 'true' : 'false'
	                })
                };
                
                //send request to save settings
                $.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_settings", requestData, function(json)
                { 
                    if(json.success)
                    {
                         showTabSuccess($tab, 'Settings Saved');
                    }
                    else
                    {  
                        showTabError($tab, 'Save Error: Please try again');
                    }
                })
                .error(function(jqXHR, textStatus, errorThrown) {        
                    showTabError($tab, 'Unknown Error');
                });                
            });
            
            //handle saving checkbox permissions
            $('#permissions-grid').on('change', '.autosave[type=checkbox]', function () {
           		var $checkbox = $(this);
           		
           		//build request data to update the permission
           		var requestData = {
           			userId		: $checkbox.closest('.permissions-row').data('record').Id,
           			field		: addNamespace('{!namespace}', $checkbox.attr('data-field')),
           			type		: 'boolean',
           			value		: $checkbox.is(':checked')
           		};
           		
           		//update the type if this is a setting
           		if ($checkbox.is('.setting')) {
           			requestData.setting = requestData.field;
           			requestData.field = addNamespace('{!namespace}', 'MapAnythingSettings__c');
           			requestData.type = 'setting';
           		}
           		
           		//replace the checkbox with a loader and send the request to update the permission
           		var $loader = $('.templates .loader').clone();
           		$checkbox.replaceWith($loader);
           		$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permission", requestData, function(json)
                { 
                    if(json.success)
                    {
                    	//update this data in our raw data (this is needed to prevent data loss during searching)
                    	if (requestData.type == 'setting') {
                    		switch (requestData.setting)
	                		{
	                			case 'ShowPersonalFolders':
	                				$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.ShowPersonalFolders = requestData.value;
	                			break;
	                			case 'EditableTooltips':
	                				$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.EditableTooltips = requestData.value;
	                			break;
	                			case 'ShowWeather':
	                				$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.ShowWeather = requestData.value;
	                			break;
	                			case 'OldFolders':
	                				$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.OldFolders = requestData.value;
	                			break;
	                			case 'HidePersonalFolder':
	                				$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.HidePersonalFolder = requestData.value;
	                			break;
	                			case 'ButtonSetId':
	                				$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.ButtonSetSettings = { Id: requestData.value };
	                			break;
	                			case 'DefaultCountry':
	                				$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id].Settings.DefaultCountry = requestData.value;
	                			break;
	                		}
                    	}
                    	else {
                        	$('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][requestData.field] = requestData.value;
                        }
                        	
                        //replace the loader with the original checkbox
                        $loader.replaceWith($checkbox);
                    }
                    else
                    {
                    	//replace the loader with the original checkbox
                        $loader.replaceWith($checkbox);
                    }
                })
                .error(function(jqXHR, textStatus, errorThrown) {        
                    //show error
                    $loader.replaceWith($checkbox);
                });
            });
            
            //handle saving picklist permissions
            $('#permissions-grid').on('change', 'select.autosave', function () {
           		var $picklist = $(this);
           		
           		//build request data to update the permission
           		var requestData = {
           			userId		: $picklist.closest('.permissions-row').data('record').Id,
           			field		: addNamespace('{!namespace}', $picklist.attr('data-field')),
           			type		: 'picklist',
           			value		: $picklist.val().indexOf('-') == 0 ? '' : $picklist.val()
           		};
           		
           		
           		//modify request data if this is a picklist that should modify a setting instead of a field
           		if ($picklist.is('.setting')) {
           			requestData.field = addNamespace('{!namespace}', 'MapAnythingSettings__c');
           			requestData.type = 'setting';
           			requestData.setting = $picklist.attr('data-field');
           		} 
           		
           		//replace the checkbox with a loader and send the request to update the permission
           		var $loader = $('.templates .loader').clone();
           		$picklist.replaceWith($loader);
           		$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permission", requestData, function(json)
                { 
                    if(json.success)
                    {
                    	//update this data in our raw data (this is needed to prevent data loss during searching)
                        $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][requestData.field] = requestData.value;
                        	
                        //replace the loader with the original checkbox
                        $loader.replaceWith($picklist);
                    }
                    else
                    {
                    	//replace the loader with the original checkbox
                        $loader.replaceWith($picklist);
                    }
                })
                .error(function(jqXHR, textStatus, errorThrown) {        
                    //show error
                    $loader.replaceWith($picklist);
                });
            });
            
            //handle saving text/number permissions
            $('#permissions-grid').on('keyup', 'td .autosave[type=text]', function () {
            	var $textbox = $(this);
            	
            	//cancel any existing timeout
           		try { clearTimeout($textbox.data('saveTimeout')); } catch (err) { }
            		
           		//set a timeout so we can save this value when the user stops typing
           		$(this).data(
           			'saveTimeout', 
           			setTimeout(function () {
           				
           				//build request data to update the permission
		           		var requestData = {
		           			userId		: $textbox.closest('.permissions-row').data('record').Id,
		           			field		: addNamespace('{!namespace}', $textbox.attr('data-field')),
		           			type		: 'number',
		           			value		: parseFloat($textbox.val())
		           		};
		           		
		           		//replace the textbox with a loader and send the request to update the permission
		           		var $loader = $('.templates .loader').clone();
           				$textbox.replaceWith($loader);
		           		$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permission", requestData, function(json)
		                { 
		                    if(json.success)
		                    {
		                    	//update this data in our raw data (this is needed to prevent data loss during searching)
		                        $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][requestData.field] = requestData.value;
		                        	
		                        //replace the loader with the original textbox
		                        $loader.replaceWith($textbox);
		                    }
		                    else
		                    {
		                    	//replace the loader with the original textbox
		                        $loader.replaceWith($textbox);
		                    }
		                })
		                .error(function(jqXHR, textStatus, errorThrown) {        
		                    //show error
		                    $loader.replaceWith($textbox);
		                });
           				
           			}, 800)
           		);
            });
            
            //handle mass saving checkbox permissions
            $('#permissions-grid').on('click', 'th span.massaction', updatePermissionsMass);
            
            //handle mass saving select list permissions
            $('#permissions-grid').on('change', 'th select.massaction', updatePermissionsMass);
            
            //handle mass saving text/number permissions
            $('#permissions-grid').on('keyup', 'th input', function () {
            
            	var $textbox = $(this);
            
            	//clear any existing timeouts
            	try { clearTimeout($textbox.data('saveTimeout')); } catch (err) { }
            
            	//set a timeout to save this data when the user stops typing
            	$textbox.data(
            		'saveTimeout',
            		setTimeout(function () {
            		
            			//set a loadmask over the permissions grid
        				$('#permissions-grid-wrapper').addClass('permissions-grid-loading');
        				$('#permissions-grid-status .status span').text('Preparing...');

		            	//start preparing data for this request
		            	var requestData = {
		            		field		: addNamespace('{!namespace}', $textbox.closest('th').attr('data-field')),
		            		type		: $textbox.closest('th').attr('data-type')
		            	};
		            	
		            	//get the new value based on the type and what was clicked
		            	switch (requestData.type)
		            	{
		            		case 'number':
		            			requestData.value = parseFloat($textbox.val());
		            			break;
		            	}
		            	
		            	//collect all of the records that need to be modified
		            	var userIds = [];
		            	$('#permissions-grid').data('batchCount', 0);
		            	$.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
		            		userIds.push(userId);
		            		
		            		//send out this batch if it's ready
		            		if (userIds.length > 200)
		            		{
		            			requestData.userIds = JSON.stringify(userIds);
		            			$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permissions_mass", requestData, function(json)
				                { 
				                    if(json.success)
				                    {
				                    	//update this data in our raw data (this is needed to prevent data loss during searching)
				                        $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
				                        	record[requestData.field] = requestData.value;
				                        });
				                    }
				                    else { }
				                    
				                    //decrement the batches we have out
				                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
				                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
				                })
				                .error(function(jqXHR, textStatus, errorThrown) {        
				                    //decrement the batches we have out
				                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
				                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
				                });
				                
				                //increment the batches that we have out and restart the id list
				                $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
				                userIds = [];
		            		}
		            	});
		            	requestData.userIds = JSON.stringify(userIds);
		            	
		            	//send the last batch if needed
		            	if (userIds.length > 0)
		           		{
		           			requestData.userIds = JSON.stringify(userIds);
		           			$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permissions_mass", requestData, function(json)
			                { 
			                    if(json.success)
			                    {
			                    	//update this data in our raw data (this is needed to prevent data loss during searching)
			                        $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
			                        	record[requestData.field] = requestData.value;
			                        });
			                    }
			                    else { }
			                    
			                    //decrement the batches we have out
			                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
			                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
			                })
			                .error(function(jqXHR, textStatus, errorThrown) {        
			                    //decrement the batches we have out
			                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
			                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
			                });
			                
			                //increment the batches that we have out and restart the id list
			                $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
			                userIds = [];
		           		}
		            	
		            	//done sending batches, update status message
		            	$('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
		            	
		            	//set an interval to track when all the batches have returned
		            	$('#permissions-grid').data(
		            		'batchInterval',
		            		setInterval(function () {
			            	
			            		if ($('#permissions-grid').data('batchCount') == 0) 
			            		{
			            			//update this data in our raw data (this is needed to prevent data loss during searching)
					                $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
										record[requestData.field] = requestData.value;
					                });
					                
					            	//update the current page of data and remove the loadmask
					            	$('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
					            	$('#permissions-page').change();
					            	
					            	//clear this interval because we're done
					            	clearInterval($('#permissions-grid').data('batchInterval'));
					            }
			                
		                	}, 1000)
		                );
		            	
                	}, 800)
            	);
            });
            
            //handle editing settings permissions
            $('#permissions-grid').on('click', '.editsettings', function () {

				switch ($(this).attr('data-field'))
				{   
		            case 'MapLockSettings':
		            
		            	var $dialog = $('#dialog-maplock');
		
						//keep track of the related record for later				
						var massAction = $(this).is('.massaction');
						var userRecord = $(this).closest('.permissions-row').data('record');
						$.extend($dialog.data(), {
							massAction	: massAction,
							relatedTo	: userRecord
						});
						
						//put the current lock polygon on the map if this is for a specific locked user.  otherwise reset defaults
						if (!massAction && userRecord.Settings.MapLockSettings && userRecord.Settings.MapLockSettings.topLeft) {
							try { leafletMap.removeLayer($('#dialog-maplock').data('maplockPolygon')); } catch (err) { }
				          	$('#dialog-maplock').data(
				          		'maplockPolygon',
				          		L.polygon(
			                        [
			                        	L.latLng(userRecord.Settings.MapLockSettings.topLeft.latitude, userRecord.Settings.MapLockSettings.topLeft.longitude),
			                        	L.latLng(userRecord.Settings.MapLockSettings.topLeft.latitude, userRecord.Settings.MapLockSettings.bottomRight.longitude),
			                        	L.latLng(userRecord.Settings.MapLockSettings.bottomRight.latitude, userRecord.Settings.MapLockSettings.bottomRight.longitude),
			                        	L.latLng(userRecord.Settings.MapLockSettings.bottomRight.latitude, userRecord.Settings.MapLockSettings.topLeft.longitude),
			                        	L.latLng(userRecord.Settings.MapLockSettings.topLeft.latitude, userRecord.Settings.MapLockSettings.topLeft.longitude)
			                        ],
			                        {
			                            color: '#000000',
			                            weight: 2,
			                            fillColor: '#22CC22',
			                            fillOpacity: 0.6
			                        }
		                    	).addTo(leafletMap)
		                    );
		                    setTimeout(function () {leafletMap.fitBounds($('#dialog-maplock').data('maplockPolygon').getBounds(), false, 'default')}, 500);
						}
						else {
							try { leafletMap.removeLayer($('#dialog-maplock').data('maplockPolygon')); } catch (err) { }
							leafletMap.setView([37.5740108, -98.4801102], 4);
						}
		
		            	//open the settings popup
		            	$dialog.data('relatedTo', $(this)).dialog('open');
		            	leafletMap.invalidateSize();
		            	break;
		            
		            default:
		            	break;
		        }
            });
            
            //handle searching for users (profile searching is handled in the autocomplete settings)
            $('#permissionsfilter-name').keyup(search);
            $('#permissionsfilter-profile').change(search);
            $('#permissionsfilter-includeinactive').change(load);
            $('#permissionsfilter-includeportal').change(load);
            $('#permissionsfilter-includechatter').change(load);
            
            //handle changing page number
            $('#permissions-page').change(function () {
            
            	//set a loadmask over the permissions grid
        		$('#permissions-grid-wrapper').addClass('permissions-grid-loading');
        		$('#permissions-grid-status .status span').text('Loading...');
        		
        		//remove existing rows
        		$permissionsGrid = $('#permissions-grid');
        		$permissionsGrid.find('.permissions-row').remove();
        		
        		//calculate start and end points for this page
            	var recordStart = ($(this).val() - 1) * pageSize + 1;
            	var recordEnd = recordStart + pageSize - 1;
            	
            	//loop over our matching records and add those that belong on this page
            	var index = 1;
            	$.each($permissionsGrid.data('matchingRecords'), function (userId, record) {
            		
            		//add a row for this record if we're past the starting point for this page
            		if (recordStart <= index)
            		{
            			//add row
            			var $row = populatePermissionsRow($('.templates .permissions-row').clone().data('record', record));
			            $permissionsGrid.append($row);
            		}
            		
            		//increment our index and stop looping if we're past the endpoint for this page
            		index++;
            		if (recordEnd < index) { return false; }
            	});
            	
            	//update page info
            	$('#permissions-pageinfo').text('Displaying users ' + Math.max(recordStart, 0) + ' - ' + Math.min(recordEnd, $permissionsGrid.data('matchingRecordsCount')) + ' of ' + $permissionsGrid.data('matchingRecordsCount'));
            	
            	//remove the loadmask over the permissions grid
        		$('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
            });
            
            /*****************************
            *	Button Sets OnReady
            *****************************/
            
            //get existing button sets
            ButtonSet_GetExisting();
            
            //wait for the action framework to be ready and then init the available buttons
            MAActionFramework.on('ready', function () 
            {
            	//clear existing available buttons
            	$('.layout-availablebuttons').empty();
            
	            //get available buttons and sets
	            var $currentButtonColumn = $("<div class='buttoncolumn' />").appendTo($('.layout-availablebuttons'));
	            $.each(MAActionFramework.standardActions, function (buttonName, button) {
	            	if (!button.Modes || !button.Modes.length || button.Modes.length == 0) {
	            		return;	
	            	}
	            	else if ($currentButtonColumn.children().length >= 4) {
	            		$currentButtonColumn = $("<div class='buttoncolumn' />").appendTo($('.layout-availablebuttons'));
	            	}
	            	
	            	var frameworkAction = MAActionFramework.getAction(button.Type, buttonName) || {};
	            	var $button = $("<div class='actionbutton' />").html(frameworkAction.Label).attr({'data-type': button.Type, 'data-action': buttonName});
	            	$.each((button.Layouts || []), function (index, layout) {
	            		$button.addClass(layout);
	            	});
	            	$currentButtonColumn.append($button);
	            });
	            $.each(MAActionFramework.customActions, function (buttonName, button) {
	            	if (!button.Modes || !button.Modes.length || button.Modes.length == 0) {
	            		return;	
	            	}
	            	else if ($currentButtonColumn.children().length >= 4) {
	            		$currentButtonColumn = $("<div class='buttoncolumn' />").appendTo($('.layout-availablebuttons'));
	            	}
	            	
	            	var frameworkAction = MAActionFramework.getAction(button.Type, buttonName) || {};
	            	var $button = $("<div class='actionbutton' />").html(frameworkAction.Label).attr({'data-type': button.Type, 'data-action': buttonName});
	            	$.each((button.Layouts || []), function (index, layout) {
	            		$button.addClass(layout);
	            	});
	            	$currentButtonColumn.append($button);
	            });
	            
	            //handle dragging action buttons
	            $('.layout-availablebuttons .actionbutton').draggable({
	            	opacity: 0.7,
	            	helper: 'clone',
                    start: function (event, ui) {
                        var $button = $(this);
                        var isIframe = false;

                        //check if this is an Iframe button, currently not supported on mass action
                        try {
                            if($button.attr('data-type') == 'Custom Action') {
                                //check if iframe
                                if(MAActionFramework.customActions[$button.attr('data-action')].Action == 'Iframe') {
                                    isIframe = true;
                                }
                            }
                        }
                        catch (e) {
                            //should never get here, just a precaution 
                        }
                        //highlight where button can be dropped
                        if($button.hasClass('Tooltip')) {
                            $('.layout-tooltip-wrapper').addClass('canDrop');
                        }
                        if($button.hasClass('Mass') && isIframe == false) {
                            $('.layout-massaction-wrapper').addClass('canDrop');
                        }
                        if($button.hasClass('POI')) {
                            $('.layout-poi-wrapper').addClass('canDrop');
                        }
                        if($button.hasClass('MyPosition')) {
                            $('.layout-myposition-wrapper').addClass('canDrop');
                        }

                        //show if already in tab
                        //loop over buttons and highlight
                        $('.actionbutton').each(function(){
                            if($(this).attr('data-action') == $button.attr('data-action')) {
                                $(this).css('background', '#D3A7A7');
                            }
                        });
                    },
                    stop: function (event,ui) {
                        //remove canDrop class
                        $('.layout-wrapper').removeClass('canDrop');

                        $('.actionbutton').each(function(){
                            $(this).css('background', '#FAFAFA');
                        });
                    }
	            });
	            
	            //handle dropping buttons back in the available buttons section
	            $('.layout-availablebuttons').droppable({
	            	accept: '.buttonset-button, .buttonset-section-header',
	            	tolerance: 'fit',
	            	hoverClass: 'hovering',
	            	drop: function (event, ui) {
	            		/*
	            		var buttonDataType = ui.draggable.find('.actionbutton').attr('data-type'); 
	            		var buttonText = ui.draggable.find('.actionbutton').text();
	            		$('.layout-availablebuttons .actionbutton').each(function () {
	            			if ($(this).attr('data-type') == buttonDataType && $(this).text() == buttonText) {
	            				$(this).draggable('enable');
	            			}
	            		});
	            		*/
	            		
	            		if (ui.draggable.is('.buttonset-button')) {
	            			ui.draggable.remove();
	            		}
	            		else if (ui.draggable.is('.buttonset-section-header')) {
	            			ui.draggable.closest('.buttonset-section').remove();
	            		}
	            	}
	            });
	            
	            //add handlers to the tooltip layout
	            ButtonSet_AddHandlers();
            });

            //show get/post options
            $('#TopTabs-CustomActions').on('change','.routine-action',function () {
                var value = $(this).val();
                if(value == 'NewWindow') {
                    $('#TopTabs-CustomActions .post-info').show();
                    if($('#TopTabs-CustomActions .includeRecords').is(':checked')) {
                        $('#TopTabs-CustomActions .param-info').show();
                    }
                }
                else {
                    $('#TopTabs-CustomActions .post-info').hide();
                    $('#TopTabs-CustomActions .param-info').hide();
                }
            });
            
            //handle selecting a button set
            $('.buttonsets-selectedbuttonset').change(function () {
            
            	//show loading
            	showLoading($('#TopTabs-ButtonSets'), 'Loading...');
            	
            	//clear previous layouts
            	//$('.layout-availablebuttons .actionbutton').draggable('enable');
            	$('.layout .buttonset-section').remove();
            	
            	if ($(this).val() == 'New')
            	{
            		//creating a new button set.  set defaults
            		$('#TopTabs-ButtonSets .basicinfo-name').val('New Button Set');
            		$('.buttonset-saveasbtn, .buttonset-deletebtn').hide();
            		$('.layout-tooltip').html(MAActionFramework.markerLayouts.tooltip.defaultHTML);
                    $('.layout-myposition').html(MAActionFramework.markerLayouts.myPosition.defaultHTML);
                    $('.layout-poi').html(MAActionFramework.markerLayouts.poi.defaultHTML);
					$('.layout-massaction').html('<div class="section-dropzone ui-droppable"></div><div class="buttonset-section"><div class="buttonset-section-header ui-draggable"><div class="buttonset-section-name editable">Mass Action</div></div><div class="buttonset-section-columns"><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Add to Campaign">Add to Campaign</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Change Owner">Change Owner</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Mass ui-draggable" data-type="Standard Action" data-action="Update Field">Update Field</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Clear Coordinates">Clear Coordinates</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Remove Marker">Remove Marker</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass MyPosition POI ui-draggable" data-type="Standard Action" data-action="Add to Trip">Add to Route</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div></div><div class="section-dropzone ui-droppable"></div></div><div class="buttonset-section"><div class="buttonset-section-header ui-draggable"><div class="buttonset-section-name editable">Activities</div></div><div class="buttonset-section-columns"><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Log a Call">Log a Call</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="Send Email">Send Email</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="New Task">New Task</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Tooltip Mass ui-draggable" data-type="Standard Action" data-action="New Event">New Event</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div></div><div class="section-dropzone ui-droppable"></div></div><div class="buttonset-section"><div class="buttonset-section-header ui-draggable"><div class="buttonset-section-name editable">Chatter</div></div><div class="buttonset-section-columns"><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Mass ui-draggable" data-type="Standard Action" data-action="Follow">Follow</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div><div class="buttonset-button ui-draggable"><div class="actionbutton Mass ui-draggable" data-type="Standard Action" data-action="Unfollow">Unfollow</div><div class="button-dropzone"><div class="button-dropzone-handle ui-droppable"></div></div><div class="arrow-right"></div></div></div><div class="section-dropzone ui-droppable"></div></div>');
                    ButtonSet_AddHandlers();
            		hideMessage($('#TopTabs-ButtonSets'));
            	}
            	else
            	{
            		//load the selected button set
            		$.ajax({
		                url: MA.resources.Admin+'?securityToken={!securityToken}&action=get_buttonset',
		                type: 'POST',
		                dataType: 'JSON',
		                data: {
		                	id: $(this).val()
		                },
		                success: function (response) 
		                {
		                	if (response.success)
		                	{
		                		//clean the result and populate basic settings
		                		removeNamespace('{!namespace}', response.result);
			                	$('#TopTabs-ButtonSets .basicinfo-name').val(response.result.Name);
			                	
			                	//parse the marker layouts and populate
                                $.each(MAActionFramework.markerLayouts, function (index, layout) {

                                    //legacy support
                                    var layoutContents;
                                    try {
                                        layoutContents = JSON.parse(response.result[layout.fieldName]);
                                    }
                                    catch (err) { layoutContents = []; }

                                    //if the contents are blank then populate with the defaults and we're done
                                    if (layoutContents.length == 0) {
                                        $(layout.selector).html(layout.defaultHTML);
                                    }

                                    //loop over each section
    			                	$.each(layoutContents, function (sectionIndex, section) {
    			                		
    			                		//add this section
    			                		var $section = $('.templates .buttonset-section').clone().appendTo($(layout.selector));
    			                		$section.find('.buttonset-section-name').text(section.Label);
    			                		
    			                		//loop over each column in this section
    			                		$.each(section.Columns, function (columnIndex, column) {
    			                			
    			                			//loop over each button in this column
    			                			var $column = $section.find('.buttoncolumn').eq(columnIndex);
    			                			$.each(column, function (buttonIndex, button) {
    			                				
    			                				//add this button
    			                				var frameworkAction = MAActionFramework.getAction(button.Type, button.Label) || {};
    			                				var $button = $('.templates .buttonset-button').clone().prepend(
    			                					$('<div class="actionbutton" />').attr({'data-type': button.Type, 'data-action': button.Label}).html(frameworkAction.Label)
    			                				).appendTo($column);
    			                			
    			                			});
    			                			
    			                		});
    			                		
    			                	});
                                });
			                	
			                	//parse the mass action layout and populate
			                	try {
				                	var massActionLayout = JSON.parse(response.result.MassActionLayout__c);
				                	$.each(massActionLayout, function (sectionIndex, section) {
				                		
				                		//add this section
				                		var $section = $('.templates .buttonset-section').clone().appendTo($('.layout-massaction'));
				                		$section.find('.buttonset-section-name').text(section.Label);
				                		$section.find('.buttonset-section-columns').html('<div class="button-dropzone"><div class="button-dropzone-handle"></div></div>');
				                		
				                		//loop over each button in this section
				                		$.each(section.Buttons, function (index, button) {
				                			
			                				//add this button
			                				var frameworkAction = MAActionFramework.getAction(button.Type, button.Label) || {};
			                				var $button = $('.templates .buttonset-button').clone().prepend(
			                					$('<div class="actionbutton" />').attr({'data-type': button.Type, 'data-action': button.Label}).html(frameworkAction.Label)
			                				).append('<div class="arrow-right"></div>').appendTo($section.find('.buttonset-section-columns'));
	
				                		});
				                		
				                	});
				                }
				                catch (err) { }
			                	
			                	//add handlers
			                	ButtonSet_AddHandlers();
			                	
			                	$('.buttonset-saveasbtn, .buttonset-deletebtn').show();
			                	hideMessage($('#TopTabs-ButtonSets'));
			            	}
			            	else {
			            		showError($('#TopTabs-ButtonSets'), 'Unable to load');
			            		MALog('Error loading button set: ' + response.details);
			            	}
		                },
		                error: function (response) { showError($('#TopTabs-ButtonSets'), 'Unable to load'); MALog('Unknown error loading button set'); }
		            });
            	}
            });

            /***************************
            *   Field Sets OnReady
            **************************/
            getFieldSets().then(function(res) {
                if(res.success) {
                    //remove previous options
                    $('#checkInFieldSet.dispositionOptions > option').remove();
                    var $fieldSetOpt = $('#checkInFieldSet.dispositionOptions').html($('<option value="Select">--Please Choose--</option>'));
                    //loop over return and check for correct types for each field
                    $.each((res.data.data || []), function (index, opt) {
                        $fieldSetOpt.append($('<option />').attr('value', opt.value).text(opt.name));
                    });

                    //init comboboxes
                    $fieldSetOpt.combobox();

                    getfieldSetInfo = true;
                }
            });
            
            /********************************
            *	Activity Fields OnReady
            ********************************/
            getActivityFields();
            
            //handle creating fields
            $('.ActivityFieldButtons .createActivityFieldsBtn ').click(function () 
            {
            	//var baseObject = $(this).is('.buttons-create .createfieldsbtn') ? $('#BottomTabs-1 .availableobject').val() : $('.editbaseobjectdetails.readonlybaseobject b').text();
            	
            	//show loading
            	launchPopup($('#dialog-createactivityfields'), {
            		minWidth: '600px',
            		buttons: {
            			'Create': function () {
            				
            				var fieldRequests = [];
            				
            				//show loading
            				var $dialog = showLoading($(this).closest('.ui-dialog'), 'Creating...');
            				
            				//create fields function
            				CreateActivityFields({
            					fieldRequests: fieldRequests,
            					complete: function (response) {
            						if (response.success) {
            							//reload fields and drop down boxes
            							loadActivityFields ();
            							getActivityFields ();
            							
            							//hide loading
            							hideMessage($dialog);
            						}
            					}
            				});
            			},
						'Close': function () { 
							hidePopup($('#dialog-createactivityfields')); 
						}
					}
            	});
            	
            	//update fields
            	loadActivityFields();
            });
            
            //Activity field Suggest button
            $('.ActivityFieldButtons .suggestActivityFieldBtn').click(function () {
            	
            	//Handle Boolean Fields
	            $('.newActivityFielddetails[data-field="boolean"] > option').each(function() {
					var FieldNameLowered = this.value.toLowerCase();
					if (FieldNameLowered.indexOf('locationverified__c') !== -1 && ($('#createdLocationVerified').val() == 'Select' || $('#createdLocationVerified').val() == ''))
					{
						$('#createdLocationVerified').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}     
				});
				
				//Hande DateTime Fields
				$('.newActivityFielddetails[data-field="dateTime"] > option').each(function() {
					var FieldNameLowered = this.value.toLowerCase();
					if (FieldNameLowered.indexOf('checkoutdate__c') !== -1 && ($('#checkOutDate').val() == 'Select' || $('#checkOutDate').val() == ''))
					{
						$('#checkOutDate').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
				});
				
				//Handle Number Fields
				$('.newActivityFielddetails[data-field="number"] > option').each(function() {
					var FieldNameLowered = this.value.toLowerCase();
					if (FieldNameLowered.indexOf('checkoutaccuracy__c') !== -1 && ($('#checkOutAccuracy').val() == 'Select' || $('#checkOutAccuracy').val() == ''))
					{
						$('#checkOutAccuracy').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
					else if (FieldNameLowered.indexOf('checkoutdistancefromrecordmi__c') !== -1 && ($('#checkOutDistanceFromRecord').val() == 'Select' || $('#checkOutDistanceFromRecord').val() == ''))
					{
						$('#checkOutDistanceFromRecord').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
					else if (FieldNameLowered.indexOf('createdlocationaccuracy__c') !== -1 && ($('#createdLocationAccuracy').val() == 'Select' || $('#createdLocationAccuracy').val() == ''))
					{
						$('#createdLocationAccuracy').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
					else if (FieldNameLowered.indexOf('checkoutlatitude__c') !== -1 && ($('#checkOutLatitude').val() == 'Select' || $('#checkOutLatitude').val() == ''))
					{
						$('#checkOutLatitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
					else if (FieldNameLowered.indexOf('checkoutlongitude__c') !== -1 && ($('#checkOutLongitude').val() == 'Select' || $('#checkOutLongitude').val() == ''))
					{
						$('#checkOutLongitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
					else if (FieldNameLowered.indexOf('createdlatitude__c') !== -1 && ($('#createdLatitude').val() == 'Select' || $('#createdLatitude').val() == ''))
					{
						$('#createdLatitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
					else if (FieldNameLowered.indexOf('createdlongitude__c') !== -1 && ($('#createdLongitude').val() == 'Select' || $('#createdLongitude').val() == ''))
					{
						$('#createdLongitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
					else if (FieldNameLowered.indexOf('distancefromrecordmi__c') !== -1 && ($('#distanceFromRecord').val() == 'Select' || $('#distanceFromRecord').val() == ''))
					{
						$('#distanceFromRecord').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
					}
				});
			});
			
			//Activity Fields Save Button
			$('.ActivityFieldButtons .saveActivityFieldBtn').click(function () {
				
				var $saving = showLoading($('#TopTabs-ActivitySettings .loadmask-wrapper'), 'Updating Fields...');
				
				//build settings
				var requestData = {
					serializedFields: JSON.stringify({
						'Activity-DefaultDuration'				: $('#defaultDuration').val(),
						'Activity-CheckOutAccuracy'				: $('#checkOutAccuracy').val(),
	                	'Activity-CheckOutDate'					: $('#checkOutDate').val(),
	                	'Activity-CheckOutDistanceFromRecord'	: $('#checkOutDistanceFromRecord').val(),
	                	'Activity-CreatedLocationAccuracy'		: $('#createdLocationAccuracy').val(),
	                	'Activity-CheckOutLatitude'				: $('#checkOutLatitude').val(),
	                	'Activity-CheckOutLongitude'			: $('#checkOutLongitude').val(),
	                	'Activity-CreatedLatitude'				: $('#createdLatitude').val(),
	                	'Activity-CreatedLongitude'				: $('#createdLongitude').val(),
	                	'Activity-CreatedLocationVerified'		: $('#createdLocationVerified').val(),
	                	'Activity-DistanceFromRecord'			: $('#distanceFromRecord').val(),
                        'Activity-FieldSet'                     : $('#checkInFieldSet').val()
	                })
                };
				
				//load the selected button set
           		$.ajax({
	                url: MA.resources.Admin+'?securityToken={!securityToken}&action=saveActivityFields',
	                type: 'POST',
	                dataType: 'JSON',
	                data: requestData,
	                success: function (response) 
	                {
	                	hideMessage($saving);
					}
				});
			});

            /********************************
            *   Routing Calendar OnReady
            ********************************/

            RouteCalendar_GetSettings();

            //Route Calendar Save Button
            $('.savebtn-routecalendarsettings').click(function () {

                var $saving = showLoading($('#TopTabs-RouteCalendarSettings'), 'Saving...');
                
                //build settings
                var requestData = {
                    serializedSettings: JSON.stringify({
                        'RoutingEvent-StartTime'    : $('#RoutingEvent-StartTime').val(),
                        'RoutingEvent-EndTime'      : $('#RoutingEvent-EndTime').val(),
                        'RoutingEvent-IsFlexible'   : $('#RoutingEvent-IsFlexible').val(),
                        'RoutingEvent-HasAddress'   : $('#RoutingEvent-HasAddress').val(),
                        'RoutingEvent-Tooltips'     : JSON.stringify($('#TopTabs-RouteCalendarSettings select[data-field="tooltip"]').map(function () { return $(this).val() == '--None--' ? null : { label: $(this).find('option:selected').text(), name: $(this).val() }; }).get())
                    })
                };
                
                //send request
                $.ajax({
                    url: MA.resources.Admin+'?securityToken={!securityToken}&action=saveRouteCalendarSettings',
                    type: 'POST',
                    dataType: 'JSON',
                    data: requestData,
                    success: function (response) 
                    {
                        hideMessage($saving);
                    }
                });
            });
            
            /********************************
            *	Custom Actions OnReady
            ********************************/
            
            CustomAction_GetExisting();
            
            //handle selecting an action
            $('#TopTabs-CustomActions .customactions-selectedaction').change(function () {
            
            	//show loading
            	showLoading($('#TopTabs-CustomActions'), 'Loading...');
            	
            	if ($(this).val() == 'New') 
            	{
            		//creating a new action.  load defaults
            		$('#TopTabs-CustomActions .basicinfo-name').val('');
            		$('#TopTabs-CustomActions .mode').attr('checked', true);
            		$('#TopTabs-CustomActions .requirement').attr('checked', false);
            		$('#TopTabs-CustomActions .routine-action').val('Iframe');
            		$('#TopTabs-CustomActions .routine-value').val('');
                    $('#TopTabs-CustomActions .post-info').hide();
                    $('#TopTabs-CustomActions .parameterName').val('');
                    $('#TopTabs-CustomActions .param-info').hide();
                    $('#TopTabs-CustomActions .includeRecords').removeAttr('checked');
            		
            		$('.customaction-saveasbtn, .customaction-deletebtn').hide();
            		hideMessage($('#TopTabs-CustomActions'));
            	}
            	else
            	{
            		//load the selected action
            		$.ajax({
		                url: MA.resources.Admin+'?securityToken={!securityToken}&action=get_customaction',
		                type: 'POST',
		                dataType: 'JSON',
		                data: {
		                	id: $(this).val()
		                },
		                success: function (response) 
		                {
		                	if (response.success)
		                	{
		                		removeNamespace('{!namespace}', response.result);
		                		
		                		//basic info
		                		$('#TopTabs-CustomActions .basicinfo-name').val(response.result.Name);
		                		
		                		//modes
		                		$('#TopTabs-CustomActions .mode').attr('checked', false);
		                		$.each((response.result.Modes__c ? response.result.Modes__c.split(';') : []), function (index, mode) {
		                			$('#TopTabs-CustomActions .mode[data-value="'+mode+'"]').attr('checked', true);
		                		});
		                		
		                		//requirements
		                		$('#TopTabs-CustomActions .requirement').attr('checked', false);
		                		$.each((response.result.Requirements__c ? response.result.Requirements__c.split(';') : []), function (index, requirement) {
		                			$('#TopTabs-CustomActions .requirement[data-value="'+requirement+'"]').attr('checked', true);
		                		});
		                		
		                		//routine
		                		$('#TopTabs-CustomActions .routine-action').val(response.result.Action__c);
		                		$('#TopTabs-CustomActions .routine-value').val(response.result.ActionValue__c);

                                if(response.result.Action__c == 'NewWindow') {
                                    $('#TopTabs-CustomActions .post-info').show(); 
                                    if(response.result.Options__c) {
                                        try {
                                            var options = JSON.parse(response.result.Options__c);
                                            $('#TopTabs-CustomActions #type-selection .type-action').val(options.method);
                                            if(options.addRecords && options.addRecords == true) {
                                                $('#TopTabs-CustomActions .includeRecords').attr('checked','checked');
                                                $('#TopTabs-CustomActions .parameterName').val(options.paramName);
                                                $('#TopTabs-CustomActions .param-info').show();
                                            }
                                            else {
                                                $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                                $('#TopTabs-CustomActions .parameterName').val('');
                                                $('#TopTabs-CustomActions .param-info').hide();
                                            }
                                        }
                                        catch (e){
                                            $('#TopTabs-CustomActions #type-selection .type-action').val('GET');
                                            $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                            $('#TopTabs-CustomActions .parameterName').val('');
                                            $('#TopTabs-CustomActions .param-info').hide();
                                        }
                                        //$('#TopTabs-CustomActions #type-selection .type-action').val(response.result.Method__c)
                                    }
                                    else {
                                        $('#TopTabs-CustomActions #type-selection .type-action').val('GET');
                                        $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                        $('#TopTabs-CustomActions .parameterName').val('');
                                        $('#TopTabs-CustomActions .param-info').hide();
                                    }
                                }
                                else {
                                    $('#TopTabs-CustomActions .post-info').hide();
                                    $('#TopTabs-CustomActions #type-selection .type-action').val('GET');
                                    $('#TopTabs-CustomActions .includeRecords').removeAttr('checked','checked');
                                }
		                		
		                		//hide loading
		                		$('.customaction-saveasbtn, .customaction-deletebtn').show();
		                		hideMessage($('#TopTabs-CustomActions'));
		                	}
		                	else {
		                		showError($('#TopTabs-CustomActions'), 'Unable to load');
		                		MALog('Error loading custom action: ' + response.details);
		                	}
		                },
		                error: function (response) { showError($('#TopTabs-CustomActions'), 'Unable to load'); MALog('Unknown error loading custom action'); }
		            });
            	}
            
            });
            
        });

        function updatePermissionsMass()
        {
        	//start preparing data for this request
           	var requestData = {
           		field		: addNamespace('{!namespace}', $(this).closest('th').attr('data-field')),
           		type		: $(this).closest('th').attr('data-type')
           	};
           	
        	//handle non-update use cases
        	if ($(this).is('select') && $(this).val() == '')
        	{
        		//this is a picklist with no value selected.  do nothing
        		return;
        	}
        
        	//set a loadmask over the permissions grid
       		$('#permissions-grid-wrapper').addClass('permissions-grid-loading');
       		$('#permissions-grid-status .status span').text('Preparing...');
           
           	//get the new value based on the type and what was clicked
           	switch (requestData.type)
           	{
           		case 'boolean':
           			requestData.value = $(this).text() == 'All';
           			break;
           		case 'picklist':
           			requestData.value = $(this).val();
           			$(this).val('');
           			break;
           		case 'setting':
           			
           			//make sure this is a regular setting and not a dialog
           			if (!$(this).is('.setting')) {
           				$('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
           				return;
           			}
           			
           			//handle different field types
           			if ($(this).is('select')) {
           				requestData.field = $(this).attr('data-field');
           				requestData.value = $(this).val();
           				$(this).val('');
           			}
           			else {
           				requestData.value = $(this).text() == 'All';
           			}
           			requestData.setting = requestData.field;
           			requestData.field = addNamespace('{!namespace}', 'MapAnythingSettings__c');
           			
           			break;
           		default:
           			//invalid type.  just do nothing
           			$('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
           			return;
           	}
           	
           	//send batch requests to update these records
           	var userIds = [];
           	$('#permissions-grid').data('batchCount', 0);
           	$.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
           		userIds.push(userId);
           		
           		//send out this batch if it's ready
           		if (userIds.length > 200)
           		{
           			requestData.userIds = JSON.stringify(userIds);
           			$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permissions_mass", requestData, function(json)
	                { 
	                    if(json.success)
	                    {
	                    	//update this data in our raw data (this is needed to prevent data loss during searching)
	                    	/*
	                        $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
	                        	if (requestData.type == 'setting') {
	                        		switch (requestData.setting)
			                		{
			                			case 'EditableTooltips':
			                				record.Settings.EditableTooltips = requestData.value;
			                				break;
			                			case 'ButtonSetId':
			                				record.Settings.ButtonSetSettings = { Id: requestData.value };
			                				break;
			                			default:
			                				break;
			                		}
	                        	}
	                        	else {
	                        		record[requestData.field] = requestData.value;
	                        	}
	                        });
	                        */
	                    }
	                    else { }
	                    
	                    //decrement the batches we have out
	                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
	                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
	                })
	                .error(function(jqXHR, textStatus, errorThrown) {        
	                    //decrement the batches we have out
	                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
	                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
	                });
	                
	                //increment the batches that we have out and restart the id list
	                $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
	                userIds = [];
           		}
           	});
           	
           	//send the last batch if needed
           	if (userIds.length > 0)
          	{
       			requestData.userIds = JSON.stringify(userIds);
       			$.getJSON(MA.resources.Admin+"?securityToken={!securityToken}&action=save_permissions_mass", requestData, function(json)
                { 
                    if(json.success)
                    {
                    	//update this data in our raw data (this is needed to prevent data loss during searching)
                    	/*
                        $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
                        	record[requestData.field] = requestData.value;
                        });
                        */
                    }
                    else { }
                    
                    //decrement the batches we have out
                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
                })
                .error(function(jqXHR, textStatus, errorThrown) {        
                    //decrement the batches we have out
                    $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') - 1);
                    $('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
                });
                
                //increment the batches that we have out and restart the id list
                $('#permissions-grid').data('batchCount', $('#permissions-grid').data('batchCount') + 1);
                userIds = [];
          	}
           	
           	//done sending batches, update status message
           	$('#permissions-grid-status .status span').text('Updating...' + $('#permissions-grid').data('batchCount') + ' batches remaining');
           	
           	//set an interval to track when all the batches have returned
           	$('#permissions-grid').data(
           		'batchInterval',
           		setInterval(function () {
            	
            		if ($('#permissions-grid').data('batchCount') == 0) 
            		{
            			//update this data in our raw data (this is needed to prevent data loss during searching)
		                $.each($('#permissions-grid').data('matchingRecords'), function (userId, record) {
		                	if (requestData.type == 'setting') {
		                		switch (requestData.setting)
		                		{
		                			case 'ShowPersonalFolders':
		                				record.Settings.ShowPersonalFolders = requestData.value;
		                			break;
		                			case 'EditableTooltips':
		                				record.Settings.EditableTooltips = requestData.value;
		                			break;
		                			case 'ShowWeather':
		                				record.Settings.ShowWeather = requestData.value;
		                			break;
		                			case 'OldFolders':
		                				record.Settings.OldFolders = requestData.value;
		                			break;
		                			case 'HidePersonalFolder':
		                				record.Settings.HidePersonalFolder = requestData.value;
		                			break;
		                			case 'ButtonSetId':
		                				record.Settings.ButtonSetSettings = { Id: requestData.value };
		                			break;
		                			case 'DefaultCountry':
		                				record.Settings.DefaultCountry = requestData.value;
		                			break;
		                		}
		                	}
		                	else {
								record[requestData.field] = requestData.value;
							}
		                });
		                
		            	//update the current page of data and remove the loadmask
		            	$('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
		            	$('#permissions-page').change();
		            	
		            	//clear this interval because we're done
		            	clearInterval($('#permissions-grid').data('batchInterval'));
		            }
                
               	}, 1000)
			);
        }
        
        //load the list of users and profiles based on the filter criteria
        function load()
        {
        	//show loading
        	showTabLoading($('#TopTabs-Permissions'), 'Loading...');
        
        	//get users
        	$('#permissions-grid').data('records', {});
			$.getJSON(MA.resources.Admin,"securityToken={!securityToken}&action=get_user_permissions_batch&offset=0&includeInactive="+$('#permissionsfilter-includeinactive').is(':checked')+"&includePortal="+$('#permissionsfilter-includeportal').is(':checked')+"&includeChatter="+$('#permissionsfilter-includechatter').is(':checked'), function userPermissionsResponse (json)
            {
                if(json.success)
                {
                	//grab the permissions grid for easy access
                	var $permissionsGrid = $('#permissions-grid');
                	
                	//loop through the returned users and add each as a row
                	$.each(json.users, function (index, user) {
                	
                		//remove namespace
                		removeNamespace('{!namespace}', user);
                	
                		//parse user settings
                		try { user.Settings = JSON.parse(user.MapAnythingSettings__c || '{}'); }
                		catch (err) { user.Settings = {}; }
                		
                		//add this user to the list in memory
                		$permissionsGrid.data('records')[user.Id] = user;
                		
                	});
                	
                	//if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
                	if (json.users.length >= 5000) {
	                	var newOffset = json.offset + json.users.length;
	                	$.getJSON(MA.resources.Admin,"securityToken={!securityToken}&action=get_user_permissions_batch&offset="+newOffset+"&includeInactive="+$('#permissionsfilter-includeinactive').is(':checked')+"&includePortal="+$('#permissionsfilter-includeportal').is(':checked')+"&includeChatter="+$('#permissionsfilter-includechatter').is(':checked'),userPermissionsResponse);
	                }
	                else {
	                	$permissionsGrid.data('doneLoading', true);
	                }
                }
                else
                {
                	$permissionsGrid.data('doneLoading', true);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) {
            	$permissionsGrid.data('doneLoading', true);
            });
            
            //get user profiles for the permissions grid
            $('#permissionsfilter-profile').data('autocompleteItems', []);
            $.getJSON(MA.resources.Admin,"securityToken={!securityToken}&action=get_user_profiles_batch&offset=0", function userProfilesResponse(json)
            {
            	if (json.success)
            	{
	            	//loop through the returned profiles and add each to the profile filter
	               	var profileAutocompleteItems = $('#permissionsfilter-profile').data('autocompleteItems');
	               	$.each(json.profiles, function (index, profile) {
	               		profileAutocompleteItems.push({
	               			label	: profile.Name,
	               			value	: profile.Name
	               		});
	               	});
	               	
	               	//if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
	               	if (json.profiles.length >= 5000) {
		               	var newOffset = json.offset + json.profiles.length;
		               	$.getJSON(MA.resources.Admin,"securityToken={!securityToken}&action=get_user_profiles_batch&offset="+newOffset,userProfilesResponse);
		            }
		            else {
		            	$('#permissionsfilter-profile').data('doneLoading', true);
		            }
	            }
	            else
	            {
	            	$('#permissionsfilter-profile').data('doneLoading', true);
	            }
            })
            .error(function(jqXHR, textStatus, errorThrown) {
            	$('#permissionsfilter-profile').data('doneLoading', true);        
            });
            
            //set up a poller to determine when the user permissions have fully loaded
            $('#permissionsfilter-profile').data(
            	'loadingInterval',
            	setInterval(function () {
            		
            		if ($('#permissions-grid').data('doneLoading') && $('#permissionsfilter-profile').data('doneLoading'))
            		{
            			//clear this interval because we're done
            			clearInterval($('#permissionsfilter-profile').data('loadingInterval'));
            		
	            		//enable the profile filter
	            		$('#permissionsfilter-profile').removeAttr('disabled').val('');
	                	
	                	//set up the autocomplete options for profile filtering
	                	$('#permissionsfilter-profile').autocomplete({
	                		select: search,
	                		search: function () {
	                			$('#permissionsfilter-profile').addClass('searching');
	                		},
	                		source: function(request, response) {
						        var results = $.ui.autocomplete.filter($('#permissionsfilter-profile').data('autocompleteItems'), request.term);
								
								$('#permissionsfilter-profile').removeClass('searching');
						        response(results.slice(0, 10));
						    }
	                	});
	                	
	                	//hide the loading message
	                	hideTabMessage($('#TopTabs-Permissions'), 'Loading...');
	                	
	                	//run a default search to populate the grid
	                	search();
	                }
            		
            	}, 1000)
            );
        }
        
        //filter the list of users based on the entered search criteria
        function search()
        {
        	//clear any existing search timeouts
        	try { clearTimeout($('#permissions-filters').data('searchTimeout')); } catch (err) { }
        	
        	//set a loadmask over the permissions grid
        	$('#permissions-grid-wrapper').addClass('permissions-grid-loading');
        	$('#permissions-grid-status .status span').text('Searching...');
        	
        	//set a search timeout to perform the search when the user is done setting filters
        	$('#permissions-filters').data(
        		'searchTimeout',
        		setTimeout(function () {
        			
        			//remove existing data for matching records
		        	var $permissionsGrid = $('#permissions-grid');
		           	$permissionsGrid.data('matchingRecords', {});
		           	
		           	//perform the search
		           	var matchCount = 0;
		           	var matchingRecords = $permissionsGrid.data('matchingRecords');
		           	$.each($permissionsGrid.data('records'), function (userId, record) {
		           		if (($('#permissionsfilter-name').val() == '' || record.Name.toLowerCase().indexOf($('#permissionsfilter-name').val().toLowerCase()) != -1) && ($('#permissionsfilter-profile').val() == '' || record.Profile.Name.toLowerCase().indexOf($('#permissionsfilter-profile').val().toLowerCase()) != -1)) 
		           		{
		               		//add a record in memory for this match
		               		matchingRecords[userId] = record;
		               		matchCount++;
		           		}
		           	});
		           	
		           	//hold on to the match count for user later
		           	$permissionsGrid.data('matchingRecordsCount', matchCount);
		           	
		           	//show page options
		           	$('#permissions-page option').remove();
		           	for (var i = 1; i <= Math.ceil(matchCount / pageSize); i++)
		           	{
		           		$('#permissions-page').append("<option value='"+i+"'>"+i+"</option>");
		           	}
		           	
		           	//remove the loadmask
		           	$('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
		           	
		           	//load the first page of data
		           	$('#permissions-page').change();
		           	
           		}, 800)
        	);
        }
        
        //populate a permissions row based on the data inside it.  return the row
        function populatePermissionsRow($row)
        {
        	//populate basic record data
        	var record = removeNamespace('{!namespace}', $row.data('record'));
        	$row.find('.name').html('').append($("<a target='_blank'></a>").attr('href', '/'+record.Id).text(record.Name));
        	$row.find('.profile').html('').append($("<a target='_blank'></a>").attr('href', '/'+record.Profile.Id).text(record.Profile.Name));
        	$row.find('.corporateadmin input').attr('checked', record.EditMapAnythingOrgWirdeQueries__c ? 'checked' : false);
        	$row.find('.allowexports input').attr('checked', record.AllowMapAnythingExports__c ? 'checked' : false);
        	$row.find('.version select').val(record.MAVersion__c || 'Current');
        	$row.find('.maxquerysize input').val(record.MAMaxQuerySize__c);
        	$row.find('.maxexportsize input').val(record.MAMaxExportSize__c);
        	
        	//populate basic settings
        	$row.find('.showpersonalfolders input').attr('checked', record.Settings.ShowPersonalFolders ? 'checked' : false);
        	$row.find('.editabletooltips input').attr('checked', record.Settings.EditableTooltips ? 'checked' : false);
        	$row.find('.showweather input').attr('checked', record.Settings.ShowWeather ? 'checked' : false);
        	$row.find('.oldfolders input').attr('checked', record.Settings.OldFolders ? 'checked' : false);
        	$row.find('.hidepersonalfolder input').attr('checked', record.Settings.HidePersonalFolder ? 'checked' : false);
        	
        	//populate map lock settings
        	if (record.Settings.MapLockSettings && record.Settings.MapLockSettings.topLeft) {
        		$row.find('.maplock .autosave').css('color', 'red').text('Locked');
        	}
        	else {
        		$row.find('.maplock .autosave').css('color', 'green').text('Unlocked');
        	}
        	
        	//populate button set settings
        	var $buttonSetSelect = $row.find('select[data-field="ButtonSetId"]').html($('#permissions-grid th select[data-field="ButtonSetId"]').html());
        	if (record.Settings.ButtonSetSettings) {
        		$buttonSetSelect.val(record.Settings.ButtonSetSettings.Id);
        	}
        	
        	//populate default country settings
        	/*
        	var $defaultCountrySelect = $row.find('select[data-field="DefaultCountry"]').html($('#permissions-grid th select[data-field="DefaultCountry"]').html());
        	if (record.Settings.DefaultCountry) {
        		$defaultCountrySelect.val(record.Settings.DefaultCountry);
        	}
        	*/
        	
        	//return the row
        	return $row;
        }

        /*******************************
        *   Dispostion Field Sets
        *******************************/
        var getfieldSetInfo = false;
        function getFieldSets () {
            //placeholder for the return
            var dfd = jQuery.Deferred();
            var requestData = {
                sObjectName : 'task'
            }
            jQuery.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=get_fieldSets&sObjectName=Task',
                type: 'POST',
                dataType: 'JSON',
                data : {},
            }).done (function (res) {
                //return the data
                dfd.resolve({success:true,data:res});
            }).error (function (res) {
                dfd.resolve({success:false,data:res});
            });

            //returns the promise and waits for the resolved callback
            return dfd.promise();
        }
        
        /********************************
        *	Activity Fields Handlers
        *********************************/
        function getActivityFields (type)
        {
        	var $loadfields = showLoading($('#TopTabs-ActivitySettings .loadmask-wrapper'), 'Loading...');
        	var requestData = {};
        	if (type) {
        		requestData.type = type;
        	}
        	
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=getActivityFields',
                type: 'POST',
                dataType: 'JSON',
                data: requestData,
                success: function (response) 
                {
                	if(response.success)
                	{
	                	//remove previous options
	                	$('#TopTabs-ActivitySettings .newActivityFielddetails > option').remove();
	                	
	                	var $ActivityFields = $('#TopTabs-ActivitySettings .newActivityFielddetails').html($('<option value="Select">--Please Choose--</option>'));
	                	var $numberFields = $('#TopTabs-ActivitySettings .newActivityFielddetails[data-field="number"]');
	                	var $booleanFields = $('#TopTabs-ActivitySettings .newActivityFielddetails[data-field="boolean"]');
	                	var $dateTimeFields = $('#TopTabs-ActivitySettings .newActivityFielddetails[data-field="dateTime"]');
	                	
	                	//loop over return and check for correct types for each field
	                	$.each((response.ActivityFields[0].Number || []), function (index, numberField) {
	                		$numberFields.append($('<option />').attr('value', numberField.value).text(numberField.name));
	                	});
	                	
	               		$.each((response.ActivityFields[0].Boolean || []), function (index, booleanField) {
	                		$booleanFields.append($('<option />').attr('value', booleanField.value).text(booleanField.name));
	                	});
	                	
	               		$.each((response.ActivityFields[0].DateTime || []), function (index, dateTimeField) {
	                		$dateTimeFields.append($('<option />').attr('value', dateTimeField.value).text(dateTimeField.name));
	                	});
	                	
	                	//populate static options
	                	$('#defaultDuration').html('<option value="30">0 hr, 30 min</option><option value="60">1 hr, 0 min</option><option value="90">1 hr, 30 min</option><option value="120">2 hr, 0 min</option><option value="150">2 hr, 30 min</option><option value="180">3 hr, 0 min</option>');
	                	
	                	//init comboboxes
	                	$ActivityFields.combobox();
	                	
	                	//update field selections
                        var intVar = setInterval(function () {
                            if(getfieldSetInfo) {
                                clearInterval(intVar);
                                updateActivityFields($loadfields, type);
                            }
                        },500);
	                }
                },
                error: function (response) { MALog('Error getting fields: ' + response.details); }
            });
        }
        
        function updateActivityFields ($loadfields, type)
        {
        	var requestData = {};
        	if (type) {
        		requestData.type = type;
        	}
        	
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=getActivityFieldSettings',
                type: 'POST',
                dataType: 'JSON',
                data: requestData,
                success: function (response) 
                {
                	if(response.success)
                	{
        				var fieldSettings = response.createableFields[0];
        				
        				//loop over field settings and set combobox values
        				$.each(fieldSettings, function (key, field) {
        					$('#'+key+'').val(field).next().find('.ui-autocomplete-input').val($('#'+key+' option:selected').text());
        				});
        				
        				hideMessage($loadfields);
        			}
        		}
        	});
        }
        
        function loadActivityFields ()
        {
        	//show loading 
        	var $loading = showLoading($('#dialog-createactivityfields .loadmask-wrapper'), 'Loading...');
        	
        	//Grab fields
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=loadActivityFields',
                type: 'POST',
                dataType: 'JSON',
                data: {baseObject: 'task'},
                success: function (response) 
                {
                	//populate the createable fields table
               		$('#dialog-createactivityfields .createablefield-row').remove();
               		$.each(response.createableFields, function (index, createableField) {
               		
               			//basic fields
               			var $createableFieldRow = $('.templates .createablefield-row').clone().attr('data-name', createableField.name).data('createableField', createableField);
               			$createableFieldRow.find('.createablefield-label').text(createableField.label);
               			
               			//does this field exist?
               			if (createableField.exists)
               			{
               				$createableFieldRow.find('.createablefield-exists').html("<img src='{!URLFOR($Resource.MapAnything, 'images/check-22.png')}' />");
               				
               				//if this is the skip geocoding field, make sure the checkbox for it is visible
               				if (createableField.name == 'MASkipGeocoding__c') {
               					$('#editskipfailedgeocodes').show().next().hide();
               				}
               			}
               			else
               			{
               				$createableFieldRow.find('.createablefield-exists').html("<input type='checkbox' class='createablefield-create' checked='checked' />")
               			}
               			
               			//render the row
               			$('#dialog-createfields-table').append($createableFieldRow);
               		});
               		
               		//hide loading
               		hideMessage($loading);
                },
                error: function (response) { MALog('Error getting button sets: ' + response.details); }
            });
        }
        
        function CreateActivityFields(options)
		{
			//send requests to create the needed fields
			var partnerURL = '{!$Api.Partner_Server_URL_280}';
       		var sessionId = '{!$Api.Session_ID}';
       		var fieldRequests = options.fieldRequests;
       		
			$('#dialog-createactivityfields .createablefield-row .createablefield-create').each(function () {
				//grab stored field info
				var fieldData = $(this).closest('.createablefield-row').data('createableField');
				
				//create a field request so we can track it and determine completion
				var fieldRequest = {
	            	done: false,
	            	error: false
	            };
				fieldRequests.push(fieldRequest);
				
				//create field
				if ($(this).is(':checked')) {
					
					//send request
					$.getJSON(
						"https://product-api-prod.cloudbilt.com/createfield.php?callback=?",
						{ 
		                    sessionid: sessionId, 
		                    serverurl: partnerURL,
		                    type: fieldData.type,
		                    object: 'Activity',
		                    name: fieldData.name,
		                    label: fieldData.label,
		                    precision: fieldData.precision,
		                    scale: fieldData.scale
		                },
		                function (response) {
		                	if (response.success) {
		                		fieldRequest.id = response.data.result.id;
		                	}
		                	else {
		                		fieldRequest.done = fieldRequest.error = true;
		                	}
		            	}
		            );
		        }
		        else {
		        	fieldRequest.done = true;
		        }
			});

			//start an interval to check for completion of field creation
			var fieldCreationInterval = setInterval(function () {
				
				//loop over each field request checking for completion
				var done = true;
				var error = false;
				$.each(fieldRequests, function (index, fieldRequest) {
					if (!fieldRequest.done) {
						
						//not done
						done = false;
					
						//send a request to check status if we have an id
						if (fieldRequest.id) {
							$.getJSON(
								"https://product-api-prod.cloudbilt.com/status.php?callback=?", 
				                { 
				                    sessionid: sessionId, 
				                    serverurl: partnerURL,
				                    id: fieldRequest.id
				                },
				                function(response) {
				                    if (response.success) {
				                    	if (response.data.result.done) {
				                    		if (response.data.result.state == 'Error') {
				                    			if (response.data.result.statusCode == 'DUPLICATE_DEVELOPER_NAME') {
				                    			
				                    				//the field already exists so we'll just use it
				                    				fieldRequest.done = true;
				                    			
				                    			}
				                    			else {
				                    				fieldRequest.done = fieldRequest.error = true;	//unknown error
				                    			}
				                    		}
				                    		else {
				                    			fieldRequest.done = true;	//success
				                    		}
				                    	}
				                    }
				                    else {
				                    	fieldRequest.done = fieldRequest.error = true;	//unknown error
				                    }
				            	}
				            );
				        }
					}
					else if (fieldRequest.error) {
						error = true;
					}
				});
				
				//done?
				if (done) {
					clearInterval(fieldCreationInterval);
					options.complete({ success: !error });
				}


			}, 2000);
		}
        
        /********************************
        *	Button Set Handlers
        *********************************/
        function ButtonSet_GetExisting ()
        {
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=get_buttonsets',
                type: 'POST',
                dataType: 'JSON',
                data: {},
                success: function (response) 
                {
                	var $buttonSetSelects = $('#permissions-grid select[data-field="ButtonSetId"]');
                
                	var $buttonSets = $('.buttonsets-selectedbuttonset').html($('<option value="New">--Create New--</option>'));
                	$.each((response.results || []), function (index, buttonSet) {
                		$buttonSets.append($('<option />').attr('value', buttonSet.Id).text(buttonSet.Name));
                		$buttonSetSelects.append($('<option />').attr('value', buttonSet.Id).text(buttonSet.Name));
                	});
                	$buttonSets.combobox().change();
                	
                	//refresh the permissions grid if it already has rows so the buttons set options will be populated
                	if ($('#permissions-grid .permissions-row').length > 0){
                		search();
                	}
                },
                error: function (response) { MALog('Error getting button sets: ' + response.details); }
            });
        }
        function ButtonSet_InsertSection (event, ui)
        {
        	//if we're dragging an existing section, just move it.  otherwise, create a new section
        	if (ui.draggable.is('.buttonset-section-header'))
        	{
        		//make sure we aren't dragging this section onto itself
        		if ($.contains(ui.draggable.closest('.buttonset-section').get(0), this)) { $(this).removeClass('hovering'); return; }
        		
        		//move it
        		$(this).after(ui.draggable.closest('.buttonset-section'));
        	}
        	else
        	{
	        	//create new section
	        	var $newSection = $('.templates .buttonset-section').clone();
	        	
	        	//modify the section for use in the mass menu if needed
	        	if ($(this).closest('.layout').is('.layout-massaction')) {
	        		$newSection.find('.buttonset-section-columns').html('<div class="button-dropzone"><div class="button-dropzone-handle"></div></div>');
	        	}
	        	
	        	//add the section
	       		$(this).after($newSection);
	       		
	       		//name edit handling
	       		$newSection.on('click', '.buttonset-section-name.editable', function () {
	       			var $nameEl = $(this);
	       			$nameEl.removeClass('editable').addClass('editing').html($('<input type="text" />').val($(this).text())).find('input').focus().select().blur(function () {
	       				$nameEl.removeClass('editing').addClass('editable').text($nameEl.find('input').val());
	       			});
	       		});
	       		
	       		//make the section draggable
	       		$newSection.find('.buttonset-section-header').draggable({
		        	opacity: 0.7,
		        	helper: 'clone'
		        });
	       		
	       		//section drop zone handling
	       		$newSection.find('.section-dropzone').droppable({
	       			accept: function (el) {
	            		if (el.is('.actionbutton[data-type="Section"]')) { 
	            			return true; 
	            		}
	            		else if (el.is('.buttonset-section-header')) {
	            			return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
	            		}
	            	},
	       			tolerance: 'touch',
	       			hoverClass: 'hovering',
	       			drop: ButtonSet_InsertSectionAfterSection
	       		});
	       		
	       		//button drop zone handling
	       		$newSection.find('.button-dropzone-handle').droppable({
	        		accept: function (el) {
	        			if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
	        				return true;
	        			}
	        			else {
	        				var layout = $(this).closest('.layout').attr('data-layout');
	        				return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
	        			}
	        		},
	        		tolerance: 'touch',
	        		hoverClass: 'hovering',
	        		drop: ButtonSet_InsertButton,
	        		over: ButtonSet_OverButton,
	        		out: ButtonSet_OutButton
	        	});
	        }
        }
        function ButtonSet_InsertSectionAfterSection (event, ui) 
        {
        	//if we're dragging an existing section, just move it.  otherwise, create a new section
        	if (ui.draggable.is('.buttonset-section-header'))
        	{
        		//make sure we aren't dragging this section onto itself
        		if ($.contains(ui.draggable.closest('.buttonset-section').get(0), this)) { $(this).removeClass('hovering'); return; }
        		
        		//move it
        		$(this).closest('.buttonset-section').after(ui.draggable.closest('.buttonset-section'));
        	}
        	else
        	{
	        	//create new section
	        	var $newSection = $('.templates .buttonset-section').clone();
	        	
	        	//modify the section for use in the mass menu if needed
	        	if ($(this).closest('.layout').is('.layout-massaction')) {
	        		$newSection.find('.buttonset-section-columns').html('<div class="button-dropzone"><div class="button-dropzone-handle"></div></div>');
	        	}
	        	
	        	//add the section
	       		$(this).closest('.buttonset-section').after($newSection);
	       		
	       		//name edit handling
	       		$newSection.on('click', '.buttonset-section-name.editable', function () {
	       			var $nameEl = $(this);
	       			$nameEl.removeClass('editable').addClass('editing').html($('<input type="text" />').val($(this).text())).find('input').focus().select().blur(function () {
	       				$nameEl.removeClass('editing').addClass('editable').text($nameEl.find('input').val());
	       			});
	       		});
	       		
	       		//make the section draggable
	       		$newSection.find('.buttonset-section-header').draggable({
		        	opacity: 0.7,
		        	helper: 'clone'
		        });
	       		
	       		//section drop zone handling
	       		$newSection.find('.section-dropzone').droppable({
	       			accept: function (el) {
	            		if (el.is('.actionbutton[data-type="Section"]')) { 
	            			return true; 
	            		}
	            		else if (el.is('.buttonset-section-header')) {
	            			return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
	            		}
	            	},
	       			tolerance: 'touch',
	       			hoverClass: 'hovering',
	       			drop: ButtonSet_InsertSectionAfterSection
	       		});
	       		
	       		//button drop zone handling
	       		$newSection.find('.button-dropzone-handle').droppable({
	        		accept: function (el) {
	        			if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
	        				return true;
	        			}
	        			else {
	        				var layout = $(this).closest('.layout').attr('data-layout');
	        				return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
	        			}
	        		},
	        		tolerance: 'touch',
	        		hoverClass: 'hovering',
	        		drop: ButtonSet_InsertButton,
	        		over: ButtonSet_OverButton,
	        		out: ButtonSet_OutButton
	        	});
	        }
        }
        function ButtonSet_InsertButton (event, ui)
        {
        	var $newButton;
        	if (ui.draggable.is('.buttonset-button'))
        	{
        		//make sure we aren't dragging this button onto itself
        		if ($.contains(ui.draggable.get(0), this)) { $(this).closest('.button-dropzone').removeClass('hovering'); return; }
        		$newButton = ui.draggable;
        	}
        	else
        	{
        		$newButton = $('.templates .buttonset-button').clone().prepend(ui.draggable.clone());
        		/*
        		if (ui.draggable.is('[data-type="Standard Action"], [data-type="Custom Action"]')) {
        			ui.draggable.draggable('disable');
        		}
        		*/
        		
        		//update this button for use in the mass layout if needed
        		if ($(this).closest('.layout').is('.layout-massaction')) {
        			$newButton.append('<div class="arrow-right"></div>');
        		}
        	}
        	
        	$(this).closest('.button-dropzone').removeClass('hovering').after($newButton).next().find('.button-dropzone-handle').droppable({
        		accept: function (el) {
        			if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
        				return true;
        			}
        			else {
        				var layout = $(this).closest('.layout').attr('data-layout');
        				return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
        			}
        		},
        		tolerance: 'touch',
        		hoverClass: 'hovering',
        		drop: ButtonSet_InsertButtonAfterButton,
        		over: ButtonSet_OverButton,
        		out: ButtonSet_OutButton
        	});
        	$newButton.draggable({
	        	opacity: 0.7,
	        	helper: 'clone'
	        });
        }
        function ButtonSet_InsertButtonAfterButton (event, ui)
        {
        	var $newButton;
        	if (ui.draggable.is('.buttonset-button'))
        	{
        		//make sure we aren't dragging this button onto itself
        		if ($.contains(ui.draggable.get(0), this)) { $(this).closest('.button-dropzone').removeClass('hovering'); return; }
        		$newButton = ui.draggable;
        	}
        	else
        	{
        		$newButton = $('.templates .buttonset-button').clone().prepend(ui.draggable.clone());
        		/*
        		if (ui.draggable.is('[data-type="Standard Action"], [data-type="Custom Action"]')) {
        			ui.draggable.draggable('disable');
        		}
        		*/
        		
        		//update this button for use in the mass layout if needed
        		if ($(this).closest('.layout').is('.layout-massaction')) {
        			$newButton.append('<div class="arrow-right"></div>');
        		}
        	}
        
        	$(this).closest('.button-dropzone').removeClass('hovering').closest('.buttonset-button').after($newButton).next().find('.button-dropzone-handle').droppable({
        		accept: function (el) {
        			if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
        				return true;
        			}
        			else {
        				var layout = $(this).closest('.layout').attr('data-layout');
        				return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
        			}
        		},
        		tolerance: 'touch',
        		hoverClass: 'hovering',
        		drop: ButtonSet_InsertButtonAfterButton,
        		over: ButtonSet_OverButton,
        		out: ButtonSet_OutButton
        	});
        	$newButton.draggable({
	        	opacity: 0.7,
	        	helper: 'clone'
	        });
        }
        function ButtonSet_OverButton (event, ui)
        {
        	$(this).closest('.button-dropzone').addClass('hovering');
        }
        function ButtonSet_OutButton (event, ui)
        {
        	$(this).closest('.button-dropzone').removeClass('hovering');
        }
        function ButtonSet_AddHandlers()
        {
        	//handle dragging buttons
        	$('.layout .buttonset-button').draggable({
        		opacity: 0.7,
        		helper: 'clone'
        	});
        	
        	//handle dragging sections
        	$('.layout .buttonset-section-header').draggable({
        		opacity: 0.7,
        		helper: 'clone'
        	});

            //handle editing section names
            $('.layout .buttonset-section-name.editable').click(function () {
                var $nameEl = $(this);
                $nameEl.removeClass('editable').addClass('editing').html($('<input type="text" />').val($(this).text())).find('input').focus().select().blur(function () {
                    $nameEl.removeClass('editing').addClass('editable').text($nameEl.find('input').val());
                });
            });
        
        	//handle dropping sections
            $('.layout > .section-dropzone').droppable({
            	accept: function (el) {
            		if (el.is('.actionbutton[data-type="Section"]')) { 
            			return true; 
            		}
            		else if (el.is('.buttonset-section-header')) {
            			return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
            		}
            	},
            	tolerance: 'touch',
            	hoverClass: 'hovering',
            	drop: ButtonSet_InsertSection
            });
            $('.layout .buttonset-section .section-dropzone').droppable({
            	accept: function (el) {
            		if (el.is('.actionbutton[data-type="Section"]')) { 
            			return true; 
            		}
            		else if (el.is('.buttonset-section-header')) {
            			return el.closest('.layout').get(0) === $(this).closest('.layout').get(0);
            		}
            	},
            	tolerance: 'touch',
            	hoverClass: 'hovering',
            	drop: ButtonSet_InsertSectionAfterSection
            });
            
            //handle dropping buttons
            $('.layout-marker .buttoncolumn > .button-dropzone .button-dropzone-handle, .layout-massaction .buttonset-section-columns > .button-dropzone .button-dropzone-handle').droppable({
        		accept: function (el) {
        			if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
        				return true;
        			}
        			else {
        				var layout = $(this).closest('.layout').attr('data-layout');
        				return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
        			}
        		},
        		tolerance: 'touch',
        		hoverClass: 'hovering',
        		drop: ButtonSet_InsertButton,
        		over: ButtonSet_OverButton,
        		out: ButtonSet_OutButton
        	});
        	$('.layout-marker .buttoncolumn .buttonset-button .button-dropzone-handle, .layout-massaction .buttonset-button .button-dropzone-handle').droppable({
        		accept: function (el) {
        			if (el.is('.actionbutton[data-type="Blank"], .buttonset-button')) {
        				return true;
        			}
        			else {
        				var layout = $(this).closest('.layout').attr('data-layout');
        				return el.is('.actionbutton.'+layout+'[data-type="Standard Action"], .actionbutton.'+layout+'[data-type="Custom Action"]');
        			}
        		},
        		tolerance: 'touch',
        		hoverClass: 'hovering',
        		drop: ButtonSet_InsertButtonAfterButton,
        		over: ButtonSet_OverButton,
        		out: ButtonSet_OutButton
        	});
        }
        function ButtonSet_BuildLayout ($layout)
        {
        	//loop over each section in the layout
        	var layout = [];
        	$layout.find('.buttonset-section').each(function () {
        		
        		//this will be different depending on the type of layout
        		if ($layout.is('.layout-massaction'))
        		{
        			//start building this section
        			var section = { Label: $(this).find('.buttonset-section-name').text(), Buttons: [] };
        			layout.push(section);
        		
        			//loop over each button
        			$(this).find('.buttonset-section-columns .buttonset-button').each(function () {
        			
        				section.Buttons.push({
        					Label: $(this).find('.actionbutton').attr('data-action'),
	        				Type: $(this).find('.actionbutton').attr('data-type')
        				});
        			
        			});
        		}
        		else
        		{
        			//start building this section
        			var section = { Label: $(this).find('.buttonset-section-name').text(), Columns: [] };
        			layout.push(section);
        			
	        		//loop over each button column
	        		$(this).find('.buttonset-section-columns .buttoncolumn').each(function () {
	        			
	        			//start building this column
	        			var column = [];
	        			section.Columns.push(column);
	        			
	        			//loop over each button
	        			$(this).find('.buttonset-button').each(function () {
	        				
	        				//add this button to the column
	        				column.push({
	        					Label: $(this).find('.actionbutton').attr('data-action'),
	        					Type: $(this).find('.actionbutton').attr('data-type')
	        				});
	        				
	        			});
	        			
	        		});
	        	}
        		
        	});
        	
        	return layout;
        }
        function ButtonSet_Save (options)
        {
        	//show loading
        	showLoading($('#TopTabs-ButtonSets'), 'Saving...');
        	
        	//default options
        	options = options || {};
        
        	//start building this button set
        	var buttonSet = {
        		Name                      : $('#TopTabs-ButtonSets .basicinfo-name').val(),
        		TooltipLayout__c          : JSON.stringify(ButtonSet_BuildLayout($('.layout-tooltip'))),
                MyPositionLayout__c       : JSON.stringify(ButtonSet_BuildLayout($('.layout-myposition'))),
                POILayout__c              : JSON.stringify(ButtonSet_BuildLayout($('.layout-poi'))),
        		MassActionLayout__c       : JSON.stringify(ButtonSet_BuildLayout($('.layout-massaction')))
        	};
        	
        	//add the id if this is an existing set
        	if (!options.isSaveAs && $('.buttonsets-selectedbuttonset').val() != 'New') {
        		buttonSet.Id = $('.buttonsets-selectedbuttonset').val();
        	}

        	//send request to save this button set
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=save_buttonset',
                type: 'POST',
                dataType: 'JSON',
                data: { serializedButtonSet: JSON.stringify(addNamespace('{!namespace}', buttonSet)) },
                success: function (response) {
                	
                	if (response.success)
                	{
                		showSuccess($('#TopTabs-ButtonSets'), 'Saved');
                		
	                	if (!options.isSaveAs && $('.buttonsets-selectedbuttonset').val() != 'New') 
	                	{
	                		//update the list of button sets with this new information
	                		$('.buttonsets-selectedbuttonset option:selected').text(response.result.Name);
	                		$('.buttonsets-selectedbuttonset').next().find('input').val(response.result.Name);
	                		$('#permissions-grid select[data-field="ButtonSetId"] option[value="'+response.result.Id+'"]').text(response.result.Name);
	                	}
	                	else
	                	{
	                		//this is a new button set.  add it to the list of existing sets and select it
	                		$('.buttonsets-selectedbuttonset').append($('<option />').attr('value', response.result.Id).text(response.result.Name)).val(response.result.Id).next().find('input').val(response.result.Name);
	                		$('#permissions-grid select[data-field="ButtonSetId"]').append($('<option />').attr('value', response.result.Id).text(response.result.Name));
	                		$('.buttonset-saveasbtn, .buttonset-deletebtn').show();
	                	}
	                }
	                else
	                {
	                	showError($('#TopTabs-ButtonSets'), 'Unable to save');
	                }
                },
                error: function (response) {
                	showError($('#TopTabs-ButtonSets'), 'Unable to save'); 
                	MALog(response); 
                }
            });
        }
        function ButtonSet_Delete()
        {
        	//show loading
        	showLoading($('#TopTabs-ButtonSets'), 'Deleting...');
        	
        	//send request to save this button set
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=delete_buttonset',
                type: 'POST',
                dataType: 'JSON',
                data: { id: $('.buttonsets-selectedbuttonset').val() },
                success: function (response) {
                	
                	if (response.success)
                	{
                		//show success
                		showSuccess($('#TopTabs-ButtonSets'), 'Deleted');
                		
                		//remove this button set from the permissions grid
	                	$('#permissions-grid select[data-field="ButtonSetId"] option[value="'+$('.buttonsets-selectedbuttonset').val()+'"]').remove();
                	
                		$('.buttonsets-selectedbuttonset option:selected').remove();
	                	$('.buttonsets-selectedbuttonset').val('New').change().next().find('input').val('--Create New--');
	                }
	                else
	                {
	                	showError($('#TopTabs-ButtonSets'), 'Unable to delete');
	                }
                },
                error: function (response) {
                	showError($('#TopTabs-ButtonSets'), 'Unable to delete'); 
                	MALog(response); 
                }
            });
        }
        
        /****************************
        *	Custom Action Handlers
        ****************************/
        
        function CustomAction_GetExisting()
        {
        	$('#TopTabs-CustomActions .customactions-selectedaction').html('<option value="New">--Create New--</option>');
        
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=get_customactions',
                type: 'POST',
                dataType: 'JSON',
                data: {},
                success: function (response) 
                {
                	$.each(response.results, function (index, action) {
                		$('#TopTabs-CustomActions .customactions-selectedaction').append($('<option />').attr('value', action.Id).text(action.Name));
                	});
                	$('#TopTabs-CustomActions .customactions-selectedaction').combobox();
                },
                error: function (response) { MALog('Error getting custom actions: ' + response.details); }
            });
        }
        function CustomAction_Save(options)
        {
            if($('#TopTabs-CustomActions .includeRecords').is(':checked') && $('#TopTabs-CustomActions .parameterName').val() == '') {
                alert('Please enter a parameter name if you wish to include records for this button.');
                return;
            }

        	//show loading
        	showLoading($('#TopTabs-CustomActions'), 'Saving...');
        	
        	//default options
        	options = options || {};
        	
            var jsonOptions = JSON.stringify({
                method : $('#TopTabs-CustomActions .type-action').val(),
                addRecords : $('#TopTabs-CustomActions .includeRecords').is(':checked'),
                paramName : $('#TopTabs-CustomActions .includeRecords').is(':checked') ? $('#TopTabs-CustomActions .parameterName').val() : ''
            });

        	//build request
        	var customAction = {
        		Name: $('#TopTabs-CustomActions .basicinfo-name').val(),
        		Type__c: 'Custom Action',
        		Modes__c: $('#TopTabs-CustomActions input.mode[type="checkbox"]:checked').map(function () { return $(this).attr('data-value'); }).get().join(';'),
        		Layouts__c: 'Tooltip;MyPosition;POI',
        		Requirements__c: $('#TopTabs-CustomActions input.requirement[type="checkbox"]:checked').map(function () { return $(this).attr('data-value'); }).get().join(';'),
        		Action__c: $('#TopTabs-CustomActions .routine-action').val(),
        		ActionValue__c: $('#TopTabs-CustomActions .routine-value').val(),
                Options__c : jsonOptions
        	};
        	
        	//add the id if this is an existing action
        	if (!options.isSaveAs && $('#TopTabs-CustomActions .customactions-selectedaction').val() != 'New') {
        		customAction.Id = $('#TopTabs-CustomActions .customactions-selectedaction').val();
        	}
        
        	//send request to save
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=save_customaction',
                type: 'POST',
                dataType: 'JSON',
                data: { serializedCustomAction: JSON.stringify(addNamespace('{!namespace}', customAction)) },
                success: function (response) 
                {
                	if (response.success) {
                		showSuccess($('#TopTabs-CustomActions'), 'Saved');
                		MAActionFramework.refresh();
                		
                		if (!options.isSaveAs && $('#TopTabs-CustomActions .customactions-selectedaction').val() != 'New') 
	                	{
	                		//update the list of custom actions with this new information
	                		$('#TopTabs-CustomActions .customactions-selectedaction option:selected').text(response.result.Name);
	                		$('#TopTabs-CustomActions .customactions-selectedaction').next().find('input').val(response.result.Name);
	                	}
	                	else
	                	{
	                		//this is a new custom action.  add it to the list of existing actions and select it
	                		$('#TopTabs-CustomActions .customactions-selectedaction').append($('<option />').attr('value', response.result.Id).text(response.result.Name)).val(response.result.Id).next().find('input').val(response.result.Name);
	                		$('.customaction-saveasbtn, .customaction-deletebtn').show();
	                	}
                	}
                	else {
                		showError($('#TopTabs-CustomActions'), 'Unable to save');
                	}
                },
                error: function (response) {
                	showError($('#TopTabs-CustomActions'), 'Unable to save'); 
                	MALog('Error saving custom action: ' + response.details); 
                }
            });
        }
        function CustomAction_Delete()
        {
        	//show loading
        	showLoading($('#TopTabs-CustomActions'), 'Deleting...');
        	
        	//send request to save this custom action
        	$.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=delete_customaction',
                type: 'POST',
                dataType: 'JSON',
                data: { id: $('#TopTabs-CustomActions .customactions-selectedaction').val() },
                success: function (response) {
                	
                	if (response.success)
                	{
                		showSuccess($('#TopTabs-CustomActions'), 'Deleted');
                		MAActionFramework.refresh();
                		
                		$('#TopTabs-CustomActions .customactions-selectedaction option:selected').remove();
	                	$('#TopTabs-CustomActions .customactions-selectedaction').val('New').change().next().find('input').val('--Create New--');
	                }
	                else
	                {
	                	showError($('#TopTabs-CustomActions'), 'Unable to delete');
	                }
                },
                error: function (response) {
                	showError($('#TopTabs-CustomActions'), 'Unable to delete'); 
                	MALog(response); 
                }
            });
        }

        /************************************
        *   Route Calendar Handlers
        ************************************/
        function RouteCalendar_GetSettings()
        {
            $.ajax({
                url: MA.resources.Admin+'?securityToken={!securityToken}&action=getRouteCalendarSettings&core.apexpages.devmode.url=0',
                type: 'POST',
                dataType: 'JSON',
                success: function (response) {
                    
                    //populate field options
                    var $booleanFields = $('#TopTabs-RouteCalendarSettings select[data-field="boolean"]').html('<option value="--Please Choose--">--Please Choose--</option>');
                    $.each(response.AvailableFields.Boolean, function (index, field) {
                        $booleanFields.append($('<option/>').attr('value', field.value).text(field.name));
                    });
                    var $datetimeFields = $('#TopTabs-RouteCalendarSettings select[data-field="dateTime"]').html('<option value="--Please Choose--">--Please Choose--</option>');
                    $.each(response.AvailableFields.Datetime, function (index, field) {
                        $datetimeFields.append($('<option/>').attr('value', field.value).text(field.name));
                    });
                    var $tooltipFields = $('#TopTabs-RouteCalendarSettings select[data-field="tooltip"]').html('<option value="--None--">--None--</option>');
                    $.each(response.AvailableFields.TooltipFields, function (index, field) {
                        $tooltipFields.append($('<option/>').attr('value', field.value).text(field.name));
                    });

                    //populate field values
                    $.each(response.FieldSettings, function (setting, value) {
                        if (setting == 'RoutingEvent-Tooltips') {
                            var tooltips = JSON.parse(value);
                            $.each(tooltips, function (index, tooltip) {
                                $tooltipFields.eq(index).val(tooltip.name);
                            });
                        }
                        else {
                            $('#' + setting).val(value);
                        }
                    });

                    //create comboboxes
                    $booleanFields.combobox();
                    $datetimeFields.combobox();
                    $tooltipFields.combobox();
                },
                error: function (response) {
                    MALog(response);
                }
            });
        }
        
        /************************************
        *	Settings Handlers
        ************************************/
        function DebugLogs_Clear()
        {
        	if (confirm('Are you sure you want to clear debug logs?')) {
        		$('#ClearDebugLogs').hide().next().show();
        		$.ajax({
					url: MA.resources.Admin+'?securityToken={!securityToken}&action=clear_debuglogs&core.apexpages.devmode.url=0',
					type: 'POST',
					dataType: 'JSON',
					success: function (response) {
						$('#ClearDebugLogs').show().next().hide();						
					},
					error: function (response) {
						MALog(response);
					}
				});
        	}
        }
        
        //notification helpers
        function showNotification(template, title, message)
        {
        	$('#notifications').notify('create', template, { title: title, text: message } );
        }
        function success(title, message) { 
        	showNotification('notifications-success', title, message); 
        }
        function error(title, message) {
        	showNotification('notifications-error', title, message); 
        }
        
        //tab message helpers
        function showTabLoading($tab, msg, expirationTimeout)
        {
        	$tab.find('.loadmask, .loadmask-status').remove();
        	$tab.append("<div class='loadmask'></div><div class='loadmask-status'><div class='status'><img src='{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}' /><span>"+msg+"</span></div></div>")
        	return $tab;
        }
        function showTabSuccess($tab, msg, expirationTimeout)
        {
        	$tab.find('.loadmask, .loadmask-status').remove();
        	$tab.append("<div class='loadmask'></div><div class='loadmask-status'><div class='status' style='border: 1px solid green;'><img src='{!URLFOR($Resource.MapAnything, 'images/check-22.png')}' /><span>"+msg+"</span></div></div>")
        	if (expirationTimeout != false)
        	{
	        	setTimeout(function () {
	        		$tab.find('.loadmask, .loadmask-status').remove();
	        	}, (expirationTimeout || 1500));
	        }
        	return $tab;
        }
        function showTabError($tab, msg, expirationTimeout)
        {
        	$tab.find('.loadmask, .loadmask-status').remove();
        	$tab.append("<div class='loadmask'></div><div class='loadmask-status'><div class='status' style='border: 1px solid red;'><img src='{!URLFOR($Resource.MapAnything, 'images/x-22.png')}' /><span>"+msg+"</span></div></div>")
        	if (expirationTimeout != false)
        	{
	        	setTimeout(function () {
	        		$tab.find('.loadmask, .loadmask-status').remove();
	        	}, (expirationTimeout || 1500));
	        }
        	return $tab;
        }
        function hideTabMessage($tab)
        {
        	$tab.find('.loadmask, .loadmask-status').remove();
        	return $tab;
        }
    </script>  
    
    <!-- Header -->
    <c:MAAdminHeader PageTitle="Settings"/>
    
    <!-- Main Content -->
    <div id="adminsettings">
    
    	<!-- Tab Panel -->
        <div class="TopTabs">
        	
        	<!-- Tab Handles -->
            <ul>
                <li><a href="#TopTabs-General">{!$Label.MASettings_General}</a></li>
                <li><a href="#TopTabs-Permissions">{!$Label.MA_Permissions}</a></li>
                <li><a href="#TopTabs-ButtonSets">{!$Label.MA_Button_Sets}</a></li>
                <li><a href="#TopTabs-CustomActions">{!$Label.MA_Custom_Actions}</a></li>
                <li><a href="#TopTabs-ActivitySettings">{!$Label.MA_Activity_Settings}</a></li>
                <li><a href="#TopTabs-RouteCalendarSettings">Route Planner Settings (Pilot)</a></li>
            </ul>
            
            <!-- General Tab -->
            <div id="TopTabs-General">
                      
                <!-- Licensing --> 
                <div class='gray box'>
                	<div class='section-header'>Licensing</div>
                    <table class='form'>
                        <tr>
                            <td>API Key</td>
                            <td><input type='text' class='apikey' style='width: 300px;' /></td>
                        </tr>                        
                    </table>                    
                </div>
                
                <!-- Enabled Features -->
                <div class='gray box'>
                	<div class='section-header'>{!$Label.MA_Enabled_Features}</div>
                    <table class='form'>
                        <tr>
                            <td><input type='checkbox' class='feature-folderpermissions' /></td>
                            <td>{!$Label.MA_Folder_Permissions}</td>
                        </tr>
                        <tr>
                            <td><input type='checkbox' class='feature-showprofilewithuser' /></td>
                            <td>Display Profile Name with User Lookup (On Tooltips)</td>
                        </tr>
                        <tr>
                            <td><input type='checkbox' class='feature-visibleareamobile' /></td>
                            <td>Visible Area Enabled on Mobile by Default</td>
                        </tr>
                        <tr style='display: none;'>
                            <td><input type='checkbox' class='feature-territorymanagement' /></td>
                            <td>{!$Label.MA_Territory_Management}</td>
                        </tr>
                        <!----
                        <tr>
                            <td><input type='checkbox' class='feature-socialintegration' /></td>
                            <td>{!$Label.MA_Social_Integration}</td>
                        </tr>
                        --->
                        <tr style='display: none;'>
                        	<td><input type='checkbox' class='feature-routingrolesecurity' /></td>
                        	<td>{!$Label.MA_Routing_Role_Security}</td>
                        </tr>
                        <tr>
                        	<td><input type='checkbox' class='feature-routeplanner' /></td>
                        	<td>Route Planner (Pilot)</td>
                        </tr>
                        <tr>
                        	<td><input type='checkbox' class='feature-autocheckout' /></td>
                        	<td>Auto Check Out</td>
                        </tr>
                        <tr>
                            <td><input type='checkbox' class='feature-debuglogs' /></td>
                            <td>{!$Label.MA_Debug_Logs} <span id='ClearDebugLogs' style='cursor: pointer; font-size: 8px; color: #2265BB;' onclick='DebugLogs_Clear();'>{!$Label.MA_Clear}</span><img src="{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}" style='height: 10px; display: none;' /></td>
                        </tr>          
                    </table>                    
                </div>

                
                <!-- Buttons -->
		        <div class='buttons'>
		            <input type='button' class='savebtn MAbutton button-blue' value='Save' />
		            <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
		        </div>
                
            </div>
            
            <!-- Permissions Tab -->
            <div id="TopTabs-Permissions">
            
            	<!-- Permissions Grid Options -->
            	<table style='width: 100%;'>
            		<tr>
            			<td>
            				<!-- Permissions Grid Filters -->
			            	<table id="permissions-filters">
			            		<tr>
			            			<td>{!$Label.MA_Name}</td>
			            			<td><input type='text' id='permissionsfilter-name' /></td>
			            			
			            			<td>{!$Label.MA_Profile}</td>
			            			<td><input type='text' id='permissionsfilter-profile' class='autocomplete' /></td>
			            			
			            			<td><input type='checkbox' id='permissionsfilter-includeinactive' /> {!$Label.MA_Include_Inactive_Users}</td>
			            			<td></td>
			            			
			            			<td><input type='checkbox' id='permissionsfilter-includeportal' /> {!$Label.MA_Include_Portal_Users}</td>
			            			<td></td>
			            			
			            			<td><input type='checkbox' id='permissionsfilter-includechatter' /> {!$Label.MA_Include_Chatter_Users}</td>
			            			<td></td>
			            		</tr>
			            	</table>
            			</td>
            			<td>
            				<!-- Permissions Grid Paging -->
            				<table style='float: right;'>
            					<tr>
            						<td id='permissions-pageinfo'></td>
            					</tr>
            					<tr>
            						<td style='text-align: right; verticle-align: middle;'>{!$Label.MA_Go_to_page} <select id='permissions-page'></select></td>
            					</tr>
            				</table>
            			</td>
            		</tr>
            	
            	</table>
            
            	<!-- Permissions Grid -->
            	<div id="permissions-grid-wrapper">
            		<div id="permissions-grid-loadmask"></div>
            		<div id="permissions-grid-status">
            			<div class='status'>
            				<img src="{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}" />
            				<span></span>
            			</div>
            		</div>
            	
	            	<table id="permissions-grid">
	            		<tr>
	            			<th style='display: none;'><span class='link'>All</span>|<span class='link'>None</span></th>
	            			<th>{!$Label.MA_Name}</th>
	            			<th>{!$Label.MA_Profile}</th>
	            			<th data-field='EditMapAnythingOrgWirdeQueries__c' data-type='boolean'><table><tr><td>{!$Label.MA_Folder_Admin}</td><td><span class='link massaction'>All</span> | <span class='link massaction'>None</span></td></tr></table></th>
	            			<th data-field='ShowPersonalFolders' data-type='setting'><table><tr><td>{!$Label.MA_Show_Personal_Folders}</td><td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td></tr></table></th>
	            			<th data-field='AllowMapAnythingExports__c' data-type='boolean'><table><tr><td>{!$Label.MA_Allow_Exports}</td><td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td></tr></table></th>
	            			<th data-field='EditableTooltips' data-type='setting'><table><tr><td>{!$Label.MA_Editable_Tooltips}</td><td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td></tr></table></th>
	            			<th data-field='ShowWeather' data-type='setting'><table><tr><td>{!$Label.MA_Show_Weather}</td><td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td></tr></table></th>
	            			<th data-field='OldFolders' data-type='setting'><table><tr><td>{!$Label.MA_Use_New_Folders}</td><td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td></tr></table></th>
	            			<th data-field='HidePersonalFolder' data-type='setting'><table><tr><td>{!$Label.MA_Hide_Personal_Folder}</td><td><span class='link massaction setting'>All</span> | <span class='link massaction setting'>None</span></td></tr></table></th>
	            			<th data-field='MAVersion__c' data-type='picklist'><table><tr><td>{!$Label.MA_Version}</td><td><select class='massaction'><option value=''>--Select--</option><option value='Previous'>Previous</option><option value='Current'>Current</option><option value='Beta'>Beta</option><option value='IE'>Internet Explorer</option></select></td></tr></table></th>
	            			<th data-field='MAMaxQuerySize__c' data-type='number'><table><tr><td>{!$Label.MA_Max_Query_Size}</td><td><input type='text' style='width:35px;font-size:10px;' /></td></tr></table></th>
	            			<th data-field='MAMaxExportSize__c' data-type='number'><table><tr><td>{!$Label.MA_Max_Export_Size}</td><td><input type='text' style='width:35px;font-size:10px;' /></td></tr></table></th>
	            			<th data-field='MapAnythingSettings__c' data-type='setting'><table><tr><td>{!$Label.MA_Map_Lock}</td><td><span class='link massaction editsettings' data-field='MapLockSettings'>Edit</span></td></tr></table></th>
	            			<th data-field='MapAnythingSettings__c' data-type='setting'><table><tr><td>{!$Label.MA_Button_Set}</td><td><select class='massaction setting' data-field='ButtonSetId'><option value='--'>--Select--</option></select></td></tr></table></th>
	            			<!--- <th data-field='MapAnythingSettings__c' data-type='setting'><table><tr><td>Default Country</td><td><select class='massaction setting' data-field='DefaultCountry'><option value='--'>--Select--</option></select></td></tr></table></th> --->
	            		</tr>
	            	</table>
	            </div>
            	
            </div>
            
            <!-- Button Sets Tab -->
            <div id="TopTabs-ButtonSets">
                      
                <!-- Existing Button Sets -->
                <div>
                	<b>{!$Label.MA_Button_Set}</b>
                	<select class='buttonsets-selectedbuttonset'></select>
                </div>
                
                <!-- Basic Info -->
                <div class='section basicinfo'>
                	<div class='section-header'>{!$Label.MATutorial_Basic_Info}</div>
                	
                    <table class='form'>
                        <tr>
                            <td>{!$Label.MA_Name}</td>
                            <td><input type='text' class='basicinfo-name' /></td>
                        </tr>
                    </table>
                </div>
                
                <!-- Layout -->
                <div class='section layout'>
                	<div class='section-header'>{!$Label.MA_Layout}</div>
                	
                	<!-- Spacer -->
                	<div style='height: 10px;'>&nbsp;</div>

                	<!-- Available Buttons -->
                	<h2 style='font-size: 12px;'>{!$Label.MA_Available_Buttons}</h2>
                	<div class='layout-availablebuttons'></div>
                	
                	<!-- Spacer -->
                	<div style='height: 10px;'>&nbsp;</div>
                	
                	<!-- Layouts -->
                	<table>
                		<tr>
                			<td>
                			
			                	<!-- Tooltip Layout -->
			                	<h2 style='font-size: 12px;'>{!$Label.MA_Tooltip_Layout}</h2>
			                	<div class='layout-tooltip-wrapper layout-wrapper'>
				                	<div class='layout-tooltip layout layout-marker' data-layout='Tooltip'>
				                		<div class='section-dropzone'></div>
				                	</div>
				                </div>
				                
				                <!-- My Position Layout -->
				                <h2 style='font-size: 12px; display: block; margin-top: 5px;'>My Position Layout</h2>
			                	<div class='layout-myposition-wrapper layout-wrapper'>
				                	<div class='layout-myposition layout layout-marker' data-layout='MyPosition'>
				                		<div class='section-dropzone'></div>
				                	</div>
				                </div>
				                
				                <!-- POI Layout -->
				                <h2 style='font-size: 12px; display: block; margin-top: 5px;'>POI Layout</h2>
			                	<div class='layout-poi-wrapper layout-wrapper'>
				                	<div class='layout-poi layout layout-marker' data-layout='POI'>
				                		<div class='section-dropzone'></div>
				                	</div>
				                </div>
				                
				            </td>
				            <td>
				                <!-- Mass Action Layout -->
				                <h2 style='font-size: 12px;'>{!$Label.MA_Mass_Action_Layout}</h2>
				                <div class='layout-massaction-wrapper layout-wrapper'>
				                	<div class='layout-massaction layout' data-layout='Mass'>
				                		<div class='section-dropzone'></div>
				                	</div>
				                </div>
				            </td>
				        </tr>
				    </table>
                	
                </div>
                
                <!-- Buttons -->
		        <div class='buttons'>
		            <input type='button' class='buttonset-savebtn MAbutton button-blue' value='Save' onclick="ButtonSet_Save();" />
		            <input type='button' class='buttonset-saveasbtn MAbutton button-blue' value='Save As' style='display: none;' onclick="ButtonSet_Save({isSaveAs: true});" />
		            <input type='button' class='buttonset-deletebtn MAbutton button-red' value='Delete' style='display: none;' onclick="ButtonSet_Delete();" />
		            <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
		        </div>
                
            </div>
            
            <!-- Custom Actions Tab -->
            <div id="TopTabs-CustomActions">
            
            	<!-- Existing Actions -->
                <div>
                	<b>{!$Label.MA_Custom_Actions}</b>
                	<select class='customactions-selectedaction'></select>
                </div>
                
                <!-- Basic Info -->
                <div class='section basicinfo'>
                	<div class='section-header'>{!$Label.MATutorial_Basic_Info}</div>
                	
                	<table class='form'>
                		<tr>
                			<td>{!$Label.MA_Name}</td>
                			<td><input type='text' class='basicinfo-name' /></td>
                		</tr>
                	</table>
                </div>
                
                <!-- Modes -->
                <div class='section modes'>
                	<div class='section-header'>{!$Label.MA_Modes}</div>
                	
                	<table>
                		<tr><td><input type='checkbox' class='mode' data-value='Desktop' checked='checked' /> {!$Label.MA_Desktop}</td></tr>
                		<tr><td><input type='checkbox' class='mode' data-value='Mobile' checked='checked' /> {!$Label.MA_Mobile}</td></tr>
                	</table>
                </div>
                
                <!-- Requirements -->
                <div class='section requirements'>
                	<div class='section-header'>{!$Label.MA_Requirements}</div>
                
                	<table>
                		<tr><td><input type='checkbox' class='requirement' data-value='Activity Support' /> {!$Label.MA_Activity_Support}</td></tr>
                		<tr><td><input type='checkbox' class='requirement' data-value='Verified Location Support' /> {!$Label.MA_Verified_Location_Support}</td></tr>
                		<tr><td><input type='checkbox' class='requirement' data-value='Contact Or Lead' /> {!$Label.MA_Contact_or_Lead}</td></tr>
                	</table>
                </div>
                
                <!-- Routine -->
                <div class='section routine'>
                	<div class='section-header'>{!$Label.MA_Routine}</div>
                	
                	<table>
                		<tr>
                			<td style="width:115px;">Action</td>
                			<td>
                				<select class='routine-action'>
                					<option value='Iframe'>{!$Label.MA_Load_iframe}</option>
                					<option value='NewWindow'>{!$Label.MA_Load_new_window}</option>
                					<!-- <option value='Javascript'>Run javascript</option> -->
                				</select>
                			</td>
                		</tr>
                        <tr style="display:none;" class="post-info" id="type-selection">
                            <td>Request Type</td>
                            <td>
                                <select style="width: 100%;" class='type-action'>
                                    <option value='GET'>GET</option>
                                    <option value='POST'>POST</option>
                                </select>
                            </td>
                        </tr>
                        <tr style="display:none;" class="post-info">
                            <td>Add Records?</td>
                            <td><input style="float:right;" type='checkbox' class="includeRecords" data-value='include-Records' /></td>
                            <td><span class="icon help-btn ion-information-circled"></span><div class="help-text">Adds a parameter you choose for the selected records, i.e., When right click events are triggered. </div></td>
                        </tr>
                        <tr style="display:none;" class="param-info">
                            <td>Parameter Name</td>
                            <td><input type='text' class="parameterName" data-value='include-Records' /></td>
                            <td><span class="icon help-btn ion-information-circled"></span><div class="help-text">This name will be used to specify how the records will be labeled in the HTTP request.</div></td>
                        </tr>
                		<tr>
                			<td></td>
                			<td><textarea class='routine-value'></textarea></td>
                		</tr>
                	</table>
                </div>
                
                <!-- Buttons -->
		        <div class='buttons'>
		            <input type='button' class='MAbutton button-blue' value='Save' onclick="CustomAction_Save();" />
		            <input type='button' class='customaction-saveasbtn MAbutton button-blue' value='Save As' style='display: none;' onclick="CustomAction_Save({isSaveAs: true});" />
		            <input type='button' class='customaction-deletebtn MAbutton button-red' value='Delete' style='display: none;' onclick="CustomAction_Delete();" />
		            <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
		        </div>
            
            </div>
            
            <!-- Activity Settings Tab -->
            <div id="TopTabs-ActivitySettings">
                <div class='loadmask-wrapper'>
                
                
                    <div class="gray box section activityfielddetails">
                        <div class="section-header">Check In Fields</div>
                        <div class="section-body box">
                            <table style="width:100%; margin-top:10px;" cellpadding="5" cellspacing="0">
                                <tr class='activity-row'>
                                    <td style="width:17%"> 
                                        <b>{!$Label.MA_Created_Latitude}</b>
                                    </td>
                                    <td style="width:40%"> 
                                        <select id="createdLatitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                    <td style="width:17%"> 
                                        <b>{!$Label.MA_Created_Location_Accuracy}</b>
                                    </td>
                                    <td style="width:40%"> 
                                        <select id="createdLocationAccuracy" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                </tr>
                                <tr class='activity-row'>
                                    <td>
                                        <b>{!$Label.MA_Created_Longitude}</b>
                                    </td>
                                    <td> 
                                        <select id="createdLongitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                    <td> 
                                        <b>{!$Label.MA_Created_Location_Verified}</b>
                                    </td>
                                    <td> 
                                        <select id="createdLocationVerified" class='newActivityFielddetails combobox' data-field='boolean' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                </tr>
                            

                                <tr class='activity-row'>
                                    
                                    <td>
                                        <b>{!$Label.MA_Distance_from_Record}</b>
                                    </td>
                                    <td> 
                                        <select id="distanceFromRecord" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                    <td>
                                        <b>Default Duration</b>          
                                    </td>
                                    <td> 
                                        <select id="defaultDuration" class='newActivityFielddetails combobox' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                           
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                
                
                
                    <div class="gray box section activityfielddetails">
                        <div class="section-header">Check Out Fields</div>
                        <div class="section-body box">
                            <table style="width:100%;margin-top:10px;" cellpadding="5" cellspacing="0">
                            
                                <tr class='activity-row'>
                                    <td style="width:17%"> 
                                        <b>{!$Label.MA_Check_Out_Latitude}</b>
                                    </td>
                                    <td style="width:40%"> 
                                        <select id="checkOutLatitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                    <td class='activity-name' style="width:17%">
                                        <b>{!$Label.MA_Check_Out_Accuracy}</b>                                                      
                                    </td>
                                    <td style="width:40%">                                                      
                                        <select id="checkOutAccuracy" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                </tr>
                                
                                <tr class='activity-row'>
                                    <td>
                                        <b>{!$Label.MA_Check_Out_Longitude}</b>
                                    </td>
                                    <td> 
                                        <select id="checkOutLongitude" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                    <td>
                                        <b>{!$Label.MA_Distance_from_Record}</b>
                                    </td>
                                    <td> 
                                        <select id="distanceFromRecord" class='newActivityFielddetails combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                </tr>
                                
                                <tr class='activity-row'>
                                    <td style="width:17%"> 
                                        <b>{!$Label.MA_Check_Out_Date}</b>                                                     
                                    </td>
                                    <td style="width:40%">                                                       
                                        <select id="checkOutDate" class='newActivityFielddetails combobox' data-field='dateTime' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                    <td></td>
                                    <td></td>
                                </tr>
                            
                                
                            </table>
                        </div>
                    </div>
                

                    <div class="gray box section">
                        <div class="section-header">Custom Disposition</div>
                        <div class="section-body box">
                            <table style="width:100%; margin-top:10px;" cellpadding="5" cellspacing="0">
                                <tr class='activity-row'>
                                    <td class='activity-name' style="width:17%">
                                        <b>Field Set</b> <span style="font-size: 11px;">(beta)</span>                                                    
                                    </td>
                                    <td style="width:40%">                                                      
                                        <select id="checkInFieldSet" class='dispositionOptions combobox' data-field='number' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                                    </td>
                                    <td style="width:17%"></td>
                                    <td style="width:40%"></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
                
                <!-- Buttons -->
                <div class='ActivityFieldButtons'>
                    <input type='button' class='saveActivityFieldBtn MAbutton button-blue' value='Save' />
                    <input type='button' class='suggestActivityFieldBtn MAbutton button-blue' value='Suggest' />
                    <input type='button' class='createActivityFieldsBtn MAbutton button-blue' value='Create Fields...' style='width: 125px;' />
                    <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
                </div>
            </div>

            <!-- Route Calendar Settings Tab -->
            <div id="TopTabs-RouteCalendarSettings">

                <!-- Event Fields -->
                <div class='gray box'>
                    <div class='section-header'>Event Fields</div>
                    <table class='form'>
                        <tr>
                            <!--
                            <td style="width:17%">
                                <b>Start Time</b>
                            </td>
                            <td style="width:40%">
                                <select id="RoutingEvent-StartTime" class='combobox' data-field='dateTime' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                            </td>
                            -->
                            <td style="width:17%"> 
                                <b>Is Flexible</b>
                            </td>
                            <td style="width:40%">                                                       
                                <select id="RoutingEvent-IsFlexible" class='combobox' data-field='boolean' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                            </td>
                            <td> 
                                <b>Has Address</b>
                            </td>
                            <td> 
                                <select id="RoutingEvent-HasAddress" class='combobox' data-field='boolean' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                            </td>
                        </tr>
                        <tr style='display: none;'>
                            <td>
                                <b>End Time</b>
                            </td>
                            <td> 
                                <select id="RoutingEvent-EndTime" class='combobox' data-field='dateTime' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select>                      
                            </td>
                        </tr>
                    </table>                    
                </div>

                <!-- Tooltips -->
                <div class='gray box'>
                    <div class='section-header'>Event Tooltip Fields</div>
                    <table class='form' style='width: 100%;'>
                        <tr><td>Tooltip 1</td><td><select id='RoutingEvent-Tooltip1' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                        <tr><td>Tooltip 2</td><td><select id='RoutingEvent-Tooltip2' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                        <tr><td>Tooltip 3</td><td><select id='RoutingEvent-Tooltip3' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                        <tr><td>Tooltip 4</td><td><select id='RoutingEvent-Tooltip4' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                        <tr><td>Tooltip 5</td><td><select id='RoutingEvent-Tooltip5' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                        <tr><td>Tooltip 6</td><td><select id='RoutingEvent-Tooltip6' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                        <tr><td>Tooltip 7</td><td><select id='RoutingEvent-Tooltip7' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                        <tr><td>Tooltip 8</td><td><select id='RoutingEvent-Tooltip8' data-field='tooltip' disabled='disabled'><option value=''>{!$Label.MA_Loading}...</option></select></td></tr>
                    </table>
                </div>
                
                <!-- Buttons -->
                <div class='buttons'>
                    <input type='button' class='savebtn-routecalendarsettings MAbutton button-blue' value='Save' />
                    <span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
                </div>
                
            </div>
            
        </div>
    </div>
    
    <!-- Notifications Container -->
    <div id='notifications'>
    
    	<!-- Success -->
    	<div id="notifications-success" class='success'>
			<a class="ui-notify-close ui-notify-cross" href="#">x</a>
			<h1>#{title}</h1>
			<p>#{text}</p>
		</div>
		
		<!-- Error -->
		<div id="notifications-error" class='error'>
			<a class="ui-notify-close ui-notify-cross" href="#">x</a>
			<h1>#{title}</h1>
			<p>#{text}</p>
		</div>
		
    </div>
    
    <!-- Templates -->
    <div class='templates' style='display: none;'>
    	
    	<!-- Permissions Grid Templates -->
    	<table>
    		<tr class='permissions-row'>
    			<td class='checkbox' style='display: none;'><input type='checkbox' /></td>
    			<td class='name'></td>
    			<td class='profile'></td>
    			<td class='corporateadmin'><input type='checkbox' class='autosave' data-field='EditMapAnythingOrgWirdeQueries__c' /></td>
    			<td class='showpersonalfolders'><input type='checkbox' class='autosave setting' data-field='ShowPersonalFolders' /></td>
    			<td class='allowexports'><input type='checkbox' class='autosave' data-field='AllowMapAnythingExports__c' /></td>
    			<td class='editabletooltips'><input type='checkbox' class='autosave setting' data-field='EditableTooltips' /></td>
    			<td class='showweather'><input type='checkbox' class='autosave setting' data-field='ShowWeather' /></td>
    			<td class='oldfolders'><input type='checkbox' class='autosave setting' data-field='OldFolders' /></td>
    			<td class='hidepersonalfolder'><input type='checkbox' class='autosave setting' data-field='HidePersonalFolder' /></td>
    			<td class='version'><select class='autosave' data-field='MAVersion__c'><option value='Previous'>Previous</option><option value='Current'>Current</option><option value='Beta'>Beta</option><option value='IE'>Internet Explorer</option></select></td>
    			<td class='maxquerysize'><input type='text' class='autosave' data-field='MAMaxQuerySize__c' /></td>
    			<td class='maxexportsize'><input type='text' class='autosave' data-field='MAMaxExportSize__c' /></td>
    			<td class='maplock'><table style='width: 100%; border-spacing: 0;'><tr><td style='border: none;'><span class='autosave' data-field='MapLockSettings' style='font-size: 8px;'></span></td><td style='border: none; text-align: right;'><span class='editsettings' data-field='MapLockSettings' style='font-size: 10px; font-weight: bold; cursor: pointer; color: blue;'>Edit</span></td></tr></table></td>
    			<td class='buttonset'><select class='autosave setting' data-field='ButtonSetId'></select></td>
    			<!--- <td class='defaultcountry'><select class='autosave setting' data-field='DefaultCountry'></select></td> -->
    		</tr>
    	</table>
    	
    	<!-- Button Set Templates -->
    	<div class='buttonset-section'>
    	
    		<!-- Header -->
    		<div class='buttonset-section-header'>
	    		<div class='buttonset-section-name editable'>{!$Label.MA_New_Section}</div>
    		</div>
    		
    		<!-- Buttons -->
    		<div class='buttonset-section-columns'>
    			<div class='buttoncolumn'>
    				<div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
    			</div>
    			<div class='buttoncolumn'>
    				<div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
    			</div>
    			<div class='buttoncolumn'>
    				<div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
    			</div>
    		</div>
    		
    		<!-- Dropzone -->
    		<div class='section-dropzone'></div>
    		
    	</div>
    	<div class='buttonset-button'>
    		<div class='button-dropzone'><div class='button-dropzone-handle'></div></div>
    	</div>
    	
    	<!-- Loader Template -->
    	<img class='loader' src="{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}" />
    	
    	<!-- Row Templates -->
	   	<table>
	   		<tr class='createablefield-row' style='text-align: center;'>
	   			<td class='createablefield-label'></td>
	   			<td class='createablefield-exists'></td>
	   		</tr>
	   	</table>
    </div>
    
    <!-- Create Activity Fields Popup -->
    <div id='dialog-createactivityfields' style='display:none;'>
    	
    	<!-- Header -->
    	<h2>{!$Label.MA_Create_Fields}</h2>
    	
    	<!-- Spacer -->
    	<div style='height: 10px;'>&nbsp;</div>
    	
    	<!-- Field Table -->
    	<div id='dialog-createfields-table-wrapper' class='loadmask-wrapper'>
    		<table id='dialog-createfields-table' class='grid-blue'>
    			<tr>
    				<th>{!$Label.MA_Field}</th>
    				<th style='text-align: center;'><span class='link selectall' onclick="$(this).closest('table').find('input').attr('checked', true);">All</span> | <span class='link selectnone' onclick="$(this).closest('table').find('input').attr('checked', false);">None</span></th>
    			</tr>
    		</table>
    	</div>
    </div>
    
    <!-- Dialogs -->
    <div class='dialogs' style='display: none;'>
    
    	<!-- Map Lock Dialog -->
    	<div id='dialog-maplock'>
    		<div class='loadmask-wrapper'>
    	
	    		<!-- Header -->
	    		<h2>{!$Label.MA_Set_Map_Lock}</h2>
	    		
	    		<!-- Instructions -->
	    		<p class='dialog-instructions' style='width: 400px;'>{!$Label.MA_Map_Lock_Info}</p>
	    		
	    		<!-- Map -->
	    		<div class='dialog-maplock-map' style='width: 400px; height: 400px; margin: 15px 0; position: relative;'>
	    			<div class='dialog-maplock-map-dragzoomlayer' style='position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1; cursor: crosshair; display: none;'></div>
	    		</div>
	    		
	    		<!-- Buttons -->
	    		<div>
	    			<input type='button' class='btn-blue dialog-maplock-save' value='Save Map Lock' />
	    			<input type='button' class='btn-blue dialog-maplock-remove' value='Remove Map Lock' />
	    			<input type='button' class='btn-blue btn-white closebtn' value='Close' />
	    			<span class='msgs'></span>
	    		</div>
	    		
    		</div>
    	</div>
    
    </div>
</apex:page>