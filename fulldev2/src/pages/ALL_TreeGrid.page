<!--Author: Ragashalini.Koka@cdk.com -->
<!-- 2016-04-11  Ragashalini.Koka@cdk.com  Added filter on lookup fields -->
  <apex:page controller="ALL_AngularInputFields_Controller" extensions="ALL_TreeGrid_Controller" showHeader="false" sidebar="false" standardStylesheets="false" >   
      <html ng-app="DataGridV2">
        <head>
            <apex:stylesheet value="{!URLFOR($Resource.Bootstrap, 'css/bootstrap.min.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.FontAwesome, '4.3.0/css/font-awesome.css')}"/>    
            <apex:stylesheet value="{!URLFOR($Resource.ALL_AngularInputFields_CSS)}" />
            
            <apex:includeScript value="{!URLFOR($Resource.jQuery, 'js/jquery-1.10.2.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.angularJS, 'angularJS/bootstrap.min.js')}"/>  
            <apex:includeScript value="{!URLFOR($Resource.angularJS, 'angularJS/moment.min.js')}"/> 
            <apex:includeScript value="{!URLFOR($Resource.angularJS, 'angularJS/angular.min.js')}"/>        
            <apex:includeScript value="{!URLFOR($Resource.angularJS, 'angularJS/angular-moment.min.js')}"/>     
            <apex:includeScript value="{!URLFOR($Resource.angularJS, 'angularJS/angular-animate.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.angularJS, 'angularJS/angular-touch.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.angularJS15, 'angularJS/angular-sanitize.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.angularJS15, 'angularJS/angular-route.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.angularJS, 'angularJS/ui-bootstrap-tpls.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.ALL_AngularInputFields_JS)}" /> 
            <apex:includeScript value="{!URLFOR($Resource.ALL_TreeGrid_JS)}"/>
          	<!--<apex:includeScript value="{!URLFOR($Resource.ANG_JS1)}" />-->
            <apex:stylesheet value="{!URLFOR($Resource.ALL_TreeGrid_CSS)}"/>
  
          <script>

       
    var dataGridApp = angular.module('DataGridV2',['inputFields','ngAnimate', 'ui.bootstrap','ngRoute','ngSanitize']);
    var __sessionId = '{!$Api.Session_ID}';
    var __salesforceBaseUrl = 'https://adpdealerservices--impdev1.cs45.my.salesforce.com';
            // console.log('url' + 'https://adpdealerservices--impdev1.cs45.my.salesforce.com');
            //console.log('url'  + __salesforceBaseUrl);
           
    dataGridApp.config(['$routeProvider',
                        function($routeProvider) {
                            $routeProvider.
                            when('/viewRecords', {
                                templateUrl: 'viewEditMode'
                                
                                
                            }).
                            when('/editRecords', {
                                templateUrl: 'viewEditMode'
                                
                                
                            }).
                            otherwise({
                                redirectTo: '/viewRecords',
                                
                            });
                        }]);
         
        dataGridApp.run(['$rootScope','$location', '$routeParams', function($rootScope, $location, $routeParams) {
           $rootScope.$on('$routeChangeSuccess', function(e, current, pre) {
               
               //console.log('Current route name: ' + $location.path());
               $rootScope.currentView = $location.path();
               
           });
            
            
            
  }]); 
    
            //service to update and insert the records to the server    
    dataGridApp.service('updateInsertRecordsService',['$q',function($q) { 
        
        return function(recordsUpdateList,recordsInsertList) {
            
            
            var deferred = $q.defer();
            // console.log('calling service updateInsertRecordsService');
            if(recordsUpdateList.length == 0 && recordsInsertList.length == 0) {
                // alert('No records found to update or insert');
               deferred.resolve('no records found to update or insert');
            
            }
            ALL_TreeGrid_Controller.updateInsertRecords(angular.toJson(recordsUpdateList),angular.toJson(recordsInsertList),function(result,event) {
            
                if(event.status) {
                    
                   deferred.resolve(result);
                    
                }
                else {
                 deferred.reject('failure');    
                }
            
            },
             {escape: true,buffer: true}
 
            );
        
            return deferred.promise;
        }

    }]);        
    
 
      //service to delete the records from the database
    dataGridApp.service('deleteRecordsService',['$q',function($q) { 
       
        return function(recordsList) {
            var deferred = $q.defer();
            // console.log('calling service deleteRecordsService');
            ALL_TreeGrid_Controller.deleteRecords(recordsList,function(result,event) {
            
                if(event.status) {
                    
                   deferred.resolve(result);
                    
                }
                else {
                 deferred.reject('failure');    
                }
            
            },
             {escape: true,buffer: true}
 
            );
        
            return deferred.promise;
        }

    }]);
       //sends the search value to get the records matching
    dataGridApp.service('searchRecordsService',['$q',function($q) { 
       
        return function(searchText,levelOneId,searchObject,treeIdentifier) {
            var deferred = $q.defer();
            //console.log('calling service searchRecordsService');
            ALL_TreeGrid_Controller.searchRecords(searchText,levelOneId,searchObject,treeIdentifier,function(result,event) {
            
                if(event.status) {
                    
                   deferred.resolve(result);
                    
                }
                else {
                 deferred.reject('failure');    
                }
            
            },
             {escape: false,buffer: true}
 
            );
        
            return deferred.promise;
        }

    }]);
     dataGridApp.service('getObjectNameService',['$q',function($q) { 
       
        return function(recIdList) {
            var deferred = $q.defer();
            // console.log('calling service getObjectNameService');
            ALL_TreeGrid_Controller.getObjectName(recIdList,function(result,event) {
            
                if(event.status) {
                    
                   deferred.resolve(result);
                    
                }
                else {
                 deferred.reject('failure');    
                }
            
            },
             {escape: false,buffer: true}
 
            );
        
            return deferred.promise;
        }
 
    }]);        
   
            //24-2-2016 added a service to get the records of all levels
     dataGridApp.service('getAllRecordsService',['$q',function($q) { 
       
        return function(treeId,levelOnePrentId) {
            var deferred = $q.defer();
            // console.log('calling service getAllRecordsService');
            ALL_TreeGrid_Controller.getRecordsOfAllLevels(treeId,levelOnePrentId,function(result,event) {
            
                if(event.status) {
                    
                   deferred.resolve(JSON.parse(result));
                    
                }
                else {
                 deferred.reject('failure');    
                }
            
            },
             {escape: false,buffer: true}
 
            );
        
            return deferred.promise;
        }
 
    }]);        
          
        dataGridApp.controller('DataGridV2Ctlr',function($scope,$compile,$location,$timeout,$route,$sce,$window,updateInsertRecordsService,deleteRecordsService,searchRecordsService,getObjectNameService,getAllRecordsService) {
          try {
            $scope.data = {};
            $scope.sortBy = '';
            $scope.parentChecked="";
            $scope.headerParent = "";
            $scope.isDisabled = true;
            $scope.sequenceID = 0;
            $scope.massUpdateFieldsSelected = [];
            $scope.noOfRecordsPerPage = {!totalLevelOneRecords};
            $scope.userRecCnt =  $scope.noOfRecordsPerPage;
            $scope.fixedDisplayCnt = $scope.noOfRecordsPerPage;
            $scope.maxPagesVisible = 5;
            $scope.currentPage = 1;
            $scope.totalLevelOneRecords = {!totalLevelOneRecords};
            // console.log('total records ' + $scope.totalLevelOneRecords );
            $scope.chkBoxTrackingMap={};
            $scope.param1 = '{!$CurrentPage.parameters.id}';
            $scope.isLoadRequired = false;
            $scope.disableAllPreviousCheckboxes = false;
            $scope.moreMarginForView = false;
            $scope.searchOptions=JSON.parse('{!allObjects}');
            // console.log( $scope.searchOptions);
            $scope.searchValue = '';
            $scope.selectedObject=$scope.searchOptions[0].ObjectAPIName__c;
            $scope.filteredDataList = {};
            $scope.timezone='{!timezone}';
            $scope.showChildrenCnt = 0;
            $scope.showChildrenMaxVal = 0;
            $scope.headerColors ={};
            $scope.borderColors ={};
            $scope.isAlertVisible = false;
            $scope.changeAlertVisibilty = true;
            $scope.showExpandAll = true;
            $scope.showCollapseAll = false;    
            $scope.objectMetadata = JSON.parse('{!objectMetadata}');
            console.log('metadata information' ,$scope.objectMetadata);
            $scope.isSubProject = ('{!rootParentName}' == 'subproject__c') ? true : false;
            $scope.showDiscovery = ({!cntOfDiscovery} > 0) ? true : false;
            $scope.levelOneIdList = JSON.parse('{!levelOneIds}');
            //console.log('levelOne Id' + $scope.levelOneIdList );
            $scope.highlightRowsList = [];
            $scope.recordsToShow = [];
            $scope.tempData = {};
            $scope.levelOrderOfObjects = {};
			$scope.displayLevelCnt = 1;
           	$scope.keyPrefixArr = [];
            $scope.picklistValueMap = {};
            
            $scope.addNewContact = false;
            $scope.contactSavingError ='';
           
         
            //added 26-2-2016 To fetch JSON string for customized labels
            var customFieldsData = '{!customizedFieldsData}'; 
            $scope.fetchCustomizedFieldsData = (customFieldsData.length>0) ? true : false; 
            $scope.customizedFieldDataMap = JSON.parse(customFieldsData);
           
            $scope.calculateWidthOfColumns = function() {
                try {
                    $scope.columnWidths = {};
                    
                    var mycanvas = document.createElement("canvas");
                    var ctx = mycanvas .getContext("2d");
                    
                    
                    angular.forEach($scope.columnKeys,function(key) {
                        var maxWidth = 0;
                        angular.forEach($scope.searchOptions,function(searchObject) {
                            
                            var value = $scope.customizedFieldDataMap['objects'][searchObject.ObjectAPIName__c.toLowerCase()]['fieldAPIorder'][key];
                            if(value != 'NULL') {
                                
                                var colName = $scope.customizedFieldDataMap['objects'][searchObject.ObjectAPIName__c.toLowerCase()]['customAPINames'][value];
                                var measuredWidth = ctx.measureText(colName).width;
                                if( (measuredWidth) > maxWidth ) {
                                    maxWidth = measuredWidth;
                                }
                                
                            }
                            
                        });
                        //  console.log('column width' + key + maxWidth);
                        if(key == $scope.columnKeys[0]) {
                            maxWidth = 65; 
                        }
                        else if(maxWidth < 40) {
                            maxWidth = 43;
                        }
                        
                        else if(maxWidth > 40 && maxWidth < 70 ) {
                            maxWidth = 47;    
                        }
                        else {
                        	maxWidth = 60;    
                        }
                        
                        $scope.columnWidths[key] = (maxWidth*3) + 'px';
                        
                    });
                    
                    //console.log('measured width' , $scope.columnWidths);
                }
                catch(err) {
                }
            
            };
           
           	
            if($scope.fetchCustomizedFieldsData) {
                var key  = Object.keys($scope.customizedFieldDataMap['objects']);
                if(key.length  > 0) {
                    $scope.columnKeys = Object.keys($scope.customizedFieldDataMap['objects'][key[0]]['fieldAPIorder']);
                    $scope.columnKeys.sort()
                    //console.log('sorted keys' + $scope.columnKeys.sort());
                }
                $scope.calculateWidthOfColumns();
            }
            
          	$scope.initPickListValueMap = function() {
                var keys = Object.keys($scope.objectMetadata);
                console.log('keys' + keys);
                for(var i = 0;i < keys.length ; i++) {
                    var innerKeys = Object.keys($scope.objectMetadata[keys[i]]['picklistValuesMap']);
                    for(var j = 0;j < innerKeys.length;j++) {
                        $scope.picklistValueMap[innerKeys[j]] = $scope.objectMetadata[keys[i]]['picklistValuesMap'][innerKeys[j]];
                    }
                }
                newContactPicklistMap = JSON.parse('{!newContactPicklistValues}');
                keys = Object.keys(newContactPicklistMap);
                for(var i = 0;i < keys.length;i++) {
                    $scope.picklistValueMap[keys[i]] = newContactPicklistMap[keys[i]];
                }
                console.log('picklist value map' ,$scope.picklistValueMap);
            };
            $scope.initPickListValueMap();
          
            angular.element(document).ready(function () {
              setDimensions();
            });
            
            //identifies window resize and adjusts the dimensions
            var w = angular.element($window);
            w.bind('resize', function () {
                //  console.log('setheight resize');
                $timeout(function() { 
                    setDimensions();
                });
            });
            
            
            
            // verify it
            $scope.$on('$viewContentLoaded', function(event) {
                //   console.log('order check viewContentLoaded'  );
                
			                 
                
                 setDimensions();
                if($scope.currentView == '/editRecords') {
                   
                    //console.log('edit mode');
                    // console.log('edit mode' + $scope.selectedMassUpdateRecords);
                    if(!angular.isUndefined($scope.selectedMassUpdateRecords) && ($scope.levelOneIdList.length > 0) && ($scope.selectedMassUpdateRecords.length>0)) {
                        if($scope.selectedMassUpdateRecords[0].substring(0,3) == $scope.levelOneIdList[0].substring(0,3)){
                            $scope.tempData = {};
                            angular.forEach($scope.selectedMassUpdateRecords,function(key){
                                $scope.tempData[key] = $scope.dataList['parentChildRecMap'][key];
                                
                                
                            });    
                           
                             $scope.getRecordsForPage($scope.tempData);
                            $scope.selectedMassUpdateRecords=[];
                        }
                        
                        
                    }
                    $scope.clearPreviousCheckboxes();
                    
                    /* $timeout(function() {
                    var columns = angular.element(document.querySelector('#rootDiv')).find('td.field');
                    
                    
                    for(var i = 0;i < columns.length;i++) {
                        var ele = angular.element(columns[i]).find('multiselect');
                        console.log(ele.attr('class'));
                        /*if(ele.hasClass('ng-dirty')) {
                            console.log('has class');
                            angular.element(columns[i]).find('multiselect').removeClass('ng-dirty');
                            
                        }
                        angular.element(columns[i]).find('multiselect').removeClass('ng-dirty').addClass('ng-pristine');
                    
                    }
                    
        },0);*/
            }
        });
             
             //added 04-03-2016
            $scope.$on('ngRepeatFinished',function(event) {
            	
                setDimensions();
                $scope.toggleExpandCollapseAll();
            
            });
            
              $scope.$on('scrollEvent',function(event){
              
                  addScrollEventListener();
              	
              });
            
            $scope.buildRecursiveHierarchy= function(root) {
                
                if(!root.hasOwnProperty('child')) {
                    $scope.directFieldRoot = root;
                    return;
                }
                else {
                    $scope.directFieldRoot = root['child'];
                    $scope.buildRecursiveHierarchy($scope.directFieldRoot);
                }
                
                
            };
            $scope.getLabelsOfAPINames = function(fieldsMap) {
         var fieldArray = [];    
         angular.forEach(fieldsMap,function(value,key) {
             fieldArray.push(value['label_c']);
         
         });
                // console.log('field array is ' + fieldArray); 
             return fieldArray.reverse();
         };
         
            $scope.buildFieldHierarchy = function() {
                
                $scope.tempFieldHierarchy = {};
                // console.log('building field Hierarchy');
                $scope.fieldHierarchy = {};
                var keyArr = [];
                for(var i=0;i< $scope.searchOptions.length;i++) {
                    keyArr.push($scope.searchOptions[i].ObjectAPIName__c);    
                }
                if(keyArr.length > 0) {
                    $scope.fieldHierarchy['fields'] = $scope.getLabelsOfAPINames($scope.objectMetadata[keyArr[0].toLowerCase()].fieldsMap);
                    
                    $scope.fieldHierarchy['displayName'] =  $scope.searchOptions[0].DisplayName__c;
                    $scope.fieldHierarchy['parentObjectName'] =  $scope.searchOptions[0].ObjectAPIName__c; 
                    // console.log('keyarr length' + keyArr.length);
                    for(var i = 1;i < keyArr.length;i++) {
                        $scope.buildRecursiveHierarchy($scope.fieldHierarchy);
                        $scope.directFieldRoot['child'] = {};
                        $scope.directFieldRoot['child']['fields'] = $scope.getLabelsOfAPINames($scope.objectMetadata[keyArr[i].toLowerCase()].fieldsMap);
                        $scope.directFieldRoot['child']['displayName'] =  $scope.searchOptions[i].DisplayName__c;
                        $scope.directFieldRoot['child']['parentObjectName'] =  $scope.searchOptions[i].ObjectAPIName__c; 
                        // console.log('key arr' , $scope.directFieldRoot); 
                    }
                    // console.log('key arr' , $scope.fieldHierarchy); 
                }
                
                
            };
            $scope.buildFieldHierarchy();
            $scope.getChildData = function(key) {
                var childName = null;
                for(var i = 0;i<$scope.searchOptions.length;i++) {
                    var value = $scope.objectMetadata[$scope.searchOptions[i].ObjectAPIName__c.toLowerCase()];
                    if(!angular.isUndefined(value.parentName_c) &&
                       value.parentName_c != null) {
                        if(value.parentName_c.toLowerCase() != key) {
                            continue;    
                        }
                        childName = $scope.searchOptions[i].ObjectAPIName__c.toLowerCase();
                        break;
                    }
                    
                }
                return childName;
                
            };
              //holds the details of its direct children
            $scope.initChildInfoRecordMap = function(allRecords) {
                var keyArr = Object.keys(allRecords);
                for(var i = 0;i<keyArr.length;i++){
                    var key = allRecords[keyArr[i]]['parentRec']['attributes']['type'].toLowerCase();
                    var childName = $scope.getChildData(key);
                    if(childName != null) {
                        var childRelationName = $scope.objectMetadata[childName.toLowerCase()].childRelationshipName_c;
                        if(allRecords[keyArr[i]]['parentRec'].hasOwnProperty(childRelationName)) {
                            var childRecArr =  allRecords[keyArr[i]]['parentRec'][childRelationName]['records'];
                            //forming a string of child Ids for each parent record and those Ids are separated by ','
                            var idString ='';
                            angular.forEach(childRecArr,function(rec){
                                idString += rec.Id + ',';
                                
                            });
                            //  console.log('idstring' + idString.substring(0,idString.length-1));
                            $scope.childInfoRecordMap[keyArr[i]] = idString.substring(0,idString.length-1);
                        }
                    }
                }
                console.log('child info record map' , $scope.childInfoRecordMap);
                
            };
            
            $scope.fetchAllRecords = function() {
                
                $scope.childInfoRecordMap = {};
                angular.element(document.querySelector('.waitingSearchDiv')).removeClass('ng-hide');
                $scope.isLoadRequired = false;
                $scope.disableAllPreviousCheckboxes = false;
                var levelOneParentId = null ;  
                $scope.disableAllPreviousCheckboxes = false;
                if($scope.param1.length != 0) {
                    levelOneParentId = $scope.param1;  
                }
                $scope.disableButtons = true;
                getAllRecordsService('{!$CurrentPage.parameters.treeId}',levelOneParentId)
                .then(function(result) { 
                    
                    if(result != null && $scope.levelOneIdList.length > 0) {
                       
                        //  console.log('result' ,result);
                        $scope.allRecordsResult = result;
                        $scope.initChildInfoRecordMap(result);
                        $scope.navigationList = [];
                        // console.log('all records',result[$scope.levelOneIdList[0]]);
                        $scope.dataList = {}; 
                       	$scope.totalLevelOneRecords = $scope.levelOneIdList.length;
                         $scope.fixedDisplayCnt = $scope.levelOneIdList.length;
                        var idx = -1;
                        for(var i = 0;i<$scope.levelOneIdList.length;i++) {
                            if(!angular.isUndefined(result[$scope.levelOneIdList[i]]) && 
                               	!angular.isUndefined(result[$scope.levelOneIdList[i]]['parentRec'])) {
                                idx = i;
                                break;
                            }
                        }
                        if(idx > -1) {
                            var key = result[$scope.levelOneIdList[idx]]['parentRec']['attributes']['type'].toLowerCase();
                        }
                        $scope.dataList['parentObjectName'] = $scope.objectMetadata[key].objectAPIName_c;
                        $scope.dataList['displayName'] = $scope.objectMetadata[key].displayName_c;
                        
                        var fieldArray = Object.keys($scope.objectMetadata[key].fieldsMap).reverse();    
                        //console.log('all records' + fieldArray);
                        var tempFieldsMap = $scope.objectMetadata[key].fieldsMap;
                        var newFieldsMap = {};
                        angular.forEach(fieldArray,function(value){
                            newFieldsMap[value] = tempFieldsMap[value]
                            
                        });
                        //  console.log('all records'  , newFieldsMap);
                        $scope.dataList['fieldMetaDataMap'] = newFieldsMap;
                        $scope.dataList['parentRelationshipName'] = $scope.objectMetadata[key].parentAPIName_c;
                        var childName = $scope.getChildData(key);
                        
                        // console.log('all records child name' + childName);
                        if(childName == null) {
                            $scope.dataList['childObjectName'] = null;
                            $scope.dataList['nextLevelApiNameOfParent'] = null;
                            $scope.dataList['childAPIName'] = null;
                        }
                        else {
                            
                            $scope.dataList['childObjectName'] =  $scope.objectMetadata[childName.toLowerCase()].objectAPIName_c;
                            $scope.dataList['nextLevelApiNameOfParent'] =  $scope.objectMetadata[childName.toLowerCase()].parentAPIName_c;
                            $scope.dataList['childAPIName'] =  $scope.objectMetadata[childName.toLowerCase()].childRelationshipName_c;
                        }
                        
                        $scope.dataList['parentChildRecMap']={};
                        angular.forEach($scope.levelOneIdList,function(key){
                            $scope.dataList['parentChildRecMap'][key] = result[key];
                            
                        });
                        $scope.processData($scope.dataList.parentChildRecMap,'root', $scope.dataList['childObjectName']);
                        // console.log('all records datalist' , $scope.dataList);
                        
                        $scope.data['parentObjectName'] =  $scope.dataList['parentObjectName'];
                        $scope.data['childObjectName'] = $scope.dataList['childObjectName'];
                        $scope.data['displayName'] = $scope.dataList['displayName'];
                        $scope.data['parentRelationshipName'] = $scope.dataList['parentRelationshipName'];
                        $scope.data['fieldMetaDataMap'] = $scope.dataList['fieldMetaDataMap'];
                        $scope.data['nextLevelApiNameOfParent'] = $scope.dataList['nextLevelApiNameOfParent'];
                        $scope.data['childAPIName'] = $scope.dataList['childAPIName'];
                        //  console.log('view current' + $scope.currentView ,Object.keys($scope.tempData).length);
                        
                      	
                            
                            $scope.getRecordsForPage($scope.dataList.parentChildRecMap);
                        
                        $scope.filterModified();
                    }
                    
                   
                    
                    $scope.checkBoxChanged(null);
                   
                    $scope.disableButtons = false;
                    
                    angular.element(document.querySelector('.waitingSearchDiv')).addClass('ng-hide');
                    
                    if(Object.keys($scope.expansionTree).length != 0) {
                        // console.log('calling load tree structure');
                        //  console.log('expansion tree value' , $scope.expansionTree);
                        $scope.loadTreeStructure();
                        
                    }
                    
                });
            };
            $scope.fetchAllRecords(); 
              
            
            //added on 24-2-2016
            
         $scope.showChildren = function(objName,recId,callHideChildDiv,calledFromExpandAll,valueForExpandAll,callGetRecordsForChange) {
             $scope.showCollapseAll = true;
             $scope.displayLevelCnt++;
              console.log('show children 728');
             //console.log('modified show children');
             if(!calledFromExpandAll) {
                 angular.element(document.querySelector('.waitingSearchDiv')).removeClass('ng-hide');
                 $timeout(function () { 
                     angular.element(document.querySelector('.waitingSearchDiv')).addClass('ng-hide');
                 }, 1);
             }
             if(angular.isUndefined($scope.childInfoRecordMap[recId])) {
                 return;
             }
             var childIdList = $scope.childInfoRecordMap[recId].split(',');
             // console.log('record Id for child' + childIdList , $scope.allRecordsResult[childIdList[0]]);
             $scope.getListOfPositionsToTraverse(recId);
             //  console.log('show children', $scope.traversingList );
             if(angular.isUndefined($scope.dataList.parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]])) {
                 //  console.log('show children 760');
                 return;    
             }
                   $scope.addChildToParent($scope.dataList.parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]].parentRec);
             // console.log('inside show children' + objName + recId);
            if($scope.checkNavigationListValues(recId)) {
                
                  var childResult = {};
                key = objName.toLowerCase();
                childResult['parentObjectName'] = $scope.objectMetadata[key].objectAPIName_c;
                childResult['displayName'] = $scope.objectMetadata[key].displayName_c;
                 var fieldArray = Object.keys($scope.objectMetadata[key].fieldsMap).reverse();    
                //   console.log('all records' + fieldArray);
                        var tempFieldsMap = $scope.objectMetadata[key].fieldsMap;
                        var newFieldsMap = {};
                        angular.forEach(fieldArray,function(value){
                            newFieldsMap[value] = tempFieldsMap[value];
                            
                        });
                
                childResult['fieldMetaDataMap'] = newFieldsMap;
                childResult['parentRelationshipName'] = $scope.objectMetadata[key].parentAPIName_c;
                
                
                var childName = $scope.getChildData(key);
                
                // console.log('all records child name' + childName);
                if(childName == null) {
                    childResult['childObjectName'] = null;
                    childResult['nextLevelApiNameOfParent'] = null;
                    childResult['childAPIName'] = null;
                }
                else {
                    
                    childResult['childObjectName'] =  $scope.objectMetadata[childName.toLowerCase()].objectAPIName_c;
                    childResult['nextLevelApiNameOfParent'] =  $scope.objectMetadata[childName.toLowerCase()].parentAPIName_c;
                    childResult['childAPIName'] =  $scope.objectMetadata[childName.toLowerCase()].childRelationshipName_c;
                }
                
                
                childResult['parentChildRecMap']={};
                angular.forEach(childIdList,function(key){
                    childResult['parentChildRecMap'][key] = $scope.allRecordsResult[key];
                    
                });
                
                if($scope.chkBoxTrackingMap['head' + objName.toLowerCase()]) {
                    angular.forEach(childIdList,function(key){
                        $scope.chkBoxTrackingMap[key] = true;
                        if($scope.selectedMassUpdateRecords.indexOf(key) == -1) {
                            $scope.selectedMassUpdateRecords.push(key);
                        }
                        //  console.log('show children' + key);
                    });
                }
                  $scope.processData(childResult['parentChildRecMap'],recId,childResult['childObjectName']);
                
                
                 if($scope.dataList.parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]] != 'undefined') {
                               
                     //  console.log('direct parent '  + $scope.directParent);
                                $scope.directParent['children'] = childResult;
                     //    console.log('isexpanded property before' + $scope.directParent['isExpanded']);
                                $scope.directParent['isExpanded'] = true; 
                     //    console.log('isexpanded property' + $scope.directParent['isExpanded']);
                                
                     //      console.log($scope.dataList);
                     //      console.log($scope.currentView); 
                                //$scope.filteredDataList[rootId] = $scope.dataList.parentChildRecMap[rootId];
                            }
                      
                $scope.navigationListDuplicate = angular.copy($scope.navigationList);
                     
                
               }
                  else {
                      
              
                        $scope.directParent['isExpanded'] = true;
                  }
             
             		
             if(calledFromExpandAll) {
                 
                 $scope.expandAll(valueForExpandAll['children']); 
                 
             }
             if(callHideChildDiv) {
                 //  console.log('inside call hide child div');
                 $scope.hideChildDiv('child'+recId,recId);
                 
             }
             /*console.log('tracking checkbox' ,  $scope.chkBoxTrackingMap , $scope.parentChecked);
             $timeout(function () { 
                 $scope.checkBoxChanged($scope.parentChecked);
             }, 2000);*/
                       
                
                if(callGetRecordsForChange) {
                    $scope.showChildrenCnt++;
                    //console.log('show children count' + $scope.showChildrenMaxVal, $scope.showChildrenCnt);
                    if($scope.showChildrenMaxVal == $scope.showChildrenCnt) {
                        //  console.log('callinf getRecords for page from showchildren');
                        $scope.getRecordsForPage($scope.filteredDataList);
                    }
                }
             	
             /* if($scope.searchValue.length >= 3) {
                 
                 angular.forEach(Object.keys($scope.filteredDataList),function(key) { 
                     
                     $scope.filteredDataList[key] = $scope.dataList['parentChildRecMap'][key];
                     
                 });
             
             }*/
             
                  
                   $scope.updateRecordsToShow();
                   if($scope.chkBoxTrackingMap['head' + objName.toLowerCase()]) {
                    angular.forEach(childIdList,function(key){
                        $scope.chkBoxTrackingMap[key] = true;
                        // console.log('show children' + key);
                    });
                } 
             
             	
             
           
                angular.element(document.querySelector('#child'+recId)).addClass('ng-show').removeClass('ng-hide');
             if(!callHideChildDiv) {
                $scope.expansionTree[recId] = true;
            }
           $scope.updateRecordsToShow();	
             $timeout(function() {
                setDimensions();
             
             });
             // $scope.controlRecursionOnExpanding = true;
        
          };
      
            
           
         
        //holds the recordId and its direct parent as child,parent properties
        $scope.navigationList = [];
        $scope.navigationListDuplicate = [];
        $scope.expansionTree = {};//maintains whether the tree is expanded or not
        $scope.objectChildIdentifier = {};
        $scope.onEditClicked = function() {
             angular.element(document.querySelector('.waitingSearchDiv1')).removeClass('ng-hide');
          
            isAlertVisible=false;
            $timeout(function(){
                $location.path('/editRecords');
            },1000);
            
            $timeout(function() {
                 angular.element(document.querySelector('.waitingSearchDiv1')).addClass('ng-hide');
            },1000);
       
        }
        // $scope.loadInitialRecords();
        $scope.getRecordsForPage = function(recordsList) {
            // console.log('rec changed');
            // console.log('modified data list' , recordsList);
            // console.log(' modified calling change alert visibility' + $scope.changeAlertVisibilty); 
            if(!$scope.changeAlertVisibilty) {
                //    console.log('inside if of get records for page' +  $scope.isAlertVisible);
                $scope.isAlertVisible = true;
                angular.element(document.querySelector('.close')).removeClass('ng-hide');
            }
            else {
                //    console.log('inside else of get records for page' +  $scope.isAlertVisible);
                $scope.isAlertVisible = false;
               
            }
            //  console.log('temp data' + $scope.currentView + Object.keys($scope.tempData).length);
            if(Object.keys($scope.tempData).length != 0 && $scope.currentView == '/editRecords' && $scope.searchValue.length < 3) {
                //     console.log('tempdata records satistied conditions');
                //    console.log('called tempData records',$scope.tempData);
                recordsList = {};
                angular.forEach(Object.keys($scope.tempData),function(key){
                
                    recordsList[key] = $scope.dataList['parentChildRecMap'][key];
                
                });
               
                
            }
           $scope.recordsMap = []; 
            //  console.log('order check getRecordsForPage'  );
           $scope.recordsMap = Object.keys(recordsList);
            angular.element(document.querySelector('#loadingSpinner')).addClass('ng-hide');
            //  console.log('recordMap length ' + $scope.recordsMap);         
           $scope.sequenceID = 0;
           $scope.data['parentChildRecMap'] = {};
           $scope.totalLevelOneRecords = $scope.recordsMap.length;
            //    console.log('changed total level one records' + $scope.totalLevelOneRecords );
            var start = (($scope.currentPage-1)*$scope.noOfRecordsPerPage);
            for(var i = start ;i < (start+$scope.noOfRecordsPerPage) && i< $scope.recordsMap.length ;i++) {
                 $scope.data['parentChildRecMap'][$scope.recordsMap[i]] = recordsList[$scope.recordsMap[i]];
            }
            
          	 $timeout(function() {
                setDimensions();
             
             });
            //   $scope.clearPreviousCheckboxes(); 
            
           
        };
        //adds an extra property isExpanded to the records and updates the navigation list and object identifier
         $scope.processData = function(parentChildRecMap,navigationValue,childObjectName) {
             // console.log('process data' , Object.keys(parentChildRecMap));
               angular.forEach(parentChildRecMap,function(value,key) {
                   //   console.log('navigation value is' + navigationValue);
                   value.parentRec['isExpanded'] = false;
                   
                   // console.log(value.parentRec['isExpanded'] + key );
                   
                   $scope.navigationObj = {};
                   $scope.navigationObj['child'] = key;
                   $scope.navigationObj['parent'] = navigationValue;
                   $scope.navigationList.push($scope.navigationObj);
                   //  console.log($scope.navigationList);        
                   if(!$scope.objectChildIdentifier.hasOwnProperty(key.substring(0,3))) {
                        $scope.objectChildIdentifier[key.substring(0,3)] = childObjectName;
                      }
                   // console.log('object child identifier' , $scope.objectChildIdentifier );
               });
              
               
            };
        
        $scope.checkNavigationListValues = function(recordId) {
            //  console.log('length of navigationlist is ' + $scope.navigationList.length);
            //angular.forEach doesnot support break and continue
           for(var i = 0;i < $scope.navigationList.length;i++) {
               //   console.log($scope.navigationList[i]['parent'] + '---' + recordId)
               if($scope.navigationList[i]['parent'] == recordId) {
                   return false;
               }
            
           }
               
                return true; 
        
        
        };
        
         $scope.initVariables = function(index,fieldMetaData,parentObj,childObj,parentObjId,displayName,parentRelationName,nextLevelParent) {
            
            if(index == 0) {
        
                $scope.fieldMap = fieldMetaData;
                $scope.parentObject = parentObj;
                $scope.childObject = childObj;
                $scope.parentId = parentObjId
                $scope.nameToDisplay = displayName;
                $scope.parentRelationName = parentRelationName;
                $scope.nextLevelParentAPI = nextLevelParent; 
                // console.log($scope.parentObject +'---'+ $scope.childObject + '---' + $scope.nextLevelParentAPI);
                
               
            }
        };
         $scope.objectsNameMap={};
         $scope.getObjectsDisplayNames = function() {
             
             angular.forEach($scope.searchOptions,function(obj) {
             $scope.objectsNameMap[obj.ObjectAPIName__c] = obj.DisplayName__c;
             
             });
         
         };
         
         $scope.getObjectsDisplayNames();
         
         $scope.getListOfPositionsToTraverse = function(recId) {
             //  console.log('inside get list of positions to traverse');
             var searchingElement = recId;
            
             $scope.traversingList=[];
             $scope.traversingList.push(searchingElement);
             //to control it from going to infinite loop
             var tempCount = 0;
                 
             while(searchingElement != 'root' && tempCount<1000) {
             tempCount++;
                 //  console.log('searching element' + searchingElement);
                 for(var i = 0;i < $scope.navigationList.length;i++) {
                     
                     if($scope.navigationList[i]['child'] == searchingElement) {
                         //   console.log('new searching element' + $scope.navigationList[i]['parent']);
                         searchingElement = $scope.navigationList[i]['parent'];
                         if(searchingElement != 'root') {
                            $scope.traversingList.push(searchingElement);       
                         }
                         break;
                     }
                     
                 }
                 
             }
             
             //console.log('traversing list' + $scope.traversingList);
         
         };
        //returns the parentRec based on the given ID
        $scope.addChildToParent = function(root) {
           $scope.traversingList.pop();        
            if(root.hasOwnProperty('children') && $scope.traversingList.length > 0) {
                //console.log('inside has own property' + root['children']);
                //console.log(root['children'].parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]].parentRec);
                $scope.addChildToParent(root['children'].parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]].parentRec);
            }
            
            else {
                //   console.log('else part' + root);
                $scope.directParent = root;
                return root;
            }
            
            //console.log(root);
        
        };
        
        
        
        $scope.hideChildDiv = function(divId,recId) {
        	$scope.showExpandAll=true;
            $scope.getListOfPositionsToTraverse(recId);
            if(angular.isUndefined($scope.dataList.parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]])) {
             	return;  
             }
            $scope.addChildToParent($scope.dataList.parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]].parentRec);
            // console.log('direct parent '  + $scope.directParent);
            //console.log('isexapanded property before' + $scope.directParent['isExpanded']);
            $scope.directParent['isExpanded'] = false;
            //console.log('isexapanded property' + $scope.directParent['isExpanded']);
            
            angular.element(document.querySelector('#'+divId)).removeClass('ng-show').addClass('ng-hide');
            $scope.expansionTree[recId] = false;
            
            if( $scope.currentView == '/viewRecords') {
                // console.log('view records mode');
                //$scope.dataDuplicate = angular.copy($scope.data);
                // $scope.navigationListDuplicate = angular.copy($scope.navigationList);
            }   
            
            $timeout(function() {
                setDimensions();
             
             });
        
        };
        
        //finds only changed keys of changed records using the class ng-dirty
        $scope.getListOfRecordsToUpdate = function(dataObj) {
           
            
            angular.forEach(dataObj.parentChildRecMap,function(value,key) {
                
                var obj = {};
                var refId = '#' + key;
                 if(key.substring(0,1) >= '0'  && key.substring(0,1) <='9') {
                     // console.log('is Number');
                  refId =  '#\\3' + key.substring(0,1) + ' ' + key.substring(1);
                   }
                //console.log('refId' + refId );
                
                 var tableCols = angular.element(document.querySelector('.' + key + 'Flow')).find('td.field');
                
                var innerObj = {};
 				findChangedColumns(tableCols,innerObj,obj,value);
                tableCols = angular.element(document.querySelector('.' + key + 'Fix')).find('td.field'); 
                findChangedColumns(tableCols,innerObj,obj,value);
                 if(Object.keys(obj).length != 0) {
                     // console.log('keys of object'+ Object.keys(obj));
                     // console.log('length of object is not 0');
                     obj['Id'] =  value.parentRec['Id'];
                    
                    $scope.recordsUpdateList.push(obj);
                 }   
                // console.log(obj);
                //  console.log('records list ' + $scope.recordsUpdateList);
                
                if(value.parentRec.hasOwnProperty('children')) {
                    // console.log('has children');    
                    $scope.getListOfRecordsToUpdate(value.parentRec['children']);
                }
                else {
                    //  console.log('has no children');
                }  
                
               
                 
            
            });
            
            
        };
         
          var findChangedColumns = function(tableCols,innerObj,obj,value) {
              for(var i = 0;i<tableCols.length;i++) {
                    if(i == 0) {
                        innerObj['type'] = angular.element(tableCols[i]).attr('object');
                        //console.log(innerObj['type'] );
                    }
                    
                    var ele ='';
                    var isDateManuallyEntered = false;
                     if(angular.element(tableCols[i]).find('.datetimepicker').length != 0) {
                         // console.log(' issue inside date picker');
                         ele = angular.element(tableCols[i]).find('.datetimepicker');
                         //console.log('date picker issue .datepicker' , ele.hasClass('ng-dirty'));
                         if(!ele.hasClass('ng-dirty')) {
                         	ele = angular.element(tableCols[i]).find('input') ; 
                             //   console.log('date picker issue empty' , ele.hasClass('ng-dirty'), ele.val().length);
                             isDateManuallyEntered = true;
                         }
                         //console.log('issue ' , ele);
                    }
                    else if(angular.element(tableCols[i]).find('multiselect').length != 0) {
                        ele = angular.element(tableCols[i]).find('multiselect');
                        //  console.log('inside multi select');
                    }
                    
                    else {
                        
                        ele = angular.element(tableCols[i]).find('input,select,textarea');
                        //  console.log('inside else part records to be updated');
                        
                    } 
                    // console.log('ele' , ele);
                    if(ele.hasClass('ng-dirty')) {
                        //console.log('inside ng-dirty');
                        if(!obj.hasOwnProperty('attributes')) {
                             obj['attributes'] = innerObj;
                            }
                        //  console.log('ng-dirty'); 
                        //  console.log('object name for json' + angular.element(tableCols[i]).attr('object'));
                        //angular.element(ele).removeClass('ng-dirty').addClass('ng-pristine');
                        var dataType = angular.element(tableCols[i]).attr('dataType');
                        if(dataType == 'DATE' || dataType == 'DATETIME' ) {
                           if(isDateManuallyEntered) {
                               // console.log('datepicker manaual entry true');
                                 if(ele.val().length == 0) {
                               	     obj[angular.element(tableCols[i]).attr('id')] = null;
                               }
                               else {
                                   obj[angular.element(tableCols[i]).attr('id')] = formatDate(new Date(ele.val()));
                                   //  console.log('invalid date format' , $scope.formatDate(new Date(ele.val())));
                                   if(formatDate(new Date(ele.val())).indexOf('NaN') != -1) {
                                       obj[angular.element(tableCols[i]).attr('id')] = null;
                                   }
                                   
                               }
                           }
                            else if(dataType == 'DATE') {
                                // console.log('ori' + value.parentRec[angular.element(tableCols[i]).attr('id')]);
                                obj[angular.element(tableCols[i]).attr('id')] = formatDate(new Date(value.parentRec[angular.element(tableCols[i]).attr('id')]));
                            }
                            else {
                                var d = new Date(value.parentRec[angular.element(tableCols[i]).attr('id')]);
                                obj[angular.element(tableCols[i]).attr('id')] = d.getTime();
                            }
                        }
                        else {
                            
                             obj[angular.element(tableCols[i]).attr('id')] = value.parentRec[angular.element(tableCols[i]).attr('id')];
                        }
                    
                    
                }
                    //console.log(obj);
                    // console.log('-----------');
                }
               
              
              
          };
             
        
         $scope.updateRecordsToShow = function() {
             /* if($scope.recordsToShow.indexOf(parentRecId) != -1 && $scope.selectedObject.toLowerCase() != object.toLowerCase()) {
                  angular.forEach(keys,function(key){
                      $scope.recordsToShow.push(key);
                      
                  });
              }*/
             for(var i = 0;i<$scope.highlightRowsList.length;i++) {
                 $scope.addRecordsToShow($scope.highlightRowsList[i]);
                 
             }
             
         };
         
        $scope.addRecordsToShow = function(recId) {
             
             if($scope.expansionTree[recId]) {
                     
                     for(var j = 0;j < $scope.navigationList.length;j++) {
                         //   console.log('inside addRecordToShow');
                         if($scope.navigationList[j]['parent'] == recId) {
                             $scope.recordsToShow.push($scope.navigationList[j]['child']);
                             $scope.addRecordsToShow($scope.navigationList[j]['child']);
                         }
                         
                     }
                     
                     
                 }
             
             else {
             	return;    
             }
             
             
             
             
             
         };
        $scope.checkBoxChanged = function(parentIdInfo) {
            try {
                //console.log('insided check box changed');
           var isAnyChkBoxChecked  = false;
            var chkBoxElements = angular.element(document.querySelector('#rootDiv')).find('.chk'); 
            var parentInfo = '';
            if(parentIdInfo != null) {
                parentInfo = parentIdInfo;
            }
           
            
            $scope.selectedMassUpdateRecords=[];
            //  alert('number of checkboxes present' + chkBoxElements.length);
           
            for(var i = 0;i<chkBoxElements.length;i++) {
            
                if(document.querySelector('#' + angular.element(chkBoxElements[i]).attr('id')).checked) {
                    $scope.parentChecked = angular.element(chkBoxElements[i]).attr('object');
                    //parentInfo = angular.element(chkBoxElements[i]).attr('parentId');
                    // console.log('inside if ' + $scope.parentChecked);
                    isAnyChkBoxChecked = true;
                    //console.log('inside if ' + isAnyChkBoxChecked);
                    // console.log(angular.element(chkBoxElements[i]).attr('id').substring(3));
                    $scope.selectedMassUpdateRecords.push(angular.element(chkBoxElements[i]).attr('id').substring(3));
                    
                }
            }
             var i = 0;
                //  console.log('working with checkbox parentinfo' + parentInfo);
             for(i = 0;i<chkBoxElements.length;i++) {
                 // console.log('working with checkbox');
                 // console.log(' working with checkbox inside checking if' + parentInfo + '---' + angular.element(chkBoxElements[i]).attr('parentId'));
                 if(angular.element(chkBoxElements[i]).attr('parentId') == parentInfo) {
                     
                     // console.log('working with checkbox value' + angular.element(chkBoxElements[i]).attr('id') + '---'+ document.querySelector('#' + angular.element(chkBoxElements[i]).attr('id')).checked);
                     if(!document.querySelector('#' + angular.element(chkBoxElements[i]).attr('id')).checked) {
                         //   console.log('working with checkbox inside false part'+parentInfo);
                         // $scope.chkBoxTrackingMap['head' + parentInfo] = false;
                         $scope.chkBoxTrackingMap['head' + $scope.parentChecked.toLowerCase()] = false;
                         break;
                     }
                 
                 }
             
             }
                //console.log('working checkbox' + i)
            if(i == chkBoxElements.length && parentInfo!='') {
                //   console.log('inside equal part'+parentInfo);
                //  $scope.chkBoxTrackingMap['head' + parentInfo] = true;
                 $scope.chkBoxTrackingMap['head' + $scope.parentChecked.toLowerCase()] = true;
                
            }
                //  console.log('selected mass update records' + $scope.selectedMassUpdateRecords);
            if(!isAnyChkBoxChecked) {
                    $scope.parentChecked = "";
            }
           $scope.headerParent = $scope.parentChecked;
                
                //  console.log('working with checkbox tracking map' ,  $scope.chkBoxTrackingMap );  
            
            }
            catch(err) {
                
            }
            
            
        };
        
         $scope.clearPreviousCheckboxes = function() {
             
            
             $scope.selectedMassUpdateRecords = [];
             $scope.parentChecked = '';
             angular.forEach(Object.keys($scope.chkBoxTrackingMap),function(key) {
                
                 $scope.chkBoxTrackingMap[key] = false;
             
             
             });

             
             
            
             
         };
        
        
        $scope.onCancel = function() {
             $scope.tempData = {};
             $scope.fetchAllRecords();
             $location.path('/viewRecords');
            // console.log('before' + $scope.dataDuplicate.parentChildRecMap['0019000000vBGVXAA4'].parentRec['Name']);
            // $scope.data = angular.copy($scope.dataDuplicate);
            //$scope.navigationList = angular.copy($scope.navigationListDuplicate);
            //console.log('cancel clicked');
            //console.log('after' + $scope.dataDuplicate.parentChildRecMap['0019000000vBGVXAA4'].parentRec['Name']);
            $scope.isAlertVisible = false;
            $scope.changeAlertVisibilty = true;
            
        };
        
        $scope.saveChanges = function(option) {
            // angular.element(document.querySelector('.waitingSearchDiv')).removeClass('ng-hide');
            $scope.recordsUpdateList = [];
             $scope.newRecordsList = [];
            // $scope.recordsInsertList = [];
            $scope.fieldsInfoMap = [];
            $scope.disableForSave = true;
            if(option != 'massupdate') {
                $scope.getListOfRecordsToUpdate($scope.data);
                $scope.getModifiedNewlyInsertedRecords();
                $scope.getListOfRecordsToInsert();
            }
            else if(option == 'massupdate') {
                 
               $scope.recordsUpdateList = $scope.recordsToBeMassUpdated;
            }
            // console.log('records to be updated' ,  $scope.recordsUpdateList);
            if($scope.newRecordsList.length > 0) {
            	$scope.isLoadRequired = true;    
            }
             $scope.changeAlertVisibilty = false;
            $scope.callUpdateInsertService($scope.recordsUpdateList,$scope.newRecordsList,option);
             
        };
              
         $scope.callUpdateInsertService = function(updateList,insertList,option) {
                $scope.changeAlertVisibilty = false;
               angular.element(document.querySelector('.waitingSearchDiv')).removeClass('ng-hide');
               updateInsertRecordsService(updateList,insertList)
                .then(function(result) {
                    var isErr = false;
                    $scope.disableForSave = false;
                    // console.log('result ' , result);
                    // console.log('result length' + Object.keys(result).length);
                     angular.element(document.querySelector('.waitingSearchDiv')).addClass('ng-hide');
                    if( Object.keys(result).length == 0) {
                        // alert('record successfully updated');
                        angular.element(document.querySelector('#alertMsg')).removeClass('ng-hide');
                        $scope.alertCls = "alert alert-success";
                       $scope.isAlertVisible = true;
                         angular.element(document.querySelector('.close')).removeClass('ng-hide');
                        $scope.alertMessage =  '<strong><i class="fa fa-icon-ok-sign"/>&nbsp;&nbsp; Success!! </strong>Records updated successfully';
                        
                        // console.log('records update' + result);
                         $scope.fetchAllRecords();
                      
                        $scope.clearPreviousCheckboxes();    
                       $scope.hideErrors();
                       
                       if(option == 'save') {
                             $location.path('/viewRecords');
                           
                        }
                        else if(option == 'quicksave' || option == 'massupdate') {
                         
                            $route.reload();
                            //$location.path('/editRecords');
                            
                        }
                         
                    }
                    else {
                         
                        //console.log('mass update result is' + result);
                        //add error messages to the records failed
                        angular.forEach(Object.keys(result),function(keys) { 
                           
                        var splitId = keys.split("|");
                            // var  key = splitId[0];
                             var errHTML = '<table><tr><th><b class="fa fa-info-circle ng-hide"/>&nbsp;&nbsp;</th><th>Errors</th></tr>' 
                                            + '<tr><td></td><td><ul>';
                            // console.log('all errors' + result[keys]	);
                            angular.forEach(result[keys],function(err) { 
                                errHTML += '<li style="cursor:default !important">'+ err + '</li>'; 
                            
                            });
                            
                            errHTML += '</ul></td></tr></table>';
                            if(errHTML.indexOf('insert success') == -1) {
                                isErr = true;
                                 angular.element(document.querySelector('#error' + keys)).removeClass('ng-hide');
                                angular.element(document.querySelector('#error' + keys)).html(errHTML);
                                 angular.element(document.querySelector('#error' + keys + 'Fix')).removeClass('ng-hide');
                                var errorHeight =   angular.element(document.querySelector('#error' + keys)).css('height');
                                console.log('errorHeight' + errorHeight);
                                angular.element(document.querySelector('#error' + keys + 'Fix')).css('height',errorHeight);
                                console.log('keys' + keys);
                                try{
                                    var matchElements = document.querySelectorAll('#' + keys);
                                    console.log('matchelements' + matchElements.length + angular.element(matchElements[0]).attr('class') + angular.element(matchElements[1]).attr('class'));
                                    for(var i=0;i<matchElements.length;i++) {
                                        if( angular.element(matchElements[i]).hasClass('newrecordtableFix')) {
                                            angular.element(matchElements[i]).addClass(keys + 'Fix');
                                        }
                                        else if(angular.element(matchElements[i]).hasClass('newrecordtableFlow')) {
                                            angular.element(matchElements[i]).addClass(keys + 'Flow');
                                        }
                                    }
                                }
                                catch(err) {
                                }
                            }
                            else {
                                if(splitId.length > 1) {
                                    console.log('split id' + splitId[1] + angular.element(document.querySelector('.'+ splitId[1] + 'Fix')).length);
                                    var successfullyInsertedRow = angular.element(document.querySelector('.'+ splitId[1] + 'Fix')).removeClass('newrecordtableFix').addClass('newrecordtableInsertedFix').removeClass(splitId[1] + 'Fix').addClass(splitId[0] + 'Fix');
                                   
                                    angular.element(successfullyInsertedRow).attr('id',splitId[0]);
                                    successfullyInsertedRow = angular.element(document.querySelector('.'+splitId[1] + 'Flow')).removeClass('newrecordtableFlow').addClass('newrecordtableInsertedFlow').removeClass(splitId[1] + 'Flow').addClass(splitId[0] + 'Flow');
                                    angular.element(successfullyInsertedRow).attr('id',splitId[0]);
                                    // $scope.expansionTree[splitId[0]] = true;
                                    angular.element(document.querySelector('#error' + splitId[1] + 'Fix')).attr('id','error'+splitId[0] + 'Fix');
                                    angular.element(document.querySelector('#error' + splitId[1])).attr('id','error'+splitId[0]);
                                    //  console.log('level one ids before' + $scope.levelOneIdList);
                                    if($scope.levelOneIdList.length > 0 ) {
                                        if($scope.levelOneIdList[0].substring(0,3) == splitId[0].substring(0,3)) {
                                            $scope.levelOneIdList.unshift(splitId[0]);
                                            //    console.log('level one ids after' + $scope.levelOneIdList);
                                        }
                                    }
                                }
                            }
                            //console.log('error messages' + keys + result[keys]);
                        });
                       
                        
                        if(result != 'no records found to update or insert') {
                            if(isErr) {
                                 
                                // alert('Records failed to update');
                                
                                angular.element(document.querySelector('#alertMsg')).removeClass('ng-hide');
                                 $scope.alertCls = "alert alert-danger";
                                $scope.isAlertVisible = true;
                                 angular.element(document.querySelector('.close')).removeClass('ng-hide');
                                $scope.alertMessage =  '<strong> <i class="fa fa-icon-warning-sign"/> &nbsp;&nbsp; Error!! </strong>Some records failed to update';
                              
                            }
                            else  {
                                angular.element(document.querySelector('#alertMsg')).removeClass('ng-hide');
                               $scope.alertCls = "alert alert-success";
                                 $scope.isAlertVisible = true;
                                 angular.element(document.querySelector('.close')).removeClass('ng-hide');
                                $scope.alertMessage =  '<strong><i class="fa fa-icon-ok-sign"/>&nbsp;&nbsp; Success!! </strong>Records updated successfully';
                                
                                //alert('Records updated successfully');
                                //added 2-2-2016
                                $scope.fetchAllRecords();
                                
                                $scope.clearPreviousCheckboxes();    
                                $scope.hideErrors();
								$scope.disableAllPreviousCheckboxes = false;                               
                                if(option == 'save') {
                                    $location.path('/viewRecords');
                                }
                                else if(option == 'quicksave' || option == 'massupdate') {
                                    
                                    $route.reload();
                                    //$location.path('/editRecords');
                                    
                                }
                                
                                
                                
                            }
                        }
                        
                        else if(result == 'no records found to update or insert') {
                            $scope.alertCls = "alert alert-info";
                            $scope.isAlertVisible = true;      
                            $scope.alertMessage =  '<strong><i class="fa fa-icon-info-sign"/> &nbsp;&nbsp;Info!!</strong>No records found to update.Please ensure that the records are checked if they are newly created';
                            
                        }
                        
                    }
                    
                     
                     
                    
                       
                  
                });
            
              
              };
              
            //when save is clicked
        $scope.onSave = function() {
            $scope.tempData = {};
            $scope.saveChanges('save');
           
        };
            // when quick save is clicked
        $scope.onQuickSave = function() {
            
            $scope.saveChanges('quicksave');
           
        
        };
        
        $scope.onMassUpdate  = function() {
        
            
            $scope.isDisabled = true;
            $scope.isUpdateEnabled();
            //console.log('obejct selected for mass update ' + $scope.parentChecked);
            
            if($scope.parentChecked != '') {
               $scope.getFieldsToUpdateOrCreate($scope.parentChecked);
            }
            else {
                // console.log('No records are checked');
                
            }
            
            
        };
        $scope.getFieldsToUpdateOrCreate = function(objectName) {
            // console.log('object name sent' + objectName);
            // console.log('keys' + Object.keys($scope.objectMetadata));
            var keyArr = Object.keys($scope.objectMetadata);
            var keyObject = '';
            for(var i = 0;i < Object.keys($scope.objectMetadata).length;i++) {
                if(String(keyArr[i]).toLowerCase() == String(objectName).toLowerCase()){
                    keyObject = keyArr[i];
                    break;
                }
                
            }
            
        	$scope.fieldsInfoMap = $scope.objectMetadata[keyObject].fieldsMap;
            // console.log('call' , $scope.fieldsInfoMap);
            //console.log(keyObject);
            keyArr = Object.keys($scope.objectMetadata[keyObject].fieldsMap).reverse();
            var tempFieldMap = {};
            for(var i=0;i<keyArr.length;i++) {
                tempFieldMap[keyArr[i]] = {};
                tempFieldMap[keyArr[i]] = $scope.fieldsInfoMap[keyArr[i]];
            
            }
            $scope.fieldsInfoMap = tempFieldMap;
            
            
        }
        $scope.createNewRecord = function(objectName,objId,parentRelName) {
           
            angular.element(document.querySelector('#alertMsg')).removeClass('ng-hide');
           $scope.alertCls = "alert alert-info";
            $scope.isAlertVisible = true;   
             angular.element(document.querySelector('.close')).removeClass('ng-hide');
            $scope.alertMessage =  '<strong><i class="fa fa-icon-info-sign"/>&nbsp;&nbsp; Info!! </strong>Please select the new records to be saved.';
            
            $scope.sequenceID++;
            // console.log('create new '+ objectName + parentRelName);
            $scope.refObjId = '';
            $scope.parentRelName = '';
            $scope.refObjId =  objId; 
            $scope.disableAllPreviousCheckboxes = true;
            if(objId == 'root' && ($scope.param1.length != 0)) {
                
                //console.log('param1' +$scope.param1);
                
                 $scope.refObjId = $scope.param1;
            }
              $scope.parentRelName = parentRelName;
            
            
            // $scope.getFieldsToUpdateOrCreate(objectName);
            $scope.refObjectName = objectName;
            var tableHeaderCnt = angular.element(document.querySelector('#headerOf' + objId + 'Fix')).length;
            console.log('objId' + objId)
            if(tableHeaderCnt>0) {
           console.log('greater than 0');
                var htmlContent = '<div class="massUpdateFields" ng-include="\'newRecordViewFix\'"></div>'
            angular.element(document.querySelector('#headerOf' + objId + 'Fix')).after($compile(htmlContent)($scope));
             htmlContent = '<div class="massUpdateFields" ng-include="\'newRecordViewFlow\'"></div>'
            angular.element(document.querySelector('#headerOf' + objId + 'Flow')).after($compile(htmlContent)($scope));
                
            }
            else {
                 var htmlContent = '<div class="massUpdateFields" ng-include="\'newRecordViewWithHeaderFix\'"></div>'
           		 angular.element(document.querySelector('#headerBefore' + objId + 'Fix')).after($compile(htmlContent)($scope));
                 htmlContent = '<div class="massUpdateFields" ng-include="\'newRecordViewWithHeaderFlow\'"></div>'
           		 angular.element(document.querySelector('#headerBefore' + objId + 'Flow')).after($compile(htmlContent)($scope));
            }
           
            
            
            $scope.selectedMassUpdateRecords = [];
             $scope.clearPreviousCheckboxes();
            
            
            
        };
       
        //mass update-finds the fields selected for mass update
       $scope.getSelectedFields = function() {
           
           var massUpdateChkBoxes = angular.element(document.querySelector('.showFieldsToUpdate')).find('input:checkbox');
           //  var anyFieldSelected = false;
           $scope.massUpdateFieldsSelected = [];
          
           for(var i = 0;i < massUpdateChkBoxes.length;i++) {
               // console.log(document.querySelector('#' + angular.element(massUpdateChkBoxes[i]).attr('id')).checked);
               if(document.querySelector('#' + angular.element(massUpdateChkBoxes[i]).attr('id')).checked ) {
                    $scope.massUpdateFieldsSelected.push(angular.element(massUpdateChkBoxes[i]).attr('id'));
               }
           
           }
          
           
          
           
       };
        
        $scope.hideErrors = function() {
        
            var hidingDivs = angular.element(document.querySelector('#rootDiv')).find('.errCls');
            for(var i = 0;i < hidingDivs.length;i++) {
                angular.element(hidingDivs[i]).addClass('ng-hide');
            }

        
        }
        
        //mass updation of records
        $scope.massUpdateFields = function() {
           
           
           $scope.recordsToBeMassUpdated = [];
          
           
             var massUpdateObj = {};
            //  var innerObj = {};
            
            //  innerObj['type'] = $scope.parentChecked;
           
            massUpdateObj['attributes'] = {type : $scope.parentChecked};
                for(var j = 0;j<$scope.massUpdateFieldsSelected.length;j++) { 
                    var dataType = angular.element(document.querySelector('#massUpdateRecords')).find('span[id=' + $scope.massUpdateFieldsSelected[j]+']').attr('dataType');
                    var fieldValue = angular.element(document.querySelector('#massUpdateRecords')).find('span').find('#' + $scope.massUpdateFieldsSelected[j]).text()
                    switch(dataType) {
                        case 'DATE' :  massUpdateObj[$scope.massUpdateFieldsSelected[j]] = formatDate(new Date(fieldValue));
                           			   if(massUpdateObj[$scope.massUpdateFieldsSelected[j]].indexOf('NaN') != -1) {
                                              massUpdateObj[$scope.massUpdateFieldsSelected[j]]=null;
                                        }   
                            
                            			break;
                        case 'DATETIME' :  var d = new Date(fieldValue);
                          				   massUpdateObj[$scope.massUpdateFieldsSelected[j]] = d.getTime();
                                     	   if(String(massUpdateObj[$scope.massUpdateFieldsSelected[j]]).indexOf('NaN') != -1) {
                                               massUpdateObj[$scope.massUpdateFieldsSelected[j]]=null;
                                            }
                            			break;
                        case 'BOOLEAN' :massUpdateObj[$scope.massUpdateFieldsSelected[j]] = fieldValue;
                            			if(massUpdateObj[$scope.massUpdateFieldsSelected[j]] == null || massUpdateObj[$scope.massUpdateFieldsSelected[j]] == "") {
                               				 massUpdateObj[$scope.massUpdateFieldsSelected[j]] = false;
                            			} 
                            			break;
                        default :  massUpdateObj[$scope.massUpdateFieldsSelected[j]] = fieldValue;
                            
                            
                            if(massUpdateObj[$scope.massUpdateFieldsSelected[j]]=="") {
                                
                                massUpdateObj[$scope.massUpdateFieldsSelected[j]]=null;
                               
                            }
                            
                            		break;
                            
                    }
            	}
            
       $scope.recordsToBeMassUpdated = $scope.selectedMassUpdateRecords.map(function(record){
           var tempRef = angular.copy(massUpdateObj);
            	tempRef['id'] = record;
            	return tempRef;
            	
            
            }); 
            
            
            
             console.log('massupdate' ,$scope.recordsToBeMassUpdated);
           
           
              $scope.saveChanges('massupdate');
            
        };
        
     
        
        //disables Ok on mass update field selection if no checkbox is selected
        $scope.isUpdateEnabled = function() {
            
            var massUpdateChkBoxes = angular.element(document.querySelector('.showFieldsToUpdate')).find('input:checkbox');
           $scope.isDisabled = true;
            
            for(var i = 0;i < massUpdateChkBoxes.length;i++) {
                //console.log(document.querySelector('#' + angular.element(massUpdateChkBoxes[i]).attr('id')).checked);
                if(document.querySelector('#' + angular.element(massUpdateChkBoxes[i]).attr('id')).checked) {
                   $scope.isDisabled = false;
                    break;
                }
                
            }
            
        };
        
        $scope.loadTreeStructure = function() {
            
            // console.log('load tree structure ' + Object.keys($scope.expansionTree).length);
            // console.log('load tree structure ' , $scope.expansionTree);
            // console.log('keys ' + Object.keys( $scope.searchOptions) , $scope.searchOptions);
            for(var i = 0;i < $scope.searchOptions.length;i++) {
               var currentKey = $scope.objectMetadata[$scope.searchOptions[i].ObjectAPIName__c.toLowerCase()].keyPrefix_c;
               // console.log('current key'+ currentKey);
                
                
                angular.forEach(Object.keys($scope.expansionTree),function(key) {
                    if(key.substring(0,3) == currentKey) {
                        //   console.log('calling show children from laod tree structure' ,key , ($scope.expansionTree[key]) );
                        
                        $scope.showChildren($scope.objectChildIdentifier[key.substring(0,3)],key,!($scope.expansionTree[key]),false,null,false);
                    }
                });
                
                
            }
            
            // console.log('load tree structure ' , $scope.expansionTree);
        
        };
         $scope.getModifiedNewlyInsertedRecords = function() {
             var insertedModifiedRecords = angular.element(document.querySelector('#rootDiv')).find('.newrecordtableInsertedFix');
             console.log('insertedModifiedRecords ' + insertedModifiedRecords.length); 
             for(var i = 0;i < insertedModifiedRecords.length;i++) {
                  var assignedId =  angular.element(insertedModifiedRecords[i]).attr('id');
                 var obj = {};
                 var innerObj = {};
                  $scope.findColValues(insertedModifiedRecords[i],false,obj,innerObj,'Fix');
                 console.log('assigned id' + assignedId);
                  var flowTable = angular.element(document.querySelector('.' + assignedId + 'Flow'));
                console.log('flowTable' , flowTable.length , flowTable);
                $scope.findColValues(flowTable[0],false,obj,innerObj,'Flow');
                  $scope.recordsUpdateList.push(obj);
             	}
         }
       
        $scope.getListOfRecordsToInsert = function() { 
             $scope.newRecordsList = [];
            var newRecords = angular.element(document.querySelector('#rootDiv')).find('.newrecordtableFix');
            console.log('new record table ' + newRecords.length);
            
            for(var i = 0;i < newRecords.length;i++) {
                //  console.log('id of table' + angular.element(newRecords[i]).attr('id'));
                var tableId = '#' + angular.element(newRecords[i]).attr('id');
                var assignedId =  angular.element(newRecords[i]).attr('id');
                
                if(angular.element(document.querySelector(tableId)).find('.newrecordchk:checkbox:checked').length == 0) {
                    continue;   
                }
                angular.element(document.querySelector('#chk' + tableId.substring(1))).attr('checked',false);
                angular.element(document.querySelector('#chk' + tableId.substring(1))).attr('id','chksno'+(i));
                angular.element(document.querySelector('#errFix' + tableId.substring(1))).attr('id','errorsno'+ (i) + 'Fix');
                angular.element(document.querySelector('#err' + tableId.substring(1))).attr('id','errorsno'+ (i));
                
                var obj = {};
                var innerObj = {};
               
               $scope.findColValues(newRecords[i],true,obj,innerObj,'Fix');
               var flowTable = angular.element(document.querySelector('.' + assignedId + 'Flow'));
                console.log('flowTable' , flowTable.length , flowTable);
                $scope.findColValues(flowTable[0],true,obj,innerObj,'Flow');
                console.log('obj formed' , obj); 
                $scope.newRecordsList.push(obj)
                angular.element(document.querySelector('.' + assignedId + 'Fix')).attr('id','sno'+ (i));
                angular.element(document.querySelector('.' + assignedId + 'Flow')).attr('id','sno'+ (i));
                angular.element(document.querySelector('.' + assignedId + 'Fix')).addClass('sno'+ (i) + 'Fix').removeClass(assignedId + 'Fix');
                angular.element(document.querySelector('.' + assignedId + 'Flow')).addClass('sno'+ (i) + 'Flow').removeClass(assignedId + 'Flow');
                console.log('changed id' +  angular.element(document.querySelector('.' + assignedId + 'Fix')).attr('id'));
            }
            // console.log('new records list '+ $scope.newRecordsList);
            
            
        }; 
         //finds the values in the column for the given row to perform insert
         $scope.findColValues = function(newRecordId,isInsert,newRecordObject,innerObj,tableType) {
             
             
             var tableId = '#' + angular.element(newRecordId).attr('id');
             var assignedId = angular.element(newRecordId).attr('id');
             var rowsOfTable = angular.element(document.querySelector('.' + assignedId + tableType)).find("span[cls='insertRec']");
             //  console.log('total rows ' + rowsOfTable.length); 
           
             innerObj['type'] = angular.element(newRecordId).attr('object');
             newRecordObject['attributes'] = innerObj;
             
             if(angular.element(newRecordId).attr('parentId') != 'root') {
                 newRecordObject[angular.element(newRecordId).attr('parentRelation')] = angular.element(newRecordId).attr('parentId');
             }
             
             
             for(var j = 0;j < rowsOfTable.length;j++) {
                 var dataType = angular.element(rowsOfTable[j]).attr('dataType');
                 var fieldAPI = angular.element(rowsOfTable[j]).attr('id');
                 var fieldValue = angular.element(rowsOfTable[j]).text();
                 if(fieldValue == "") {
                 	continue;    
                 }
                 //  console.log('datatype ' + angular.element(rowsOfTable[j]).attr('dataType'));
                 //  console.log('text present in span ' + angular.element(rowsOfTable[j]).text());
                 switch(dataType) {
                     case 'DATE' :       fieldValue = formatDate(new Date(fieldValue));
                         if(fieldValue.indexOf('NaN') != -1) {
                             fieldValue = null;
                         }   
                         
                         break;
                     case 'DATETIME' :     var d = new Date(fieldValue);
                         fieldValue = '' + d.getTime();
                         //   console.log(fieldValue);
                         if(fieldValue.indexOf('NaN') != -1) {
                             fieldValue = null;
                         }   
                         break;
                     case 'BOOLEAN' :    if(fieldValue == null || fieldValue == "") {
                         fieldValue = false;
                     }
                         break;
                     default :           if(fieldValue == "") {
                         fieldValue = null;
                     }
                         break;
                 }
                 newRecordObject[fieldAPI] = fieldValue;
                 
             }
             //  console.log('new record obj ' , newRecordObject);
             if(isInsert) {
                 //    console.log('insert obj' ,newRecordObject);
                 //  $scope.newRecordsList.push(newRecordObject);
             }
             else {
                 newRecordObject['id'] = tableId.substring(1);
                 //  console.log('mass update obj' ,newRecordObject);
                 //$scope.recordsUpdateList.push(newRecordObject);
             }
             
         };
         //for the headers present for the individual records
        $scope.headerCheckBoxChanged = function(parentName,parentObjId) {
            
            var chkBoxVal = document.querySelector('#head' + parentObjId).checked;
            if(chkBoxVal) {
                $scope.headerParent = parentName;    
            }
            else {
                $scope.headerParent = '';    
            }
            //   console.log(chkBoxVal);
            var chkBoxElements = angular.element(document.querySelector('#rootDiv')).find('.headChk');
            //  console.log('length of header checkbox elements ' + chkBoxElements.length);
            //  console.log('header checkbox changed' + parentName + '---' + parentObjId);
            
            for(var i = 0;i<chkBoxElements.length;i++) {
                
                if((angular.element(chkBoxElements[i]).attr('object') == parentName) &&
                   (angular.element(chkBoxElements[i]).attr('parentId') == parentObjId)) {
                    
                    if(angular.element(chkBoxElements[i]).hasClass('chk')) {
                        $scope.chkBoxTrackingMap[angular.element(chkBoxElements[i]).attr('id').substring(3)] = chkBoxVal;
                        document.querySelector('#' + angular.element(chkBoxElements[i]).attr('id')).checked = chkBoxVal;
                        
                    }
                } 
                
            }
           
            $scope.checkBoxChanged(null);
        };
         //for newly added headers at the top
        $scope.headerChkChanged = function(objectName) {
           
              var chkBoxVal = document.querySelector('#head' + objectName.toLowerCase()).checked;
            if(chkBoxVal) {
                $scope.headerParent = objectName;    
            }
            else {
                $scope.headerParent = '';    
            }
            /* if(chkBoxVal) {
                for(var i=0;i<$scope.searchOptions.length;i++) {
                    var obj = $scope.searchOptions[i].ObjectAPIName__c.toLowerCase();
                    if(obj != objectName.toLowerCase()) {
                        document.querySelector('#head' + obj).checked = !chkBoxVal;
                    }
                }
            }*/
        	
            var chkBoxElements = angular.element(document.querySelector('#rootDiv')).find('.headChk');
            // console.log('new chk length of header checkbox elements ' + chkBoxElements.length);
            //  console.log('new chk header checkbox changed' + objectName);
          
            for(var i = 0;i<chkBoxElements.length;i++) {
                
                if((angular.element(chkBoxElements[i]).attr('object').toLowerCase() == objectName.toLowerCase())) {
                    
                    if(angular.element(chkBoxElements[i]).hasClass('chk')) {
                        $scope.chkBoxTrackingMap[angular.element(chkBoxElements[i]).attr('id').substring(3)] = chkBoxVal;
                        document.querySelector('#' + angular.element(chkBoxElements[i]).attr('id')).checked = chkBoxVal;
                        
                    }
                } 
                
            }
            // console.log('working with checkbox tracking map' ,  $scope.chkBoxTrackingMap );  
            $scope.checkBoxChanged(null);
            if(chkBoxVal) {
             $scope.parentChecked = objectName.toLowerCase(); 
		       }
            else {
                $scope.parentChecked ='';
                }
        	
        };
        $scope.toggleExtraOptions = function() {
        
            angular.element(document.querySelector('#extraOptions')).toggleClass('ng-hide');
            $scope.moreMarginForView = true;
            if(angular.element(document.querySelector('#extraOptions')).hasClass('ng-hide')) {
			 $scope.moreMarginForView = false;
            }
        	   
           
        };
        
        $scope.onExpandClicked = function() {
            //  console.log('expansion tree before' , $scope.expansionTree);
                angular.element(document.querySelector('.waitingSearchDiv')).removeClass('ng-hide');
                $scope.expandAll($scope.data);
            //console.log('expansion tree after' , $scope.expansionTree);
            $timeout(function(){
            	angular.element(document.querySelector('.waitingSearchDiv')).addClass('ng-hide');
            },10);
                
                
                
            };
         $scope.expandAll = function(processingObject) {
             console.log('display count' + $scope.displayLevelCnt + 'level selected' + $scope.levelSelected);
             if($scope.expandToLevelCalled && $scope.displayLevelCnt >= $scope.levelSelected) {
               console.log('inside if od expandAll'); 
                 $scope.displayLevelCnt = 1; 
                 
                return;
             }
             
                angular.forEach(processingObject.parentChildRecMap,function(value,key) { 
                    
                    if(value.isChildPresent) {
                        $scope.showChildren(processingObject.childObjectName,key,false,true,value.parentRec,false);
                    }
                    
                    
                });
                
                
            };
        $scope.collapseAll = function(processingObject) {
            //  console.log('collapse all clicked');
             angular.forEach(processingObject.parentChildRecMap,function(value,key) { 
           
                 if(value.isChildPresent) {
                     var temp =value.parentRec;
                     //    console.log(temp);
                     if(temp.hasOwnProperty('children')) {
                         //    console.log(key);
                         $scope.hideChildDiv('child'+key,key);
                         $scope.collapseAll(value.parentRec['children']);
                     }
                 }
            
            
            });
            
            
        };
        
        $scope.sortAscending = function(fieldAPIName,parentId) {
        
            //console.log('ascending ' + fieldAPIName + '---' + parentId );
           
            $scope.customSort(fieldAPIName,false,(parentId=='root'),parentId);
            
        };
         $scope.sortDescending = function(fieldAPIName,parentId) {
        
             //console.log('descending' + fieldAPIName + '----' + parentId);
             $scope.customSort(fieldAPIName,true,(parentId=='root'),parentId);
        };
        
        $scope.customSort = function(fieldAPIName,reverse,isRoot,recId) {
            if(isRoot) {
                // console.log('root element custom sort');    
                $scope.recordMap = $scope.data.parentChildRecMap;
                
            }
            else {
                 $scope.getListOfPositionsToTraverse(recId);
                 $scope.addChildToParent($scope.data.parentChildRecMap[$scope.traversingList[($scope.traversingList.length-1)]].parentRec);
                 $scope.recordMap = $scope.directParent['children'].parentChildRecMap;
            }
           
           
            var recordArr = [];
            var isChildPresentObj = {};
            var tempParentChildRecMap = {};
            angular.forEach($scope.recordMap,function(value,key) { 
            
            recordArr.push(value.parentRec); 
            isChildPresentObj[key] = value.isChildPresent;
            
            });
            /* console.log('before sorting');
            angular.forEach(recordArr,function(value) { 
            
                console.log(value);
            
            
            });*/

            
            if(!reverse) {
                recordArr.sort(function (a, b) {
                    //     console.log('filter sort ' + a[fieldAPIName] + '---' + b[fieldAPIName]);
                    return (angular.lowercase(a[fieldAPIName]) > angular.lowercase(b[fieldAPIName]) ? 1 : (angular.lowercase(a[fieldAPIName]) < angular.lowercase(b[fieldAPIName]))? -1:0);
                });
             }
            else if(reverse) {
                
                recordArr.sort(function (a, b) {
                    //   console.log('filter sort ' + a[fieldAPIName] + '---' + b[fieldAPIName]);
                    return (angular.lowercase(a[fieldAPIName]) > angular.lowercase(b[fieldAPIName]) ? -1 : (angular.lowercase(a[fieldAPIName]) < angular.lowercase(b[fieldAPIName]))? 1:0);
                });
            }
            // console.log('after sorting');
            angular.forEach(recordArr,function(value) { 
            
                //  console.log(value[fieldAPIName]);
                var innerObj = {};
                innerObj.isChildPresent = isChildPresentObj[value['Id']];
                innerObj.parentRec = value;
                tempParentChildRecMap[value['Id']] = innerObj;
            
            
            });
            if(isRoot) {
                $scope.data.parentChildRecMap = tempParentChildRecMap;
            }
            else {
                $scope.directParent['children'].parentChildRecMap = tempParentChildRecMap;    
            }
        };
         //converts the html text if present to normal text
         $scope.renderHTML = function(value) {
            
             //console.log('value' + value);
           if(typeof value == "undefined") {
           value='';    
           }
           else {
               value = '<span>' + value + '</span>';     
           }
            return $sce.trustAsHtml(value);
        };
        
        $scope.clearAllUnsavedRows = function() {
          
          var unsavedRowsList = angular.element(document.querySelector('#rootDiv')).find('.newrecordDiv');
          
             for(var i = 0;i < unsavedRowsList.length;i++) {
                angular.element(unsavedRowsList[i]).remove();
            }
        };
        
        $scope.pageChanged = function() {
            // $scope.alertClosed();
            // console.log('order check pageChanged'  );
             $scope.toggleExpandCollapseAll(); 
            $scope.isAlertVisible = true;
             angular.element(document.querySelector('.close')).removeClass('ng-hide');
            if(!$scope.isLoadRequired) {
                //  $scope.sequenceID = 0;
                $scope.clearAllUnsavedRows();
                //$scope.loadInitialRecords();
                $scope.decideDataList();
                
            }
            else {
                 $scope.fetchAllRecords();
            }
            $scope.clearPreviousCheckboxes();
        };
         
         //decides whether to send all data or filtered data
         $scope.decideDataList = function() {
             //   console.log('callinf getRecords for page from vdecideDataList');
             if($scope.searchValue.length >= 3) {
                 //console.log('get records for page filtered data list' , $scope.filteredDataList);
                    $scope.getRecordsForPage($scope.filteredDataList);
                }
                else if($scope.dataList.parentChildRecMap != null) {
                    //  console.log('get records for page data list');
                    $scope.getRecordsForPage($scope.dataList.parentChildRecMap);
                }
         
         
         };
        
        $scope.deleteRecords = function() {
           
            //  console.log('records to delete'  + $scope.selectedMassUpdateRecords);
            if($scope.selectedMassUpdateRecords.length == 0) {
                $scope.alertCls = "alert alert-info";
                $scope.isAlertVisible = true; 
                 angular.element(document.querySelector('.close')).removeClass('ng-hide');
                 $scope.changeAlertVisibilty = false;
            
                $scope.alertMessage =  '<strong><i class="fa fa-icon-info-sign"/>&nbsp;&nbsp;Info!!</strong>No records are selected to delete';
                
            }
            else {
                 angular.element(document.querySelector('.waitingSearchDiv')).removeClass('ng-hide');
            $scope.disableForDelete = true;
                
             deleteRecordsService($scope.selectedMassUpdateRecords)
                .then(function(result) {
                    $scope.disableForDelete = false;
                    //   console.log('result ' , result);
                    //  console.log('result length' + Object.keys(result).length);
                    if( Object.keys(result).length == 0) {
                       
                        //   console.log('records update' + result);
                        //  alert('records deleted successfully');
                        angular.element(document.querySelector('#alertMsg')).removeClass('ng-hide');
                         $scope.alertCls = "alert alert-success";
                         $scope.changeAlertVisibilty = false;
                          $scope.isAlertVisible = true;      
                        $scope.alertMessage =  '<strong><i class="fa fa-icon-ok-sign"/>&nbsp;&nbsp; Success!! </strong>Records deleted successfully';
                       
                        
                        if($scope.levelOneIdList.length > 0  && $scope.selectedMassUpdateRecords.length > 0) {
                            //  console.log('level one id delete before' + $scope.levelOneIdList);
                            if($scope.levelOneIdList[0].substring(0,3) == $scope.selectedMassUpdateRecords[0].substring(0,3)) {
                                angular.forEach($scope.selectedMassUpdateRecords,function(recId){
                                	$scope.levelOneIdList.splice($scope.levelOneIdList.indexOf(recId),1);
                                    //    console.log('level one id delete after' + $scope.levelOneIdList);
                                });
                             
                            }
                        }
                         $scope.clearPreviousCheckboxes();   
                       $scope.fetchAllRecords();
                        //$route.reload();
                        
                         
                    }
                    else {
                         
                        // console.log('mass update result is' + result);
                        //add error messages to the records failed
                        angular.forEach(Object.keys(result),function(key) { 
                           
                        	
                           
                             var errHTML = '<table><tr><th><b class="fa fa-info-circle ng-hide"/>&nbsp;&nbsp;</th><th>Errors</th></tr>' 
                                            + '<tr><td></td><td><ul>';
                            //  console.log('all errors' + result[key]);
                            angular.forEach(result[key],function(err) { 
                                errHTML += '<li style="cursor:default !important">'+ err + '</li>'; 
                            
                            });
                            errHTML += '</ul></td></tr></table>';
                            
                                 
                            
                            angular.element(document.querySelector('#error' + key)).removeClass('ng-hide');
                                angular.element(document.querySelector('#error' + key)).html(errHTML);
                                 angular.element(document.querySelector('#error' + key + 'Fix')).removeClass('ng-hide');
                                var errorHeight =   angular.element(document.querySelector('#error' + key)).css('height');
                                console.log('errorHeight' + errorHeight);
                                angular.element(document.querySelector('#error' + key + 'Fix')).css('height',errorHeight);
                            
                            //console.log('error messages' + key + result[key]);
                            
                           
                            
                            
                        });
                        
                         if($scope.levelOneIdList.length > 0  && $scope.selectedMassUpdateRecords.length > 0) {
                                if($scope.levelOneIdList[0].substring(0,3) == $scope.selectedMassUpdateRecords[0].substring(0,3)) {
                                    angular.forEach($scope.selectedMassUpdateRecords,function(recId) {
                                        if(Object.keys(result).indexOf(key) == -1) {
                                            $scope.levelOneIdList.splice($scope.levelOneIdList.indexOf(recId),1);
                                        }
                                    });
                                    
                                }
                            }
                       
                        
                        //alert('Records failed to delete');
                        angular.element(document.querySelector('#alertMsg')).removeClass('ng-hide');
                       $scope.alertCls = "alert alert-danger";
                         $scope.isAlertVisible = true;     
                         angular.element(document.querySelector('.close')).removeClass('ng-hide');
                        $scope.alertMessage =  '<strong><i class="fa fa-icon-warning-sign"/>&nbsp;&nbsp; Error!! </strong>Some records updated failed to delete';
                        
                        }
                    
                    angular.element(document.querySelector('.waitingSearchDiv')).addClass('ng-hide');
                       
                       
                       
                  
                });
            
            }
            
        };
        
        $scope.changeRecordsPerPage = function() {
            
            if($scope.userRecCnt > 0) {
                 $scope.noOfRecordsPerPage = $scope.userRecCnt;
               
            }
            else {
                $scope.noOfRecordsPerPage = $scope.fixedDisplayCnt;  
                $scope.userRecCnt = $scope.fixedDisplayCnt;
            }
            $scope.decideDataList();
             $scope.toggleExpandCollapseAll(); 
			
            $timeout(function() {
                setDimensions();
             
             });
            //  $scope.chkBoxTrackingMap['headroot'] = false;
            $scope.clearPreviousCheckboxes();
            
        }
       
       
       $scope.filterModified = function() {
           // console.log('filter modified');
          //  $scope.alertClosed();
          $scope.unhighlightText();
          $scope.highlightRowsList = [];
          $scope.recordsToShow = [];
          $scope.clearPreviousCheckboxes();
         
          angular.element(document.querySelector('#searchEntry')).focus();
          // $scope.removeCssFromRows();
           
          angular.element(document.querySelector('#rootDiv')).removeClass('ng-hide');
            angular.element(document.querySelector('#pagination')).removeClass('ng-hide');
           angular.element(document.querySelector('#alertMsgSearch')).addClass('ng-hide');
          var msg = 'No records were found for the given search';
          if(!angular.isUndefined($scope.alertMessage)) {
              if($scope.alertMessage.toLowerCase().indexOf(msg.toLowerCase()) != -1) {
                  
                  $scope.changeAlertVisibilty = true;
                  $scope.isAlertVisible = false; 
                 
              }
          }
           
      if($scope.searchValue.length >= 3) {
                   
          angular.element(document.querySelector('#loadingSpinner')).removeClass('ng-hide');
          

          
          // console.log('search' + $scope.selectedObject + '{!$CurrentPage.parameters.object}');
          var objectParameter = '{!$CurrentPage.parameters.object}';
          if($scope.selectedObject.toLowerCase() == objectParameter.toLowerCase())
              {
                  //	console.log('search object is same');  
                  //$scope.highlightText();
                $scope.getFilteredResultsForObject($scope.selectedObject);
              }
          else {
             	 
                  $scope.fetchSearchResultsFromServer();
                  
              
          }
          
          
          
       }
      else {
          angular.element(document.querySelector('#loadingSpinner')).addClass('ng-hide');
          
          angular.element(document.querySelector('#rootDiv')).removeClass('ng-hide');
          angular.element(document.querySelector('#pagination')).removeClass('ng-hide');
          $scope.previousSelection = '';
          //console.log('calling getrecords for page from filtermodified');
          $scope.getRecordsForPage($scope.dataList.parentChildRecMap);
         
      }
      
      };
      
         //searches level one records
       $scope.getFilteredResultsForObject = function(searchObj) {
      		
          $scope.filteredDataList = {};
         
          angular.forEach($scope.dataList.parentChildRecMap,function(value,key) {
              var record = value.parentRec;
           
              $scope.filterSuccess = false;   
              var isFiltered = $scope.searchDeeperLevelsOfRecord(record); 
              if(isFiltered) {
                  $scope.filteredDataList[key] = $scope.dataList['parentChildRecMap'][key];
                  $scope.highlightRowsList.push(record['Id']);
                  $scope.recordsToShow.push(record['Id']);
                  
                  
              }
                  
             
                          
              
          });
          //  console.log('filteredList' , $scope.filteredDataList);
          if(Object.keys($scope.filteredDataList).length > 0) {
              
              angular.element(document.querySelector('#rootDiv')).removeClass('ng-hide');
              angular.element(document.querySelector('#pagination')).removeClass('ng-hide');
              angular.element(document.querySelector('#alertMsgSearch')).addClass('ng-hide');
              /* $scope.changeAlertVisibilty = true;
              $scope.isAlertVisible = false; */
              //   console.log('calling getrecordsfor page from getfilteredresults from object');
              $scope.getRecordsForPage($scope.filteredDataList);
              // $scope.expandAll
                $scope.updateRecordsToShow();
              
          }
          else {
              console.log('in else');
              angular.element(document.querySelector('#rootDiv')).addClass('ng-hide');
              angular.element(document.querySelector('#pagination')).addClass('ng-hide');
              angular.element(document.querySelector('#alertMsgSearch')).removeClass('ng-hide');
              $scope.alertCls = "alert alert-info";
              $scope.isAlertVisible = true;      
              $scope.changeAlertVisibilty = false;
              $scope.alertMessage =  '<strong><i class="fa fa-icon-info-sign"/>&nbsp;&nbsp;Info!!</strong>No records were found for the given search ';         
          }
          
          
         };
         
        $scope.fetchSearchResultsFromServer = function() {
            //$scope.searchResults = [];
            angular.element(document.querySelector('.waitingSearchDiv')).removeClass('ng-hide');
            // console.log('fetchSearchResultsFromServer if condition checks'+ ($scope.searchValue.length >= 3),($scope.previousSelection != $scope.selectedObject));
            if((String('{!$CurrentPage.parameters.object}').toLowerCase() != $scope.selectedObject.toLowerCase())
               	&& ((($scope.searchValue.length >= 3)) 
                && ($scope.previousSelection != $scope.selectedObject))) {
            
                  console.log('fetchSearchResultsFromServer' + 'inside if');
                
                //without calling server
                 $scope.searchResultsForOtherLevels = getRecordsToBeSearched($scope.objectMetadata[$scope.selectedObject.toLowerCase()].keyPrefix_c, $scope.allRecordsResult);
                console.log('to search' +   $scope.searchResultsForOtherLevels);
                 $scope.filterSearchForOtherLevels();
                angular.element(document.querySelector('.waitingSearchDiv')).addClass('ng-hide');
                
                /*  searchRecordsService($scope.searchValue,Object.keys($scope.dataList.parentChildRecMap),$scope.selectedObject,'{!$CurrentPage.parameters.treeId}')
                .then(function(result) {
                    if(result !='') {
                        $scope.previousSelection = $scope.selectedObject;
                        $scope.searchResultsForOtherLevels = JSON.parse(result);
                        //  console.log('search result' , JSON.parse(result));                        
                        $scope.findHierarchyOfSearchObjects(JSON.parse(result));
                            
                       
                    }
                    else {
                        $scope.searchResultsForOtherLevels=[];
                        
                        angular.element(document.querySelector('#rootDiv')).addClass('ng-hide');   
                        angular.element(document.querySelector('#pagination')).addClass('ng-hide');
                        $scope.alertCls = "alert alert-info";
                        $scope.isAlertVisible = true;
                        angular.element(document.querySelector('.close')).removeClass('ng-hide');
                        $scope.alertMessage =  '<strong><i class="fa fa-icon-info-sign"/>&nbsp;&nbsp;Info!!</strong>No records were found for the given search ';  
                        
                    }
                      angular.element(document.querySelector('.waitingSearchDiv')).addClass('ng-hide');
                });*/
        }
          else if((String('{!$CurrentPage.parameters.object}').toLowerCase() != $scope.selectedObject.toLowerCase())){
              //console.log('fetchSearchResultsFromServer' + 'inside else');
            	  $scope.filterSearchForOtherLevels();
          
          }
        
        };
         //for level > 1
         $scope.filterSearchForOtherLevels = function() {
              $scope.filteredOtherLevelResults = [];
               console.log('client length not after filtering' , $scope.searchResultsForOtherLevels);
              if($scope.searchResultsForOtherLevels.length > 0) { 
                  // console.log('filteredOtherLevelResults inside if');
                  
                  for(var i = 0;i < $scope.searchResultsForOtherLevels.length; i++) {
                      
                      $scope.filterSuccess = false;   
                      var isFiltered = $scope.searchDeeperLevelsOfRecord($scope.searchResultsForOtherLevels[i]); 
                      //console.log('isFiltered' + isFiltered   );
                      if(isFiltered ) { 
                          $scope.filteredOtherLevelResults.push($scope.searchResultsForOtherLevels[i]);
                          // console.log('filter' + $scope.filteredOtherLevelResults);
                      }
                      
                  }
                                         
              }
              if($scope.filteredOtherLevelResults.length == 0) {
                  angular.element(document.querySelector('#rootDiv')).addClass('ng-hide');   
                  angular.element(document.querySelector('#pagination')).addClass('ng-hide');
                  angular.element(document.querySelector('#alertMsgSearch')).removeClass('ng-hide');
                  $scope.alertCls = "alert alert-info";
                  $scope.changeAlertVisibilty = false;
                  $scope.isAlertVisible = true;     
                  angular.element(document.querySelector('.close')).removeClass('ng-hide');
                  $scope.alertMessage =  '<strong><i class="fa fa-icon-info-sign"/>&nbsp;&nbsp;Info!!</strong>No records were found for the given search '; 
              	    
              }
              //console.log('client length after filtering' +  filteredOtherLevelResults.length);
             else {
                 $scope.findHierarchyOfSearchObjects($scope.filteredOtherLevelResults);
             }
          };
          
         $scope.searchDeeperLevelsOfRecord = function(referenceObj) {
            var properties = Object.keys(referenceObj);
             // console.log('properties' + properties)
             for(var j = 0; j < properties.length; j++) {
                 	
                 if(properties[j] != 'attributes' && properties[j] != 'children' && properties[j] != 'isExpanded' ){
                      var val = referenceObj[properties[j]];
                     console.log('properties' + properties[j]);
                     // console.log('value' + val);
                     if(angular.isObject(val)) {
                       $scope.searchDeeperLevelsOfRecord(val);
                     }
                     else {
                          if(val != null && val != "" && (String(val).toLowerCase().indexOf($scope.searchValue.toLowerCase()))!= -1) {
                              //console.log('inside else 2453');
                              $scope.changeAlertVisibilty = true;
                              $scope.isAlertVisible = false; 
                              $scope.filterSuccess = true;
                              break;
                          }
                                
                     }
                     
                 }
           }
           return $scope.filterSuccess ;
             
         };
        
         //finds the record ids to be expanded
         $scope.findHierarchyOfSearchObjects = function(searchResults) {
            $scope.searchMap = [];
            // console.log('search results ' , searchResults[0]);
            //  console.log('search results ' + searchResults.length);
            for(var i = 0;i < searchResults.length;i++) {
                var allLevelIds = searchResults[i]['Id'];
                console.log('allLevelIds' + allLevelIds );
                //console.log('level id rec' + $scope.traverseNestedObj(searchResults[i],allLevelIds));
                //console.log('search map values'  , searchResults[i]);
                $scope.searchMap.push($scope.traverseNestedObj(searchResults[i],allLevelIds));
                //console.log('search map after traversing' + $scope.searchMap );
            }
            //console.log('search map length' , $scope.searchMap);
            $scope.expandSearchResult();
          
      };
         $scope.expandSearchResult = function() {
             
             if($scope.searchMap.length > 0) {
                 var arr = $scope.searchMap[0].split(',');
                 var callRequired = false;
                 for(var i=0;i<arr.length-1;i++) {
                     if(!$scope.objectChildIdentifier.hasOwnProperty(arr[i].substring(0,3))) {
                         callRequired = true;
                         break;
                     }
                 }
                 if(callRequired) {
                     console.log(arr);
                     getObjectNameService(arr)
                     .then(function(result) {
                         // console.log('find objects' + result);
                         var resultArr  = result.split(',');
                         if(resultArr.length > 1) {
                             for(var i = 0;i < arr.length-1;i++) {
                                 $scope.objectChildIdentifier[arr[i].substring(0,3)] = resultArr[i+1];
                             }
                             // console.log('object identifer map ' , $scope.objectChildIdentifier);
                         }
                         
                         $scope.callShowChildrenForSearchResults();
                         
                     });
                     
                     
                 }
                 else {
                     $scope.callShowChildrenForSearchResults();
                 }
                 
             }
             
             
             
              
              
           
          };
         $scope.callShowChildrenForSearchResults = function() {
             $scope.filteredDataList = {};
             $scope.highlightRowsList = [];
             $scope.recordsToShow = [];
             $scope.showChildrenCnt = 0;
             $scope.showChildrenMaxVal = ($scope.searchMap.length) * ($scope.searchMap[0].split(',').length - 1) ;
             
             for(var i = 0;i< $scope.searchMap.length;i++) {
                 var idArr = $scope.searchMap[i].split(',');
                 //      console.log('idArr' + idArr);
                 
                 var j = 0;
                 for(j = 0;j <idArr.length-1;j++) {
                     if($scope.recordsToShow.indexOf(idArr[j]) == -1) {
                         $scope.recordsToShow.push(idArr[j]);
                     }
                     if(j == 0) {
                         // console.log('row 2527');
                         $scope.filteredDataList[idArr[j]] = $scope.dataList.parentChildRecMap[idArr[j]];
                         $scope.data.parentChildRecMap[idArr[j]] = $scope.dataList.parentChildRecMap[idArr[j]];
                     }
                     //console.log('fil tered list' , $scope.filteredDataList);
                     $scope.showChildren($scope.objectChildIdentifier[idArr[j].substring(0,3)],idArr[j],false,false,null,true);
                     
                 }
                 // $scope.totalLevelOneRecords = Object.keys($scope.filteredDataList).length;
                 $scope.highlightRowsList.push(idArr[j]);
                 if($scope.recordsToShow.indexOf(idArr[j]) == -1) {
                     $scope.recordsToShow.push(idArr[j]);
                 }
                 // $scope.getRecordsForPage($scope.filteredDataList);
                 console.log('fil tered list' , Object.keys($scope.filteredDataList).length);
                 $scope.updateRecordsToShow();
             }
             
             
         
         };
         //searches the id by going deeper into each level
         $scope.traverseNestedObj = function(nestedObj,levelIds) {
             if(nestedObj == null || nestedObj =='undefined')
                 return;
             console.log('level id' + levelIds );
             var keys = Object.keys(nestedObj);
             for( var j = 0;j<Object.keys(nestedObj).length;j++) {
                 //  console.log('type of' + nestedObj[keys[j]] +angular.isObject(nestedObj[keys[j]]));
                 
                 if(typeof nestedObj[keys[j]] === 'object' && keys[j] !='attributes' 
                    &&  nestedObj[keys[j]].hasOwnProperty('Id') && $scope.keyPrefixArr.indexOf(nestedObj[keys[j]]['Id'].substring(0,3)) != -1) {
                    
                    
                         levelIds = nestedObj[keys[j]]['Id'] + ',' + levelIds;
                    
                    levelIds = $scope.traverseNestedObj(nestedObj[keys[j]],levelIds);
                    
                     return levelIds;
                 }
                 
                 
             }
             //   console.log('level id' + levelIds);
           
         	return levelIds;
         };
         
         $scope.highlightText = function() {
				$scope.unhighlightText();          
             if($scope.searchValue.length >= 3) {
                 if (window.find && window.getSelection) {
                     document.designMode = "on";
                     var sel = window.getSelection();
                     sel.collapse(document.body, 0);
                    
                     
                    
                     while (window.find($scope.searchValue)) {
                         
                         
                         document.execCommand("HiliteColor", true, "#B1EDF5");
                          sel.collapseToEnd();
                         
                     }
                     
                     document.designMode = "off";
                 } else if (document.body.createTextRange) {
                     var textRange = document.body.createTextRange();
                   
                     while (textRange.findText($scope.searchValue)) {
                         
                         textRange.execCommand("BackColor", true, "#B1EDF5");
                         textRange.collapse(false);
                     }
                 }
                
                     angular.element(document.querySelector('#searchEntry')).focus();
                 	
                 }
              
              $scope.unhighlightHeader();
             
         };
         $scope.unhighlightText = function() {
         	 var spanElements = angular.element(document.querySelector('.bdy')).find('span');
             //  console.log('span elements length' + spanElements.length);
                    for(var i = 0;i < spanElements.length;i++) {
                        angular.element(spanElements[i]).css('background-color','transparent');
                    }
             
         }
       	 $scope.unhighlightHeader = function() {
           
              var spanElements = angular.element(document.querySelector('#allHeaders')).find('span');
             //  console.log('span elements length' + spanElements.length);
                    for(var i = 0;i < spanElements.length;i++) {
                        angular.element(spanElements[i]).css('background-color','transparent');
                    }
         
         };
        
         $scope.onClearAllChanges = function() {
             $scope.fetchAllRecords();
             $route.reload();
             $scope.isAlertVisible = false;
             $scope.changeAlertVisibilty = true;
         };
         $scope.getFormattedDate = function(value,view) {
             if(view == 'hour') {
                 //	console.log('datetime value sent is' + value);    
             }
             // console.log('inside getFormattedDate' + value,view);
            if(value == "" || value == null) 
                return '';
             //  console.log('new directive view mode'  + value);
		  var dateVal = new Date(value);
             // console.log('inside new directive view mode' + dateVal);
		  if(dateVal == 'Invalid Date') {
			  dateVal = '';
		  }
		  else {
			  var dateFormat = '';
              //  console.log('view attribute' + view + $scope.timezone);
			  if(view != "day") {
                  var options = { timeZone: $scope.timezone,hour: '2-digit', minute: '2-digit' };
				dateFormat = dateVal.toLocaleTimeString([], options);
			  }
			  dateVal = dateVal.toLocaleDateString() +' ' + dateFormat;
			   
		  }
		  
        return dateVal;
            
        
        };
         $scope.showRow = function(recId,parentId) {
             if($scope.highlightRowsList.length == 0) {
              	return true;   
             }
             else {
                var obj =  '{!$CurrentPage.parameters.object}';
                 
                 /*if(parentId != 'root' &&  ($scope.selectedObject.toLowerCase() == obj.toLowerCase())) {
                     if($scope.recordsToShow.indexOf(parentId)!=-1 && $scope.recordsToShow.indexOf(recId) == -1) {
                          $scope.recordsToShow.push(recId);
                     }
                    
                     
                 }*/
                 
                 return ($scope.recordsToShow.indexOf(recId)!=-1);
                 
               }
            
         };
         
         $scope.initColorsAndLevels = function() {
           var borders = ['5px solid #007fcc !important','5px solid #82C600 !important','5px solid yellow !important'];
           var headers = ['#DAEFFC','#D5FADD','lightgoldenrodyellow'];
           var classAssignment = ['one','two','three'];
            
             for(var i = 0;i<$scope.searchOptions.length;i++) {
                   $scope.headerColors[$scope.searchOptions[i].ObjectAPIName__c.toLowerCase()] = headers[i%(headers.length)];
                   $scope.borderColors[$scope.searchOptions[i].ObjectAPIName__c.toLowerCase()] = borders[i%(borders.length)];
                   $scope.levelOrderOfObjects[$scope.searchOptions[i].ObjectAPIName__c.toLowerCase()] = i;
               	   $scope.keyPrefixArr.push( $scope.objectMetadata[$scope.searchOptions[i].ObjectAPIName__c.toLowerCase()].keyPrefix_c);
             	 
             }
             console.log('keyPrefixArr' + $scope.keyPrefixArr);
             //  console.log('colors are ' , $scope.borderColors,$scope.headerColors);
             
         };
         $scope.initColorsAndLevels();
         
         $scope.alertClosed = function() {
             //console.log('close clicked');
             $scope.isAlertVisible = false;    
             // console.log('close '+ $scope.isAlertVisible);
              $scope.alertCls = "ng-hide";
             
              $scope.alertMessage =  '';
             angular.element(document.querySelector('.close')).addClass('ng-hide');
             $timeout(function() {
                 setDimensions();
             });
         };
         $scope.toggleExpandCollapseAll = function() {
             $timeout(function () { 
                 //  console.log('toggle plus +' + angular.element(document.querySelector('#rootDiv')).find('i[class*="expand"]').length);
                 if(angular.element(document.querySelector('#rootDiv')).find('i[class*="expand"]').length == 0) {
                     //   console.log('toggle inside plus if');
                     $scope.showExpandAll = false;
                     $scope.showCollapseAll = true;
                 }
                 else {
                     $scope.showExpandAll = true;
                 }
                 
                 //console.log('toggle minus -' + angular.element(document.querySelector('#rootDiv')).find('i[class*="fa-minus"]').length);
                  if(angular.element(document.querySelector('#rootDiv')).find('i[class*="fa-minus"]').length == 0) {
                      //  console.log('toggle inside minus if');
                     $scope.showExpandAll = true;
                     $scope.showCollapseAll = false;
                 }
                 
                 else {
                     $scope.showCollapseAll = true;
                 }
                 
                 if(angular.element(document.querySelector('#rootDiv')).find('i[class*="expand"]').length == 0 && 
                    angular.element(document.querySelector('#rootDiv')).find('i[class*="fa-minus"]').length == 0 ) {
                     // console.log('toggle inside both if');
                     $scope.showExpandAll = false;
                     $scope.showCollapseAll = false;
                 }
                 
                 
                 
             }, 2000);
             
         	
         };
            
         $scope.toggleExpandCollapseAll(); 
         $scope.insertSpecialCharacters = function(objName) {
            var cnt = $scope.levelOrderOfObjects[objName.toLowerCase()];
            if(cnt <= 0) {
            	return '';    
            }
            var str = '-'; 
            for(var i = 0;i<cnt-1;i++) {
              str += '-';    
             }
            return str;
         };
        
         $scope.getFontColor = function(field,value) {
             
             if(angular.isUndefined(value)) {
              	return 'black';   
              }
              
               if(field.toLowerCase() != 'status__c') {
               		return 'black';    
               }
               else {
                   value = value.toLowerCase();
                   if(value == 'complete') {
                      return 'grey'; 
                   }
                   else if(value == 'at risk') {
                       return 'red';
                   }
                   else if(value == 'on target') {
                       return 'green';
                   }
                   else {
                   		return 'black';    
                   }
               }
               
           };
      
         $scope.expandToLevel = function(level) {
            angular.element(document.querySelector('.waitingSearchDiv1')).removeClass('ng-hide');
             console.log('level' + level);
          $timeout(function() {
              console.log('called method after timeout');
              $scope.expandToLevelCalled = true;
             $scope.levelSelected = level;
             $scope.collapseAll($scope.data);
             if(level > 1) {
                 console.log('called level ' + level);
                  $scope.displayLevelCnt = 1; 
                 $scope.expandAll($scope.data);
                 
                 $scope.expandToLevelCalled = false;
                
                 
             }
              
          },1);
             
             $timeout(function() {
             angular.element(document.querySelector('.waitingSearchDiv1')).addClass('ng-hide');
             },1);
         };
              
         //function to add new contact
          $scope.onContactSaved = function() {
              $scope.contactSavingError = '';
            
              console.log('save clicked');
              var contactObject = {};
              contactObject['firstName'] = angular.element(document.querySelector('#ctctFirstName')).html();
              contactObject['lastName'] = angular.element(document.querySelector('#ctctLastName')).html();
              contactObject['email'] =  angular.element(document.querySelector('#ctctEmail')).html();;
              contactObject['phone'] =  angular.element(document.querySelector('#ctctPhone')).html();
              contactObject['accId'] =  angular.element(document.querySelector('#accSite')).html();
              contactObject['ctctRole'] =  angular.element(document.querySelector('#contactRole')).html();
              contactObject['projectRole'] =  angular.element(document.querySelector('#projectRole')).html();
			  contactObject['subprojectId'] = $scope.param1; 
              console.log('after save' + angular.element(document.querySelector('#projectRole')).html());
             
              
              var requiredKeys = ['firstName','lastName','accId','ctctRole','projectRole'];
             
              var error = validateContactObject(contactObject,requiredKeys);
              
              $scope.contactSavingError = error;
              console.log('error' + error +  $scope.contactSavingError);
              if(error.length == 0) {
                  angular.element(document.querySelector('.waitingSearchDiv1')).removeClass('ng-hide');
                  ALL_TreeGrid_Controller.addNewContact(angular.toJson(contactObject),function(result,event) {
                  	 angular.element(document.querySelector('.waitingSearchDiv1')).addClass('ng-hide');
                      
                      if(event.status) {
                          
                          if(result.length == 0) {
                              console.log('result' + result);
                            
                              angular.element(document.querySelector('#ctctTable')).addClass('ng-hide');
                              angular.element(document.querySelector('#ctctSuccess')).removeClass('ng-hide');
                              angular.element(document.querySelector('#contactSave')).addClass('ng-hide'); 
                              angular.element(document.querySelector('#contactCancel')).addClass('ng-hide');
                              angular.element(document.querySelector('#ctctSuccessBtn')).removeClass('ng-hide');
                          }
                          else {
                          	for(var i = 0;i < result.length;i++){
                                $scope.contactSavingError += '<li>' + result[i] + '</li>';
                            }
                          }
                      }
                  
                  });
              }
          };
          
          $scope.closeContactDialog = function() {
              	  $scope.contactSavingError ='';
                  $scope.addNewContact = false; 
                
                  
              };
          
          $scope.displayPSR = function(PSRValue,objects) {
             $scope.PSRObj = {PSRValue : PSRValue, objects : objects};
              console.log($scope.PSRObj);
              if($scope.selectedMassUpdateRecords.length == 0) {
                  $scope.PSRDisplayMsg = '<p>You did not check any Milestones so this is an "ALL-OR-NOTHING" action - this action will update ALL Milestone records on this Subproject.'     
                + '<br><br>If you want this change to apply to specific Milestones, first check the box next to the desired Milestone(s) on the Milestone Display Page and then rerun this action.'
                + '<br><br>You can further customize what displays on your PSR through the Milestone Edit Page, either individually through single records or in volume through Mass Update.'   
                  + '<br><br><b>Do you wish to proceed?</b></p>';
              }
              else {
                  $scope.PSRDisplayMsg = '<p>Since you selected one or more Milestones this action will only update the selected Project Milestone records on this Subproject.  It will not change the Display on PSR value for Milestones that are not selected'  
                +'<br><br>If you want this change to apply to ALL Milestones, verify that you have not checked the box next to any Milestone on the Milestone Display Page and then rerun this action.'
                +'<br><br>You can further customize what displays on your PSR through the Milestone Edit Page, either individually through single records or in volume through Mass Update.'   
                  +'<br><br><b>Do you wish to proceed?</b></p>' ;
              }
              
               };
              
          $scope.confirmPSR = function() {
                  console.log('after ok clicked' , $scope.PSRObj);
                  $scope.updateRecordsWithPSR($scope.PSRObj['PSRValue'], $scope.PSRObj['objects']);
              };
              
          $scope.updateRecordsWithPSR = function(PSRValue,objects) {
                  
              var recordsToBeUpdated = [];
              var objectKeyMap = {};
              if(objects.indexOf('M') != -1) {
                  objectKeyMap[ $scope.objectMetadata['project_milestone__c'].keyPrefix_c] = 'project_milestone__c'
              }
              if(objects.indexOf('A') != -1) {
                  objectKeyMap[ $scope.objectMetadata['project_activity__c'].keyPrefix_c] = 'project_activity__c'
              }
              if(objects.indexOf('T') != -1) {
                  objectKeyMap[ $scope.objectMetadata['project_task__c'].keyPrefix_c] = 'project_task__c'
                  
              }
              var recIdList;
              if($scope.selectedMassUpdateRecords.length == 0) {
               	recIdList = Object.keys($scope.allRecordsResult);
              }
              else {
               
                recIdList =  getIdOfChildRecordsToUpdatePSR($scope.childInfoRecordMap,Object.keys(objectKeyMap).length,$scope.selectedMassUpdateRecords);
                  
              } 
               recordsToBeUpdated =   recordsWithPSRValue(recIdList,objectKeyMap,PSRValue);
                  //console.log('updated records' ,recordsToBeUpdated);
                    $scope.callUpdateInsertService(recordsToBeUpdated,[],'massupdate');
              
                  
              };
           
       }
         
       catch(err) {
           
               console.log('error caught' , err);    
            var query = window.location.search.substring(1);
             var vars = query.split("&");
             var value ='';
             for (var i=0;i<vars.length;i++) {
                 var pair = vars[i].split("=");
                 if (pair[0].toLowerCase() == 'id') {
                     value = pair[1];
                 }
             } 
           angular.element(document.querySelector('.bdy')).html('<div align="center"><h3 style="color:red"><b class="fa fa-info-circle" ></b>&nbsp;&nbsp;'
                                                                +'No data configured for the given parameters</h3><br/>'
                                                                +' <a class="btn btn-default btn-sm" href="/apex/IMP_SubProjectManagement?id=' + value
                                                                +'">Back To SubProject</a></div>');
           
       }
  
    });
            
                
             dataGridApp.directive('newRecordFix', ['$compile', function ($compile) {
    return {
        restrict: 'E',
        scope:{
        	bordercolors : '=?',
            headercolors : '=?',
            customizedFieldMap : '=?',
            columnWidths : '=?',
            picklistMap : '=?'
           
        },
        replace:true,
        controller: ['$scope', function($scope) {  
        	var objectMetadata = JSON.parse('{!objectMetadata}');
            //  console.log('directive controller' ,objectMetadata);  
            $scope.getFields = function(objectName) {
                  
                //    console.log('object name sent' + objectName);
                //console.log('keys' + Object.keys(objectMetadata));
            var keyArr = Object.keys(objectMetadata);
            var keyObject = '';
            for(var i = 0;i < Object.keys(objectMetadata).length;i++) {
                if(String(keyArr[i]).toLowerCase() == String(objectName).toLowerCase()){
                    keyObject = keyArr[i];
                    break;
                }
                
            }
             
        	$scope.fieldMap = objectMetadata[keyObject].fieldsMap;
                //  console.log('call' , $scope.fieldMap);
                //  console.log(keyObject);
            keyArr = Object.keys(objectMetadata[keyObject].fieldsMap).reverse();
            var tempFieldMap = {};
            for(var i=0;i<keyArr.length;i++) {
                tempFieldMap[keyArr[i]] = {};
                tempFieldMap[keyArr[i]] =  $scope.fieldMap[keyArr[i]];
            
            }
            $scope.fieldMap = tempFieldMap;
                
                
                
                /* massUpdateFieldsService(objectName,'{!$CurrentPage.parameters.treeId}')
                .then(function(result) {
                    $scope.fieldMap = result;
                   
                  
                   
                            
                });*/
                
                
            
            };
            
        
        
        }],
        link: function (scope, element, attrs) {
            var objectName = attrs.objectName;
            var parentId = attrs.parentId;
            var parentRelationName = attrs.parentRelationName;
            var randomID = attrs.id;
            var timezone = attrs.timeZone;
            scope.parentObject = objectName;
            //console.log('picklist map in create new' , scope.picklistMap);
            //console.log('customizedFieldMap' , scope.customizedFieldMap);
            //console.log('column widths inside directive' , scope.columnWidths);
            var key  = Object.keys(scope.customizedFieldMap['objects']);
            if(key.length  > 0) {
                scope.columnKeys = Object.keys(scope.customizedFieldMap['objects'][key[0]]['fieldAPIorder']);
                scope.columnKeys.sort();
                //  console.log('sorted keys in directive' + scope.columnKeys);
            }
            
            //  console.log('object name inside directive' + objectName);
            //   console.log('link colors' , scope.bordercolors + '{!$CurrentPage.parameters.id}' );
            var html =  '<div class="newrecordDiv"><table class="table table-bordered newrecordtableFix ' + randomID + 'Fix" object="' + objectName 
            + '" parentId="' + parentId + '" parentRelation="' + parentRelationName + '" id="' + randomID  
            +  '" style="table-layout:fixed;margin-bottom:0px">'
            +    '<tbody>' 
            +        '<tr style="border-left :' + scope.bordercolors[objectName.toLowerCase()] + ';background-color:' + scope.headercolors[objectName.toLowerCase()]  + '">'
            +            '<td style="width:23px;height:2px;padding:3px;" class="insert" align="center" valign="middle" ng-if="!(' + scope.customizedFieldMap['objects'].hasOwnProperty(objectName.toLowerCase()) + ')" >' + '</td>'
            +            '<td style="width:23px;height:2px;padding:3px;" class="insert" align="center" valign="middle" ng-if="!(' + scope.customizedFieldMap['objects'].hasOwnProperty(objectName.toLowerCase()) + ')" >'
            +               '<input type="checkbox" id="chk' + randomID + '" class="newrecordchk' + '" checked="checked" />'
            +            '</td>'
            +            '<td style="width:20px;height:2px;padding:3px;" class="insert" align="center" valign="middle" ng-if="(' + scope.customizedFieldMap['objects'].hasOwnProperty(objectName.toLowerCase()) + ')" >' + '</td>'
            +            '<td style="width:20px;height:2px;padding:3px;" class="insert" align="center" valign="middle" ng-if="(' + scope.customizedFieldMap['objects'].hasOwnProperty(objectName.toLowerCase()) + ')" >'
            +               '<input type="checkbox" id="chk' + randomID + '" class="newrecordchk' + '" checked="checked" />'
            +            '</td>'
            +            '<td  ng-repeat="(key,value) in fieldMap" class="insert" valign="middle" style="height:2px;padding:4px;" ng-if="!(' + scope.customizedFieldMap['objects'].hasOwnProperty(objectName.toLowerCase()) + ')" >'
            +                    '<span ng-if="value[\'isFormula_c\']"></span>'
            +					  '<span ng-if="!value[\'isCreateable_c\']"></span>'
            +                    '<span ng-if="!value[\'isFormula_c\'] && value[\'isCreateable_c\']" ng-switch="value[\'fieldType_c\']">'
            +                        '<span ng-switch-when="STRING">'
            +                            '<input type="text" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal" />'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none" >{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PICKLIST">'
            +                            '<input type="picklist" ng-Object="' + objectName +'"  ng-columnNames="{{key}}" id="{{key}}" is-required="{{value[\'isNillable_c\']}}" ng-model="massUpdateVal" picklist-map="picklistValueMap" />'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PHONE">'
            +                            '<input type="phone" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="EMAIL">'
            +                            '<input type="email" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec"  dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="REFERENCE">'
            +                            '<input type="lookup" ng-Object="{{value[\'referenceTo_c\']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{value[\'isNillable_c\']}}"  id="{{key}}" ng-model="massUpdateVal" app="TreeGrid"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="CURRENCY">'
            +                            '<input type="currency" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="MULTIPICKLIST">'
            +                            '<input type="multipicklist"  ng-Object="' + objectName + '" class="form-control" ng-columnNames="{{key}}" is-required="{{value[\'isNillable_c\']}}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="BOOLEAN">'
            +                            '<input type="checkbox" class="" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span>'
            +                            '<span ng-switch-when="DATE">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{value[\'isNillable_c\']}}" date-value="{{massUpdateVal}}" time-zone="{{'+ timezone+'}}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="URL">'
            +                                '<input type="url" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="TEXTAREA">'
            +                                '<textarea class="form-control" id="{{key}}" ng-model="massUpdateVal" ng-class="{\'required\':!value[\'isNillable_c\']}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="ADDRESS">'
            +                                '<textarea class="form-control" id="{{key}}" ng-model="massUpdateVal" ng-class="{\'required\':!value[\'isNillable_c\']}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DOUBLE">'
            +                                '<input type="number" class="form-control" ng-class="{\'required\':!value[\'isNillable_c\']}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DATETIME">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" is-required="{{value[\'isNillable_c\']}}" min-view="hour" date-value="{{massUpdateVal}}" time-zone="{{' + timezone + '}}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy HH:mm:ss \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-default>'
            +                               '<input type="text" class="form-control" ng-class="{\'required\':!value[\'isNillable_c\']}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                    '</td>'  
            +                     '<td  ng-repeat="key in columnKeys" class="insert" valign="middle" style="width:{{columnWidths[key]}};height:2px;padding:4px;" ng-if="(customizedFieldMap[\'objects\'].hasOwnProperty(parentObject.toLowerCase()) && (fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\'] != \'ID\')) && (key == \'A\')">'
            +                       '<span ng-if="customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key] != \'NULL\'">'
            +                         '<span ng-if="fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isFormula_c\']"></span>'
            +			              '<span ng-if="!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isCreateable_c\']"></span>'
            +                         '<span ng-if="!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isFormula_c\'] && fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isCreateable_c\']" ng-switch="fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']">'
            +                           '<span ng-switch-when="STRING">'
            +                            '<input type="text" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal" />'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none" >{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PICKLIST">'
            +                            '<input type="picklist" ng-Object="' + objectName +'"  ng-columnNames="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" ng-model="massUpdateVal" picklist-map="picklistMap"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PHONE">'
            +                            '<input type="phone" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="EMAIL">'
            +                            '<input type="email" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec"  dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="REFERENCE">'
            +                            '<input type="lookup" ng-Object="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'referenceTo_c\']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}"  id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal" app="TreeGrid"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="CURRENCY">'
            +                            '<input type="currency" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="MULTIPICKLIST">'
            +                            '<input type="multipicklist"  ng-Object="' + objectName + '" class="form-control" ng-columnNames="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="BOOLEAN">'
            +                            '<input type="checkbox" class="" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span>'
            +                            '<span ng-switch-when="DATE">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" date-value="{{massUpdateVal}}" time-zone="{{'+ timezone+'}}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="URL">'
            +                                '<input type="url" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="TEXTAREA">'
            +                                '<textarea class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="ADDRESS">'
            +                                '<textarea class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DOUBLE">'
            +                                '<input type="number" class="form-control" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DATETIME">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" min-view="hour" date-value="{{massUpdateVal}}" time-zone="{{' + timezone + '}}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy HH:mm:ss \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-default>'
            +                               '<input type="text" class="form-control" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +	   '</span>' 
            +                    '</td>'
            +                '</tr>'
            +               '<tbody>'
            +          '</table>' 
            +          '<div id="errFix' + randomID + '" class="ng-hide errCls occupy"> </div></div>'  
            
            var headerHTML = '';
            if(attrs.header == 'yes') {
                headerHTML = '<table class="table table-bordered table-hover ng-hide" id="headerOf' + parentId + '"  style="table-layout:fixed;width:100%;margin-bottom:4px;margin-top:4px">'
							+	'<thead>'
							+    	'<tr class="inf" style="border-left:' + scope.bordercolors[objectName.toLowerCase()] + ';background-color:' + scope.headercolors[objectName.toLowerCase()] + '">'
							+			'<th style="width:20px"></th>'
							+			'<th style="width:20px">'
							+			'</th>'
							+    		'<th ng-repeat="(key,value) in fieldMap" ng-if="value[\'fieldType_c\'] != \'ID\'" style="width:150px" >'
							+   			'<div  style="width:97%;float:left">{{value[\'label_c\']}}</div>'
							+				'<div  style="width:3%;float:right">'
							+					'<i class="fa fa-sort-asc sort ng-hide" title="Sort Ascending" ng-click="sortAscending(key,parentId)" style="line-height: 1px;padding: 3px"/>'
							+					'<i class="fa fa-sort-desc sort ng-hide" title="Sort Descending" ng-click="sortDescending(key,parentId)" style="line-height: 1px;padding: 3px"/>'
							+				'</div>'
							+			'</th>'
							+		'</tr>'
							+	'</thead>'
							+'</table>';
            }
            
                
                
               var e=angular.element(headerHTML + html);
            
            	e.on('load',scope.getFields(objectName));
            	
                $compile(e.contents())(scope);
                element.replaceWith(e);
            
            }
    }
}]);
                dataGridApp.directive('newRecordFlow', ['$compile', function ($compile) {
    return {
        restrict: 'E',
        scope:{
        	bordercolors : '=?',
            headercolors : '=?',
            customizedFieldMap : '=?',
            columnWidths : '=?',
            picklistMap : '=?'
           
        },
        replace:true,
        controller: ['$scope', function($scope) {  
        	var objectMetadata = JSON.parse('{!objectMetadata}');
            //  console.log('directive controller' ,objectMetadata);  
            $scope.getFields = function(objectName) {
                  
                //    console.log('object name sent' + objectName);
                //console.log('keys' + Object.keys(objectMetadata));
            var keyArr = Object.keys(objectMetadata);
            var keyObject = '';
            for(var i = 0;i < Object.keys(objectMetadata).length;i++) {
                if(String(keyArr[i]).toLowerCase() == String(objectName).toLowerCase()){
                    keyObject = keyArr[i];
                    break;
                }
                
            }
             
        	$scope.fieldMap = objectMetadata[keyObject].fieldsMap;
                //  console.log('call' , $scope.fieldMap);
                //  console.log(keyObject);
            keyArr = Object.keys(objectMetadata[keyObject].fieldsMap).reverse();
            var tempFieldMap = {};
            for(var i=0;i<keyArr.length;i++) {
                tempFieldMap[keyArr[i]] = {};
                tempFieldMap[keyArr[i]] =  $scope.fieldMap[keyArr[i]];
            
            }
            $scope.fieldMap = tempFieldMap;
                
                
                
                /* massUpdateFieldsService(objectName,'{!$CurrentPage.parameters.treeId}')
                .then(function(result) {
                    $scope.fieldMap = result;
                   
                  
                   
                            
                });*/
                
                
            
            };
            
        
        
        }],
        link: function (scope, element, attrs) {
            var objectName = attrs.objectName;
            var parentId = attrs.parentId;
            var parentRelationName = attrs.parentRelationName;
            var randomID = attrs.id;
            var timezone = attrs.timeZone;
            scope.parentObject = objectName;
            //console.log('picklist map in create new' , scope.picklistMap);
            //console.log('customizedFieldMap' , scope.customizedFieldMap);
            //console.log('column widths inside directive' , scope.columnWidths);
            var key  = Object.keys(scope.customizedFieldMap['objects']);
            if(key.length  > 0) {
                scope.columnKeys = Object.keys(scope.customizedFieldMap['objects'][key[0]]['fieldAPIorder']);
                scope.columnKeys.sort();
                //  console.log('sorted keys in directive' + scope.columnKeys);
            }
            
            //  console.log('object name inside directive' + objectName);
            //   console.log('link colors' , scope.bordercolors + '{!$CurrentPage.parameters.id}' );
            var html =  '<div class="newrecordDiv"><table class="table table-bordered table-hover newrecordtableFlow ' + randomID + 'Flow" object="' + objectName 
            + '" parentId="' + parentId + '" parentRelation="' + parentRelationName + '" id="' + randomID  
            +  '" style="table-layout:fixed;margin-bottom:0px">'
            +    '<tbody>' 
            +        '<tr style="background-color:' + scope.headercolors[objectName.toLowerCase()]  + '">'
            +            '<td  ng-repeat="(key,value) in fieldMap" class="insert" valign="middle" style="height:2px;padding:4px;" ng-if="!(' + scope.customizedFieldMap['objects'].hasOwnProperty(objectName.toLowerCase()) + ')" >'
            +                    '<span ng-if="value[\'isFormula_c\']"></span>'
            +					  '<span ng-if="!value[\'isCreateable_c\']"></span>'
            +                    '<span ng-if="!value[\'isFormula_c\'] && value[\'isCreateable_c\']" ng-switch="value[\'fieldType_c\']">'
            +                        '<span ng-switch-when="STRING">'
            +                            '<input type="text" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal" />'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none" >{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PICKLIST">'
            +                            '<input type="picklist" ng-Object="' + objectName +'"  ng-columnNames="{{key}}" id="{{key}}" is-required="{{value[\'isNillable_c\']}}" ng-model="massUpdateVal" picklist-map="picklistValueMap" />'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PHONE">'
            +                            '<input type="phone" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="EMAIL">'
            +                            '<input type="email" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec"  dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="REFERENCE">'
            +                            '<input type="lookup" ng-Object="{{value[\'referenceTo_c\']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{value[\'isNillable_c\']}}"  id="{{key}}" ng-model="massUpdateVal" app="TreeGrid"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="CURRENCY">'
            +                            '<input type="currency" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="MULTIPICKLIST">'
            +                            '<input type="multipicklist"  ng-Object="' + objectName + '" class="form-control" ng-columnNames="{{key}}" is-required="{{value[\'isNillable_c\']}}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="BOOLEAN">'
            +                            '<input type="checkbox" class="" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span>'
            +                            '<span ng-switch-when="DATE">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{value[\'isNillable_c\']}}" date-value="{{massUpdateVal}}" time-zone="{{'+ timezone+'}}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="URL">'
            +                                '<input type="url" class="form-control" id="{{key}}" ng-class="{\'required\':!value[\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="TEXTAREA">'
            +                                '<textarea class="form-control" id="{{key}}" ng-model="massUpdateVal" ng-class="{\'required\':!value[\'isNillable_c\']}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="ADDRESS">'
            +                                '<textarea class="form-control" id="{{key}}" ng-model="massUpdateVal" ng-class="{\'required\':!value[\'isNillable_c\']}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DOUBLE">'
            +                                '<input type="number" class="form-control" ng-class="{\'required\':!value[\'isNillable_c\']}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DATETIME">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" is-required="{{value[\'isNillable_c\']}}" min-view="hour" date-value="{{massUpdateVal}}" time-zone="{{' + timezone + '}}"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy HH:mm:ss \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-default>'
            +                               '<input type="text" class="form-control" ng-class="{\'required\':!value[\'isNillable_c\']}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{value[\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{value[\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                    '</td>'  
            +                     '<td  ng-repeat="key in columnKeys" class="insert" valign="middle" style="width:{{columnWidths[key]}};height:2px;padding:4px;" ng-if="(customizedFieldMap[\'objects\'].hasOwnProperty(parentObject.toLowerCase()) && (fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\'] != \'ID\')) && (key!=\'A\')">'
            +                       '<span ng-if="customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key] != \'NULL\'">'
            +                         '<span ng-if="fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isFormula_c\']"></span>'
            +			              '<span ng-if="!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isCreateable_c\']"></span>'
            +                         '<span ng-if="!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isFormula_c\'] && fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isCreateable_c\']" ng-switch="fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']">'
            +                           '<span ng-switch-when="STRING">'
            +                            '<input type="text" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal" />'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none" >{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PICKLIST">'
            +                            '<input type="picklist" ng-Object="' + objectName +'"  ng-columnNames="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" ng-model="massUpdateVal" picklist-map="picklistMap"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="PHONE">'
            +                            '<input type="phone" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="EMAIL">'
            +                            '<input type="email" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec"  dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="REFERENCE">'
            +                            '<input type="lookup" ng-Object="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'referenceTo_c\']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}"  id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal" app="TreeGrid"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="CURRENCY">'
            +                            '<input type="currency" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="MULTIPICKLIST">'
            +                            '<input type="multipicklist"  ng-Object="' + objectName + '" class="form-control" ng-columnNames="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" id="{{key}}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span ng-switch-when="BOOLEAN">'
            +                            '<input type="checkbox" class="" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                            '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                        '</span>'
            +                        '<span>'
            +                            '<span ng-switch-when="DATE">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" date-value="{{massUpdateVal}}" time-zone="{{'+ timezone+'}}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="URL">'
            +                                '<input type="url" class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="TEXTAREA">'
            +                                '<textarea class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="ADDRESS">'
            +                                '<textarea class="form-control" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DOUBLE">'
            +                                '<input type="number" class="form-control" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-when="DATETIME">'
            +                                '<input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" is-required="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}}" min-view="hour" date-value="{{massUpdateVal}}" time-zone="{{' + timezone + '}}"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy HH:mm:ss \'GMT \'Z"}}</span>'
            +                            '</span>'
            +                            '<span ng-switch-default>'
            +                               '<input type="text" class="form-control" ng-class="{\'required\':!fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'isNillable_c\']}" id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" ng-model="massUpdateVal"/>'
            +                                '<span id="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldAPIName_c\']}}" cls="insertRec" dataType="{{fieldMap[customizedFieldMap[\'objects\'][parentObject.toLowerCase()][\'fieldAPIorder\'][key]][\'fieldType_c\']}}" style="display:none">{{massUpdateVal}}</span>'
            +                            '</span>'
            +	   '</span>' 
            +                    '</td>'
            +                '</tr>'
            +               '<tbody>'
            +          '</table>' 
            +          '<div id="err' + randomID + '" class="alert alert-danger ng-hide" style="margin:0px !important;padding:5px !important"> </div></div>'  
            
            var headerHTML = '';
            if(attrs.header == 'yes') {
                headerHTML = '<table class="table table-bordered table-hover ng-hide" id="headerOf' + parentId + '"  style="table-layout:fixed;width:100%;margin-bottom:4px;margin-top:4px">'
							+	'<thead>'
							+    	'<tr class="inf" style="border-left:' + scope.bordercolors[objectName.toLowerCase()] + ';background-color:' + scope.headercolors[objectName.toLowerCase()] + '">'
							+			'<th style="width:20px"></th>'
							+			'<th style="width:20px">'
							+			'</th>'
							+    		'<th ng-repeat="(key,value) in fieldMap" ng-if="value[\'fieldType_c\'] != \'ID\'" style="width:150px" >'
							+   			'<div  style="width:97%;float:left">{{value[\'label_c\']}}</div>'
							+				'<div  style="width:3%;float:right">'
							+					'<i class="fa fa-sort-asc sort ng-hide" title="Sort Ascending" ng-click="sortAscending(key,parentId)" style="line-height: 1px;padding: 3px"/>'
							+					'<i class="fa fa-sort-desc sort ng-hide" title="Sort Descending" ng-click="sortDescending(key,parentId)" style="line-height: 1px;padding: 3px"/>'
							+				'</div>'
							+			'</th>'
							+		'</tr>'
							+	'</thead>'
							+'</table>';
            }
            
                
                
               var e=angular.element(headerHTML + html);
            
            	e.on('load',scope.getFields(objectName));
            	
                $compile(e.contents())(scope);
                element.replaceWith(e);
            
            }
    }
}]);
         
            //added 04-03-2016 to ensure the data rendering is complete and calls the event to adjust the dimensions of the division
            dataGridApp.directive('onFinishRender',function($timeout) {
                return {
                    restrict : 'A',
                    link : function(scope,element,attr) {
                        if(scope.$last === true) {
                            $timeout(function(){
                                
                                scope.$emit('ngRepeatFinished');
                                
                            });    
                        }
                    }
                    
                }    
                
                
            });
            
              dataGridApp.directive('scroll',function($timeout) {
                return {
                    restrict : 'A',
                    link : function(scope,element,attr) {
                        
                            $timeout(function(){
                                
                                // console.log('scroll');
                                scope.$emit('scrollEvent');
                                
                            });    
                        
                    }
                    
                }    
                
                
            });

             dataGridApp.directive('dimension',function($timeout) {
                return {
                    restrict : 'A',
                    link : function(scope,element,attr) {
                        
                            $timeout(function(){
                                
                                 console.log('the alert message is visible');
                                scope.$emit('ngRepeatFinished');
                                
                            });    
                        
                    }
                    
                }    
                
                
            });


            
         
         </script>
            
         
               <script type="text/ng-template" id="headersFix">
           
           
              <table class="table table-bordered " id="header" style="table-layout:fixed;margin-bottom:0px;cursor: default" >
                                 
            	 			<thead>
                                            <tr class="inf" style="border-left :{{borderColors[tempFieldHierarchy.parentObjectName.toLowerCase()]}};background-color:{{headerColors[tempFieldHierarchy.parentObjectName.toLowerCase()]}}" ng-class="((searchValue.length>=3) && (selectedObject.toLowerCase() == tempFieldHierarchy.parentObjectName.toLowerCase())) ? 'applyBgColor' : 'removeBgColor'" >
                                                <td style="width:23px;height:2px;padding:3px;"  align="center" valign="middle" ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase()))"></td>
                                                <td style="width:23px;height:2px;padding:3px;" align="center" valign="middle" ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase()))">
                                                    <input type="checkbox" id="head{{tempFieldHierarchy.parentObjectName.toLowerCase()}}" class="headChk" object="{{tempFieldHierarchy.parentObjectName.toLowerCase()}}" parentId="root" ng-model="chkBoxTrackingMap['head' + tempFieldHierarchy.parentObjectName.toLowerCase()]" ng-change="headerChkChanged(tempFieldHierarchy.parentObjectName.toLowerCase())" ng-disabled="(parentChecked.toLowerCase()!=tempFieldHierarchy.parentObjectName.toLowerCase() && parentChecked!='')||disableAllPreviousCheckboxes"  />
                                                </td>
                                                <td style="width:20px;height:2px;padding:3px;"  align="center" valign="middle" ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase()))"></td>
                                                <td style="width:20px;height:2px;padding:3px;" align="center" valign="middle" ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase()))">
                                                    <input type="checkbox" id="head{{tempFieldHierarchy.parentObjectName.toLowerCase()}}" class="headChk" object="{{tempFieldHierarchy.parentObjectName.toLowerCase()}}" parentId="root" ng-model="chkBoxTrackingMap['head' + tempFieldHierarchy.parentObjectName.toLowerCase()]" ng-change="headerChkChanged(tempFieldHierarchy.parentObjectName.toLowerCase())" ng-disabled="(parentChecked.toLowerCase()!=tempFieldHierarchy.parentObjectName.toLowerCase() && parentChecked!='')||disableAllPreviousCheckboxes"  />
                                                </td>
                                                <td ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase()))"  valign="middle" ng-repeat="value in tempFieldHierarchy['fields']"  title="{{value}}"  style="height:2px;padding:4px;" >
                                                    <div  style="width:100%;float:left"><b>{{value | limitTo: 13}}{{value.length>13 ? '...' : ''}}</b></div>
                                                    <div class="ng-hide"  style="width:0%;float:right">
                                                        <i class="fa fa-sort-asc sort" title="Sort Ascending" ng-click="sortAscending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                        <i class="fa fa-sort-desc sort" title="Sort Descending" ng-click="sortDescending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                    </div>
                                                </td>
                                                <td ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase())) && ($index==0)"  valign="middle" ng-repeat="key in columnKeys"  title="{{value}}"  style="height:2px;padding:4px;width:{{columnWidths[key]}};" >
                                                   <div ng-init="col=customizedFieldDataMap['objects'][tempFieldHierarchy.parentObjectName.toLowerCase()]['fieldAPIorder'][key]">
                                                       <span ng-if="!col.equals('NULL')">
                                                           <b ng-init="colVal=customizedFieldDataMap['objects'][tempFieldHierarchy.parentObjectName.toLowerCase()]['customAPINames'][col]" title="{{colVal}}"> 
                                                               <span ng-if="$index==0 && currentView == '/viewRecords'" >{{insertSpecialCharacters(tempFieldHierarchy.parentObjectName)}}</span>
                                                               {{colVal | limitTo :25}} {{colVal.length>25 ? '...' : ''}}
            												</b>
                                                           </span>
                                                  
                                                        </div> 
                                                </td>     
                                                        
                                            </tr>
                                        </thead>
                                    </table>
                                                       
                              <div ng-if="tempFieldHierarchy['child']">
                                  <div ng-include="'headersFix'" ng-init="tempFieldHierarchy=tempFieldHierarchy['child']"></div>
                                  </div>
            
           	            
            </script>
            
            
               <script type="text/ng-template" id="headersFlow">
           
           
              <table class="table table-bordered " id="header" style="table-layout:fixed;margin-bottom:0px;cursor: default" >
                                 
            	 			<thead>
                                            <tr class="inf" style="background-color:{{headerColors[tempFieldHierarchy.parentObjectName.toLowerCase()]}}" ng-class="((searchValue.length>=3) && (selectedObject.toLowerCase() == tempFieldHierarchy.parentObjectName.toLowerCase())) ? 'applyBgColor' : 'removeBgColor'" >
                                               
                                                <td ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase()))"  valign="middle" ng-repeat="value in tempFieldHierarchy['fields']"  title="{{value}}"  style="height:2px;padding:4px;" >
                                                    <div  style="width:100%;float:left"><b>{{value | limitTo: 13}}{{value.length>13 ? '...' : ''}}</b></div>
                                                    <div class="ng-hide"  style="width:0%;float:right">
                                                        <i class="fa fa-sort-asc sort" title="Sort Ascending" ng-click="sortAscending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                        <i class="fa fa-sort-desc sort" title="Sort Descending" ng-click="sortDescending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                    </div>
                                                </td>
                                                <td ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(tempFieldHierarchy.parentObjectName.toLowerCase())) && ($index!=0)"  valign="middle" ng-repeat="key in columnKeys"  title="{{value}}"  style="height:2px;padding:4px;width:{{columnWidths[key]}};" >
                                                   <div ng-init="col=customizedFieldDataMap['objects'][tempFieldHierarchy.parentObjectName.toLowerCase()]['fieldAPIorder'][key]">
                                                       <span ng-if="!col.equals('NULL')">
                                                           <b ng-init="colVal=customizedFieldDataMap['objects'][tempFieldHierarchy.parentObjectName.toLowerCase()]['customAPINames'][col]" title="{{colVal}}"> 
                                                               <span ng-if="$index==0 && currentView == '/viewRecords'" >{{insertSpecialCharacters(tempFieldHierarchy.parentObjectName)}}</span>
                                                               {{colVal | limitTo :25}} {{colVal.length>25 ? '...' : ''}}
            												</b>
                                                           </span>
                                                  
                                                        </div> 
                                                </td>     
                                                        
                                            </tr>
                                        </thead>
                                    </table>
                                                       
                              <div ng-if="tempFieldHierarchy['child']">
                                  <div ng-include="'headersFlow'" ng-init="tempFieldHierarchy=tempFieldHierarchy['child']"></div>
                                  </div>
            
           	            
            </script>
            
            
             
            
            <!-- displays the parent header and loops over the parent records--> 
           <script type="text/ng-template" id="viewEditMode">
           <div style="width:100%" > 
          <div class="fixDiv" style="overflow:hidden !important">
              <div ng-include="'headersFix'" ng-init="tempFieldHierarchy=fieldHierarchy" style="cursor:auto" id="allHeadersFix"></div>
          </div>  
          <div class="flowDiv" style="overflow-x:hidden !important;">
              <div ng-include="'headersFlow'" ng-init="tempFieldHierarchy=fieldHierarchy" style="cursor:auto" id="allHeaders"></div>
          </div>  
           </div>
              
             
              <div class="{{alertCls}} ng-hide"  id="alertMsgSearch" style="width:70%;margin-left:40px;margin-bottom: 5px;margin-top: 2px;height:50px;border:0;">
                  <a class="close" ng-click="alertClosed()" data-dismiss="alert" aria-label="close">&times;</a>
                 
                  <span ng-bind-html="renderHTML(alertMessage)" ></span>
                  </div>  
                   
                      <div id="rootDiv">
                            
                  
                                 <b class="ng-hide">{{data.displayName}}</b>
                                    <table class="table table-bordered table-hover ng-hide" id="headerOfroot" style="table-layout:fixed;width:100%;margin-bottom:2px;cursor: default" >
                                        <thead>
                                            <tr class="inf" style="border-left :{{borderColors[data.parentObjectName.toLowerCase()]}};background-color:{{headerColors[data.parentObjectName.toLowerCase()]}}" >
                                                <td style="width:23px;height:2px;padding:3px;" align="center"></td>
                                                <td style="width:23px;height:2px;padding:3px;" align="center">
                                                    <input type="checkbox" id="headroot" class="headChk" object="{{data.parentObjectName}}" parentId="root" ng-model="chkBoxTrackingMap['headroot']" ng-change="headerCheckBoxChanged(data.parentObjectName,'root')" ng-disabled="(headerParent!=data.parentObjectName && headerParent!='')||disableAllPreviousCheckboxes"  />
                                                </td>
                                                <th ng-repeat="(key,value) in data.fieldMetaDataMap" ng-if="value['fieldType_c'] != 'ID'" style="width:150px;height:2px;padding:3px;" >
                                                    <div  style="width:100%;float:left">{{value['label_c']}}</div>
                                                    <div class="ng-hide"  style="width:0%;float:right">
                                                        <i class="fa fa-sort-asc sort" title="Sort Ascending" ng-click="sortAscending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                        <i class="fa fa-sort-desc sort" title="Sort Descending" ng-click="sortDescending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                    </div>
                                                </th>
                                            </tr>
                                        </thead>
                                    </table>
                                         <div style="width:100%"  >
                                          <div id="fixDiv">
                                              <div class="{{alertCls}} occupy" dimension="dimension"  id="alertMsg" style="width:70%;margin-bottom: 5px;margin-top: 2px;height:50px;border:0;" ng-if="isAlertVisible">
                                                      <a class="close" ng-click="alertClosed()" aria-label="close">&times;</a>
                                                      
                                                      <span ng-bind-html="renderHTML(alertMessage)" ></span>
                                                      </div>  
                                              <div ng-repeat="(reckey,rec) in data.parentChildRecMap track by reckey" ng-init="initVariables($index,data.fieldMetaDataMap,data.parentObjectName,data.childObjectName,'root',data.displayName,data.parentRelationshipName,data.nextLevelApiNameOfParent)" on-finish-render="ngRepeatFinished">
                                                  <div ng-if="currentView == '/editRecords' && $index==0"><span id="headerOfrootFix"/></div>
                                        <div ng-show="currentView == '/viewRecords'" ng-include="'viewTreeFix'"></div>
                                         <div ng-show="currentView == '/editRecords'" ng-include="'editTreeFix'"></div>
                                       </div>   
                                       </div>
                                              <div id="flowDiv" scroll="scroll">
                                                  <div class="{{alertCls}}" dimension="dimension"  id="alertMsg" style="width:70%;margin-bottom: 5px;margin-top: 2px;height:50px;border:0;" ng-if="isAlertVisible">
                                                      <a class="close" ng-click="alertClosed()" aria-label="close">&times;</a>
                                                      
                                                      <span ng-bind-html="renderHTML(alertMessage)" ></span>
                                                      </div>  
                                                  <div ng-repeat="(reckey,rec) in data.parentChildRecMap track by reckey" ng-init="initVariables($index,data.fieldMetaDataMap,data.parentObjectName,data.childObjectName,'root',data.displayName,data.parentRelationshipName,data.nextLevelApiNameOfParent)" on-finish-render="ngRepeatFinished">
                                      <div ng-if="currentView == '/editRecords' && $index==0"><span id="headerOfrootFlow"/></div>
                                          <div ng-show="currentView == '/viewRecords'" ng-include="'viewTreeFlow'"></div>
                                           <div ng-show="currentView == '/editRecords'" ng-include="'editTreeFlow'"></div> 
                                       </div>   
                                                  
                                              
                                           </div>
                                                       

                                               
                                         </div>
                                                                                                  

                                </div>
                            </script>
            
            

            
            <script type="text/ng-template" id="viewTreeFix">
                                <div>
                                   
                                    <table class="table table-bordered  record" id="{{rec.parentRec['Id']}}" style="table-layout:fixed;margin-bottom:0px;cursor:default;background-color:{{headerColors[parentObject.toLowerCase()]}}" ng-class="(highlightRowsList.indexOf(rec.parentRec['Id'])!=-1) ? 'applyBgColor' : 'removeBgColor'" ng-show="showRow(rec.parentRec['Id'],parentId)" >
                                        <tbody>
                                            <tr style="border-left :{{borderColors[parentObject.toLowerCase()]}}">
                                               <td style="width:23px;height:2px;padding:3px;" align="center" valign="middle" ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <div ng-if="rec.isChildPresent" style="display:inline">
                                                       
                                                       <i class="fa fa-plus expand  btn btn-xs btn-default " style="padding:2px 2px" ng-if="!rec.parentRec['isExpanded']" ng-click="showChildren(childObject,rec.parentRec['Id'],false,false,null,false);toggleExpandCollapseAll()" title="Show {{objectsNameMap[childObject]}}"/>
                                                        <i class="fa fa-minus  btn btn-xs btn-default " style="padding:2px 2px" ng-if="rec.parentRec['isExpanded']" ng-click="hideChildDiv('child'+rec.parentRec['Id'],rec.parentRec['Id']);toggleExpandCollapseAll()" title="Hide {{objectsNameMap[childObject]}}"/>
                                                    </div>
                                                        
                                                    
                                                      
                                                </td>
                                                <td style="width:23px;height:2px;padding:3px;" align="center" valign="middle" ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <input type="checkbox" class="chk headChk"  id="chk{{rec.parentRec['Id']}}" parentId="{{parentId}}" object="{{parentObject}}" ng-model="chkBoxTrackingMap[rec.parentRec['Id']]"  ng-change="checkBoxChanged(parentId)" ng-disabled="(parentChecked.toLowerCase()!=parentObject.toLowerCase() && parentChecked!='') || disableAllPreviousCheckboxes "/>
                                                        
                                                 </td>
                                                 
                                                    <td style="width:20px;height:2px;padding:3px;" align="center" valign="middle" ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <div ng-if="rec.isChildPresent" style="display:inline">
                                                       
                                                       <i class="fa fa-plus expand btn btn-xs btn-default " style="padding:2px 2px" ng-if="!rec.parentRec['isExpanded']" ng-click="showChildren(childObject,rec.parentRec['Id'],false,false,null,false);toggleExpandCollapseAll()" title="Show {{objectsNameMap[childObject]}}"/>
                                                        <i class="fa fa-minus btn btn-xs btn-default " style="padding:2px 2px" ng-if="rec.parentRec['isExpanded']" ng-click="hideChildDiv('child'+rec.parentRec['Id'],rec.parentRec['Id']);toggleExpandCollapseAll()" title="Hide {{objectsNameMap[childObject]}}"/>
                                                    </div>
                                                   
                                                        
                                                     
                                                </td>
                                                <td style="width:20px;height:2px;padding:3px;" align="center" valign="middle" ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <input type="checkbox" class="chk headChk"  id="chk{{rec.parentRec['Id']}}" parentId="{{parentId}}" object="{{parentObject}}" ng-model="chkBoxTrackingMap[rec.parentRec['Id']]" ng-change="checkBoxChanged(parentId)" ng-disabled="(parentChecked.toLowerCase()!=parentObject.toLowerCase() && parentChecked!='') || disableAllPreviousCheckboxes "/>
                                                        
                                                 </td>
                                                    
                                                    
                                                <td ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))" ng-repeat="(key,value) in fieldMap" ng-if="value['fieldType_c'] != 'ID'" id="{{key}}" object="{{parentObject}}" style="height:2px;padding:3px;" valign="middle">
                                                   
                                                    <span ng-switch="value['fieldType_c']">
                                                        <span ng-switch-when="REFERENCE">
                                                             <a href="/{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" target="_blank">  
                                                       <span ng-bind-html="renderHTML(rec.parentRec[fieldMap[key]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                           </span>
                                                       </a>   
                                                      
                                                           
                                                            </span>
                                                        <span ng-switch-when="DATE">
                                                           
                                                   {{getFormattedDate(rec.parentRec[key],"day")}}
                                                </span>
                                                        <span ng-switch-when="DATETIME">
                                                           
                                                   {{getFormattedDate(rec.parentRec[key],"hour")}}
                                                </span>
                                                        <span ng-switch-default>
                                                             <span ng-bind-html="renderHTML(rec.parentRec[key])" style="word-wrap: break-word;color:{{getFontColor(key,rec.parentRec[key])}}" >
                                                           
                                                        </span>
                                                    </span>
                                                </td>
                                           
                                                            
                                           <td ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase())) &&(fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c'] != 'ID') && ($index==0)" ng-repeat="key in columnKeys"  valign="middle" id="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" object="{{parentObject}}" style="height:2px;padding:3px;width:{{columnWidths[key]}};">
                                                 <span ng-if="!customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key].equals('NULL')">
													<span ng-if="$index==0">{{insertSpecialCharacters(parentObject)}}</span>
                                                    <span ng-switch="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']">
                                                        <span ng-switch-when="REFERENCE">
                                                            <span ng-init="aliasKey=customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]">
                                                                
                                                            <a href="/{{rec.parentRec[aliasKey]}}" target="_blank">  
                                                                <span ng-if="aliasKey!='Site__c'" ng-bind-html="renderHTML(rec.parentRec[fieldMap[aliasKey]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                                    </span>
                                                                <span ng-if="aliasKey=='Site__c'" ng-bind-html="renderHTML(rec.parentRec['Account__c'])" style="word-wrap: break-word" >
                                                                    </span>
                                                       </a>   
                                                       </span>
                                                            </span>
                                                        <span ng-switch-when="DATE">
                                                           
                                                   {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"day")}}
                                                </span>
                                                        <span ng-switch-when="DATETIME">
                                                           
                                                   {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"hour")}}
                                                </span>
                                                        <span ng-switch-default>
                                                            <span ng-if="$index!=0" ng-bind-html="renderHTML(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])" style="word-wrap: break-word;color:{{getFontColor(customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key],rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])}}" >
                                                             </span>
                                                            
                                                            <span ng-if="$index==0">
                                                                <a href="/{{rec.parentRec['Id']}}?retURL=/apex/CloseMe" target="_blank" >
                                                                 <span ng-bind-html="renderHTML(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])" style="word-wrap: break-word;" >
                                                             </span>
                                                                 </a>  
                                                             </span>   
                                                           
                                                        </span>
                                                    </span>
                                                          
                                                </td>
                                                            
                                                 </tr>
                                        </tbody>
                                    </table>
                                                            
                                     <div id="error{{rec.parentRec['Id']}}Fix" class="ng-hide errCls occupy"> </div>   
                                    <!--for displaying child records if present-->
                                    <div ng-if="rec.parentRec['children']"> 
                                        <div class="ng-show" id="child{{rec.parentRec['Id']}}" ng-show="rec.parentRec['isExpanded']">
                                           <div ng-init="fieldMap=rec.parentRec['children'].fieldMetaDataMap;parentObject=rec.parentRec['children'].parentObjectName;childObject=rec.parentRec['children'].childObjectName;parentId=rec.parentRec['Id'];nameToDisplay=rec.parentRec['children'].displayName;parentRelationName=rec.parentRec['children'].parentRelationshipName;nextLevelParentAPI=rec.parentRec['children'].nextLevelApiNameOfParent;"/>
                                            <div ng-repeat="(reckey,rec) in rec.parentRec['children'].parentChildRecMap track by reckey" on-finish-render="ngRepeatFinished"> 
                                                <!-- header display for child-->
                                               <div ng-if="$index==0"> <b class="ng-hide">{{nameToDisplay}} </b>  
                                                 </div>    
                                        <table class="table table-bordered table-hover ng-hide"  ng-if="$index==0" style="table-layout:fixed;width:100%;margin-bottom:2px" >
                                                    <thead>
                                                        <tr class="inf" style="border-left :{{borderColors[parentObject.toLowerCase()]}};background-color:{{headerColors[parentObject.toLowerCase()]}}" >
                                                            <th style="width:20px" align="center"></th>
                                                            <th style="width:20px" align="center">
                                                                <input type="checkbox" id="head{{parentId}}" class="headChk" object="{{parentObject}}" parentId="{{parentId}}" ng-model="chkBoxTrackingMap['head' + parentId]" ng-change="headerCheckBoxChanged(parentObject,parentId)" ng-disabled="(headerParent!=parentObject && headerParent!='')||disableAllPreviousCheckboxes" />
                                                       
                                        </th>
                                                            <th ng-repeat="(key,value) in fieldMap" align="center" ng-if="value['fieldType_c'] != 'ID'" style="width:150px">
                                                                <div style="width:100%;float:left">{{value['label_c']}}</div>
                                                                <div class="ng-hide"  style="width:0%;float:right">
                                                                    <i class="fa fa-sort-asc sort" title="Sort Ascending" style="line-height: 1px;padding: 3px" ng-click="sortAscending(key,parentId)"/>
                                                                    <i class="fa fa-sort-desc sort" title="Sort Descending" style="line-height: 1px;padding: 3px" ng-click="sortDescending(key,parentId)"/>
                                                                </div>
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                                <div ng-include="'viewTreeFix'"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </script>

         
              <script type="text/ng-template" id="viewTreeFlow">
                                <div>
                                   
                                    <table class="table table-bordered  record" id="{{rec.parentRec['Id']}}" style="table-layout:fixed;margin-bottom:0px;cursor:default;background-color:{{headerColors[parentObject.toLowerCase()]}}" ng-class="(highlightRowsList.indexOf(rec.parentRec['Id'])!=-1) ? 'applyBgColor' : 'removeBgColor'" ng-show="showRow(rec.parentRec['Id'],parentId)" >
                                        <tbody>
                                            <tr >
                                              
                                                    
                                                <td ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))" ng-repeat="(key,value) in fieldMap" ng-if="value['fieldType_c'] != 'ID'" id="{{key}}" object="{{parentObject}}" style="height:2px;padding:3px;" valign="middle">
                                                   
                                                    <span ng-switch="value['fieldType_c']">
                                                        <span ng-switch-when="REFERENCE">
                                                             <a href="/{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" target="_blank">  
                                                       <span ng-bind-html="renderHTML(rec.parentRec[fieldMap[key]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                           </span>
                                                       </a>   
                                                      
                                                           
                                                            </span>
                                                        <span ng-switch-when="DATE">
                                                           
                                                   {{getFormattedDate(rec.parentRec[key],"day")}}
                                                </span>
                                                        <span ng-switch-when="DATETIME">
                                                           
                                                   {{getFormattedDate(rec.parentRec[key],"hour")}}
                                                </span>
                                                        <span ng-switch-default>
                                                             <span ng-bind-html="renderHTML(rec.parentRec[key])" style="word-wrap: break-word;color:{{getFontColor(key,rec.parentRec[key])}}" >
                                                           
                                                        </span>
                                                    </span>
                                                </td>
                                           
                                                            
                                           <td ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase())) &&(fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c'] != 'ID') && ($index!=0)" ng-repeat="key in columnKeys"  valign="middle" id="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" object="{{parentObject}}" style="height:2px;padding:3px;width:{{columnWidths[key]}};">
                                                 <span ng-if="!customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key].equals('NULL')">
													<span ng-if="$index==0">{{insertSpecialCharacters(parentObject)}}</span>
                                                    <span ng-switch="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']">
                                                        <span ng-switch-when="REFERENCE">
                                                            <span ng-init="aliasKey=customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]">
                                                                
                                                            <a href="/{{rec.parentRec[aliasKey]}}" target="_blank">  
                                                                <span ng-if="aliasKey!='Site__c'" ng-bind-html="renderHTML(rec.parentRec[fieldMap[aliasKey]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                                    </span>
                                                                <span ng-if="aliasKey=='Site__c'" ng-bind-html="renderHTML(rec.parentRec['Account__c'])" style="word-wrap: break-word" >
                                                                    </span>
                                                       </a>   
                                                       </span>
                                                            </span>
                                                        <span ng-switch-when="DATE">
                                                           
                                                   {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"day")}}
                                                </span>
                                                        <span ng-switch-when="DATETIME">
                                                           
                                                   {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"hour")}}
                                                </span>
                                                        <span ng-switch-default>
                                                            <span ng-if="$index!=0" ng-bind-html="renderHTML(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])" style="word-wrap: break-word;color:{{getFontColor(customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key],rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])}}" >
                                                             </span>
                                                            
                                                            <span ng-if="$index==0">
                                                                <a href="/{{rec.parentRec['Id']}}" target="_blank" >
                                                                 <span ng-bind-html="renderHTML(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])" style="word-wrap: break-word;" >
                                                             </span>
                                                                 </a>  
                                                             </span>   
                                                           
                                                        </span>
                                                    </span>
                                                          
                                                </td>
                                                            
                                                 </tr>
                                        </tbody>
                                    </table>
                                                            
                                     <div id="error{{rec.parentRec['Id']}}" class=" alert alert-danger ng-hide " style="margin:0px !important;padding:5px !important"> </div> 
                                    <!--for displaying child records if present-->
                                    <div ng-if="rec.parentRec['children']"> 
                                        <div class="ng-show" id="child{{rec.parentRec['Id']}}" ng-show="rec.parentRec['isExpanded']">
                                           <div ng-init="fieldMap=rec.parentRec['children'].fieldMetaDataMap;parentObject=rec.parentRec['children'].parentObjectName;childObject=rec.parentRec['children'].childObjectName;parentId=rec.parentRec['Id'];nameToDisplay=rec.parentRec['children'].displayName;parentRelationName=rec.parentRec['children'].parentRelationshipName;nextLevelParentAPI=rec.parentRec['children'].nextLevelApiNameOfParent;"/>
                                            <div ng-repeat="(reckey,rec) in rec.parentRec['children'].parentChildRecMap track by reckey" on-finish-render="ngRepeatFinished"> 
                                                <!-- header display for child-->
                                               <div ng-if="$index==0"> <b class="ng-hide">{{nameToDisplay}} </b>  
                                                 </div>    
                                        <table class="table table-bordered table-hover ng-hide"  ng-if="$index!=0" style="table-layout:fixed;width:100%;margin-bottom:2px" >
                                                    <thead>
                                                        <tr class="inf" style="border-left :{{borderColors[parentObject.toLowerCase()]}};background-color:{{headerColors[parentObject.toLowerCase()]}}" >
                                                            <th style="width:20px" align="center"></th>
                                                            <th style="width:20px" align="center">
                                                                <input type="checkbox" id="head{{parentId}}" class="headChk" object="{{parentObject}}" parentId="{{parentId}}" ng-model="chkBoxTrackingMap['head' + parentId]" ng-change="headerCheckBoxChanged(parentObject,parentId)" ng-disabled="(headerParent!=parentObject && headerParent!='')||disableAllPreviousCheckboxes" />
                                                       
                                        </th>
                                                            <th ng-repeat="(key,value) in fieldMap" align="center" ng-if="value['fieldType_c'] != 'ID'" style="width:150px">
                                                                <div style="width:100%;float:left">{{value['label_c']}}</div>
                                                                <div class="ng-hide"  style="width:0%;float:right">
                                                                    <i class="fa fa-sort-asc sort" title="Sort Ascending" style="line-height: 1px;padding: 3px" ng-click="sortAscending(key,parentId)"/>
                                                                    <i class="fa fa-sort-desc sort" title="Sort Descending" style="line-height: 1px;padding: 3px" ng-click="sortDescending(key,parentId)"/>
                                                                </div>
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                                <div ng-include="'viewTreeFlow'"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </script>

            
            
            
            
            
            
             <script type="text/ng-template" id="editTreeFix">
                            <div>
                                <table class="table table-bordered  record {{rec.parentRec['Id']}}Fix" id="{{rec.parentRec['Id']}}" style="table-layout:fixed;width:100%;margin-bottom:0px;background-color:{{headerColors[parentObject.toLowerCase()]}}" ng-class="(highlightRowsList.indexOf(rec.parentRec['Id'])!=-1) ? 'applyBgColor' : 'removeBgColor'" ng-show="showRow(rec.parentRec['Id'],parentId)" >
                                    <tbody>
                                        <tr id="{{rec.parentRec['Id']}}" align="center" style="border-left :{{borderColors[parentObject.toLowerCase()]}}">
                                            <td style="width:23px;height:2px;padding:3px;" align="center" valign="middle" ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <div ng-if="rec.isChildPresent" style="display:inline">
                                                       
                                                       <i class="fa fa-plus expand btn btn-xs btn-default " style="padding:2px 2px" ng-if="!rec.parentRec['isExpanded']" ng-click="showChildren(childObject,rec.parentRec['Id'],false,false,null,false);toggleExpandCollapseAll()" title="Show {{objectsNameMap[childObject]}}"/>
                                                        <i class="fa fa-minus btn btn-xs btn-default " style="padding:2px 2px" ng-if="rec.parentRec['isExpanded']" ng-click="hideChildDiv('child'+rec.parentRec['Id'],rec.parentRec['Id']);toggleExpandCollapseAll()" title="Hide {{objectsNameMap[childObject]}}"/>
                                                    </div>
                                                        
                                                     <div ng-if="!rec.isChildPresent && nextLevelParentAPI" >
                                                      <a class=" fa fa-plus btn btn-default btn-xs" style="padding:2px 2px" ng-click="createNewRecord(childObject,rec.parentRec['Id'],nextLevelParentAPI)" title="Create New {{objectsNameMap[childObject]}}"></a>
                                                    </div>   
                                                     
                                                </td>
                                                <td style="width:23px;height:2px;padding:3px;" align="center" valign="middle" ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <input type="checkbox" class="chk headChk"  id="chk{{rec.parentRec['Id']}}" parentId="{{parentId}}" object="{{parentObject}}" ng-model="chkBoxTrackingMap[rec.parentRec['Id']]" ng-change="checkBoxChanged(parentId)" ng-disabled="(parentChecked.toLowerCase()!=parentObject.toLowerCase() && parentChecked!='') || disableAllPreviousCheckboxes "/>
                                                        
                                                 </td>
                                                 
                                                    <td style="width:20px;height:2px;padding:3px;" align="center" valign="middle" ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <div ng-if="rec.isChildPresent" style="display:inline">
                                                       
                                                       <i class="fa fa-plus expand btn btn-xs btn-default " style="padding:2px 2px" ng-if="!rec.parentRec['isExpanded']" ng-click="showChildren(childObject,rec.parentRec['Id'],false,false,null,false);toggleExpandCollapseAll()" title="Show {{objectsNameMap[childObject]}}"/>
                                                        <i class="fa fa-minus btn btn-xs btn-default " style="padding:2px 2px" ng-if="rec.parentRec['isExpanded']" ng-click="hideChildDiv('child'+rec.parentRec['Id'],rec.parentRec['Id']);toggleExpandCollapseAll()" title="Hide {{objectsNameMap[childObject]}}"/>
                                                    </div>
                                                     
                                                        <div ng-if="!rec.isChildPresent && nextLevelParentAPI" >
                                                      <a class=" fa fa-plus btn btn-default btn-xs" style="padding:2px 2px" ng-click="createNewRecord(childObject,rec.parentRec['Id'],nextLevelParentAPI)" title="Create New {{objectsNameMap[childObject]}}"></a>
                                                    </div>   
                                                     
                                                </td>
                                                <td style="width:20px;height:2px;padding:3px;" align="center" valign="middle" ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))">
                                                    <input type="checkbox" class="chk headChk"  id="chk{{rec.parentRec['Id']}}" parentId="{{parentId}}" object="{{parentObject}}" ng-model="chkBoxTrackingMap[rec.parentRec['Id']]" ng-change="checkBoxChanged(parentId)" ng-disabled="(parentChecked.toLowerCase()!=parentObject.toLowerCase() && parentChecked!='') || disableAllPreviousCheckboxes "/>
                                                        
                                                 </td>
                                                 <td ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))" ng-repeat="(key,value) in fieldMap" ng-if="value['fieldType_c'] != 'ID'" id="{{key}}" class="field" dataType="{{value['fieldType_c']}}" object="{{parentObject}}" style="height:2px;padding:4px;" valign="middle">
                                                   
                                                <span ng-if="!value['isUpdateable_c']" >
                                             <span ng-switch="value['fieldType_c']">
                                                
                                                <span ng-switch-when="REFERENCE">
                                                   <a href="/{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" target="_blank">  
                                                       <span ng-bind-html="renderHTML(rec.parentRec[fieldMap[key]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                           </span>
                                                       </a>  
                                                        </span>
                                                <span ng-switch-when="DATE">
                                                  {{getFormattedDate(rec.parentRec[key],"day")}}
                                                   
                                                </span> 
                                                <span ng-switch-when="DATETIME">
                                                   {{getFormattedDate(rec.parentRec[key],"hour")}}
                                                </span>
                                                <span ng-switch-default>
                                                    <span ng-bind-html="renderHTML(rec.parentRec[key])" style="word-wrap: break-word;color:{{getFontColor(key,rec.parentRec[key])}}" >
                                                                </span>
                                                </span>
                                             </span>   
                                                
                                             </span>
                                            
                                             <span ng-switch="value['fieldType_c']" ng-if="value['isUpdateable_c']">
                                   
                                                 <span ng-switch-when="STRING">
                                        <input type="text" class="form-control"  ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="PICKLIST">
                                        <input type="picklist" ng-Object="{{parentObject}}" ng-columnNames="{{key}}" ng-model="rec.parentRec[key]" display="{{rec.parentRec[key]}}" picklist-map="picklistValueMap" is-required="{{value['isNillable_c']}}"/> 
                                  
                                     </span>
                                    <span ng-switch-when="PHONE"> 
                                        <input type="phone" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="EMAIL">
                                        <input type="email" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="REFERENCE">
                                        <input type="lookup" ng-Object="{{value['referenceTo_c']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{value['isNillable_c']}}" ng-model="rec.parentRec[key]" ng-display="{{rec.parentRec[fieldMap[key]['relationshipName_c']]['Name']}}" app="TreeGrid"/>
                                   
                                            </span>
                                    <span ng-switch-when="CURRENCY"> 
                                         <input type="currency" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="MULTIPICKLIST">
                                        <input type="multipicklist"  ng-Object="{{parentObject}}" class="form-control" ng-columnNames="{{key}}" is-required="{{value['isNillable_c']}}"  ng-model="rec.parentRec[key]"/>
                                       
                                    </span>
                                    <span ng-switch-when="BOOLEAN">
                                        <input type="checkbox"  ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span>
                                        <span ng-switch-when="DATE"> 
                                            <input type="customDate"  ng-model="rec.parentRec[key]" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{value['isNillable_c']}}" date-value="{{rec.parentRec[key]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-when="URL">
                                            <input type="url" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span>
                                        <span ng-switch-when="TEXTAREA">
                                            <textarea class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span>  
                                        <span ng-switch-when="ADDRESS">
                                            <textarea class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span> 
                                        <span ng-switch-when="DOUBLE">
                                            <input type="number" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}"/>
                                        </span>
                                        <span ng-switch-when="DATETIME">
                                            <input type="customDate"  ng-model="rec.parentRec[key]" is-required="{{value['isNillable_c']}}" mo-date-input="yyyy-dd-MM" min-view="hour" date-value="{{rec.parentRec[key]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-default>
                                            <input type="text" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span>
                                    </span>
                                                        
                                        </td>   
                                           
                                             
                                              <td ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase())) && (fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c'] != 'ID') && ($index==0)" align="left" ng-repeat="key in columnKeys" id="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" class="field" dataType="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']}}" object="{{parentObject}}" style="height:2px;padding:4px;width:{{columnWidths[key]}};" valign="middle">
                                                <span ng-if="!customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key].equals('NULL')">   
                                              
                                               <span ng-if="!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isUpdateable_c']" >
                                             <span ng-switch="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']">
                                                
                                                <span ng-switch-when="REFERENCE">
                                                     <a href="/{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" target="_blank">  
                                                       <span ng-bind-html="renderHTML(rec.parentRec[fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                           </span>
                                                       </a>   
                                                        </span>
                                                <span ng-switch-when="DATE">
                                                  {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"day")}}
                                                   
                                                </span> 
                                                <span ng-switch-when="DATETIME">
                                                   {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"hour")}}
                                                </span>
                                                <span ng-switch-default>
                                                     <span ng-bind-html="renderHTML(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])" style="word-wrap: break-word;color:{{getFontColor(customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key],rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])}}" >
                                                                </span>
                                                </span>
                                             </span>   
                                                
                                             </span>
                                            
                                             <span ng-switch="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']" ng-if="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isUpdateable_c']">
                                   
                                                 <span ng-switch-when="STRING">
                                        <input type="text" class="form-control"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="PICKLIST">
                                        <input type="picklist" ng-Object="{{parentObject}}" ng-columnNames="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" display="{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" picklist-map="picklistValueMap" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}"/> 
                                  
                                     </span>
                                    <span ng-switch-when="PHONE"> 
                                        <input type="phone" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="EMAIL">
                                        <input type="email" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="REFERENCE">
                                        
                                        <input type="lookup" ng-Object="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['referenceTo_c']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}" ng-display="{{rec.parentRec[fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['relationshipName_c']]['Name']}}" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" app="TreeGrid"/>
                                   
                                            </span>
                                    <span ng-switch-when="CURRENCY"> 
                                         <input type="currency" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="MULTIPICKLIST">
                                        <input type="multipicklist"  ng-Object="{{parentObject}}" class="form-control" ng-columnNames="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}"   ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]"/>
                                       
                                    </span>
                                    <span ng-switch-when="BOOLEAN">
                                        <input type="checkbox"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span>
                                        <span ng-switch-when="DATE"> 
                                            <input type="customDate"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}" date-value="{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-when="URL">
                                            <input type="url" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span>
                                        <span ng-switch-when="TEXTAREA">
                                            <textarea class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span>  
                                        <span ng-switch-when="ADDRESS">
                                            <textarea class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span> 
                                        <span ng-switch-when="DOUBLE">
                                            <input type="number" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}"/>
                                        </span>
                                        <span ng-switch-when="DATETIME">
                                            <input type="customDate"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}" mo-date-input="yyyy-dd-MM" min-view="hour" date-value="{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-default>
                                            <input type="text" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span>
                                    </span>
                                            </span>                
                                        </td>   
                                            
                                            
                                      
                                            
                                            </tr>
                                        </tbody>
                                    </table>
                                            <div id="error{{rec.parentRec['Id']}}Fix" class="ng-hide errCls occupy"> </div> 
                                    <div ng-if="!rec.isChildPresent && nextLevelParentAPI" >
                                          <a class="btn btn-default btn-sm ng-hide" id="headerBefore{{rec.parentRec['Id']}}Fix" ng-click="createNewRecord(childObject,rec.parentRec['Id'],nextLevelParentAPI)" style="margin-top: 1px;margin-bottom:1px" >Create New {{objectsNameMap[childObject]}}</a>
                                                    </div>
                                    <!--for displaying child records if present-->
                                    <div ng-if="rec.parentRec['children']">
                                        <div class="ng-show" id="child{{rec.parentRec['Id']}}" ng-show="rec.parentRec['isExpanded']">
                                           <div ng-init="fieldMap=rec.parentRec['children'].fieldMetaDataMap;parentObject=rec.parentRec['children'].parentObjectName;childObject=rec.parentRec['children'].childObjectName;parentId=rec.parentRec['Id'];nameToDisplay=rec.parentRec['children'].displayName;parentRelationName=rec.parentRec['children'].parentRelationshipName;nextLevelParentAPI=rec.parentRec['children'].nextLevelApiNameOfParent;"/>
                                                       <div ng-repeat="(reckey,rec) in rec.parentRec['children'].parentChildRecMap track by reckey" on-finish-render="ngRepeatFinished">
                                                <!-- header display for child-->
                                               <div ng-if="$index==0"> <b class="ng-hide" >{{nameToDisplay}}</b>   <a class="btn btn-default btn-sm" ng-click="createNewRecord(parentObject,parentId,parentRelationName)" style="margin-top:2px;margin-bottom:2px">Create New {{nameToDisplay}}</a><br/>
                                        </div>        
                                        <table class="table table-bordered table-hover ng-hide" id="headerOf{{parentId}}Fix" ng-if="$index==0" style="table-layout:fixed;width:100%;margin-bottom:2px">
                                                    <thead>
                                                        <tr class="inf" style="border-left :{{borderColors[parentObject.toLowerCase()]}};background-color:{{headerColors[parentObject.toLowerCase()]}}">
                                                            <th style="width:20px" align="center"></th>
                                                            <th style="width:20px" align="center">
                                                                <input type="checkbox" id="head{{parentId}}" class="headChk" object="{{parentObject}}" parentId="{{parentId}}" ng-model="chkBoxTrackingMap['head' + parentId]" ng-change="headerCheckBoxChanged(parentObject,parentId)" ng-disabled="(headerParent!=parentObject && headerParent!='') || disableAllPreviousCheckboxes" />
                                                            </th>
                                                            <th ng-repeat="(key,value) in fieldMap" align="center" ng-if="value['fieldType_c'] != 'ID'" style="width:150px" >
                                                                <div  style="width:100%;float:left">{{value['label_c']}}</div>
                                                                <div class="ng-hide" style="width:0%;float:right">
                                                                    <i class="fa fa-sort-asc sort" title="Sort Ascending" ng-click="sortAscending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                                    <i class="fa fa-sort-desc sort" title="Sort Descending" ng-click="sortDescending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                                </div>
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                                <div ng-include="'editTreeFix'"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </script>
            
             <script type="text/ng-template" id="editTreeFlow">
                            <div>
                                <table class="table table-bordered  record {{rec.parentRec['Id']}}Flow" id="{{rec.parentRec['Id']}}" style="table-layout:fixed;width:100%;margin-bottom:0px;background-color:{{headerColors[parentObject.toLowerCase()]}}" ng-class="(highlightRowsList.indexOf(rec.parentRec['Id'])!=-1) ? 'applyBgColor' : 'removeBgColor'" ng-show="showRow(rec.parentRec['Id'],parentId)" >
                                    <tbody>
                                        <tr id="{{rec.parentRec['Id']}}" align="center" >
                                           
                                                 <td ng-if="!(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase()))" ng-repeat="(key,value) in fieldMap" ng-if="value['fieldType_c'] != 'ID'" id="{{key}}" class="field" dataType="{{value['fieldType_c']}}" object="{{parentObject}}" style="height:2px;padding:4px;" valign="middle">
                                                   
                                                <span ng-if="!value['isUpdateable_c']" >
                                             <span ng-switch="value['fieldType_c']">
                                                
                                                <span ng-switch-when="REFERENCE">
                                                   <a href="/{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" target="_blank">  
                                                       <span ng-bind-html="renderHTML(rec.parentRec[fieldMap[key]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                           </span>
                                                       </a>  
                                                        </span>
                                                <span ng-switch-when="DATE">
                                                  {{getFormattedDate(rec.parentRec[key],"day")}}
                                                   
                                                </span> 
                                                <span ng-switch-when="DATETIME">
                                                   {{getFormattedDate(rec.parentRec[key],"hour")}}
                                                </span>
                                                <span ng-switch-default>
                                                    <span ng-bind-html="renderHTML(rec.parentRec[key])" style="word-wrap: break-word;color:{{getFontColor(key,rec.parentRec[key])}}" >
                                                                </span>
                                                </span>
                                             </span>   
                                                
                                             </span>
                                            
                                             <span ng-switch="value['fieldType_c']" ng-if="value['isUpdateable_c']">
                                   
                                                 <span ng-switch-when="STRING">
                                        <input type="text" class="form-control"  ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="PICKLIST">
                                        <input type="picklist" ng-Object="{{parentObject}}" ng-columnNames="{{key}}" ng-model="rec.parentRec[key]" display="{{rec.parentRec[key]}}" picklist-map="picklistValueMap" is-required="{{value['isNillable_c']}}"/> 
                                  
                                     </span>
                                    <span ng-switch-when="PHONE"> 
                                        <input type="phone" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="EMAIL">
                                        <input type="email" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="REFERENCE">
                                        <input type="lookup" ng-Object="{{value['referenceTo_c']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{value['isNillable_c']}}" ng-model="rec.parentRec[key]" ng-display="{{rec.parentRec[fieldMap[key]['relationshipName_c']]['Name']}}" app="TreeGrid"/>
                                   
                                            </span>
                                    <span ng-switch-when="CURRENCY"> 
                                         <input type="currency" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="MULTIPICKLIST">
                                        <input type="multipicklist"  ng-Object="{{parentObject}}" class="form-control" ng-columnNames="{{key}}" is-required="{{value['isNillable_c']}}"  ng-model="rec.parentRec[key]"/>
                                       
                                    </span>
                                    <span ng-switch-when="BOOLEAN">
                                        <input type="checkbox"  ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                    </span>
                                    <span>
                                        <span ng-switch-when="DATE"> 
                                            <input type="customDate"  ng-model="rec.parentRec[key]" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{value['isNillable_c']}}" date-value="{{rec.parentRec[key]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-when="URL">
                                            <input type="url" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span>
                                        <span ng-switch-when="TEXTAREA">
                                            <textarea class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span>  
                                        <span ng-switch-when="ADDRESS">
                                            <textarea class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span> 
                                        <span ng-switch-when="DOUBLE">
                                            <input type="number" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}"/>
                                        </span>
                                        <span ng-switch-when="DATETIME">
                                            <input type="customDate"  ng-model="rec.parentRec[key]" is-required="{{value['isNillable_c']}}" mo-date-input="yyyy-dd-MM" min-view="hour" date-value="{{rec.parentRec[key]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-default>
                                            <input type="text" class="form-control" ng-model="rec.parentRec[key]" ng-class="{'required':!value['isNillable_c']}" />
                                        </span>
                                    </span>
                                                        
                                        </td>   
                                           
                                             
                                              <td ng-if="(fetchCustomizedFieldsData && customizedFieldDataMap['objects'].hasOwnProperty(parentObject.toLowerCase())) && (fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c'] != 'ID') && ($index!=0)" align="left" ng-repeat="key in columnKeys"   id="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" class="field" dataType="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']}}" object="{{parentObject}}" style="height:2px;padding:4px;width:{{columnWidths[key]}};" valign="middle">
                                                <span ng-if="!customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key].equals('NULL')">   
                                              
                                               <span ng-if="!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isUpdateable_c']" >
                                             <span ng-switch="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']">
                                                
                                                <span ng-switch-when="REFERENCE">
                                                     <a href="/{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" target="_blank">  
                                                       <span ng-bind-html="renderHTML(rec.parentRec[fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['relationshipName_c']]['Name'])" style="word-wrap: break-word" >
                                                           </span>
                                                       </a>   
                                                        </span>
                                                <span ng-switch-when="DATE">
                                                  {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"day")}}
                                                   
                                                </span> 
                                                <span ng-switch-when="DATETIME">
                                                   {{getFormattedDate(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]],"hour")}}
                                                </span>
                                                <span ng-switch-default>
                                                     <span ng-bind-html="renderHTML(rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])" style="word-wrap: break-word;color:{{getFontColor(customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key],rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]])}}" >
                                                                </span>
                                                </span>
                                             </span>   
                                                
                                             </span>
                                            
                                             <span ng-switch="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['fieldType_c']" ng-if="fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isUpdateable_c']">
                                   
                                                 <span ng-switch-when="STRING">
                                        <input type="text" class="form-control"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="PICKLIST">
                                        <input type="picklist" ng-Object="{{parentObject}}" ng-columnNames="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" display="{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" picklist-map="picklistValueMap" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}"/> 
                                  
                                     </span>
                                    <span ng-switch-when="PHONE"> 
                                        <input type="phone" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="EMAIL">
                                        <input type="email" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="REFERENCE">
                                        
                                        <input type="lookup" ng-Object="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['referenceTo_c']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}" ng-display="{{rec.parentRec[fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['relationshipName_c']]['Name']}}" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" app="TreeGrid"/>
                                   
                                            </span>
                                    <span ng-switch-when="CURRENCY"> 
                                         <input type="currency" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span ng-switch-when="MULTIPICKLIST">
                                        <input type="multipicklist"  ng-Object="{{parentObject}}" class="form-control" ng-columnNames="{{customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]}}" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}"   ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]"/>
                                       
                                    </span>
                                    <span ng-switch-when="BOOLEAN">
                                        <input type="checkbox"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                    </span>
                                    <span>
                                        <span ng-switch-when="DATE"> 
                                            <input type="customDate"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}" date-value="{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-when="URL">
                                            <input type="url" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span>
                                        <span ng-switch-when="TEXTAREA">
                                            <textarea class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span>  
                                        <span ng-switch-when="ADDRESS">
                                            <textarea class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span> 
                                        <span ng-switch-when="DOUBLE">
                                            <input type="number" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}"/>
                                        </span>
                                        <span ng-switch-when="DATETIME">
                                            <input type="customDate"  ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" is-required="{{fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}}" mo-date-input="yyyy-dd-MM" min-view="hour" date-value="{{rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]}}" time-zone="{{timezone}}"/>
                                                
                                        </span>  
                                        <span ng-switch-default>
                                            <input type="text" class="form-control" ng-model="rec.parentRec[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]" ng-class="{'required':!fieldMap[customizedFieldDataMap['objects'][parentObject.toLowerCase()]['fieldAPIorder'][key]]['isNillable_c']}" />
                                        </span>
                                    </span>
                                            </span>                
                                        </td>   
                                            
                                            
                                      
                                            
                                            </tr>
                                        </tbody>
                                    </table>
                                            <div id="error{{rec.parentRec['Id']}}" class=" alert alert-danger ng-hide " style="margin:0px !important;padding:5px !important"> </div> 
                                    <div ng-if="!rec.isChildPresent && nextLevelParentAPI" >
                                          <a class="btn btn-default btn-sm ng-hide" id="headerBefore{{rec.parentRec['Id']}}Flow" ng-click="createNewRecord(childObject,rec.parentRec['Id'],nextLevelParentAPI)" style="margin-top: 1px;margin-bottom:1px" >Create New {{objectsNameMap[childObject]}}</a>
                                                    </div>
                                    <!--for displaying child records if present-->
                                    <div ng-if="rec.parentRec['children']">
                                        <div class="ng-show" id="child{{rec.parentRec['Id']}}" ng-show="rec.parentRec['isExpanded']">
                                           <div ng-init="fieldMap=rec.parentRec['children'].fieldMetaDataMap;parentObject=rec.parentRec['children'].parentObjectName;childObject=rec.parentRec['children'].childObjectName;parentId=rec.parentRec['Id'];nameToDisplay=rec.parentRec['children'].displayName;parentRelationName=rec.parentRec['children'].parentRelationshipName;nextLevelParentAPI=rec.parentRec['children'].nextLevelApiNameOfParent;"/>
                                                       <div ng-repeat="(reckey,rec) in rec.parentRec['children'].parentChildRecMap track by reckey" on-finish-render="ngRepeatFinished">
                                                <!-- header display for child-->
                                               <div ng-if="$index==0"> <b class="ng-hide" >{{nameToDisplay}}</b>   <a class="btn btn-default btn-sm occupy" ng-click="createNewRecord(parentObject,parentId,parentRelationName)" style="margin-top:2px;margin-bottom:2px">Create New {{nameToDisplay}}</a><br/>
                                        </div>         
                                        <table class="table table-bordered table-hover ng-hide" id="headerOf{{parentId}}Flow" ng-if="$index==0" style="table-layout:fixed;width:100%;margin-bottom:2px">
                                                    <thead>
                                                        <tr class="inf" style="border-left :{{borderColors[parentObject.toLowerCase()]}};background-color:{{headerColors[parentObject.toLowerCase()]}}">
                                                            <th style="width:20px" align="center"></th>
                                                            <th style="width:20px" align="center">
                                                                <input type="checkbox" id="head{{parentId}}" class="headChk" object="{{parentObject}}" parentId="{{parentId}}" ng-model="chkBoxTrackingMap['head' + parentId]" ng-change="headerCheckBoxChanged(parentObject,parentId)" ng-disabled="(headerParent!=parentObject && headerParent!='') || disableAllPreviousCheckboxes" />
                                                            </th>
                                                            <th ng-repeat="(key,value) in fieldMap" align="center" ng-if="value['fieldType_c'] != 'ID'" style="width:150px" >
                                                                <div  style="width:100%;float:left">{{value['label_c']}}</div>
                                                                <div class="ng-hide" style="width:0%;float:right">
                                                                    <i class="fa fa-sort-asc sort" title="Sort Ascending" ng-click="sortAscending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                                    <i class="fa fa-sort-desc sort" title="Sort Descending" ng-click="sortDescending(key,parentId)" style="line-height: 1px;padding: 3px"/>
                                                                </div>
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                                <div ng-include="'editTreeFlow'"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </script>
            
            
          
            
            
            
            <!-- displays the fields for mass update-->
                        <script type="text/ng-template" id="selectFieldsMode">
                            <table class="table" >
                            
                                    <tr ng-repeat="(key,value) in fieldsInfoMap" ng-if="value['fieldType_c'] != 'ID' && (value['isUpdateable_c'])">
                                        <th ng-class="$index==0 ? 'tab':'tab1'">
                                            <input type="checkbox" id="{{key}}" ng-model="tempVar" ng-change="isUpdateEnabled()">
                                            </th>
                                            <th ng-class="$index==0 ? 'tab':'tab1'">{{value['label_c']}}</th>
                                        </tr>
                                            
                                      
                                   
                                </table>
                            </script>
            
            <!-- displays the edit view for selected fields for mass update-->
            
                            <script type="text/ng-template" id="massUpdateView">
                               <table class="table" id="massUpdateRecords" style="table-layout:fixed;width:100%">
                                  
                                        <tr ng-repeat="(key,value) in fieldsInfoMap" ng-if="massUpdateFieldsSelected.indexOf(key)!=-1">
                                            <th class="tab">{{value['label_c']}}</th>
                                            <th class="tab">
                                              
                                                <span ng-switch="value['fieldType_c']">
                                                    <span ng-switch-when="STRING">
                                                        <input type="text" class="form-control" id="{{key}}" ng-class="{'required':!value['isNillable_c']}" ng-model="massUpdateVal" />
                                                        <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none" >{{massUpdateVal}}</span>
                                                    </span>
                                                    <span ng-switch-when="PICKLIST">
                                                        <input type="picklist" ng-Object="{{parentChecked}}"  ng-columnNames="{{key}}" id="{{key}}" is-required="{{value['isNillable_c']}}" ng-model="massUpdateVal" picklist-map="picklistValueMap" />
                                                       
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                    </span>
                                                    <span ng-switch-when="PHONE">
                                                        <input type="phone" class="form-control" id="{{key}}" ng-class="{'required':!value['isNillable_c']}" ng-model="massUpdateVal"/>
                                                        <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                    </span>
                                                    <span ng-switch-when="EMAIL">
                                                        <input type="email" class="form-control" id="{{key}}" ng-class="{'required':!value['isNillable_c']}" ng-model="massUpdateVal"/>
                                                            
                                                        <span id="{{value['fieldAPIName_c']}}" class="upsert"  dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                    </span>
                                                    <span ng-switch-when="REFERENCE">
                                                       
                                                        <input type="lookup" ng-Object="{{value['referenceTo_c']}}" ng-columnNames="Id,Name" ng-displayName="Name" is-required="{{value['isNillable_c']}}"  id="{{key}}" ng-model="massUpdateVal" app="TreeGrid"/>
                                                        <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                    </span>
                                                    <span ng-switch-when="CURRENCY">
                                                        <input type="currency" class="form-control" id="{{key}}" ng-class="{'required':!value['isNillable_c']}" ng-model="massUpdateVal"/>
                                                        <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                    </span>
                                                    <span ng-switch-when="MULTIPICKLIST">
                                                         <input type="multipicklist"  ng-Object="{{parentChecked}}" class="form-control" ng-columnNames="{{key}}" is-required="{{value['isNillable_c']}}" id="{{key}}" ng-model="massUpdateVal"/>
                                                         
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                    </span> 
                                                    <span ng-switch-when="BOOLEAN">  
                                                        <input type="checkbox" class="" id="{{key}}" ng-class="{'required':!value['isNillable_c']}" ng-model="massUpdateVal"/>
                                                        <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                    </span>
                                                    <span>
                                                        <span ng-switch-when="DATE">
                                                            <input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" min-view="day" is-required="{{value['isNillable_c']}}" date-value="{{massUpdateVal}}" time-zone="{{timezone}}"/>
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy 'GMT 'Z" }}</span>
                                                        </span>
                                                        <span ng-switch-when="URL">
                                                            <input type="url" class="form-control" id="{{key}}" ng-class="{'required':!value['isNillable_c']}" ng-model="massUpdateVal"/>
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                        </span>
                                                        <span ng-switch-when="TEXTAREA">
                                                            <textarea class="form-control" id="{{key}}" ng-model="massUpdateVal" ng-class="{'required':!value['isNillable_c']}"/>
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                        </span>
                                                        <span ng-switch-when="ADDRESS">
                                                            <textarea class="form-control" id="{{key}}" ng-model="massUpdateVal" ng-class="{'required':!value['isNillable_c']}"/>
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                        </span>
                                                        <span ng-switch-when="DOUBLE">
                                                            <input type="number" class="form-control" ng-class="{'required':!value['isNillable_c']}" id="{{key}}" ng-model="massUpdateVal"/>
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                        </span>
                                                        <span ng-switch-when="DATETIME">
                                                            <input type="customDate"  ng-model="massUpdateVal" mo-date-input="yyyy-dd-MM" is-required="{{value['isNillable_c']}}" min-view="hour" date-value="{{massUpdateVal}}" time-zone="{{timezone}}"/>
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal | date:"EEE MMM dd yyyy HH:mm:ss 'GMT 'Z" }}</span>
                                                        </span>
                                                        <span ng-switch-default>
                                                            <input type="text" class="form-control" ng-class="{'required':!value['isNillable_c']}" id="{{key}}" ng-model="massUpdateVal"/>
                                                            <span id="{{value['fieldAPIName_c']}}" class="upsert" dataType="{{value['fieldType_c']}}" style="display:none">{{massUpdateVal}}</span>
                                                        </span>
                                                    </span>
                                                </th>
                                            </tr>
                                           
                                            </table>
                               </script>
            
            <!-- create a row for new record-->
             <script type="text/ng-template" id="newRecordViewFix">
            <new-record-fix object-name="{{refObjectName}}" bordercolors="borderColors" headercolors="headerColors" parent-id="{{refObjId}}" parent-relation-name="{{parentRelName}}" id="sno{{sequenceID}}" header="no" customized-field-map="customizedFieldDataMap" time-zone="{{timezone}}" column-widths="columnWidths" picklist-map="picklistValueMap"></new-record-fix>
             </script>
            <script type="text/ng-template" id="newRecordViewWithHeaderFix">
            <new-record-fix object-name="{{refObjectName}}" bordercolors="borderColors" headercolors="headerColors" parent-id="{{refObjId}}" parent-relation-name="{{parentRelName}}" id="sno{{sequenceID}}" header="yes" customized-field-map="customizedFieldDataMap" time-zone="{{timezone}}" column-widths="columnWidths" picklist-map="picklistValueMap"></new-record-fix>
              </script>
             <script type="text/ng-template" id="newRecordViewFlow">
            <new-record-flow object-name="{{refObjectName}}" bordercolors="borderColors" headercolors="headerColors" parent-id="{{refObjId}}" parent-relation-name="{{parentRelName}}" id="sno{{sequenceID}}" header="no" customized-field-map="customizedFieldDataMap" time-zone="{{timezone}}" column-widths="columnWidths" picklist-map="picklistValueMap"></new-record-flow>
             </script>
            <script type="text/ng-template" id="newRecordViewWithHeaderFlow">
            <new-record-flow object-name="{{refObjectName}}" bordercolors="borderColors" headercolors="headerColors" parent-id="{{refObjId}}" parent-relation-name="{{parentRelName}}" id="sno{{sequenceID}}" header="yes" customized-field-map="customizedFieldDataMap" time-zone="{{timezone}}" column-widths="columnWidths" picklist-map="picklistValueMap"></new-record-flow>
              </script>
           
            <script type="text/ng-template" id="contactView">
           
            <div class="alert alert-danger" ng-if="contactSavingError.length!=0 && !showSuccessMsg">
                <strong> <span ng-bind-html="renderHTML(contactSavingError)" ></span></strong>
            </div>
                <div class="ng-hide" id="ctctSuccess" style="padding-left: 2%;padding-right: 2%;">
                    <br/>
                    <b>Contact Created Successfully!!</b>
                    <br/>
                        <br/>
                  </div> 
                   <br/>  
            <table class="table" id="ctctTable">
                <tr>
                   <th class="tab" >First Name</th>
                   <td class="tab"><input type="text" class="form-control required" ng-model="ctctFirstName"/>
                      <span id="ctctFirstName" style="display:none">{{ctctFirstName}}</span>
                    </td>
                  
                </tr>
                 <tr>
                   <th>Last Name</th>
                   <td><input type="text" class="form-control required" ng-model="ctctLastName"/>
                       <span id="ctctLastName" style="display:none">{{ctctLastName}}</span>
                    </td>
                </tr>  
                <tr>
                   <th>E-mail</th>
                   <td><input type="email" class="form-control" ng-model="ctctEmail" />
                    <span id="ctctEmail" style="display:none">{{ctctEmail}}</span>   
                    </td>
                </tr>
                
                    <tr>
                   <th>Phone</th>
                   <td><input type="phone" class="form-control " ng-model="ctctPhone"/>
                        <span id="ctctPhone" style="display:none">{{ctctPhone}}</span>   
                    </td>
                </tr>  
                    <tr>
                   <th>Account</th>
                   <td>
                   	 <input type="picklist" ng-Object="Account"  ng-columnNames="Site" id="ctctRole__c" is-required="false" ng-model="accSite" picklist-map="picklistValueMap"  />   
                     <span id="accSite" style="display:none">{{accSite}}</span>   
                   </td>
                </tr>  
                    <tr>
                   <th>Contact Role</th>
                   <td>
                          <input type="multipicklist" ng-Object="Contact"  ng-columnNames="Role__c" id="ctctRole__c" is-required="false" ng-model="contactRole" picklist-map="picklistValueMap"  />
                   		  <span id="contactRole" style="display:none">{{contactRole}}</span>   
                   </td>
                </tr>  
                    <tr>
                   <th>Project Role</th>
                   <td>
                       <input type="multipicklist" ng-Object="SubProject_Client_Contact__c"  ng-columnNames="Role__c" id="prjRole__c" is-required="false" ng-model="projectRole" picklist-map="picklistValueMap"  />
                        <span id="projectRole" style="display:none">{{projectRole}}</span>   
                </tr>  
                 
                </table>
            
            </script>
            
            
                           </head>
                               <body onresize="setDimensions()" class="bdy">
                                  
                                        <div class="contentHolder"   ng-controller="DataGridV2Ctlr">
                                            <div class="waitingSearchDiv ng-hide" id="el_loading" style="background-color: #ffffff; height:100%;opacity:0.7;z-index: 50;width:100%;position: fixed;">
                                                <div class="waitingHolder" style="top: 100%;width: 100%;">
                                                    <div class="popup" style="background-color: #fbfbfb;top:25%;width:auto;position: fixed;display:inline-block;margin-left: 45%;margin-top: 10%;">
                                                        <img class="waitingImage" src="/img/loading.gif" title="Please Wait..."/>
                                                        <span class="waitingDescription">
                                                            <b>Loading...</b>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="waitingSearchDiv1 ng-hide" id="el_loading" style="background-color: #ffffff; height:100%;opacity:0.7;z-index: 50;width:100%;position: fixed;">
                                                <div class="waitingHolder" style="top: 100%;width: 100%;">
                                                    <div class="popup" style="background-color: #fbfbfb;top:25%;width:auto;position: fixed;display:inline-block;margin-left: 45%;margin-top: 10%;">
                                                        <img class="waitingImage" src="/img/loading.gif" title="Please Wait..."/>
                                                        <span class="waitingDescription">
                                                            <b>Loading...</b>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="modal fade" id="fieldSelection" role="dialog" >
                                                <div class="modal-dialog"  style="width:30% !important">
                                                    <!-- Modal content-->
                                                    <div class="modal-content">
                                                        <div class="modal-header" ng-show="parentChecked!=''">
                                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                            <h4 class="modal-title" >Select Fields To Update</h4>
                                                        </div>
                                                        <div class="modal-body" style="padding-left:15px !important;padding-right:15px !important">
                                                            <h4 ng-show="parentChecked=='' " >No records are selected</h4>
                                                            <div class="showFieldsToUpdate" ng-include="'selectFieldsMode'" ng-show="parentChecked!=''"></div>
                                                        </div>
                                                        <div class="modal-footer">
                                                            <div ng-show="parentChecked==''">
                                                                <input type="button" class="btn btn-default" value="Ok"  data-dismiss="modal" />
                                                            </div>
                                                            <div ng-show="parentChecked!=''">
                                                                <input type="button" class="btn btn-default" value="Done" ng-click="getSelectedFields()" data-dismiss="modal" id="optionsOK" data-toggle="modal" data-target="#updateFieldsDisplay" ng-disabled="isDisabled"/>&nbsp;&nbsp;&nbsp;&nbsp;
                                
                                                                <input type="button" class="btn btn-default" value="Cancel" ng-click="fieldsInfoMap=[];"  data-dismiss="modal" id="optionsCancel"/>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="modal fade" id="updateFieldsDisplay" role="dialog" >
                                                <div class="modal-dialog">
                                                    <!-- Modal content-->
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                            <h4 class="modal-title" >Update Fields</h4>
                                                           
                                                        </div>
                                                        <div class="modal-body" style="display:inline;padding-left:0px !important;padding-right:0px !important">
                                                            <div class="massUpdateFields" ng-include="'massUpdateView'" style="padding-left: 2%;padding-right: 2%;"></div>
                                                        </div>
                                                        <div class="modal-footer">
                                                            <input type="button" class="btn btn-default"   value="Previous" ng-click="onMassUpdate()" data-dismiss="modal" data-toggle="modal" data-target="#fieldSelection"  id="previous"/>
                                                          
                                                            <input type="button" class="btn btn-default"   value="Update" ng-click="massUpdateFields()" data-dismiss="modal" id="updateOK"/>
                                                            
                                                            
                                                            <input type="button" class="btn btn-default" value="Cancel"  data-dismiss="modal" id="updateCancel"/>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div id="buttonHolder" class="ng-cloak" >
                                                
                                               <center style="margin-bottom: 5px;">
                                                   <div style="margin-top:5px !important">
                                                <b>{!levelOneParentName} &nbsp;- &nbsp;{!subProjectName}</b>
                                            </div>
                                             <div style="margin-top:-7px !important">
                                                 
                                                  
                                                   <a ng-if="isSubProject" ng-show="currentView == '/viewRecords'" class="btn btn-default btn-sm" href="/apex/IMP_SubProjectManagement?id={{param1}}" ng-disabled="disableForSave || disableForDelete || disableButtons">Details</a>
                                                   <!--<span ng-if="isSubProject" ng-show="currentView == '/viewRecords'"> &nbsp;&nbsp; </span>--> 
                                                   <a ng-if="isSubProject" ng-show="currentView == '/viewRecords'" class="btn btn-default btn-sm" href="/apex/IMP_CDFLinesCanvasAppView?id={{param1}}" ng-disabled="disableForSave || disableForDelete || disableButtons">Contract Lines</a>
                                                   <!--<span ng-if="isSubProject" ng-show="currentView == '/viewRecords'"> &nbsp;&nbsp; </span>-->
                                                   <a ng-if="isSubProject" class="btn btn-default btn-sm" ng-show="showDiscovery && currentView == '/viewRecords'" href="/apex/IMP_DiscoveryView?id={{param1}}" ng-disabled="disableForSave || disableForDelete || disableButtons">Discovery</a>
                                                  
                                                   
                                                   <a class="btn btn-default btn-sm ng-hide" href="#viewRecords"  ng-disabled="disableButtons">View</a>
                                                   <!-- &nbsp;&nbsp; -->         
                
                                                    <a class="btn btn-default btn-sm"  ng-click="onEditClicked()"  ng-hide="currentView == '/editRecords'" ng-disabled="disableForSave || disableForDelete || disableButtons" >Edit</a>
                                                    <a class="btn btn-default btn-sm" ng-click="onQuickSave()" ng-show="currentView == '/editRecords'" ng-disabled="disableForSave || disableForDelete || disableButtons">{{disableForSave ? 'Saving...':'Save'}}</a>
                                                   <!-- <span ng-if="currentView == '/editRecords'">&nbsp;&nbsp;</span>-->
                                                    <a class="btn btn-default btn-sm" ng-click="onSave()" ng-show="currentView == '/editRecords'" ng-disabled="disableForSave || disableForDelete || disableButtons">{{disableForSave ? 'Saving...':'Save &amp; Exit'}}</a>
                                                   <!-- <span ng-if="currentView == '/editRecords'">&nbsp;&nbsp;</span>-->
                                                    <a class="btn btn-default btn-sm" ng-click="onMassUpdate()" ng-show="currentView == '/editRecords' && selectedMassUpdateRecords.length>0" ng-disabled="disableForSave || disableForDelete || disableButtons" data-toggle="modal" data-target="#fieldSelection">Mass Update</a>
                                                   <!-- <span ng-if="currentView == '/editRecords' && selectedMassUpdateRecords.length>0">&nbsp;&nbsp;</span>-->
                                                     <a class="btn btn-default btn-sm" ng-show="currentView == '/editRecords'" ng-click="onClearAllChanges()" ng-disabled="disableForSave || disableForDelete || disableButtons">Clear All Changes</a>
                                                   <!-- <span ng-if="currentView == '/editRecords'">&nbsp;&nbsp;</span>-->
                                                    <a class="btn btn-default btn-sm" ng-show="currentView == '/editRecords'" ng-click="onCancel()" ng-disabled="disableForSave || disableForDelete || disableButtons">Cancel</a>
                                                    <!--  &nbsp;&nbsp;-->
                    							   <span ng-show="currentView == '/editRecords'">
                                                    <a class="btn btn-default btn-sm" ng-click="createNewRecord(data.parentObjectName,'root',data.parentRelationshipName)" ng-disabled="param1.length==0 || disableForSave || disableForDelete || disableButtons " style="margin-bottom:2px">Create New {{data.displayName}}</a>
                                                  	<!-- &nbsp;&nbsp;-->
                                                   </span>
               
                                                    <a class="btn btn-default btn-sm ng-hide" ng-click="toggleExtraOptions()" ng-disabled="disableForSave || disableForDelete || disableButtons">More</a>
                                                    <!--<div id="extraOptions" style="display:inline" class="ng-show">-->
                                                        
                                                        
                                                       <!-- <a class="btn btn-default btn-sm " ng-click="showExpandAll=false;showCollapseAll=true;onExpandClicked()" ng-disabled="disableForSave || disableForDelete || disableButtons" ng-show="showExpandAll">Expand All</a><span ng-show="showExpandAll"></span>
                  
                                                        <a class="btn btn-default btn-sm " ng-click="showExpandAll=true;showCollapseAll=false;collapseAll(data)" ng-disabled="disableForSave || disableForDelete || disableButtons" ng-show="showCollapseAll" >Collapse All</a><span ng-show="showCollapseAll"></span>-->
                                                       <a class="btn btn-default btn-sm " ng-click="deleteRecords()" ng-show="selectedMassUpdateRecords.length>0" ng-disabled="disableForSave || disableForDelete || disableButtons">{{disableForDelete ? 'Deleting..':'Delete'}}</a><span ng-show="selectedMassUpdateRecords.length>0" ></span>
                                                       <span class="label label-default ng-hide" style="background-color:transparent;color:black;font-size: 85%;"># of {{data.displayName}}</span> 
                                                      <input type="number" min="1" ng-model="userRecCnt" class="form-control input-sm ng-hide" ng-change="changeRecordsPerPage()" ng-disabled="disableForSave || disableForDelete || disableButtons" style="display:inline;width:5%"/>                        
                                                      <div class="dropdown" style="display:inline" >
                                                        <button class="btn btn-default btn-sm dropdown-toggle" type="button" data-toggle="dropdown" ng-disabled="disableForSave || disableForDelete || disableButtons" >Levels To Display
                                                           <span class="caret"></span></button>
                                                          <ul class="dropdown-menu"  style="width:128px !important;min-width:50px !important">
                                                              <li ng-repeat="(key,value) in levelOrderOfObjects">
                                                                  <a ng-click="expandToLevel(value+1)">{{value+1}}</a>
                                                              </li>
                                                              
                                                          </ul>
                                                      </div>
                                                 
                                                          <div class="dropdown" style="display:inline" >
                                                     <button class="btn btn-default btn-sm dropdown-toggle" type="button" data-toggle="dropdown" ng-disabled="disableForSave || disableForDelete || disableButtons" >More
                                                         <span class="caret"></span></button>
                                                     <ul class="dropdown-menu" >
                                                         <li><a ng-click="addNewContact=true;" data-toggle="modal" data-target="#addContact">Add Contact</a></li>
                                                         <li role="separator" class="divider"></li>
                                                         <li class= "dropdown-header">
                                                             <b> Manage PSR Display </b>
                                                         </li>
                                                                <li>
                                                                     <a ng-click="displayPSR(true,'MAT')" data-toggle="modal" data-target="#displayPSRModal">
                                                                         Select Milestones, Activities and Tasks to Display
                                                                     </a>
                                                                 </li>
                                                                 <li>
                                                                     <a ng-click="displayPSR(true,'MA')" data-toggle="modal" data-target="#displayPSRModal">
                                                                         Select Milestones and Activities to Display
                                                                     </a>
                                                                 </li>
                                                                 <li>
                                                                     <a ng-click="displayPSR(false,'MAT')" data-toggle="modal" data-target="#displayPSRModal" >
                                                                         Don't Display(Deselect all records)
                                                                     </a>
                                                                 </li>
                                                            
                                                         
                                                     </ul>
                                                 </div>	
                                         
                                                   
                                                   
                                                   <div class="input-group" style="top: 11px;display:inline-block;">
                                                       
                                                       <input aria-label="Search" placeholder="Enter atleast 3 letters" id="searchTxt" ng-model="searchValue" ng-disabled="disableForSave || disableForDelete || disableButtons" class="form-control ng-isolate-scope input-sm applyStyle" ng-change="filterModified()" style="display:inline;width:80%;float: left;" type="text" />
                                                       <span class="input-group-addon input-sm" style="display:inline;width: auto;float: left;"><i class="fa fa-search" style="padding:3px"></i></span>     
                                                   </div>
                                                        
                                                        <input type="search" placeholder="Enter atleast 3 letters" id="searchEntry" ng-model="searchValue" ng-disabled="disableForSave || disableForDelete || disableButtons" class="form-control ng-hide input-sm" ng-change="filterModified()"  style="display:inline;width:15%"/>
                                                        <i class="fa fa-search ng-hide" id="insearch" style="position:relative;margin-left:-23px"/>                                 
                                                        <select class="form-control ng-show input-sm" id="searchObject" style="width:10%;display:inline;position: relative;" ng-model="selectedObject" ng-disabled="disableForSave || disableForDelete || disableButtons" ng-change="filterModified()"  ng-options="option.ObjectAPIName__c as option.DisplayName__c for option in searchOptions">
                                                            
                                                        </select>
                                                           
                                                      
                                                        <a class="btn btn-default btn-sm ng-hide" ng-click="searchIconClicked()" ng-disabled="disableForSave || disableForDelete || disableButtons " ><b id="searchIcon" class="fa fa-search " style="padding:3px"></b></a>  
                                                        <a class="btn btn-default btn-sm" ng-click="highlightText()" ng-disabled="disableForSave || disableForDelete || disableButtons" title="Mark Text" ng-show="searchValue.length>=3"><b id="markIcon" class="fa fa-magic" style="padding:3px"></b></a> 
                                                     
                                                 
                                                   <!-- </div>-->
                                                   </div>       
                                               </center>
                                               
                                            </div>
                                            
                                            <div id="pageFooter" class="ng-hide">
                                                <center>
                                                  
                                          <pagination id="pagination" total-items="totalLevelOneRecords" items-per-page="noOfRecordsPerPage" ng-model="currentPage" max-size="maxPagesVisible" class="pagination-sm" ng-change="pageChanged()" boundary-links="true" previous-text="<" next-text=">" first-text="<<" last-text=">>">
                                                    </pagination>
                                                    
                                                    </center>
                                            </div>
                                          
                                            <div ng-view="ng-view" id="views" class="increaseMargin">
                                            
                                            </div>
                                            
                                            <!-- Modal to display the New Contact -->
                                     <div class="modal fade" id="addContact" role="dialog" ng-if="addNewContact" style="z-index:15 !important">
                                                <div class="modal-dialog">
                                                    <!-- Modal content-->
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <button type="button" ng-click="closeContactDialog();" class="close" data-dismiss="modal">&times;</button>
                                                            <h4 class="modal-title" >Add Contact</h4>
                                                           
                                                        </div>
                                                        <div class="modal-body" style="display:inline;padding-left:0px !important;padding-right:0px !important">
                                                            
                                                            <div ng-if="picklistValueMap['Account-Site'].length>0"  ng-include="'contactView'"  style="padding-left: 2%;padding-right: 2%;"></div> 
                                                         	 
                                                     
                                                            <div ng-if="!picklistValueMap.hasOwnProperty('Account-Site')"  style="padding-left: 2%;padding-right: 2%;">
                                                                <br/>
                                                                    <b>Please add atleast one SubProject Site to this SubProject</b>
                                                                <br/><br/>
                                                            </div>
                                                        </div>
                                                        <div class="modal-footer">
                                                            <span ng-if="picklistValueMap['Account-Site'].length>0 " >
                                                                <input type="button" class="btn btn-default" value="Save" ng-click="onContactSaved()"  data-toggle="modal"   id="contactSave"/>
                                                                <input type="button" class="btn btn-default" value="Close" ng-click="closeContactDialog();" data-dismiss="modal" id="contactCancel"/>
                                                               	<input type="button" class="btn btn-default ng-hide" ng-click="closeContactDialog()"   value="Ok"  data-dismiss="modal" id="ctctSuccessBtn"/>
                                                            </span>
                                                            <span ng-if="!picklistValueMap.hasOwnProperty('Account-Site') || showSuccessMsg">
                                                                <input type="button" class="btn btn-default" ng-click="closeContactDialog()" value="Ok"  data-dismiss="modal" id="ctctOk"/>
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>      
                                            <!-- Modal to display the Manage PSR Display of Records -->
                                             <div class="modal fade" id="displayPSRModal" role="dialog">
                                        
                                                <div class="modal-dialog">
                                                    <!-- Modal content-->
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <button type="button"  class="close" data-dismiss="modal">&times;</button>
                                                            <h4 class="modal-title" >Manage PSR Display of Records</h4>
                                                           
                                                        </div>
                                                        <div class="modal-body" style="display:inline;padding-left:0px !important;padding-right:0px !important">
                                                           <div style="padding-left: 2%;padding-right: 2%;">
                                                               <span ng-bind-html="renderHTML(PSRDisplayMsg)"/>
                                                            </div>
                                                        </div>
                                                        <div class="modal-footer">
                                                            <input type="button" class="btn btn-default" value="Ok" ng-click="confirmPSR()" data-dismiss="modal"/>
                                                            <input type="button" class="btn btn-default" value="Cancel" data-dismiss="modal"/>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            
 
                                   </div>
                                    </body>
                                </html>
                       </apex:page>